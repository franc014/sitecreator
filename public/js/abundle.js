(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';
var JQuery = require('jquery');
var angular = require('./../vendor/angular/angular-index.js');
var angular_restmod = require('./../vendor/angular-restmod/dist/angular-restmod-bundle.js');
var res_style = require('./../vendor/angular-restmod/dist/styles/ams.min.js');
var stc_messages = require('./config/messages.js');


var ngFabForm = require('./../vendor/ng-fab-form/dist/ng-fab-form.min.js');
var ngMessages = require('./../vendor/angular-messages/angular-messages.min.js');

var textAngular = require('./../vendor/textAngular/dist/textAngular-rangy.min.js');
var sanitize = require('./../vendor/textAngular/dist/textAngular-sanitize.min.js');
var rangy = require('./../vendor/textAngular/dist/textAngular.min.js');

var uploadLibp1 = require('../vendor/angularjs-file-upload/angular-file-upload-shim.min.js');
var uploadLibp2 = require('../vendor/angularjs-file-upload/angular-file-upload.min.js');

var nganimate = require('./../vendor/angular_animate/angular-animate.min.js');


var prfXyzApp = angular.module('prfXyzApp',['restmod','ngFabForm','ngMessages',
    'textAngular','angularFileUpload','ngAnimate']);

prfXyzApp.config(['restmodProvider','$httpProvider','ngFabFormProvider',function(restmodProvider, $httpProvider,ngFabFormProvider) {
    restmodProvider.rebase('AMSApi');
    $httpProvider.defaults.headers.common["X-Requested-With"] = "XMLHttpRequest";
    restmodProvider.rebase('DefaultPacker');

    ngFabFormProvider.extendConfig({
        validationsTemplate : '../../js/admin/angular/templates/customValidationTemplate.html'
        /*,setFormDirtyOnSubmit: true*/
    });

    $httpProvider.interceptors.push(function($q,$rootScope,$timeout) {
        return {
            'request': function(config) {
                $rootScope.showSystemAlert = false;
                $rootScope.showSpinner = true;
                return config;
            },

            'response': function(response) {
                $rootScope.showSpinner = false;
                return response;
            },
            'requestError':function(rejection){
                console.log(rejection);
                return $q.reject(rejection);
            },
            'responseError':function(rejection){

                var status = rejection.status;
                switch (status){
                    case 401:
                        $rootScope.showSpinner = false;
                        $rootScope.showSystemAlert = true;
                        $rootScope.systemAlert = "Ha caducado tu sesión. Debes ingresar nuevamente!";
                        $timeout(function(){
                            location.href = "/auth/logout";
                        },4000);
                        break;
                    case 500:
                        $rootScope.showSpinner = false;
                        $timeout(function(){
                            $rootScope.showSystemAlert = false;
                        },3000);
                        $rootScope.showSystemAlert = true;
                        $rootScope.systemAlert = "Vaya! :( Hubo un problema en la respuesta del servidor. <br>" +
                        "Por favor intenta la acción nuevamente o contacta al Administrador";
                        break;
                    case 404:
                        $rootScope.showSpinner = false;
                        $timeout(function(){
                            $rootScope.showSystemAlert = false;
                        },3000);
                        $rootScope.showSystemAlert = true;
                        $rootScope.systemAlert = "Vaya! :( No se encontró el servicio que requieres. <br>" +
                        "Por favor intenta la acción nuevamente o contacta al Administrador";
                        break;
                    /*case 413:
                        //$rootScope.messageType = 'danger';
                        //$rootScope.fileTooLarge = true;
                        //$rootScope.fileTooLargeMessage = "Está intentando subir un archivo demasiado pesado. El archivo no debe superar los 5MB";
                        alert("Está intentando subir un archivo demasiado pesado. El archivo no debe superar los 5MB");
                        location.reload();
                        break;*/
                    default :
                        $rootScope.showSpinner = false;
                        $timeout(function(){
                            $rootScope.showSystemAlert = false;
                        },3000);
                        $rootScope.showSystemAlert = true;
                        $rootScope.systemAlert = "Se detectó un problema de conexión. <br>" +
                        "Por favor comprueba que estás conectada/o a una red. Si persisten los problemas, <br> por favor contacta al Administrador.";


                }
                return $q.reject(rejection);

            }
        };
    });

}]);

var homeController = require('./admin/angular/homecontroller');
var bioController = require('./admin/angular/biocontroller');
var userController = require('./admin/angular/usercontroller');
var configController = require('./admin/angular/configcontroller');
var saleableController = require('./admin/angular/saleablecontroller');
var saleableDetailController = require('./admin/angular/saleabledetailcontroller');
var saleableBasicController = require('./admin/angular/basicdetailcontroller');
var saleableAllDetailsController = require('./admin/angular/saleablealldetailscontroller');
var saleablePriceController = require('./admin/angular/saleablepricescontroller');

var resumeController = require('./admin/angular/resumecontroller');
var portfolioController = require('./admin/angular/portfoliocontroller');
var messageService = require('./admin/angular/services/messageservice');
var userService = require('./admin/angular/services/userservice');
var userContentTypeService = require('./admin/angular/services/usercontenttypeservice');
var profileService = require('./admin/angular/services/profileservice');
var saleableService = require('./admin/angular/services/saleableservice');
var bioService = require('./admin/angular/services/biographyservice');
var thePacker = require('./admin/angular/services/thepacker');
var saleableDetailService = require('./admin/angular/services/saleabledetails');
var saleablePriceService = require('./admin/angular/services/saleableprice');
var newPassword = require('./admin/angular/services/newpasswordservice');
var numberFormat = require('./admin/angular/services/formatfilterservice');
var fileProcessor = require('./admin/angular/services/fileprocessor');
var resumeService = require('./admin/angular/services/resumeservice');
var resumeHelper = require('./admin/angular/services/resumehelper');
var categoryHelper = require('./admin/angular/services/categoryhelper');
var experienceService = require('./admin/angular/services/experience');
var helpersService = require('./admin/angular/services/helpers');
var educationService = require('./admin/angular/services/education');
var skillService = require('./admin/angular/services/skill');
var languageService = require('./admin/angular/services/language');
var interestService = require('./admin/angular/services/interest');
var categoryService = require('./admin/angular/services/category');
var projectService = require('./admin/angular/services/project');
var galleryService = require('./admin/angular/services/gallery');
var homeCalloutService = require('./admin/angular/services/homecallout');

var alertDirective = require('./admin/angular/directives/alertdirective');
var closeContentDirective = require('./admin/angular/directives/closecontentdirective');
var contentSelectorDirective = require('./admin/angular/directives/contentselector');
var prodileMenuDirective = require('./admin/angular/directives/profilemenu');
var configMenuDirective = require('./admin/angular/directives/configmenu');
var categoryDirective = require('./admin/angular/directives/configuration/category');
var projectListDirective = require('./admin/angular/directives/portfolio/projectlist');
var projectWizardDirective = require('./admin/angular/directives/portfolio/projectwizard');
var projectDirective = require('./admin/angular/directives/portfolio/project');
var projectGalleryDirective = require('./admin/angular/directives/portfolio/projectgallery');
var homePageDirective = require('./admin/angular/directives/homepage/homecalls');

var resumeSelectorDirective = require('./admin/angular/directives/resume/resumeselector');
var resumeDirective = require('./admin/angular/directives/resume/resumedirective');
var resumeEditForm = require('./admin/angular/directives/resume/resumeeditform');
var resumeForm = require('./admin/angular/directives/resume/resumeform');
var resumeExperience = require('./admin/angular/directives/resume/experience');
var resumeSections = require('./admin/angular/directives/resume/sections');
var resumeEducation = require('./admin/angular/directives/resume/education');
var resumeSkill = require('./admin/angular/directives/resume/skill');
var resumeLanguage = require('./admin/angular/directives/resume/language');
var resumeInterest = require('./admin/angular/directives/resume/interest');
var bioDirective = require('./admin/angular/directives/biographies/biography');
var resumeList = require('./admin/angular/directives/resume/resumelist');

var saleableDetails = require('./admin/angular/directives/saleabledetails');
var saleableBasic = require('./admin/angular/directives/saleablebasic');
var saleableDetailsList = require('./admin/angular/directives/saleabledetailslist');
var saleablePricesList = require('./admin/angular/directives/saleablepriceslist');
var halloEditor = require('./admin/angular/directives/hallodirective');


prfXyzApp.factory('Messages',[stc_messages]);
prfXyzApp.factory('MessageService',['Messages','$timeout',messageService]);
prfXyzApp.factory('UserService',['restmod',userService]);
prfXyzApp.factory('ProfileService',['restmod',profileService]);
prfXyzApp.factory('SaleableService',['restmod',saleableService]);
prfXyzApp.factory('SaleableDetailsService',['restmod',saleableDetailService]);
prfXyzApp.factory('SaleablePriceService',['restmod',saleablePriceService]);
prfXyzApp.factory('UserContentType',['restmod',userContentTypeService]);
prfXyzApp.factory('BiographyService',['restmod',bioService]);
prfXyzApp.factory('ThePacker',[thePacker]);
prfXyzApp.factory('NewPassword',['$http',newPassword]);
prfXyzApp.factory('NumberFormatFilter',[numberFormat]);
prfXyzApp.factory('FileProcessor',['$upload','$http','MessageService','$timeout',fileProcessor]);
prfXyzApp.factory('Resume',['restmod',resumeService]);
prfXyzApp.factory('Experience',['restmod',experienceService]);
prfXyzApp.factory('ResumeHelper',['$http','MessageService',resumeHelper]);
prfXyzApp.factory('CategoryHelper',['$http',categoryHelper]);
prfXyzApp.factory('Helper',[helpersService]);
prfXyzApp.factory('Education',['restmod',educationService]);
prfXyzApp.factory('Skill',['restmod',skillService]);
prfXyzApp.factory('Language',['restmod',languageService]);
prfXyzApp.factory('Interest',['restmod',interestService]);
prfXyzApp.factory('Category',['restmod',categoryService]);
prfXyzApp.factory('Project',['restmod',projectService]);
prfXyzApp.factory('Gallery',['restmod',galleryService]);
prfXyzApp.factory('Homecallout',['restmod',homeCalloutService]);

prfXyzApp.directive('alert',[alertDirective]);
prfXyzApp.directive('closeContent',[closeContentDirective]);
prfXyzApp.directive('contentSelector',['MessageService','UserContentType',contentSelectorDirective]);
prfXyzApp.directive('profileMenu',[prodileMenuDirective]);
prfXyzApp.directive('configMenu',[configMenuDirective]);
prfXyzApp.directive('saleableDetails',['$templateCache','$compile','$rootScope',saleableDetails]);
prfXyzApp.directive('saleableBasic',['SaleableService',saleableBasic]);
prfXyzApp.directive('saleableDetailsList',[saleableDetailsList]);
prfXyzApp.directive('saleablePricesList',[saleablePricesList]);
prfXyzApp.directive('hallo',[halloEditor]);
prfXyzApp.directive('resumeSelector',['MessageService',resumeSelectorDirective]);
prfXyzApp.directive('resume',['MessageService','Resume','$timeout','ResumeHelper',resumeDirective]);
prfXyzApp.directive('resumeEditForm',['MessageService','Resume','ResumeHelper','$timeout',resumeEditForm]);
prfXyzApp.directive('resumeForm',['MessageService','Resume','ResumeHelper','$timeout',resumeForm]);
prfXyzApp.directive('resumeExperience',['MessageService','Experience','$timeout','Helper',resumeExperience]);
prfXyzApp.directive('resumeSections',['Resume',resumeSections]);
prfXyzApp.directive('resumeEducation',['MessageService','Education','$timeout','Helper',resumeEducation]);
prfXyzApp.directive('resumeSkill',['MessageService','Skill','$timeout','Helper',resumeSkill]);
prfXyzApp.directive('resumeLanguage',['MessageService','Language','$timeout','Helper',resumeLanguage]);
prfXyzApp.directive('resumeInterest',['MessageService','Interest','$timeout','Helper',resumeInterest]);
prfXyzApp.directive('biography',['MessageService','BiographyService','$timeout','Helper','$http',bioDirective]);
prfXyzApp.directive('resumeList',['MessageService','Resume','$timeout','Helper',resumeList]);
prfXyzApp.directive('categoryManager',['MessageService','Category','$timeout','Helper',categoryDirective]);
prfXyzApp.directive('projectList',['MessageService','Project','$timeout','Helper',projectListDirective]);
prfXyzApp.directive('projectWizard',['MessageService','Project','$timeout','Helper',projectWizardDirective]);
prfXyzApp.directive('project',['MessageService','Project','$timeout','CategoryHelper','FileProcessor','Helper',projectDirective]);
prfXyzApp.directive('projectGallery',['MessageService','Project','$timeout','FileProcessor','Gallery',projectGalleryDirective]);
prfXyzApp.directive('homePage',['MessageService','Homecallout','$timeout','Helper','FileProcessor','$http',homePageDirective]);

prfXyzApp.controller('HomeCtrl',['$scope','UserService','UserContentType',homeController]);
prfXyzApp.controller('BioCtrl',['$scope','BiographyService','MessageService',bioController]);
prfXyzApp.controller('UserCtrl',['$scope','$timeout','UserService','ProfileService','MessageService','NewPassword',userController]);
prfXyzApp.controller('ConfigCtrl',['$scope','$timeout','MessageService','UserContentType',configController]);

prfXyzApp.controller('SaleableCtrl',['$scope','$rootScope','$timeout','SaleableService','MessageService','SaleableDetailsService',saleableController]);
prfXyzApp.controller('SaleableDetailCtrl',['$scope','$rootScope','SaleableService','MessageService','$element','$compile',saleableDetailController]);
prfXyzApp.controller('saleableBasicCtrl',['$scope','$rootScope','SaleableService','MessageService','CategoryHelper',saleableBasicController]);
prfXyzApp.controller('saleableAllDetailsCtrl',['$scope','$rootScope','SaleableDetailsService','MessageService','FileProcessor',saleableAllDetailsController]);
prfXyzApp.controller('saleablePriceCtrl',['$scope','$rootScope','SaleablePriceService','MessageService',saleablePriceController]);
prfXyzApp.controller('resumeCtrl',['$scope','$rootScope','ResumeHelper','MessageService',resumeController]);
prfXyzApp.controller('PortfolioCtrl',['$scope','$rootScope',portfolioController]);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/adminapp.js","/resources/assets/js")

},{"../vendor/angularjs-file-upload/angular-file-upload-shim.min.js":79,"../vendor/angularjs-file-upload/angular-file-upload.min.js":80,"./../vendor/angular-messages/angular-messages.min.js":73,"./../vendor/angular-restmod/dist/angular-restmod-bundle.js":74,"./../vendor/angular-restmod/dist/styles/ams.min.js":75,"./../vendor/angular/angular-index.js":76,"./../vendor/angular_animate/angular-animate.min.js":78,"./../vendor/ng-fab-form/dist/ng-fab-form.min.js":81,"./../vendor/textAngular/dist/textAngular-rangy.min.js":82,"./../vendor/textAngular/dist/textAngular-sanitize.min.js":83,"./../vendor/textAngular/dist/textAngular.min.js":84,"./admin/angular/basicdetailcontroller":8,"./admin/angular/biocontroller":9,"./admin/angular/configcontroller":10,"./admin/angular/directives/alertdirective":11,"./admin/angular/directives/biographies/biography":12,"./admin/angular/directives/closecontentdirective":13,"./admin/angular/directives/configmenu":14,"./admin/angular/directives/configuration/category":15,"./admin/angular/directives/contentselector":16,"./admin/angular/directives/hallodirective":17,"./admin/angular/directives/homepage/homecalls":18,"./admin/angular/directives/portfolio/project":19,"./admin/angular/directives/portfolio/projectgallery":20,"./admin/angular/directives/portfolio/projectlist":21,"./admin/angular/directives/portfolio/projectwizard":22,"./admin/angular/directives/profilemenu":23,"./admin/angular/directives/resume/education":24,"./admin/angular/directives/resume/experience":25,"./admin/angular/directives/resume/interest":26,"./admin/angular/directives/resume/language":27,"./admin/angular/directives/resume/resumedirective":28,"./admin/angular/directives/resume/resumeeditform":29,"./admin/angular/directives/resume/resumeform":30,"./admin/angular/directives/resume/resumelist":31,"./admin/angular/directives/resume/resumeselector":32,"./admin/angular/directives/resume/sections":33,"./admin/angular/directives/resume/skill":34,"./admin/angular/directives/saleablebasic":35,"./admin/angular/directives/saleabledetails":36,"./admin/angular/directives/saleabledetailslist":37,"./admin/angular/directives/saleablepriceslist":38,"./admin/angular/homecontroller":39,"./admin/angular/portfoliocontroller":40,"./admin/angular/resumecontroller":41,"./admin/angular/saleablealldetailscontroller":42,"./admin/angular/saleablecontroller":43,"./admin/angular/saleabledetailcontroller":44,"./admin/angular/saleablepricescontroller":45,"./admin/angular/services/biographyservice":46,"./admin/angular/services/category":47,"./admin/angular/services/categoryhelper":48,"./admin/angular/services/education":49,"./admin/angular/services/experience":50,"./admin/angular/services/fileprocessor":51,"./admin/angular/services/formatfilterservice":52,"./admin/angular/services/gallery":53,"./admin/angular/services/helpers":54,"./admin/angular/services/homecallout":55,"./admin/angular/services/interest":56,"./admin/angular/services/language":57,"./admin/angular/services/messageservice":58,"./admin/angular/services/newpasswordservice":59,"./admin/angular/services/profileservice":60,"./admin/angular/services/project":61,"./admin/angular/services/resumehelper":62,"./admin/angular/services/resumeservice":63,"./admin/angular/services/saleabledetails":64,"./admin/angular/services/saleableprice":65,"./admin/angular/services/saleableservice":66,"./admin/angular/services/skill":67,"./admin/angular/services/thepacker":68,"./admin/angular/services/usercontenttypeservice":69,"./admin/angular/services/userservice":70,"./admin/angular/usercontroller":71,"./config/messages.js":72,"_process":7,"buffer":3,"jquery":2}],2:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*!
 * jQuery JavaScript Library v2.1.3
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-18T15:11Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Support: Firefox 18+
// Can't be in strict mode, several libs including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
//

var arr = [];

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,

	version = "2.1.3",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		// adding 1 corrects loss of precision from parseFloat (#15100)
		return !jQuery.isArray( obj ) && (obj - parseFloat( obj ) + 1) >= 0;
	},

	isPlainObject: function( obj ) {
		// Not plain objects:
		// - Any object or value whose internal [[Class]] property is not "[object Object]"
		// - DOM nodes
		// - window
		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		if ( obj.constructor &&
				!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
			return false;
		}

		// If the function hasn't returned already, we're confident that
		// |obj| is a plain object, created by {} or constructed with new Object
		return true;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		// Support: Android<4.0, iOS<6 (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call(obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		var script,
			indirect = eval;

		code = jQuery.trim( code );

		if ( code ) {
			// If the code includes a valid, prologue position
			// strict mode pragma, execute code by injecting a
			// script tag into the document.
			if ( code.indexOf("use strict") === 1 ) {
				script = document.createElement("script");
				script.text = code;
				document.head.appendChild( script ).parentNode.removeChild( script );
			} else {
			// Otherwise, avoid the DOM node creation, insertion
			// and removal by using an indirect global eval
				indirect( code );
			}
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE9-11+
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.0-pre
 * http://sizzlejs.com/
 *
 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-16
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + characterEncoding + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];
	nodeType = context.nodeType;

	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	if ( !seed && documentIsHTML ) {

		// Try to shortcut find operations when possible (e.g., not under DocumentFragment)
		if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType !== 1 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;
	parent = doc.defaultView;

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Support tests
	---------------------------------------------------------------------- */
	documentIsHTML = !isXML( doc );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\f]' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is no seed and only one group
	if ( match.length === 1 ) {

		// Take a shortcut and set the context if the root selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) >= 0 ) !== not;
	});
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		}));
};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			len = this.length,
			ret = [],
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[0] === "<" && selector[ selector.length - 1 ] === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Support: Blackberry 4.6
					// gEBID returns nodes no longer in the document (#6963)
					if ( elem && elem.parentNode ) {
						// Inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof rootjQuery.ready !== "undefined" ?
				rootjQuery.ready( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.extend({
	dir: function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	}
});

jQuery.fn.extend({
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter(function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.unique(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.unique( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// Add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// If we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
});

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed, false );
	window.removeEventListener( "load", completed, false );
	jQuery.ready();
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// We once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		} else {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			len ? fn( elems[0], key ) : emptyGet;
};


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( owner ) {
	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	/* jshint -W018 */
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};


function Data() {
	// Support: Android<4,
	// Old WebKit does not have Object.preventExtensions/freeze method,
	// return new empty object instead with no [[set]] accessor
	Object.defineProperty( this.cache = {}, 0, {
		get: function() {
			return {};
		}
	});

	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;
Data.accepts = jQuery.acceptData;

Data.prototype = {
	key: function( owner ) {
		// We can accept data for non-element nodes in modern browsers,
		// but we should not, see #8335.
		// Always return the key for a frozen object.
		if ( !Data.accepts( owner ) ) {
			return 0;
		}

		var descriptor = {},
			// Check if the owner object already has a cache key
			unlock = owner[ this.expando ];

		// If not, create one
		if ( !unlock ) {
			unlock = Data.uid++;

			// Secure it in a non-enumerable, non-writable property
			try {
				descriptor[ this.expando ] = { value: unlock };
				Object.defineProperties( owner, descriptor );

			// Support: Android<4
			// Fallback to a less secure definition
			} catch ( e ) {
				descriptor[ this.expando ] = unlock;
				jQuery.extend( owner, descriptor );
			}
		}

		// Ensure the cache object
		if ( !this.cache[ unlock ] ) {
			this.cache[ unlock ] = {};
		}

		return unlock;
	},
	set: function( owner, data, value ) {
		var prop,
			// There may be an unlock assigned to this node,
			// if there is no entry for this "owner", create one inline
			// and set the unlock as though an owner entry had always existed
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		// Handle: [ owner, key, value ] args
		if ( typeof data === "string" ) {
			cache[ data ] = value;

		// Handle: [ owner, { properties } ] args
		} else {
			// Fresh assignments by object are shallow copied
			if ( jQuery.isEmptyObject( cache ) ) {
				jQuery.extend( this.cache[ unlock ], data );
			// Otherwise, copy the properties one-by-one to the cache object
			} else {
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		// Either a valid cache is found, or will be created.
		// New caches will be created and the unlock returned,
		// allowing direct access to the newly created
		// empty data object. A valid owner object must be provided.
		var cache = this.cache[ this.key( owner ) ];

		return key === undefined ?
			cache : cache[ key ];
	},
	access: function( owner, key, value ) {
		var stored;
		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				((key && typeof key === "string") && value === undefined) ) {

			stored = this.get( owner, key );

			return stored !== undefined ?
				stored : this.get( owner, jQuery.camelCase(key) );
		}

		// [*]When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i, name, camel,
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		if ( key === undefined ) {
			this.cache[ unlock ] = {};

		} else {
			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = key.concat( key.map( jQuery.camelCase ) );
			} else {
				camel = jQuery.camelCase( key );
				// Try the string as a key before any manipulation
				if ( key in cache ) {
					name = [ key, camel ];
				} else {
					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					name = camel;
					name = name in cache ?
						[ name ] : ( name.match( rnotwhite ) || [] );
				}
			}

			i = name.length;
			while ( i-- ) {
				delete cache[ name[ i ] ];
			}
		}
	},
	hasData: function( owner ) {
		return !jQuery.isEmptyObject(
			this.cache[ owner[ this.expando ] ] || {}
		);
	},
	discard: function( owner ) {
		if ( owner[ this.expando ] ) {
			delete this.cache[ owner[ this.expando ] ];
		}
	}
};
var data_priv = new Data();

var data_user = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			data_user.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend({
	hasData: function( elem ) {
		return data_user.hasData( elem ) || data_priv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return data_user.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		data_user.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to data_priv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return data_priv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		data_priv.remove( elem, name );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = data_user.get( elem );

				if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice(5) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					data_priv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				data_user.set( this, key );
			});
		}

		return access( this, function( value ) {
			var data,
				camelKey = jQuery.camelCase( key );

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {
				// Attempt to get data from the cache
				// with the key as-is
				data = data_user.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to get data from the cache
				// with the key camelized
				data = data_user.get( elem, camelKey );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, camelKey, undefined );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each(function() {
				// First, attempt to store a copy or reference of any
				// data that might've been store with a camelCased key.
				var data = data_user.get( this, camelKey );

				// For HTML5 data-* attribute interop, we have to
				// store property names with dashes in a camelCase form.
				// This might not apply to all properties...*
				data_user.set( this, camelKey, value );

				// *... In the case of properties that might _actually_
				// have dashes, we need to also store a copy of that
				// unchanged property.
				if ( key.indexOf("-") !== -1 && data !== undefined ) {
					data_user.set( this, key, value );
				}
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			data_user.remove( this, key );
		});
	}
});


jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = data_priv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = data_priv.access( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return data_priv.get( elem, key ) || data_priv.access( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				data_priv.remove( elem, [ type + "queue", key ] );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = data_priv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
	};

var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Safari<=5.1
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari<=5.1, Android<4.2
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<=11+
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
})();
var strundefined = typeof undefined;



support.focusinBubbles = "onfocusin" in window;


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.hasData( elem ) && data_priv.get( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;
			data_priv.remove( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.disabled !== true || event.type !== "click" ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: Cordova 2.5 (WebKit) (#13255)
		// All events should have a target; Cordova deviceready doesn't
		if ( !event.target ) {
			event.target = document;
		}

		// Support: Safari 6.0+, Chrome<28
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle, false );
	}
};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&
				// Support: Android<4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && e.preventDefault ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && e.stopPropagation ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// Support: Chrome 15+
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// Support: Firefox, Chrome, Safari
// Create "bubbling" focus and blur events
if ( !support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				data_priv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					data_priv.remove( doc, fix );

				} else {
					data_priv.access( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});


var
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {

		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

// Support: IE9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: 1.x compatibility
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute("type");
	}

	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		data_priv.set(
			elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
		);
	}
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( data_priv.hasData( src ) ) {
		pdataOld = data_priv.access( src );
		pdataCur = data_priv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( data_user.hasData( src ) ) {
		udataOld = data_user.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		data_user.set( dest, udataCur );
	}
}

function getAll( context, tag ) {
	var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
			context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					// Support: QtWebKit, PhantomJS
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: QtWebKit, PhantomJS
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	},

	cleanData: function( elems ) {
		var data, elem, type, key,
			special = jQuery.event.special,
			i = 0;

		for ( ; (elem = elems[ i ]) !== undefined; i++ ) {
			if ( jQuery.acceptData( elem ) ) {
				key = elem[ data_priv.expando ];

				if ( key && (data = data_priv.cache[ key ]) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}
					if ( data_priv.cache[ key ] ) {
						// Discard any remaining `private` data
						delete data_priv.cache[ key ];
					}
				}
			}
			// Discard any remaining `user` data
			delete data_user.cache[ elem[ data_user.expando ] ];
		}
	}
});

jQuery.fn.extend({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each(function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				});
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map(function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			arg = this.parentNode;

			jQuery.cleanData( getAll( this ) );

			if ( arg ) {
				arg.replaceChild( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg.length || arg.nodeType) ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							// Support: QtWebKit
							// jQuery.merge because push.apply(_, arraylike) throws
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: QtWebKit
			// .get() because push.apply(_, arraylike) throws
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var style,
		elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

			// Use of this method is a temporary fix (more like optimization) until something better comes along,
			// since it was removed from specification and supported only in FF
			style.display : jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = iframe[ 0 ].contentDocument;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {
		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		if ( elem.ownerDocument.defaultView.opener ) {
			return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
		}

		return window.getComputedStyle( elem, null );
	};



function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE9
	// getPropertyValue is only needed for .css('filter') (#12537)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];
	}

	if ( computed ) {

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// Support: iOS < 6
		// A tribute to the "awesome hack by Dean Edwards"
		// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
		// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
		if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?
		// Support: IE
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {
				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return (this.get = hookFn).apply( this, arguments );
		}
	};
}


(function() {
	var pixelPositionVal, boxSizingReliableVal,
		docElem = document.documentElement,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	if ( !div.style ) {
		return;
	}

	// Support: IE9-11+
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" +
		"position:absolute";
	container.appendChild( div );

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computePixelPositionAndBoxSizingReliable() {
		div.style.cssText =
			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
			"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
			"border:1px;padding:1px;width:4px;position:absolute";
		div.innerHTML = "";
		docElem.appendChild( container );

		var divStyle = window.getComputedStyle( div, null );
		pixelPositionVal = divStyle.top !== "1%";
		boxSizingReliableVal = divStyle.width === "4px";

		docElem.removeChild( container );
	}

	// Support: node.js jsdom
	// Don't assume that getComputedStyle is a property of the global object
	if ( window.getComputedStyle ) {
		jQuery.extend( support, {
			pixelPosition: function() {

				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computePixelPositionAndBoxSizingReliable();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computePixelPositionAndBoxSizingReliable();
				}
				return boxSizingReliableVal;
			},
			reliableMarginRight: function() {

				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =
					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				docElem.appendChild( container );

				ret = !parseFloat( window.getComputedStyle( marginDiv, null ).marginRight );

				docElem.removeChild( container );
				div.removeChild( marginDiv );

				return ret;
			}
		});
	}
})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var
	// Swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[0].toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = data_priv.get( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = data_priv.access( elem, "olddisplay", defaultDisplay(elem.nodeName) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display !== "none" || !hidden ) {
				data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.extend({

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Support: IE9-11+
			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
				style[ name ] = value;
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

// Support: Android 2.3
jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			return jQuery.swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});

jQuery.fn.extend({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE9
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	}
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*.
					// Use string for doubling so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur(),
				// break the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = data_priv.get( elem, "fxshow" );

	// Handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// Ensure the complete handler is called before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// Height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE9-10 do not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			data_priv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
			style.display = "inline-block";
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always(function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		});
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = data_priv.access( elem, "fxshow", {} );
		}

		// Store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;

			data_priv.remove( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// Don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// Support: Android 2.3
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || data_priv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = data_priv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = data_priv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		});
	}
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks.stop = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: iOS<=5.1, Android<=4.2+
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE<=11+
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: Android<=2.3
	// Options inside disabled selects are incorrectly marked as disabled
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<=11+
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
})();


var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend({
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	}
});

jQuery.extend({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					elem[ propName ] = false;
				}

				elem.removeAttribute( name );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	}
});

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle;
		if ( !isXML ) {
			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ name ];
			attrHandle[ name ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				name.toLowerCase() :
				null;
			attrHandle[ name ] = handle;
		}
		return ret;
	};
});




var rfocusable = /^(?:input|select|textarea|button)$/i;

jQuery.fn.extend({
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each(function() {
			delete this[ jQuery.propFix[ name ] || name ];
		});
	}
});

jQuery.extend({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
					elem.tabIndex :
					-1;
			}
		}
	}
});

if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = arguments.length === 0 || typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery.trim( cur ) : "";
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// Toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					data_priv.set( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




var rreturn = /\r/g;

jQuery.fn.extend({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// Handle most common string cases
					ret.replace(rreturn, "") :
					// Handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// IE6-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ? !option.disabled : option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( (option.selected = jQuery.inArray( option.value, values ) >= 0) ) {
						optionSet = true;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});


var nonce = jQuery.now();

var rquery = (/\?/);



// Support: Android 2.3
// Workaround failure to string-cast null input
jQuery.parseJSON = function( data ) {
	return JSON.parse( data + "" );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE9
	try {
		tmp = new DOMParser();
		xml = tmp.parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Document location
	ajaxLocation = window.location.href,

	// Segment location into parts
	ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

		// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,
			// URL without anti-cache param
			cacheURL,
			// Response headers
			responseHeadersString,
			responseHeaders,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});


jQuery._evalUrl = function( url ) {
	return jQuery.ajax({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery.fn.extend({
	wrapAll: function( html ) {
		var wrap;

		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapAll( html.call(this, i) );
			});
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});


jQuery.expr.filters.hidden = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
};
jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});


jQuery.ajaxSettings.xhr = function() {
	try {
		return new XMLHttpRequest();
	} catch( e ) {}
};

var xhrId = 0,
	xhrCallbacks = {},
	xhrSuccessStatus = {
		// file protocol always yields status code 0, assume 200
		0: 200,
		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE9
// Open requests must be manually aborted on unload (#5280)
// See https://support.microsoft.com/kb/2856746 for more info
if ( window.attachEvent ) {
	window.attachEvent( "onunload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]();
		}
	});
}

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport(function( options ) {
	var callback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr(),
					id = ++xhrId;

				xhr.open( options.type, options.url, options.async, options.username, options.password );

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers["X-Requested-With"] ) {
					headers["X-Requested-With"] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							delete xhrCallbacks[ id ];
							callback = xhr.onload = xhr.onerror = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {
								complete(
									// file: protocol always yields status 0; see #8605, #14207
									xhr.status,
									xhr.statusText
								);
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,
									// Support: IE9
									// Accessing binary-data responseText throws an exception
									// (#11426)
									typeof xhr.responseText === "string" ? {
										text: xhr.responseText
									} : undefined,
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				xhr.onerror = callback("error");

				// Create the abort callback
				callback = xhrCallbacks[ id ] = callback("abort");

				try {
					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {
					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {
	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery("<script>").prop({
					async: true,
					charset: s.scriptCharset,
					src: s.url
				}).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[1] ) ];
	}

	parsed = jQuery.buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = jQuery.trim( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
});




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep(jQuery.timers, function( fn ) {
		return elem === fn.elem;
	}).length;
};




var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend({
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}

		var docElem, win,
			elem = this[ 0 ],
			box = { top: 0, left: 0 },
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// Support: BlackBerry 5, iOS 3 (original iPhone)
		// If we don't have gBCR, just use 0,0 rather than error
		if ( typeof elem.getBoundingClientRect !== strundefined ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top + win.pageYOffset - docElem.clientTop,
			left: box.left + win.pageXOffset - docElem.clientLeft
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : window.pageXOffset,
					top ? val : window.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

// Support: Safari<7+, Chrome<37+
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	});
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;

}));

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/jquery/dist/jquery.js","/node_modules/jquery/dist")

},{"_process":7,"buffer":3}],3:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('is-array')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var kMaxLength = 0x3fffffff
var rootParent = {}

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Note:
 *
 * - Implementation must support adding new properties to `Uint8Array` instances.
 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *    incorrect length in some situations.
 *
 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
 * get the Object implementation, which is slower but will work correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = (function () {
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return 42 === arr.foo() && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding, noZero) {
  if (!(this instanceof Buffer))
    return new Buffer(subject, encoding, noZero)

  var type = typeof subject

  // Find the length
  var length
  if (type === 'number')
    length = subject > 0 ? subject >>> 0 : 0
  else if (type === 'string') {
    length = Buffer.byteLength(subject, encoding)
  } else if (type === 'object' && subject !== null) { // assume object is array-like
    if (subject.type === 'Buffer' && isArray(subject.data))
      subject = subject.data
    length = +subject.length > 0 ? Math.floor(+subject.length) : 0
  } else
    throw new TypeError('must start with number, buffer, array or string')

  if (length > kMaxLength)
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
      'size: 0x' + kMaxLength.toString(16) + ' bytes')

  var buf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    buf = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    buf = this
    buf.length = length
    buf._isBuffer = true
  }

  var i
  if (Buffer.TYPED_ARRAY_SUPPORT && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    buf._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    if (Buffer.isBuffer(subject)) {
      for (i = 0; i < length; i++)
        buf[i] = subject.readUInt8(i)
    } else {
      for (i = 0; i < length; i++)
        buf[i] = ((subject[i] % 256) + 256) % 256
    }
  } else if (type === 'string') {
    buf.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer.TYPED_ARRAY_SUPPORT && !noZero) {
    for (i = 0; i < length; i++) {
      buf[i] = 0
    }
  }

  if (length > 0 && length <= Buffer.poolSize)
    buf.parent = rootParent

  return buf
}

function SlowBuffer(subject, encoding, noZero) {
  if (!(this instanceof SlowBuffer))
    return new SlowBuffer(subject, encoding, noZero)

  var buf = new Buffer(subject, encoding, noZero)
  delete buf.parent
  return buf
}

Buffer.isBuffer = function (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b))
    throw new TypeError('Arguments must be Buffers')

  var x = a.length
  var y = b.length
  for (var i = 0, len = Math.min(x, y); i < len && a[i] === b[i]; i++) {}
  if (i !== len) {
    x = a[i]
    y = b[i]
  }
  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function (list, totalLength) {
  if (!isArray(list)) throw new TypeError('Usage: Buffer.concat(list[, length])')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (totalLength === undefined) {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

Buffer.byteLength = function (str, encoding) {
  var ret
  str = str + ''
  switch (encoding || 'utf8') {
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    case 'hex':
      ret = str.length >>> 1
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    default:
      ret = str.length
  }
  return ret
}

// pre-set for values that may exist in the future
Buffer.prototype.length = undefined
Buffer.prototype.parent = undefined

// toString(encoding, start=0, end=buffer.length)
Buffer.prototype.toString = function (encoding, start, end) {
  var loweredCase = false

  start = start >>> 0
  end = end === undefined || end === Infinity ? this.length : end >>> 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase)
          throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.equals = function (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max)
      str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  return Buffer.compare(this, b)
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(byte)) throw new Error('Invalid hex string')
    buf[offset + i] = byte
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  return charsWritten
}

function asciiWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function utf16leWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length, 2)
  return charsWritten
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0

  if (length < 0 || offset < 0 || offset > this.length)
    throw new RangeError('attempt to write outside buffer bounds');

  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = utf16leWrite(this, string, offset, length)
      break
    default:
      throw new TypeError('Unknown encoding: ' + encoding)
  }
  return ret
}

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function binarySlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len;
    if (start < 0)
      start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0)
      end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start)
    end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined, true)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
  }

  if (newBuf.length)
    newBuf.parent = this.parent || this

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0)
    throw new RangeError('offset is not uint')
  if (offset + ext > length)
    throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert)
    checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100))
    val += this[offset + i] * mul

  return val
}

Buffer.prototype.readUIntBE = function (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert)
    checkOffset(offset, byteLength, this.length)

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100))
    val += this[offset + --byteLength] * mul;

  return val
}

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
}

Buffer.prototype.readIntLE = function (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert)
    checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100))
    val += this[offset + i] * mul
  mul *= 0x80

  if (val >= mul)
    val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert)
    checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100))
    val += this[offset + --i] * mul
  mul *= 0x80

  if (val >= mul)
    val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80))
    return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
}

Buffer.prototype.writeUIntLE = function (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert)
    checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100))
    this[offset + i] = (value / mul) >>> 0 & 0xFF

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert)
    checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100))
    this[offset + i] = (value / mul) >>> 0 & 0xFF

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = value
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else objectWriteUInt16(this, value, offset, true)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else objectWriteUInt16(this, value, offset, false)
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = value
  } else objectWriteUInt32(this, value, offset, true)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else objectWriteUInt32(this, value, offset, false)
  return offset + 4
}

Buffer.prototype.writeIntLE = function (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkInt(this,
             value,
             offset,
             byteLength,
             Math.pow(2, 8 * byteLength - 1) - 1,
             -Math.pow(2, 8 * byteLength - 1))
  }

  var i = 0
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100))
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkInt(this,
             value,
             offset,
             byteLength,
             Math.pow(2, 8 * byteLength - 1) - 1,
             -Math.pow(2, 8 * byteLength - 1))
  }

  var i = byteLength - 1
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100))
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = value
  return offset + 1
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else objectWriteUInt16(this, value, offset, true)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else objectWriteUInt16(this, value, offset, false)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else objectWriteUInt32(this, value, offset, true)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else objectWriteUInt32(this, value, offset, false)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
  if (offset < 0) throw new RangeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert)
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert)
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var source = this

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (target_start >= target.length) target_start = target.length
  if (!target_start) target_start = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || source.length === 0) return 0

  // Fatal error conditions
  if (target_start < 0)
    throw new RangeError('targetStart out of bounds')
  if (start < 0 || start >= source.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length)
    end = this.length
  if (target.length - target_start < end - start)
    end = target.length - target_start + start

  var len = end - start

  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < len; i++) {
      target[i + target_start] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), target_start)
  }

  return len
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new RangeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function (arr) {
  arr.constructor = Buffer
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUIntLE = BP.readUIntLE
  arr.readUIntBE = BP.readUIntBE
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readIntLE = BP.readIntLE
  arr.readIntBE = BP.readIntBE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUIntLE = BP.writeUIntLE
  arr.writeUIntBE = BP.writeUIntBE
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeIntLE = BP.writeIntLE
  arr.writeIntBE = BP.writeIntBE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-z\-]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes(string, units) {
  var codePoint, length = string.length
  var leadSurrogate = null
  units = units || Infinity
  var bytes = []
  var i = 0

  for (; i<length; i++) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {

      // last char was a lead
      if (leadSurrogate) {

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          leadSurrogate = codePoint
          continue
        }

        // valid surrogate pair
        else {
          codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000
          leadSurrogate = null
        }
      }

      // no lead yet
      else {

        // unexpected trail
        if (codePoint > 0xDBFF) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // unpaired lead
        else if (i + 1 === length) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        else {
          leadSurrogate = codePoint
          continue
        }
      }
    }

    // valid bmp char, but last char was a lead
    else if (leadSurrogate) {
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
      leadSurrogate = null
    }

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    }
    else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      );
    }
    else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      );
    }
    else if (codePoint < 0x200000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      );
    }
    else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {

    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length, unitSize) {
  if (unitSize) length -= length % unitSize;
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length))
      break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/laravel-elixir-browserify/node_modules/browserify/node_modules/buffer/index.js","/node_modules/laravel-elixir-browserify/node_modules/browserify/node_modules/buffer")

},{"_process":7,"base64-js":4,"buffer":3,"ieee754":5,"is-array":6}],4:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)
	var PLUS_URL_SAFE = '-'.charCodeAt(0)
	var SLASH_URL_SAFE = '_'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS ||
		    code === PLUS_URL_SAFE)
			return 62 // '+'
		if (code === SLASH ||
		    code === SLASH_URL_SAFE)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/laravel-elixir-browserify/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib/b64.js","/node_modules/laravel-elixir-browserify/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib")

},{"_process":7,"buffer":3}],5:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
exports.read = function(buffer, offset, isLE, mLen, nBytes) {
  var e, m,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isLE ? (nBytes - 1) : 0,
      d = isLE ? -1 : 1,
      s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity);
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
      i = isLE ? 0 : (nBytes - 1),
      d = isLE ? 1 : -1,
      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

  buffer[offset + i - d] |= s * 128;
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/laravel-elixir-browserify/node_modules/browserify/node_modules/buffer/node_modules/ieee754/index.js","/node_modules/laravel-elixir-browserify/node_modules/browserify/node_modules/buffer/node_modules/ieee754")

},{"_process":7,"buffer":3}],6:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){

/**
 * isArray
 */

var isArray = Array.isArray;

/**
 * toString
 */

var str = Object.prototype.toString;

/**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */

module.exports = isArray || function (val) {
  return !! val && '[object Array]' == str.call(val);
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/laravel-elixir-browserify/node_modules/browserify/node_modules/buffer/node_modules/is-array/index.js","/node_modules/laravel-elixir-browserify/node_modules/browserify/node_modules/buffer/node_modules/is-array")

},{"_process":7,"buffer":3}],7:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;

function drainQueue() {
    if (draining) {
        return;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        var i = -1;
        while (++i < len) {
            currentQueue[i]();
        }
        len = queue.length;
    }
    draining = false;
}
process.nextTick = function (fun) {
    queue.push(fun);
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/laravel-elixir-browserify/node_modules/browserify/node_modules/process/browser.js","/node_modules/laravel-elixir-browserify/node_modules/browserify/node_modules/process")

},{"_process":7,"buffer":3}],8:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var saleableBasicCtrl = function($scope,$rootScope,SaleableService,MessageService,CategoryHelper){

    $rootScope.$on("newBasicDetail",function(event){
        CategoryHelper.categoryList('/salcatlist',$scope);

        //var numberOfSaleables = $scope.$parent.saleables.length;
        var saleable = SaleableService.$build();
        saleable.type =0;
        saleable.featured = 0;

        /*if(numberOfSaleables==0){

        }*/
        //$scope.saleable = angular.copy($scope.master);
        $scope.saleable = saleable;



        $scope.updateSaleable = function(){

            if($scope.saleable.isfeatured){
                $scope.saleable.featured = 1;
            }else{
                $scope.saleable.featured = 0;
            }
            console.log($scope.saleable.categories);
            saleable.$save().$then(function(data){
                var meta = data.$metadata.meta;
                MessageService.setAlertMessage($scope,meta);
                $rootScope.$emit("saleableCreated",saleable);

            });
        }

    });

    $rootScope.$on("editBasicDetail",function(event,saleable){
        CategoryHelper.categoryList('/salcatlist',$scope);
        CategoryHelper.salCategoryList('/salcatlistselected/'+saleable.id,$scope);
        $scope.saleable = saleable;
        $scope.updateSaleable = function(){

            if($scope.saleable.isfeatured){
                $scope.saleable.featured = 1;
            }else{
                $scope.saleable.featured = 0;
            }
            saleable.$save().$then(function(data){

                var meta = data.$metadata.meta;
                MessageService.setAlertMessage($scope,meta);
                $rootScope.$emit("saleableUpdated",saleable);

            });
        }

    });



}

module.exports = saleableBasicCtrl;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/basicdetailcontroller.js","/resources/assets/js/admin/angular")

},{"_process":7,"buffer":3}],9:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){

var bioController = function($scope,BiographyService,MessageService){


    var data = BiographyService.$find(0);

    $scope.profile = data.$fetch();

    $scope.updateBio = function(){
        data.$save().$then(function(data){

            var meta = data.$metadata.meta;

            MessageService.setAlertMessage($scope,meta);

        });
    }
}

module.exports = bioController;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/biocontroller.js","/resources/assets/js/admin/angular")

},{"_process":7,"buffer":3}],10:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var configController = function($scope,$timeout,MessageService,UserContentType){

    var contenttypes = UserContentType.$search().$then(function(data){
        $scope.usercontenttypes = data;
    });

    $scope.editUserContent = function(content){
        $scope.content = content;
        $scope.showEditContentItem = true;
    }
    $scope.updateUserContent = function(){
        var isHome = $scope.content.ishome;
        var asHome = false;
        $scope.content.ashome = 0;
        if(isHome){
            $scope.content.ashome = 1;
        }
        $scope.content.$save().$then(function(data){
            $scope.usercontenttypes.$refresh();
            $scope.showEditContentItem = false;
            var meta = data.$metadata.meta;
            MessageService.setAlertMessage($scope,meta);
        });
    }

    $scope.changeStateContent = function($event,usercontent){
        var checkbox = $event.target;
        var action = (checkbox.checked ? true: false);

        usercontent.active = action;
        usercontent.$save().$then(function(data){
            $scope.usercontenttypes.$refresh();
            var meta = data.$metadata.meta;
            MessageService.setAlertMessage($scope,meta);
        });
    }
    $scope.setAsHome = function($event,usercontent){
        var checkbox = $event.target;
        var action = (checkbox.checked ? true: false);

        usercontent.ashome = action;
        usercontent.$save().$then(function(data){
            $scope.usercontenttypes.$refresh();
            var meta = data.$metadata.meta;
            MessageService.setAlertMessage($scope,meta);
        });
    }

}
module.exports = configController;


}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/configcontroller.js","/resources/assets/js/admin/angular")

},{"_process":7,"buffer":3}],11:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/**
 * Created by macintosh on 2/3/15.
 */
var alertDirective = function(){
    return {
        templateUrl:"../../js/admin/angular/templates/alert.html",
        restrict:"EA",
        scope : {
            message:"=msge"
        },

        controller:function($scope){

            $scope.showAlert = true;
            $scope.destroyAlert = function(){
                $scope.$parent.showAlert = false;
            }
        }
    }
}
module.exports = alertDirective;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/alertdirective.js","/resources/assets/js/admin/angular/directives")

},{"_process":7,"buffer":3}],12:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var bioDirective = function(MessageService,Bio,$timeout,Helper,$http){
    return {
        templateUrl:"../../js/admin/angular/templates/biographies/biographies.html",
        restrict:"EA",
        scope:{},
        controller:function($scope,$rootScope) {
            $scope.closeForm = function(){
                Helper.enableForm($scope,false);
            }
            Helper.enableForm($scope,false);

                    var bios = Bio.$search().$then(function (data) {
                        console.log(data);
                        $scope.bios = data;
                        if ($scope.bios.length == 0) {
                            MessageService.setNoItemsInfoMessage($scope, " biografías",
                                ". Pulsa el botón Nueva para crear una");
                        }
                    });



                    $scope.newBio = function () {

                        Helper.enableForm($scope, true);
                        var bio = Bio.$build();
                        $scope.bio = bio;

                        $scope.updateBio = function () {

                            bio.$save().$then(function (data) {
                                $scope.bios.$refresh();
                                $scope.bioForm.$resetForm();
                                Helper.enableForm($scope, false);
                                var meta = data.$metadata.meta;
                                MessageService.setAlertMessage($scope, meta);
                            });
                        }

                    };

                    $scope.editBio = function (bio) {
                        Helper.enableForm($scope, true);
                        $scope.bio = bio;

                        $scope.updateBio = function () {

                            bio.$save().$then(function (data) {
                                $scope.bios.$refresh();
                                $scope.bioForm.$resetForm();
                                Helper.enableForm($scope, false);
                                var meta = data.$metadata.meta;
                                MessageService.setAlertMessage($scope, meta);
                            });
                        }
                    };

                    //delete
                    $scope.removeBio = function (bio) {
                        $scope.bio = bio;
                        var confirmation = MessageService.setConfirmDeleteMessage(" biografía", " ");
                        if (confirmation) {
                            bio.$destroy().$then(function (data) {
                                var meta = data.$response.data;
                                $scope.bios.$refresh();
                                MessageService.setAlertMessage($scope, meta);
                            });
                        }
                    };

                    //change status
                    $scope.changeStatus = function ($event, bio) {
                        var checkbox = $event.target;
                        var action = (checkbox.checked ? true : false);

                        bio.status = action;
                        bio.$save().$then(function (data) {
                            $scope.bios.$refresh();
                            var meta = data.$metadata.meta;
                            MessageService.setAlertMessage($scope, meta);
                        });
                    };

                    $scope.setDef = function ($event, bio) {
                        console.log("aqui");
                        /*var checkbox = $event.target;
                        var action = (checkbox.checked ? true : false);

                        bio.status = action;*/
                        $http.post("/biography/setDefault/"+bio.id).success(function(data){
                            $scope.bios.$refresh();
                            console.log(data);
                            var meta = data.meta;
                            MessageService.setAlertMessage($scope, meta);
                        });
                    };






        }
    }

}
module.exports = bioDirective;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/biographies/biography.js","/resources/assets/js/admin/angular/directives/biographies")

},{"_process":7,"buffer":3}],13:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var closeContentDirective = function(){
    return {
        restrict:'EA',
        template:'<a href="" ng-click="destroySection()" class="pull-right remove-button" data-icon="&#xe70d" ></a>',

        scope:{remove:'&'},
        controller:function($scope){
            $scope.destroySection = function(){
                $scope.remove();
            }
        }
    }
}

module.exports = closeContentDirective;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/closecontentdirective.js","/resources/assets/js/admin/angular/directives")

},{"_process":7,"buffer":3}],14:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var configMenu = function(){
    return {
        restrict:"EA",
        templateUrl:"../../js/admin/angular/templates/config_menu.html"
    }
}
module.exports = configMenu;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/configmenu.js","/resources/assets/js/admin/angular/directives")

},{"_process":7,"buffer":3}],15:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var categoryDirective = function(MessageService,Category,$timeout,Helper){
    return {
        templateUrl:"../../js/admin/angular/templates/configuration/categories.html",
        restrict:"EA",
        scope:{},
        controller:function($scope,$rootScope) {
            $scope.closeForm = function(){
                Helper.enableForm($scope,false);
            }
            Helper.enableForm($scope,false);
                    var categories = Category.$search().$then(function (data) {
                        $scope.categories = data;
                        if ($scope.categories.length == 0) {
                            MessageService.setNoItemsInfoMessage($scope, " categorías",
                                ". Pulsa el botón Nueva para crear una");
                        }
                    });

                    $scope.newCategory = function () {
                        Helper.enableForm($scope, true);
                        var category = Category.$build();
                        $scope.category = category;

                        $scope.updateCategory = function () {
                            category.$save().$then(function (data) {
                                $scope.categories.$refresh();
                                $scope.categoryForm.$resetForm();
                                Helper.enableForm($scope, false);
                                var meta = data.$metadata.meta;
                                MessageService.setAlertMessage($scope, meta);
                            });
                        }

                    };

                    $scope.editCategory = function (category) {
                        Helper.enableForm($scope, true);
                        $scope.category = category;

                        $scope.updateCategory = function () {

                            category.$save().$then(function (data) {
                                $scope.categories.$refresh();
                                $scope.categoryForm.$resetForm();
                                Helper.enableForm($scope, false);
                                var meta = data.$metadata.meta;
                                MessageService.setAlertMessage($scope, meta);
                            });
                        }
                    };

                    //delete
                    $scope.removeCategory = function (category) {
                        $scope.category = category;
                        var confirmation = MessageService.setConfirmDeleteMessage(" categoría", " ");
                        if (confirmation) {
                            category.$destroy().$then(function (data) {
                                var meta = data.$response.data;
                                MessageService.setAlertMessage($scope, meta);
                            });
                        }
                    };

                    //change status
                    /*$scope.changeStatus = function ($event, category) {
                        var checkbox = $event.target;
                        var action = (checkbox.checked ? true : false);

                        category.status = action;
                        category.$save().$then(function (data) {
                            $scope.categories.$refresh();
                            var meta = data.$metadata.meta;
                            MessageService.setAlertMessage($scope, meta);
                        });
                    };*/

        }
    }

}
module.exports = categoryDirective;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/configuration/category.js","/resources/assets/js/admin/angular/directives/configuration")

},{"_process":7,"buffer":3}],16:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var contentSelector = function(MessageService,UserContentType){
    return {
        templateUrl:"../../js/admin/angular/templates/content_selector.html",
        restrict:"EA",
        scope:{},
        transclude:true,
        controller:function($scope,$timeout){
            $scope.infoContentSelector = MessageService.get('contentselector_info').message;
            var contenttypes = UserContentType.$search().$then(function(data){
                $scope.usercontenttypes = data;
            });

            $scope.updateContent = function($event,usercontent){

                var checkbox = $event.target;
                var action = (checkbox.checked ? true: false);

                usercontent.active = action;
                usercontent.$save().$then(function(data){
                    var meta = data.$metadata.meta;
                    MessageService.setAlertMessage($scope,meta);
                });

            }

        }
    }
}

module.exports = contentSelector;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/contentselector.js","/resources/assets/js/admin/angular/directives")

},{"_process":7,"buffer":3}],17:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var hallo = function(){
    return {
        require: 'ngModel',
        link: function ($scope, $element, $attrs, ngModelCtrl) {
            console.log($element);
            $(this).hallo({
                plugins: {
                    'halloformat': {},
                    'halloblock': {},
                    'hallojustify': {},
                    'hallolists': {},
                    'halloreundo': {}
                }
            });

            ngModelCtrl.$render = function () {
                var contents = ngModelCtrl.$viewValue;
                $(this).hallo('setContents', contents);
            }


        }
    }
}
module.exports = hallo
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/hallodirective.js","/resources/assets/js/admin/angular/directives")

},{"_process":7,"buffer":3}],18:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var homeCallsDirective = function(MessageService,Homecallout,$timeout,Helper,FileProcessor,$http){
    return {
        templateUrl:"../../js/admin/angular/templates/homepage/homecalls.html",
        restrict:"EA",
        scope:{},
        controller:function($scope,$rootScope) {

            $scope.onFileSelect = function($files) {
                $scope.files = $files;

            };
            $scope.closeForm = function(){
                Helper.enableForm($scope,false);
            };
            Helper.enableForm($scope,false);

            $http.get('/activecontent').success(function(data){
                var contents = data.contents;
                $scope.contents = contents;
            }).error();



                    var callouts = Homecallout.$search().$then(function (data) {
                        $scope.callouts = data;
                        if ($scope.callouts.length == 0) {
                            MessageService.setNoItemsInfoMessage($scope, " ítems",
                                ". Pulsa el botón Nuevo para crear uno");
                        }
                        if ($scope.callouts.length == 1) {
                            $scope.hideIfOne = true;
                        }

                    });

                    $scope.newHomecallout = function () {

                        Helper.enableForm($scope, true);
                        var callout = Homecallout.$build();
                        $scope.callout = callout;
                        $scope.callout.buttonlink = 'home';
                        $scope.updateHomecallout = function () {
                            /*console.log($scope.callout);*/
                            callout.$save().$then(function (data) {
                                $scope.hideIfOne = true;
                                $scope.callouts.$refresh();
                                $scope.calloutForm.$resetForm();
                                Helper.enableForm($scope, false);
                                var meta = data.$metadata.meta;
                                MessageService.setAlertMessage($scope, meta);
                                if(typeof $scope.files !== "undefined") {
                                    if($scope.files.length > 0){
                                        FileProcessor.upload($scope,'/uploadHomeImage',data.id);
                                        $scope.files = [];
                                    }
                                }

                            });
                        }

                    };

                    $scope.editHomecallout = function (callout) {
                        Helper.enableForm($scope, true);
                        $scope.callout = callout;
                        $scope.files = [];
                        FileProcessor.download($scope,'/homeimage/'+callout.id);
                        $scope.updateHomecallout = function () {

                            callout.$save().$then(function (data) {
                                $scope.callouts.$refresh();
                                $scope.calloutForm.$resetForm();
                                Helper.enableForm($scope, false);
                                var meta = data.$metadata.meta;
                                MessageService.setAlertMessage($scope, meta);
                                if(typeof $scope.files !== "undefined") {
                                    if($scope.files.length > 0){
                                        FileProcessor.upload($scope,'/uploadHomeImage',data.id);
                                        $scope.files = [];
                                    }
                                }

                            });
                        }
                    };

                    //delete
                    $scope.removeHomecallout = function (callout) {
                        $scope.callout = callout;
                        var confirmation = MessageService.setConfirmDeleteMessage(" ítem", " ");
                        if (confirmation) {
                            $scope.hideIfOne = false;
                            callout.$destroy().$then(function (data) {
                                var meta = data.$response.data;
                                MessageService.setAlertMessage($scope, meta);

                            });
                        }
                    };

                    //change status
                    $scope.changeStatus = function ($event, callout) {
                        var checkbox = $event.target;
                        var action = (checkbox.checked ? true : false);

                        callout.status = action;
                        callout.$save().$then(function (data) {
                            $scope.callouts.$refresh();
                            var meta = data.$metadata.meta;
                            MessageService.setAlertMessage($scope, meta);
                        });
                    };
        }
    }

};
module.exports = homeCallsDirective;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/homepage/homecalls.js","/resources/assets/js/admin/angular/directives/homepage")

},{"_process":7,"buffer":3}],19:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var projectDirective = function(MessageService,Project,$timeout,CategoryHelper,FileProcessor,Helper){
    return {
        templateUrl:"../../js/admin/angular/templates/portfolio/project.html",
        restrict:"EA",
        scope:{},
        controller:function($scope,$rootScope) {
            $scope.onFileSelect = function($files) {
                $scope.files = $files;

            };
            $rootScope.$on('newProject',function(){

                CategoryHelper.categoryList('/projectcatlist',$scope);
                var project = Project.$build();
                $scope.project = project;

                $scope.updateProject = function () {

                    //$rootScope.$broadcast('editProject',project);
                    project.$save().$then(function (data) {
                        //$scope.projects.$refresh();
                        $scope.projectForm.$resetForm();
                        var meta = data.$metadata.meta;
                        MessageService.setAlertMessage($scope, meta);

                        if(typeof $scope.files !== "undefined") {
                            if($scope.files.length > 0){
                                FileProcessor.upload($scope,'/uploadProjectFeatureImage',data.id);
                                $scope.files = [];
                            }
                        }
                        $rootScope.$broadcast('projectCreated',project);

                    });
                }

            });

            $rootScope.$on('editProject',function(event,data){
                $scope.files = [];
                var project = data;
                FileProcessor.download($scope,'/projectimage/'+project.id);
                CategoryHelper.categoryList('/projectcatlist',$scope);
                CategoryHelper.projectCategoryList('/projectcatlistselected/'+project.id,$scope);


                $scope.project = project;
                $scope.updateProject = function(){
                    project.$save().$then(function(data){
                        var meta = data.$metadata.meta;
                        MessageService.setAlertMessage($scope,meta);
                        //upload file
                        if($scope.files.length > 0){
                            FileProcessor.upload($scope,'/uploadProjectFeatureImage',data.id);
                            $scope.files = [];
                        }

                    });
                }

            });

            $rootScope.$on('editProject',function(evt,data){
                $scope.project = data;
            });





        }
    }

}
module.exports = projectDirective;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/portfolio/project.js","/resources/assets/js/admin/angular/directives/portfolio")

},{"_process":7,"buffer":3}],20:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var projectGalleryDirective = function(MessageService,Project,$timeout,FileProcessor,Gallery){
    return {
        templateUrl:"../../js/admin/angular/templates/portfolio/projectgallery.html",
        restrict:"EA",
        scope:{},
        controller:function($scope,$rootScope) {
            function loadImages(data) {
                $scope.project = data;
                var images = Gallery.$search({project_id: $scope.project.id}).$then(function (data) {
                    $scope.images = data;
                    if ($scope.images.length == 0) {
                        MessageService.setNoItemsInfoMessage($scope, " imágenes",
                            ". Pulsa el botón 'Chose files' para cargar nuevas imágenes");
                    }

                });
                $scope.onFileSelect = function ($files) {
                    $scope.files = $files;
                    FileProcessor.upload($scope, '/uploadProjectGalleryImage', data.id);

                };

                $scope.removeImage = function (image) {

                    var confirmation = MessageService.setConfirmDeleteMessage(" imagen", " ");
                    if (confirmation) {
                        image.$destroy().$then(function (data) {
                            var meta = data.$response.data;
                            MessageService.setAlertMessage($scope, meta);
                            $scope.images.$refresh();
                        });
                    }
                };
            }

            $rootScope.$on('editProject',function(evt,data){
                loadImages(data);
            });
            $rootScope.$on('projectCreated',function(evt,data){
                loadImages(data);
            });
        }
    }

}
module.exports = projectGalleryDirective;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/portfolio/projectgallery.js","/resources/assets/js/admin/angular/directives/portfolio")

},{"_process":7,"buffer":3}],21:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var projectDirective = function(MessageService,Project,$timeout,Helper){
    return {
        templateUrl:"../../js/admin/angular/templates/portfolio/projectlist.html",
        restrict:"EA",
        scope:{
            openProjectWizard:"&openprojectwizard"
        },
        controller:function($scope,$rootScope) {

            var projects = Project.$search().$then(function (data) {
                $scope.projects = data;

                if ($scope.projects.length == 0) {
                    MessageService.setNoItemsInfoMessage($scope, " proyectos",
                        ". Pulsa el botón Nuevo para crear uno");
                }
            });

            $scope.newProject = function () {
                $rootScope.$broadcast('newProject');
                $scope.openProjectWizard();
            };

            $scope.editProject = function (project) {
                $rootScope.$emit('editProject',project);
                $scope.openProjectWizard();

            };

            //delete
            $scope.removeProject = function (project) {
                $scope.project = project;
                var confirmation = MessageService.setConfirmDeleteMessage(" proyecto", " ");
                if (confirmation) {
                    project.$destroy().$then(function (data) {
                        var meta = data.$response.data;
                        MessageService.setAlertMessage($scope, meta);
                    });
                }
            };

            //change status
            $scope.changeStatus = function ($event, project) {
                var checkbox = $event.target;
                var action = (checkbox.checked ? true : false);

                project.status = action;
                project.$save().$then(function (data) {
                    $scope.projects.$refresh();
                    var meta = data.$metadata.meta;
                    MessageService.setAlertMessage($scope, meta);
                });
            };

        }






    }

}
module.exports = projectDirective;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/portfolio/projectlist.js","/resources/assets/js/admin/angular/directives/portfolio")

},{"_process":7,"buffer":3}],22:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var projectWizardDirective = function(MessageService,Project,$timeout,Helper){
    return {
        templateUrl:"../../js/admin/angular/templates/portfolio/projectwizard.html",
        restrict:"EA",
        scope:{
            openProjectList:'&openprojectlist'
        },
        controller:function($scope,$rootScope) {


            $rootScope.$on('projectCreated',function(evt,data){

                $scope.project = data;

            });
            $rootScope.$on('editProject',function(evt,data){
                $scope.project = data;

            });

            $scope.closeWizard = function(){
               $scope.openProjectList();
               location.href = '/admin/projects';
            }

        }
    }

}
module.exports = projectWizardDirective;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/portfolio/projectwizard.js","/resources/assets/js/admin/angular/directives/portfolio")

},{"_process":7,"buffer":3}],23:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var profileMenu = function(){
    return {
        restrict:"EA",
        templateUrl:"../../js/admin/angular/templates/profile_menu.html"
    }
}
module.exports = profileMenu;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/profilemenu.js","/resources/assets/js/admin/angular/directives")

},{"_process":7,"buffer":3}],24:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var educationDirective = function(MessageService,Education,$timeout,Helper){
    return {
        templateUrl:"../../js/admin/angular/templates/resume/education.html",
        restrict:"EA",
        scope:{},
        controller:function($scope,$rootScope) {
            $scope.closeForm = function(){
                Helper.enableForm($scope,false);
            }
            Helper.enableForm($scope,false);
            $rootScope.$on('resumeChange',function(event,args){
                if(typeof args.resume !== "undefined") {
                    var resumeId = args.resume.id;
                    var educations = Education.$search({resume_id: resumeId}).$then(function (data) {
                        $scope.educations = data;
                        if ($scope.educations.length == 0) {
                            MessageService.setNoItemsInfoMessage($scope, " estudios",
                                ". Pulsa el botón Nueva para crear una");
                        }
                    });

                    $scope.newEducation = function () {
                        Helper.enableForm($scope, true);
                        var education = Education.$build({resume_id: resumeId, initdate: '', enddate: ''});
                        $scope.education = education;
                        $scope.monthoptions = Helper.months();
                        $scope.education.initmonth = Helper.months()[0];
                        $scope.education.endmonth = Helper.months()[0];

                        $scope.updateEducation = function () {
                            var isCurrent = $scope.education.currentplace;
                            $scope.education.current = 0;
                            if (isCurrent) {
                                $scope.education.current = 1;
                            }
                            $scope.education.initdate = $scope.education.initmonth + "-" + $scope.education.inityear;
                            $scope.education.enddate = $scope.education.endmonth + "-" + $scope.education.endyear;

                            education.$save().$then(function (data) {
                                $scope.educations.$refresh();
                                $scope.educationForm.$resetForm();
                                Helper.enableForm($scope, false);
                                var meta = data.$metadata.meta;
                                MessageService.setAlertMessage($scope, meta);
                            });
                        }

                    };

                    $scope.editEducation = function (education) {
                        Helper.enableForm($scope, true);
                        $scope.monthoptions = Helper.months();
                        var imonthIndex = Helper.months().indexOf(education.imonth);
                        var emonthIndex = Helper.months().indexOf(education.emonth);
                        $scope.education = education;
                        $scope.education.initmonth = $scope.monthoptions[imonthIndex];
                        $scope.education.endmonth = $scope.monthoptions[emonthIndex];
                        $scope.education.inityear = education.iyear;
                        $scope.education.endyear = education.eyear;

                        $scope.updateEducation = function () {
                            var isCurrent = $scope.education.currentplace;
                            $scope.education.current = 0;
                            if (isCurrent) {
                                $scope.education.current = 1;
                            }
                            $scope.education.initdate = $scope.education.initmonth + "-" + $scope.education.inityear;
                            $scope.education.enddate = $scope.education.endmonth + "-" + $scope.education.endyear;

                            education.$save().$then(function (data) {
                                $scope.educations.$refresh();
                                $scope.educationForm.$resetForm();
                                Helper.enableForm($scope, false);
                                var meta = data.$metadata.meta;
                                MessageService.setAlertMessage($scope, meta);
                            });
                        }
                    };

                    //delete
                    $scope.removeEducation = function (education) {
                        $scope.education = education;
                        var confirmation = MessageService.setConfirmDeleteMessage(" estudio", " ");
                        if (confirmation) {
                            education.$destroy().$then(function (data) {
                                var meta = data.$response.data;
                                MessageService.setAlertMessage($scope, meta);
                            });
                        }
                    };

                    //change status
                    $scope.changeStatus = function ($event, education) {
                        var checkbox = $event.target;
                        var action = (checkbox.checked ? true : false);

                        education.status = action;
                        education.$save().$then(function (data) {
                            $scope.educations.$refresh();
                            var meta = data.$metadata.meta;
                            MessageService.setAlertMessage($scope, meta);
                        });
                    };

                }
            });




        }
    }

}
module.exports = educationDirective;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/resume/education.js","/resources/assets/js/admin/angular/directives/resume")

},{"_process":7,"buffer":3}],25:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var experienceDirective = function(MessageService,Experience,$timeout,Helper){
    return {
        templateUrl:"../../js/admin/angular/templates/resume/experience.html",
        restrict:"EA",
        scope:{},

        controller:function($scope,$rootScope){
            $scope.closeForm = function(){
                Helper.enableForm($scope,false);
            };
            Helper.enableForm($scope,false);


            $rootScope.$on('resumeChange',function(event,args){

                /*$scope.sortingLog = [];
                var tmpList = [];
                $scope.sortableOrder = [];
                for (var i = 1; i <= 6; i++){
                    tmpList.push({
                        text: 'Item ' + i,
                        value: i
                    });
                }
                $scope.sortableOptions = {
                    activate: function() {
                        console.log("activate");
                    },
                    beforeStop: function() {
                        console.log("beforeStop");
                    },
                    change: function() {
                        console.log("change");
                    },
                    create: function() {
                        console.log("create");
                    },
                    deactivate: function() {
                        console.log("deactivate");
                    },
                    out: function() {
                        console.log("out");
                    },
                    over: function() {
                        console.log("over");
                    },
                    receive: function() {
                        console.log("receive");
                    },
                    remove: function() {
                        console.log("remove");
                    },
                    sort: function() {
                        console.log("sort");
                    },
                    start: function() {
                        console.log("start");
                    },
                    update: function(e, ui) {
                        $scope.$apply();
                        console.log(this);

                        var logEntry = tmpList.map(function(i){
                            return i.value;
                        }).join(', ');
                        $scope.sortingLog.push('Update: ' + logEntry);
                        console.log($scope.sortingLog);
                    },
                    stop: function(e, ui) {

                        var $list=ui.item.parent();
                        console.log($list);
                        $scope.sortableOrder = $list.sortable('toArray');
                        console.log($scope.sortableOrder);
                        // this callback has the changed model
                        var logEntry = tmpList.map(function(i){
                            return i.value;
                        }).join(', ');
                        $scope.sortingLog.push('Stop: ' + logEntry);
                        console.log($scope.sortingLog);
                    }
                };*/
                /*var exp = [];
                exp  = $scope.experiences;
                $scope.bar = function($item, $partFrom, $partTo, $indexFrom, $indexTo){
                    console.log($scope.experiences);
                    console.log($indexFrom);
                    console.log($indexTo);
                    console.log($partFrom);
                    console.log($partTo);
                };

                $scope.baz = function($item, $part, $index){
                    console.log($item);
                    console.log($part);
                    console.log($index);

                };*/


                if(typeof args.resume !== "undefined") {
                    var resumeId = args.resume.id;
                    var experiences = Experience.$search({resume_id: resumeId}).$then(function (data) {
                        $scope.experiences = data;
                        if ($scope.experiences.length == 0) {
                            MessageService.setNoItemsInfoMessage($scope, " experiencias",
                                ". Pulsa el botón Nueva para crear una");
                        }

                    });
                    //new
                    $scope.newExperience = function () {
                        console.log('aqio');
                        Helper.enableForm($scope, true);
                        var experience = Experience.$build({resume_id: resumeId, initdate: '', enddate: ''});
                        $scope.experience = experience;
                        $scope.monthoptions = Helper.months();
                        $scope.experience.initmonth = Helper.months()[0];
                        $scope.experience.endmonth = Helper.months()[0];

                        $scope.updateExperience = function () {
                            var isCurrent = $scope.experience.currentplace;
                            $scope.experience.current = 0;
                            if (isCurrent) {
                                $scope.experience.current = 1;
                            }
                            $scope.experience.initdate = $scope.experience.initmonth + "-" + $scope.experience.inityear;
                            $scope.experience.enddate = $scope.experience.endmonth + "-" + $scope.experience.endyear;

                            experience.$save().$then(function (data) {
                                $scope.experiences.$refresh();
                                $scope.experienceForm.$resetForm();
                                Helper.enableForm($scope, false);
                                var meta = data.$metadata.meta;
                                MessageService.setAlertMessage($scope, meta);
                            });
                        }

                    };
                    //edit
                    $scope.editExperience = function (experience) {
                        Helper.enableForm($scope, true);
                        $scope.monthoptions = Helper.months();
                        var imonthIndex = Helper.months().indexOf(experience.imonth);
                        var emonthIndex = Helper.months().indexOf(experience.emonth);
                        $scope.experience = experience;
                        $scope.experience.initmonth = $scope.monthoptions[imonthIndex];
                        $scope.experience.endmonth = $scope.monthoptions[emonthIndex];
                        $scope.experience.inityear = experience.iyear;
                        $scope.experience.endyear = experience.eyear;


                        $scope.updateExperience = function () {
                            var isCurrent = $scope.experience.currentplace;
                            $scope.experience.current = 0;
                            if (isCurrent) {
                                $scope.experience.current = 1;
                            }
                            $scope.experience.initdate = $scope.experience.initmonth + "-" + $scope.experience.inityear;
                            $scope.experience.enddate = $scope.experience.endmonth + "-" + $scope.experience.endyear;

                            experience.$save().$then(function (data) {
                                $scope.experiences.$refresh();
                                $scope.experienceForm.$resetForm();
                                Helper.enableForm($scope, false);
                                var meta = data.$metadata.meta;
                                MessageService.setAlertMessage($scope, meta);
                            });
                        }
                    };

                    //delete
                    $scope.removeExperience = function (experience) {
                        $scope.experience = experience;
                        var confirmation = MessageService.setConfirmDeleteMessage(" experiencia", " ");
                        if (confirmation) {
                            experience.$destroy().$then(function (data) {
                                var meta = data.$response.data;
                                MessageService.setAlertMessage($scope, meta);
                            });
                        }
                    };

                    //change status
                    $scope.changeStatus = function ($event, experience) {
                        /*console.log(experience);*/
                        var checkbox = $event.target;
                        var action = (checkbox.checked ? true : false);

                        experience.status = action;
                        experience.$save().$then(function (data) {
                            $scope.experiences.$refresh();
                            var meta = data.$metadata.meta;
                            MessageService.setAlertMessage($scope, meta);
                        });
                    };

                }
            });

        }
    }

};
module.exports = experienceDirective;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/resume/experience.js","/resources/assets/js/admin/angular/directives/resume")

},{"_process":7,"buffer":3}],26:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var interestDirective = function(MessageService,Interest,$timeout,Helper){
    return {
        templateUrl:"../../js/admin/angular/templates/resume/interests.html",
        restrict:"EA",
        scope:{},
        controller:function($scope,$rootScope) {
            $scope.closeForm = function(){
                Helper.enableForm($scope,false);
            }
            Helper.enableForm($scope,false);
            $rootScope.$on('resumeChange',function(event,args){
                if(typeof args.resume !== "undefined") {
                    var resumeId = args.resume.id;
                    var interests = Interest.$search({resume_id: resumeId}).$then(function (data) {
                        $scope.interests = data;
                        if ($scope.interests.length == 0) {
                            MessageService.setNoItemsInfoMessage($scope, " intereses profesionales",
                                ". Pulsa el botón Nuevo para crear uno");
                        }
                    });

                    $scope.newInterest = function () {
                        Helper.enableForm($scope, true);
                        var interest = Interest.$build({resume_id: resumeId});
                        $scope.interest = interest;

                        $scope.updateInterest = function () {
                            interest.$save().$then(function (data) {
                                $scope.interests.$refresh();
                                $scope.interestForm.$resetForm();
                                Helper.enableForm($scope, false);
                                var meta = data.$metadata.meta;
                                MessageService.setAlertMessage($scope, meta);
                            });
                        }

                    };

                    $scope.editInterest = function (interest) {
                        Helper.enableForm($scope, true);
                        $scope.interest = interest;

                        $scope.updateInterest = function () {

                            interest.$save().$then(function (data) {
                                $scope.interests.$refresh();
                                $scope.interestForm.$resetForm();
                                Helper.enableForm($scope, false);
                                var meta = data.$metadata.meta;
                                MessageService.setAlertMessage($scope, meta);
                            });
                        }
                    };

                    //delete
                    $scope.removeInterest = function (interest) {
                        $scope.interest = interest;
                        var confirmation = MessageService.setConfirmDeleteMessage(" idioma", " ");
                        if (confirmation) {
                            interest.$destroy().$then(function (data) {
                                var meta = data.$response.data;
                                MessageService.setAlertMessage($scope, meta);
                            });
                        }
                    };

                    //change status
                    $scope.changeStatus = function ($event, interest) {
                        var checkbox = $event.target;
                        var action = (checkbox.checked ? true : false);

                        interest.status = action;
                        interest.$save().$then(function (data) {
                            $scope.interests.$refresh();
                            var meta = data.$metadata.meta;
                            MessageService.setAlertMessage($scope, meta);
                        });
                    };

                }
            });




        }
    }

}
module.exports = interestDirective;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/resume/interest.js","/resources/assets/js/admin/angular/directives/resume")

},{"_process":7,"buffer":3}],27:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var languageDirective = function(MessageService,Language,$timeout,Helper){
    return {
        templateUrl:"../../js/admin/angular/templates/resume/languages.html",
        restrict:"EA",
        scope:{},
        controller:function($scope,$rootScope) {
            $scope.closeForm = function(){
                Helper.enableForm($scope,false);
            }
            Helper.enableForm($scope,false);
            $rootScope.$on('resumeChange',function(event,args){
                if(typeof args.resume !== "undefined") {
                    var resumeId = args.resume.id;
                    var languages = Language.$search({resume_id: resumeId}).$then(function (data) {
                        $scope.languages = data;
                        if ($scope.languages.length == 0) {
                            MessageService.setNoItemsInfoMessage($scope, " idiomas",
                                ". Pulsa el botón Nuevo para crear uno");
                        }
                    });

                    $scope.newLanguage = function () {
                        Helper.enableForm($scope, true);
                        var language = Language.$build({resume_id: resumeId});
                        $scope.language = language;

                        $scope.updateLanguage = function () {
                            language.$save().$then(function (data) {
                                $scope.languages.$refresh();
                                $scope.languageForm.$resetForm();
                                Helper.enableForm($scope, false);
                                var meta = data.$metadata.meta;
                                MessageService.setAlertMessage($scope, meta);
                            });
                        }

                    };

                    $scope.editLanguage = function (language) {
                        Helper.enableForm($scope, true);
                        $scope.language = language;

                        $scope.updateLanguage = function () {

                            language.$save().$then(function (data) {
                                $scope.languages.$refresh();
                                $scope.languageForm.$resetForm();
                                Helper.enableForm($scope, false);
                                var meta = data.$metadata.meta;
                                MessageService.setAlertMessage($scope, meta);
                            });
                        }
                    };

                    //delete
                    $scope.removeLanguage = function (language) {
                        $scope.language = language;
                        var confirmation = MessageService.setConfirmDeleteMessage(" idioma", " ");
                        if (confirmation) {
                            language.$destroy().$then(function (data) {
                                var meta = data.$response.data;
                                MessageService.setAlertMessage($scope, meta);
                            });
                        }
                    };

                    //change status
                    $scope.changeStatus = function ($event, language) {
                        var checkbox = $event.target;
                        var action = (checkbox.checked ? true : false);

                        language.status = action;
                        language.$save().$then(function (data) {
                            $scope.languages.$refresh();
                            var meta = data.$metadata.meta;
                            MessageService.setAlertMessage($scope, meta);
                        });
                    };

                }
            });




        }
    }

}
module.exports = languageDirective;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/resume/language.js","/resources/assets/js/admin/angular/directives/resume")

},{"_process":7,"buffer":3}],28:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var resumeDirective = function(MessageService,Resume,$timeout,ResumeHelper){
    return {
        templateUrl:"../../js/admin/angular/templates/resume/resume.html",
        restrict:"EA",

        scope:{

        },
        controller:function($scope,$rootScope){

            $rootScope.$on('noResumeFound',function(){
                MessageService.setNoItemsInfoMessage($scope, " résumés",
                    ". Pulsa el botón Nuevo para crear");
            })
            $rootScope.$on('resumeChange',function(event,args){

                if(typeof args.resume !== "undefined")
                {
                    //biographies dropdown list
                    //ResumeHelper.bioDropDownList('/bio_drop_list',$scope);
                    //console.log(args);
                    var resumes = Resume.$search().$then(function (data) {
                        $scope.resumes = data;

                        if ($scope.resumes.length == 0) {
                            MessageService.setNoItemsInfoMessage($scope, " résumés",
                                ". Pulsa el botón Nuevo para crear uno");
                        }
                    });


                    var resume = Resume.$find(args.resume.id);
                    $scope.resume = resume;
                    $scope.updateResume = function () {
                        $scope.resume.$save().$then(function (data) {
                            var meta = data.$metadata.meta;
                            MessageService.setAlertMessage($scope, meta);
                            $scope.showResumeForm = false;
                        });
                    }
                }
            });

            $scope.newResume = function(){
                $scope.showedResumeForm = true;
                $rootScope.$emit("newResume");
            };

            $scope.deleteResume = function(resume){
                var confirmation = MessageService.setConfirmDeleteMessage(" résumé",". Todos las secciones del résumé serán eliminadas también...");
                if(confirmation) {
                    resume.$destroy().$then(function (data) {

                        var meta = data.$response.data;
                        MessageService.setAlertMessage($scope, meta);
                        $timeout(function () {
                            location.href = "/admin/resume"
                        }, 2000);

                    });
                }
            }

            $scope.publication = function(resume, toBePublished){
                if(toBePublished) {
                    resume.active = 1;
                    //publish resume
                    ResumeHelper.publishResume($scope,$rootScope,"/publish_resume/"+resume.id)
                }  else{
                    resume.active = 0;
                    resume.$save().$then(function(data){
                        var meta = data.$metadata.meta;
                        MessageService.setAlertMessage($scope,meta);
                    });
                }

            }

            $scope.setDefault = function(resume, isDefault){
                if(isDefault) {
                    resume.default = 1;
                    //publish resume
                    ResumeHelper.publishResume($scope,$rootScope,"/default_resume/"+resume.id)
                }  else{
                    resume.default = 0;
                    resume.$save().$then(function(data){
                        var meta = data.$metadata.meta;
                        MessageService.setAlertMessage($scope,meta);
                    });
                }

            }

            $scope.cloneResume = function(resume){
                ResumeHelper.cloneResume($scope,$rootScope,"/clone_resume/"+resume.id);
            }

            $scope.showResumeEditForm = function(resume){
                $scope.showedEditResumeForm = true;
                $rootScope.$emit("editResume",resume);
            }



            $scope.closeAfterUpdate = function(){
                $scope.showedEditResumeForm = false;
            }

            $scope.closeAfterCreate = function(){
                $scope.showedResumeForm = false;
            }

            /*$scope.$watch('$viewContentLoaded', function()
            {
                console.log("loading");
            });*/

        }
    }
}

module.exports = resumeDirective;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/resume/resumedirective.js","/resources/assets/js/admin/angular/directives/resume")

},{"_process":7,"buffer":3}],29:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var resumeEditDirective = function(MessageService,Resume,ResumeHelper,$timeout){
    return {
        templateUrl:"../../js/admin/angular/templates/resume/resumeeditform.html",
        restrict:"EA",
        scope:{

            close:"&close"
        },
        controller:function($scope,$rootScope){

            $rootScope.$on("editResume",function(event,resume){
                                //biographies dropdown list
                ResumeHelper.bioDropDownList('/bio_drop_list',$scope);
                $scope.resume = resume;
                var bioId = resume.biographyId;
                $scope.resume.biography_id = bioId.toString();
                //console.log($scope);
                $scope.closeForm = function(){
                    $scope.close();
                }
                //$scope.resume.biographyId = 1;//$scope.bios[$scope.resume.biography_id];
                $scope.saveResume = function(){

                    $scope.resume.$save().$then(function(data){
                        var meta = data.$metadata.meta;
                        MessageService.setAlertMessage($scope,meta);
                        $rootScope.$emit("updateResumeList");
                        $rootScope.$emit("resumeChange",data.$response.data);
                        $timeout(function(){
                            $scope.close(data);
                        },4000);

                        //$scope.$parent.showedEditResumeForm = false;
                    });
                }
            });


        }
    }
}

module.exports = resumeEditDirective;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/resume/resumeeditform.js","/resources/assets/js/admin/angular/directives/resume")

},{"_process":7,"buffer":3}],30:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var resumeCreationDirective = function(MessageService,Resume,ResumeHelper,$timeout){
    return {
        templateUrl:"../../js/admin/angular/templates/resume/resumeform.html",
        restrict:"EA",
        scope:{
            close:"&close"
        },
        controller:function($scope,$rootScope){
            $scope.closeForm = function(){
                $scope.close();
            }

            $rootScope.$on("newResume",function(){
                //biographies dropdown list
                ResumeHelper.bioDropDownList('/bio_drop_list',$scope);
                var resume = Resume.$build();
                $scope.resume = resume;


                $scope.createResume = function(){
                    //console.log(resume);
                    resume.$save().$then(function(data){
                        var meta = data.$metadata.meta;
                        MessageService.setAlertMessage($scope,meta);
                        $rootScope.$emit("updateResumeList");
                        $rootScope.$emit("resumeChange",data.$response.data);
                        $timeout(function(){
                            $scope.close(data);
                            //$scope.$destroy();
                        },4000);
                    });

                }

            });


        }
    }
}

module.exports = resumeCreationDirective;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/resume/resumeform.js","/resources/assets/js/admin/angular/directives/resume")

},{"_process":7,"buffer":3}],31:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var resumeList = function(MessageService,Resume,$timeout,Helper){
    return {
        templateUrl:"../../js/admin/angular/templates/resume/resumelist.html",
        restrict:"EA",
        scope:{},
        controller:function($scope,$rootScope) {
            $scope.closeForm = function(){
                Helper.enableForm($scope,false);
            }
            Helper.enableForm($scope,false);

                var resumes = Resume.$search().$then(function (data) {
                        $scope.resumes = data;
                        if ($scope.resumes.length == 0) {
                            MessageService.setNoItemsInfoMessage($scope, " résumés",
                                ". Pulsa el botón Nuevo para crear uno");
                        }
                    });

                    $scope.newResume = function () {



                    };

                    $scope.editResume = function (education) {

                    };

                    //delete
                    $scope.removeResume = function (education) {

                    };

                    //change status
                    $scope.setDefault = function ($event, resume) {
                        var checkbox = $event.target;
                        var action = (checkbox.checked ? true : false);

                        resume.default = action;
                        resume.$save().$then(function (data) {
                            $scope.resumes.$refresh();
                            var meta = data.$metadata.meta;
                            MessageService.setAlertMessage($scope, meta);
                        });
                    };

                    $scope.showDetail = function(resume){

                        var data = {
                            resume:{
                                id:resume.id
                            }
                        };
                        $rootScope.$emit("resumeChange",data);
                    }

        }
    }

}
module.exports = resumeList;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/resume/resumelist.js","/resources/assets/js/admin/angular/directives/resume")

},{"_process":7,"buffer":3}],32:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var contentSelector = function(MessageService){
    return {
        templateUrl:"../../js/admin/angular/templates/resume/resume_selector.html",
        restrict:"EA",
        scope:{},
        transclude:true,
        controller:function($scope,$timeout){
            $scope.infoResumeSelector = MessageService.get('resumeselector_info').message;
            //TODO get sections according to user resume

            var sections = [
                {alias:"Experiencia",link:"experience"},
                {alias:"Estudios",link:"study"},
                {alias:"Habilidades / Conocimientos",link:"skills"},
                {alias:"Idiomas",link:"languages"},
                {alias:"Intereses Profesionales",link:"personal"}
            ];
            $scope.sections = sections;


        }
    }
}

module.exports = contentSelector;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/resume/resumeselector.js","/resources/assets/js/admin/angular/directives/resume")

},{"_process":7,"buffer":3}],33:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var sectionsDirective = function(Resume){
    return {
        templateUrl:"../../js/admin/angular/templates/resume/sections.html",
        restrict:"EA",
        scope:{},

        controller:function($scope,$rootScope){
            $rootScope.$on('resumeChange',function(event,args) {

                if (typeof args.resume !== "undefined"){
                    var resume = Resume.$find(args.resume.id);
                    $scope.resume = resume.$resolve();
                    $rootScope.$broadcast("resumeChange2");



                 }
            });
        },
        link:function(scope,element){
            //$(element).effect("highlight", {}, 3000);
        }
    }

}
module.exports = sectionsDirective;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/resume/sections.js","/resources/assets/js/admin/angular/directives/resume")

},{"_process":7,"buffer":3}],34:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var skillDirective = function(MessageService,Skill,$timeout,Helper){
    return {
        templateUrl:"../../js/admin/angular/templates/resume/skills.html",
        restrict:"EA",
        scope:{},
        controller:function($scope,$rootScope) {
            $scope.closeForm = function(){
                Helper.enableForm($scope,false);
            }
            Helper.enableForm($scope,false);
            $rootScope.$on('resumeChange',function(event,args){
                if(typeof args.resume !== "undefined") {
                    var resumeId = args.resume.id;
                    var skills = Skill.$search({resume_id: resumeId}).$then(function (data) {
                        $scope.skills = data;
                        if ($scope.skills.length == 0) {
                            MessageService.setNoItemsInfoMessage($scope, " habilidades",
                                ". Pulsa el botón Nueva para crear una");
                        }
                    });

                    $scope.newSkill = function () {
                        Helper.enableForm($scope, true);
                        var skill = Skill.$build({resume_id: resumeId});
                        $scope.skill = skill;

                        $scope.updateSkill = function () {
                            skill.$save().$then(function (data) {
                                $scope.skills.$refresh();
                                $scope.skillForm.$resetForm();
                                Helper.enableForm($scope, false);
                                var meta = data.$metadata.meta;
                                MessageService.setAlertMessage($scope, meta);
                            });
                        }

                    };

                    $scope.editSkill = function (skill) {
                        Helper.enableForm($scope, true);
                        $scope.skill = skill;

                        $scope.updateSkill = function () {

                            skill.$save().$then(function (data) {
                                $scope.skills.$refresh();
                                $scope.skillForm.$resetForm();
                                Helper.enableForm($scope, false);
                                var meta = data.$metadata.meta;
                                MessageService.setAlertMessage($scope, meta);
                            });
                        }
                    };

                    //delete
                    $scope.removeSkill = function (skill) {
                        $scope.skill = skill;
                        var confirmation = MessageService.setConfirmDeleteMessage(" habilidad", " ");
                        if (confirmation) {
                            skill.$destroy().$then(function (data) {
                                var meta = data.$response.data;
                                MessageService.setAlertMessage($scope, meta);
                            });
                        }
                    };

                    //change status
                    $scope.changeStatus = function ($event, skill) {
                        var checkbox = $event.target;
                        var action = (checkbox.checked ? true : false);

                        skill.status = action;
                        skill.$save().$then(function (data) {
                            $scope.skills.$refresh();
                            var meta = data.$metadata.meta;
                            MessageService.setAlertMessage($scope, meta);
                        });
                    };

                }
            });




        }
    }

}
module.exports = skillDirective;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/resume/skill.js","/resources/assets/js/admin/angular/directives/resume")

},{"_process":7,"buffer":3}],35:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var saleableBasic = function(SaleableService){
    return {
        restrict:"EA",
        templateUrl:"../../js/admin/angular/templates/saleable_basic.html",
        replace:true,
        controller:"saleableBasicCtrl",
        scope:{}

    }
}
module.exports = saleableBasic;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/saleablebasic.js","/resources/assets/js/admin/angular/directives")

},{"_process":7,"buffer":3}],36:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var saleableDetails = function($templateCache,$compile,$rootScope){
    return {
        transclude: 'element'    ,
        restrict:"EA",
        templateUrl:"../../js/admin/angular/templates/saleable_details.html",
        replace:true,

        controller:"SaleableDetailCtrl",
        link:function(scope,$element,$attrs,$ctrl,transclude){
            $rootScope.$on("newBasicDetail",function(event) {
                $('#tabsf a[href="#pilltab1"]').tab('show');
            })

        }
    }
}
module.exports = saleableDetails;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/saleabledetails.js","/resources/assets/js/admin/angular/directives")

},{"_process":7,"buffer":3}],37:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var saleableBasic = function(){
    return {
        restrict:"EA",
        templateUrl:"../../js/admin/angular/templates/saleable_details_list.html",
        replace:true,
        scope:{saleable:"="},
        controller:"saleableAllDetailsCtrl"

    }
}
module.exports = saleableBasic;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/saleabledetailslist.js","/resources/assets/js/admin/angular/directives")

},{"_process":7,"buffer":3}],38:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var saleablePrices = function(){
    return {
        restrict:"EA",
        templateUrl:"../../js/admin/angular/templates/saleable_prices_list.html",
        replace:true,
        scope:{saleable:"="},
        controller:"saleablePriceCtrl"

    }
}
module.exports = saleablePrices
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/directives/saleablepriceslist.js","/resources/assets/js/admin/angular/directives")

},{"_process":7,"buffer":3}],39:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){

var homeController = function($scope,UserService,UserContentType){
    //console.log($scope);
    $scope.showAlert = true;
    $scope.noProfileMsge = 'Este es tu primera sesión en este panel de control. '+
    'Por favor, a continuación completa tus datos personales.'+
        'Si no deseas actualizar tus datos, puedes hacerlo en otro momento desde [Perfil] y'+
    'continuar con las otras opciones de este panel de control.';



}

module.exports = homeController;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/homecontroller.js","/resources/assets/js/admin/angular")

},{"_process":7,"buffer":3}],40:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var portfolioController = function($scope,$rootScope){
    $scope.shownProjectList = true;
    $scope.showProjectWizard = function(){
        $scope.shownProjectList = false;
        $scope.shownProjectWizard = true;

    }

    $scope.hideProjectWizard = function(){
        $scope.shownProjectList = true;
        $scope.shownProjectWizard = false;
    }



}

module.exports = portfolioController;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/portfoliocontroller.js","/resources/assets/js/admin/angular")

},{"_process":7,"buffer":3}],41:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var resumeController = function($scope,$rootScope,ResumeHelper,MessageService){

    ResumeHelper.getResumePub($scope,$rootScope,'/publishedresume');
    ResumeHelper.dropDownList('/resume_drop_list',$scope);
    $scope.resume = 89;

    $rootScope.$on("updateResumeList",function(){
        ResumeHelper.dropDownList('/resume_drop_list',$scope);
    });

    $scope.getResume = function(id){
        var data = {
          resume:{
              id:id
          }
        };
        //console.log(data);
        $rootScope.$emit("resumeChange",data);
    }

}

module.exports = resumeController;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/resumecontroller.js","/resources/assets/js/admin/angular")

},{"_process":7,"buffer":3}],42:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var saleableAllDetails = function($scope,$rootScope,SaleableDetailsService,MessageService,FileProcessor){

    $scope.onFileSelect = function($files) {
        $scope.files = $files;

    };
    $scope.hasIcon = false;
    var saleable_id = $scope.saleable.id;
    var details = SaleableDetailsService.$search({saleable_id:saleable_id}).$then(function(data){
        var items_number = data.length;

        if(items_number==0){
            //var linkToNew = ". Crea ya uno nuevo!";
            MessageService.setNoItemsInfoMessage($scope,"detalles"," .Crea uno nuevo!");
        }
    }).$resolve();
    $scope.saleable.details = details;

    var detail = SaleableDetailsService.$build();
    detail.saleable_id = saleable_id;
    detail.type = 0;
    $scope.detail = detail;


    $scope.updateDetail = function(){
        detail.$save().$then(function(data){
            var meta = data.$metadata.meta;
            MessageService.setAlertMessage($scope,meta);
            details.$refresh();
        });
    }

    $scope.editDetail=function(detail){
        $scope.files = [];
        //download detail icon to load
        FileProcessor.download($scope,'/saleabledetail/'+detail.id+'/icon');
        //$scope.descriptiveIcon = "";
        $scope.showDetailForm = true;
        $scope.detail = detail;
        $scope.updateDetail = function(){
            detail.$save().$then(function(data){
                var meta = data.$metadata.meta;
                MessageService.setAlertMessage($scope,meta);
                //upload file
                if($scope.files.length > 0){
                    FileProcessor.upload($scope,'/uploadSaleableDetailIcon',data.id);
                    $scope.files = [];
                }

            });
        }
    }

    $scope.newDetail = function(){
        $scope.hasIcon = false;
        $scope.showDetailForm = true;
        $scope.files = [];
        console.log($scope.files.length);
        //$scope.saleableDetailForm.$setPristine();
        var detail = SaleableDetailsService.$build();
        detail.saleable_id = saleable_id;
        detail.type = 0;
        $scope.detail = detail;

        $scope.updateDetail = function(){
            detail.$save().$then(function(data){
                var meta = data.$metadata.meta;
                MessageService.setAlertMessage($scope,meta);
                details.$refresh();
                if($scope.files.length > 0){
                    FileProcessor.upload($scope,'/uploadSaleableDetailIcon',data.id);
                    $scope.files = [];
                }


            });
        }
    }

    $scope.removeDetail = function(detail){
        var confirmation = MessageService.setConfirmDeleteMessage("detalle"," ");
        if(confirmation){
            detail.$destroy().$then(function(data){
                var meta = data.$response.data;
                MessageService.setAlertMessage($scope,meta);
                //$scope.saleableDetailForm.$setPristine();

                var detail = SaleableDetailsService.$build();
                detail.saleable_id = saleable_id;
                detail.type = 0;
                $scope.detail = detail;
                $scope.updateDetail = function(){
                    detail.$save().$then(function(data){
                        var meta = data.$metadata.meta;
                        MessageService.setAlertMessage($scope,meta);
                        details.$refresh();
                        //$rootScope.$emit('saleableUpdated');
                    });
                }

            });
        }
    }






}

module.exports = saleableAllDetails;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/saleablealldetailscontroller.js","/resources/assets/js/admin/angular")

},{"_process":7,"buffer":3}],43:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var saleableController = function($scope,$rootScope,$timeout,
                                  SaleableService,MessageService){
    $scope.master = {};

    var saleables = SaleableService.$search().$then(function(data){
        //console.log(data.length);
        var items_number = data.length;
        if(items_number==0){
            var linkToNew = ". Crea ya uno nuevo!";
            MessageService.setNoItemsInfoMessage($scope,"servicios o productos",linkToNew);

        }/*else{
            $scope.saleables = data;

        }*/
    });

    $scope.saleables = saleables;

    $scope.removeSaleable = function(saleable){
        var confirmation = MessageService.setConfirmDeleteMessage(" servicio o producto"," Se destruirán también todos sus detalles.");
        if(confirmation){
            saleable.$destroy().$then(function(data){
                var meta = data.$response.data;
                MessageService.setAlertMessage($scope,meta);
            });
        }
    }

    //Details
    //new: create a new details "wizard" instance
    $scope.newDetails = function(){
        $scope.showDetails = true;
        $rootScope.$broadcast('newDetails');
    }
    //edit: wizard, edit fashion
    $scope.editDetails = function(saleable){
        $scope.showDetails = true;
        $rootScope.$broadcast('editDetails',saleable);
    }

    //close wizard
    $scope.closeWizard = function(){
        $scope.showDetails = false;
        location.href = '/admin/services';
    }


}
module.exports = saleableController;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/saleablecontroller.js","/resources/assets/js/admin/angular")

},{"_process":7,"buffer":3}],44:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var saleableDetailCtrl = function($scope,$rootScope,SaleableService,MessageService,$element,$compile){

    $rootScope.$on('newDetails',function(){

        $scope.saleable = {};
        $rootScope.$broadcast('newBasicDetail');
    });

    $rootScope.$on('saleableCreated',function(event,data){
        $scope.saleables.$refresh();
        $scope.saleable = data;
    });
    $rootScope.$on('editDetails',function(event,saleable){
        $scope.saleable = saleable;
        $scope.saleables.$refresh();
        $rootScope.$broadcast('editBasicDetail',saleable);
    })


}

module.exports = saleableDetailCtrl;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/saleabledetailcontroller.js","/resources/assets/js/admin/angular")

},{"_process":7,"buffer":3}],45:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var saleablePrices = function($scope,$rootScope,SaleablePriceService,MessageService){

    /*var reset = function(){
        $scope.saleablePriceForm.$setPristine();
        $scope.price = angular.copy({});
    }*/

    var saleable_id = $scope.saleable.id;
    var prices = SaleablePriceService.$search({saleable_id:saleable_id}).$then(function(data){
        var items_number = data.length;
        if(items_number==0){
            //var linkToNew = ". Crea ya uno nuevo!";
            MessageService.setNoItemsInfoMessage($scope,"precios"," .Crea uno nuevo!");
        }
    }).$resolve();

    $scope.saleable.prices = prices;

    var price = SaleablePriceService.$build();
    price.saleable_id = saleable_id;
    $scope.price = price;

    $scope.updatePrice = function(){
        price.$save().$then(function(data){
            var meta = data.$metadata.meta;
            MessageService.setAlertMessage($scope,meta);
            prices.$refresh();
        });
    }

    $scope.editPrice=function(price){
        $scope.showPriceForm = true;
        $scope.price = price;
        $scope.updatePrice = function(){
            price.$save().$then(function(data){
                var meta = data.$metadata.meta;
                MessageService.setAlertMessage($scope,meta);
            });
        }
    }

    $scope.newPrice = function(){
        $scope.showPriceForm = true;
        //$scope.saleablePriceForm.$setPristine();
        var price = SaleablePriceService.$build();
        price.saleable_id = saleable_id;
        $scope.price = price;

        $scope.updatePrice = function(){
            price.$save().$then(function(data){
                var meta = data.$metadata.meta;
                MessageService.setAlertMessage($scope,meta);
                prices.$refresh();
                $scope.showPriceForm = false;
            });
        }
    }

    $scope.removePrice = function(price){
        var confirmation = MessageService.setConfirmDeleteMessage(" precio"," ");
        if(confirmation){
            price.$destroy().$then(function(data){
                var meta = data.$response.data;

                MessageService.setAlertMessage($scope,meta);
                //s$scope.saleablePriceForm.$setPristine();

                var price = SaleablePriceService.$build();
                price.saleable_id = saleable_id;
                $scope.price = price;
                $scope.updatePrice = function(){
                    price.$save().$then(function(data){
                        var meta = data.$metadata.meta;
                        MessageService.setAlertMessage($scope,meta);
                        prices.$refresh();
                        $scope.showPriceForm = false;
                    });
                }

            });
        }
    }






}

module.exports = saleablePrices;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/saleablepricescontroller.js","/resources/assets/js/admin/angular")

},{"_process":7,"buffer":3}],46:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){

var bioService = function(restmod){
    return restmod.model('/bio').mix('DefaultPacker',{
     $config:{jsonMeta: '.'}

     });
}
module.exports = bioService;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/services/biographyservice.js","/resources/assets/js/admin/angular/services")

},{"_process":7,"buffer":3}],47:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var categoryService = function(restmod){
    return restmod.model('/cat').mix('DefaultPacker',{
        $config:{jsonMeta: '.'}
    });
}
module.exports = categoryService;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/services/category.js","/resources/assets/js/admin/angular/services")

},{"_process":7,"buffer":3}],48:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var categoryHelper = function($http){

    return {
        categoryList:function(path,scope){
            $http.get(path).success(function(data){
                scope.catoptions = data.categories;
            }).error();
        },
        salCategoryList:function(path,scope){
            $http.get(path).success(function(data){
                var cats = data.categories;
                scope.saleable.categories = cats;
            }).error();
        },
        projectCategoryList:function(path,scope){
        $http.get(path).success(function(data){
            var cats = data.categories;
            scope.project.categories = cats;
        }).error();
    }

    }
}

module.exports = categoryHelper;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/services/categoryhelper.js","/resources/assets/js/admin/angular/services")

},{"_process":7,"buffer":3}],49:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var educationService = function(restmod){
    return restmod.model('/education').mix('DefaultPacker',{
        $config:{jsonMeta: '.'}
    });
}
module.exports = educationService;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/services/education.js","/resources/assets/js/admin/angular/services")

},{"_process":7,"buffer":3}],50:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var experienceService = function(restmod){
    return restmod.model('/experience').mix('DefaultPacker',{
        $config:{jsonMeta: '.'}
    });
}
module.exports = experienceService;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/services/experience.js","/resources/assets/js/admin/angular/services")

},{"_process":7,"buffer":3}],51:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var fileProcessor = function($upload,$http,MessageService,$timeout){
    return {
        upload:function(scope,path,data){

                var files = scope.files[0];
                scope.fileerrors = [];
                var numberOfFiles = scope.files.length;
                if(numberOfFiles > 1 && numberOfFiles < 8) {
                    files = scope.files;
                }else if(numberOfFiles > 7){
                    console.log("no cargue asiiiii");
                }
                console.log(files);
                for (var i = 0; i < scope.files.length; i++) {
                        var file = scope.files[i];
                        //var file = scope.files;
                        scope.upload = $upload.upload({
                            url: path, //upload.php script, node.js route, or servlet url
                            method: 'POST', //or 'PUT',
                            file: file,
                            data: data
                        }).progress(function(evt) {
                            scope.getPercentage = function () {
                                return parseInt(100.0 * evt.loaded / evt.total);
                            }
                        }).success(function(data) {
                            scope.hasIcon = true;
                            scope.descriptiveImage = data.img;
                            scope.getPercentage=function () {
                                return 0;
                            };
                            scope.images.$refresh();
                        }).error(function(data){
                            MessageService.setServerValidationMessage(scope);
                            scope.fileerrors.push(data);
                            $timeout(function(){
                                scope.fileerrors.splice(0,scope.fileerrors.length)
                            },10000);

                        });
                }


        },
        download:function(scope,path){
                $http.get(path).success(function(data){
                    scope.descriptiveImage = data.img;
                })
                .error(function(data){
                    console.log(data);
                });

        }


    }
}
module.exports = fileProcessor;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/services/fileprocessor.js","/resources/assets/js/admin/angular/services")

},{"_process":7,"buffer":3}],52:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var numberFormat = function(){
    return function(_value) {
        var numberFormatted = parseFloat(_value);
        return numberFormatted;
    }
}
module.exports = numberFormat;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/services/formatfilterservice.js","/resources/assets/js/admin/angular/services")

},{"_process":7,"buffer":3}],53:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var galleryService = function(restmod){
    return restmod.model('/galimage').mix('DefaultPacker',{
        $config:{jsonMeta: '.'}
    });
}
module.exports = galleryService;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/services/gallery.js","/resources/assets/js/admin/angular/services")

},{"_process":7,"buffer":3}],54:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var helperService = function(){
    return {
        months:function(){
            var months = ["enero","febrero","marzo","abril",
                "mayo","junio","julio","agosto",
                "septiembre","octubre","noviembre","diciembre"];
            return months;
        },
        enableForm:function(scope,status){
            if(status){
                scope.gridShown = false;
                scope.formShown = true;
            }else{
                scope.gridShown = true;
                scope.formShown = false;
            }
        },
        getCheckButtonStatus:function(event){
            var checkbox = event.target;
            var action = (checkbox.checked ? true: false);
            return action;
        }
    }
}
module.exports = helperService;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/services/helpers.js","/resources/assets/js/admin/angular/services")

},{"_process":7,"buffer":3}],55:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var HomeCallOutService = function(restmod){
    return restmod.model('/homecallout').mix('DefaultPacker',{
        $config:{jsonMeta: '.'}
    });
};
module.exports = HomeCallOutService;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/services/homecallout.js","/resources/assets/js/admin/angular/services")

},{"_process":7,"buffer":3}],56:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var interestService = function(restmod){
    return restmod.model('/interest').mix('DefaultPacker',{
        $config:{jsonMeta: '.'}
    });
}
module.exports = interestService;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/services/interest.js","/resources/assets/js/admin/angular/services")

},{"_process":7,"buffer":3}],57:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var languageService = function(restmod){
    return restmod.model('/language').mix('DefaultPacker',{
        $config:{jsonMeta: '.'}
    });
}
module.exports = languageService;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/services/language.js","/resources/assets/js/admin/angular/services")

},{"_process":7,"buffer":3}],58:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var messageService = function(Messages,$timeout){
    return {
        get:function (name) {
            return Messages.filter(function( obj ) {
            // coerce both obj.id and id to numbers
            // for val & type comparison
                //return +obj.name === +name;
                return obj.name === name;
            })[ 0 ];
        },
        setAlertMessage:function(scope,data){
            scope.ShowResultAlert = true;
            scope.result = data;
            $timeout(function(){
                scope.ShowResultAlert = false;
            },4000);
        },
        setServerValidationMessage:function(scope){
            scope.ShowServerErrors = true;
            scope.result = "Los datos no se pudieron guardar"+
                           " debido a los siguientes errores. Por favor corrígelos.";
            $timeout(function(){
                scope.ShowServerErrors = false;
            },5000);
        },
        setNoItemsInfoMessage:function(scope,datatype,additional){
            scope.showNoItemsAlert = true;
            scope.result = "No se han encontrado "+datatype+additional;
            $timeout(function(){
                scope.showNoItemsAlert = false;
            },8000);
        },
        setConfirmDeleteMessage:function(item, additional){
            return confirm("Realmente deseas eliminar este/a"+item+"?. "+additional+"");
        }

    }
};
module.exports = messageService;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/services/messageservice.js","/resources/assets/js/admin/angular/services")

},{"_process":7,"buffer":3}],59:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var newPassword = function($http){
    //$http.post();
    return {
        updatePassword:function(userId,data){
            return $http.post('/admin/newpassword/'+userId, data);
        }
    }

};

module.exports = newPassword;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/services/newpasswordservice.js","/resources/assets/js/admin/angular/services")

},{"_process":7,"buffer":3}],60:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){

var profileService = function(restmod){
    return restmod.model('/profile').mix('DefaultPacker',{
        $config:{jsonMeta: '.'}
    });
}
module.exports = profileService;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/services/profileservice.js","/resources/assets/js/admin/angular/services")

},{"_process":7,"buffer":3}],61:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var projectService = function(restmod){
    return restmod.model('/project').mix('DefaultPacker',{
        $config:{jsonMeta: '.'}
    });
}
module.exports = projectService;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/services/project.js","/resources/assets/js/admin/angular/services")

},{"_process":7,"buffer":3}],62:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var resumeHelper = function($http,MessageService){

    return {
        dropDownList:function(path,scope){
            $http.get(path).success(function(data){
                scope.resumes = data.resumes;
                scope.resume = scope.resumes[89];
            }).error();
        },
        bioDropDownList:function(path,scope){
            $http.get(path).success(function(data){
                scope.bios = data.bios;
            }).error();
        },
        getResumePub:function(scope,rootScope,path){

            $http.get(path).success(function(data){

                var resume = data.resume;

                if(resume === null) {
                    rootScope.$emit("noResumeFound");
                }else{

                    rootScope.$emit("resumeChange", data);
                }
            });

        },
        publishResume:function(scope,rootScope,path){
            $http.post(path).success(function(data){
                var meta = data.meta;
                MessageService.setAlertMessage(scope,meta);
            }).error();

        },
        cloneResume:function(scope,rootScope,path){
            $http.post(path).success(function(data){
                rootScope.$emit("resumeChange",data);
                rootScope.$emit("updateResumeList",data);
                var meta = data.meta;
                MessageService.setAlertMessage(scope,meta);

            }).error();
        }
        /*unpublishResume:function(scope,rootScope,path){
            $http.post(path).success(function(data){
                console.log("unpu");
            }).error();
        }*/
    }
}

module.exports = resumeHelper;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/services/resumehelper.js","/resources/assets/js/admin/angular/services")

},{"_process":7,"buffer":3}],63:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var resumeService = function(restmod){
    return restmod.model('/resume').mix('DefaultPacker',{
        $config:{jsonMeta: '.'}
    });
}
module.exports = resumeService;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/services/resumeservice.js","/resources/assets/js/admin/angular/services")

},{"_process":7,"buffer":3}],64:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var seleableDetails = function(restmod){
    return restmod.model('/saleabledetail').mix('DefaultPacker',{
        $config:{jsonMeta: '.'}
    });
}
module.exports = seleableDetails;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/services/saleabledetails.js","/resources/assets/js/admin/angular/services")

},{"_process":7,"buffer":3}],65:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var seleablePrice = function(restmod){
    return restmod.model('/saleableprice').mix('DefaultPacker',{
        $config:{jsonMeta: '.'}
    }).mix({
        ammount: {decode:'NumberFormat'},
        discount:{decode:'NumberFormat'}
    });
}
module.exports = seleablePrice;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/services/saleableprice.js","/resources/assets/js/admin/angular/services")

},{"_process":7,"buffer":3}],66:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var seleableService = function(restmod){
    return restmod.model('/saleable').mix('DefaultPacker',{
        $config:{jsonMeta: '.'}
    });
}
module.exports = seleableService;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/services/saleableservice.js","/resources/assets/js/admin/angular/services")

},{"_process":7,"buffer":3}],67:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var skillService = function(restmod){
    return restmod.model('/skill').mix('DefaultPacker',{
        $config:{jsonMeta: '.'}
    });
}
module.exports = skillService;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/services/skill.js","/resources/assets/js/admin/angular/services")

},{"_process":7,"buffer":3}],68:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var thePacker =  function() {

    function MyPacker(_model) {
        //this.meta = _model.$getProperty('jsonMeta', 'meta');
        console.log(_model);
        // you can set some model specific behaviour here, like the property being extracted.
    }

    MyPacker.prototype = {
        unPack: function(_rawData, _record) {
            console.log(_rawData);
            _record.$metadata = _rawData; // store metadata associated with request
            return _rawData.myProp; // extract property from request data.
        },
        unPackMany: function(_rawData, _collection) {

            _collection.$metadata = _rawData; // store metadata associated with request
            return _collection.myProp; // extract property from request data.
        }
    };

    return MyPacker;
};
module.exports = thePacker;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/services/thepacker.js","/resources/assets/js/admin/angular/services")

},{"_process":7,"buffer":3}],69:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var userContentType = function(restmod){
    return restmod.model('/usercontenttype').mix('DefaultPacker',{
        $config:{jsonMeta: '.'}
    });
}

module.exports = userContentType;



}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/services/usercontenttypeservice.js","/resources/assets/js/admin/angular/services")

},{"_process":7,"buffer":3}],70:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){

var userService = function(restmod){
    return restmod.model('/user').mix('DefaultPacker',{
        $config:{jsonMeta: '.'}
    });
}
module.exports = userService;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/services/userservice.js","/resources/assets/js/admin/angular/services")

},{"_process":7,"buffer":3}],71:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var userController = function($scope,$timeout,UserService, ProfileService,MessageService,NewPassword){

    var user = UserService.$find(0);
    var profile = ProfileService.$find(0);
    $scope.profile = profile.$fetch();
    $scope.user = user.$fetch();

    $scope.updateUser = function(){

        user.$save().$then(function(data){
            var meta = data.$metadata.meta;
            MessageService.setAlertMessage($scope,meta);
        },function(data){
            $scope.errors = data.$response.data;
            MessageService.setServerValidationMessage($scope);
        });
    }

    $scope.updatePassword = function(){
        var changedPassword = {
          password:$scope.password
        };
        var newPassword = NewPassword.updatePassword(user.id,changedPassword);
        newPassword.success(function(data){
            var meta = data.meta;
            MessageService.setAlertMessage($scope,meta);
            $timeout(function(){
                $scope.password = "";
                $scope.showPasswordChange = false;
            },4000);
        });
    }
    $scope.updatePersonalInfo = function(){
        profile.$save().$then(function(data){
            var meta = data.$metadata.meta;
            MessageService.setAlertMessage($scope,meta);
        },function(data){
            $scope.errors = data.$response.data;
            MessageService.setServerValidationMessage($scope);
        });
    }
    $scope.updateSocialInfo = function(){
        profile.$save().$then(function(data){
            var meta = data.$metadata.meta;
            MessageService.setAlertMessage($scope,meta);
        },function(data){
            $scope.errors = data.$response.data;
            MessageService.setServerValidationMessage($scope);
        });
    }

}

module.exports = userController;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/admin/angular/usercontroller.js","/resources/assets/js/admin/angular")

},{"_process":7,"buffer":3}],72:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var stc_messages = function () {
    return [

        {
            "code": 701,
            "name":"contentselector_info",
            "message": 'Activa las opciones que quieres que aparezcan en tu sitio Web.'+
            'Por ejemplo, si no es tu objetivo mostrar Servicios a tus visitantes, puedes desactivar la casilla "Servicios" y ese contenido no se mostrará.',
            "type": "info"
        },
        {
            "code": 702,
            "name":"resumeselector_info",
            "message": 'Pulsa la opción para ir a la sección del Résumé indicada',
            "type": "info"
        },

    ]

};
module.exports = stc_messages;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/js/config/messages.js","/resources/assets/js/config")

},{"_process":7,"buffer":3}],73:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*
 AngularJS v1.3.13
 (c) 2010-2014 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(r,f,s){'use strict';f.module("ngMessages",[]).directive("ngMessages",["$compile","$animate","$templateRequest",function(q,k,l){return{restrict:"AE",controller:function(){this.$renderNgMessageClasses=f.noop;var b=[];this.registerMessage=function(d,a){for(var c=0;c<b.length;c++)if(b[c].type==a.type){if(d!=c){var g=b[d];b[d]=b[c];d<b.length?b[c]=g:b.splice(0,c)}return}b.splice(d,0,a)};this.renderMessages=function(d,a){d=d||{};var c;f.forEach(b,function(b){var e;if(e=!c||a)e=d[b.type],e=null!==
e&&!1!==e&&e;e?(b.attach(),c=!0):b.detach()});this.renderElementClasses(c)}},require:"ngMessages",link:function(b,d,a,c){c.renderElementClasses=function(b){b?k.setClass(d,"ng-active","ng-inactive"):k.setClass(d,"ng-inactive","ng-active")};var g=f.isString(a.ngMessagesMultiple)||f.isString(a.multiple),e;b.$watchCollection(a.ngMessages||a["for"],function(b){e=b;c.renderMessages(b,g)});(a=a.ngMessagesInclude||a.include)&&l(a).then(function(a){var h;a=f.element("<div/>").html(a);f.forEach(a.children(),
function(a){a=f.element(a);h?h.after(a):d.prepend(a);h=a;q(a)(b)});c.renderMessages(e,g)})}}}]).directive("ngMessage",["$animate",function(f){return{require:"^ngMessages",transclude:"element",terminal:!0,restrict:"AE",link:function(k,l,b,d,a){for(var c,g,e=l[0],n=e.parentNode,h=0,p=0;h<n.childNodes.length;h++){var m=n.childNodes[h];if(8==m.nodeType&&0<=m.nodeValue.indexOf("ngMessage")){if(m===e){c=p;break}p++}}d.registerMessage(c,{type:b.ngMessage||b.when,attach:function(){g||a(k,function(a){f.enter(a,
null,l);g=a})},detach:function(a){g&&(f.leave(g),g=null)}})}}}])})(window,window.angular);
//# sourceMappingURL=angular-messages.min.js.map

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/vendor/angular-messages/angular-messages.min.js","/resources/assets/vendor/angular-messages")

},{"_process":7,"buffer":3}],74:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/**
 * API Bound Models for AngularJS
 * @version v1.1.7 - 2015-01-06
 * @link https://github.com/angular-platanus/restmod
 * @author Ignacio Baixas <ignacio@platan.us>
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */

(function(angular, undefined) {
'use strict';
/**
 * Angular inflection library
 * @version v0.2.0 - 2014-08-22
 * @link https://github.com/platanus/angular-inflector
 * @author Ignacio Baixas <ignacio@platan.us>
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */

(function(angular, undefined) {
angular.module('platanus.inflector', [])
  /**
   * @class inflectorProvider
   *
   * @description
   *
   * The inflectorProvider exposes inflector configuration options, mainly related to locales.
   */
  .provider('inflector', [function () {

    var activeLocale = 'en', localeMap = {
      /**
       * English transformation rules.
       *
       * Taken from https://code.google.com/p/inflection-js/source/browse/trunk/inflection.js
       */
      en: {
        uncountable: [
          'music', 'art', 'love', 'happiness', 'advice', 'furniture', 'luggage',
          'sugar', 'butter', 'water', 'electricity', 'gas', 'power', 'currency',
          'equipment', 'information', 'rice', 'money', 'species', 'series',
          'fish', 'sheep', 'moose', 'deer', 'news'
        ],

        plural: [
          [new RegExp('(m)an$', 'gi'),                 '$1en'],
          [new RegExp('(pe)rson$', 'gi'),              '$1ople'],
          [new RegExp('(child)$', 'gi'),               '$1ren'],
          [new RegExp('^(ox)$', 'gi'),                 '$1en'],
          [new RegExp('(ax|test)is$', 'gi'),           '$1es'],
          [new RegExp('(octop|vir)us$', 'gi'),         '$1i'],
          [new RegExp('(alias|status)$', 'gi'),        '$1es'],
          [new RegExp('(bu)s$', 'gi'),                 '$1ses'],
          [new RegExp('(buffal|tomat|potat)o$', 'gi'), '$1oes'],
          [new RegExp('([ti])um$', 'gi'),              '$1a'],
          [new RegExp('sis$', 'gi'),                   'ses'],
          [new RegExp('(?:([^f])fe|([lr])f)$', 'gi'),  '$1$2ves'],
          [new RegExp('(hive)$', 'gi'),                '$1s'],
          [new RegExp('([^aeiouy]|qu)y$', 'gi'),       '$1ies'],
          [new RegExp('(x|ch|ss|sh)$', 'gi'),          '$1es'],
          [new RegExp('(matr|vert|ind)ix|ex$', 'gi'),  '$1ices'],
          [new RegExp('([m|l])ouse$', 'gi'),           '$1ice'],
          [new RegExp('(quiz)$', 'gi'),                '$1zes'],
          [new RegExp('s$', 'gi'),                     's'],
          [new RegExp('$', 'gi'),                      's']
        ],

        singular: [
          [new RegExp('(m)en$', 'gi'),                                                       '$1an'],
          [new RegExp('(pe)ople$', 'gi'),                                                    '$1rson'],
          [new RegExp('(child)ren$', 'gi'),                                                  '$1'],
          [new RegExp('([ti])a$', 'gi'),                                                     '$1um'],
          [new RegExp('((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$','gi'), '$1$2sis'],
          [new RegExp('(hive)s$', 'gi'),                                                     '$1'],
          [new RegExp('(tive)s$', 'gi'),                                                     '$1'],
          [new RegExp('(curve)s$', 'gi'),                                                    '$1'],
          [new RegExp('([lr])ves$', 'gi'),                                                   '$1f'],
          [new RegExp('([^fo])ves$', 'gi'),                                                  '$1fe'],
          [new RegExp('([^aeiouy]|qu)ies$', 'gi'),                                           '$1y'],
          [new RegExp('(s)eries$', 'gi'),                                                    '$1eries'],
          [new RegExp('(m)ovies$', 'gi'),                                                    '$1ovie'],
          [new RegExp('(x|ch|ss|sh)es$', 'gi'),                                              '$1'],
          [new RegExp('([m|l])ice$', 'gi'),                                                  '$1ouse'],
          [new RegExp('(bus)es$', 'gi'),                                                     '$1'],
          [new RegExp('(o)es$', 'gi'),                                                       '$1'],
          [new RegExp('(shoe)s$', 'gi'),                                                     '$1'],
          [new RegExp('(cris|ax|test)es$', 'gi'),                                            '$1is'],
          [new RegExp('(octop|vir)i$', 'gi'),                                                '$1us'],
          [new RegExp('(alias|status)es$', 'gi'),                                            '$1'],
          [new RegExp('^(ox)en', 'gi'),                                                      '$1'],
          [new RegExp('(vert|ind)ices$', 'gi'),                                              '$1ex'],
          [new RegExp('(matr)ices$', 'gi'),                                                  '$1ix'],
          [new RegExp('(quiz)zes$', 'gi'),                                                   '$1'],
          [new RegExp('s$', 'gi'),                                                           '']
        ]
      }
    };

    // helper function used by singularize and pluralize
    function applyRules(_string, _ruleSet, _skip) {

      if(_skip.indexOf(_string.toLowerCase()) === -1) {
        var i = 0, rule;
        while(rule = _ruleSet[i++]) {
          if(_string.match(rule[0])) {
            return _string.replace(rule[0], rule[1]);
          }
        }
      }

      return _string;
    }

    return {

      /**
       * @memberof inflectorProvider#
       *
       * @description
       *
       * Registers a new locale, see the default english locale implementation for information about the required structure.
       *
       * @param {string} _locale Locale name
       * @param {object} _def Locale definition
       */
      registerLocale: function(_locale, _def) {
        localeMap[_locale] = _def;
      },

      /**
       * @memberof inflectorProvider#
       *
       * @description
       *
       * Sets the default locale, defaults to 'en'
       *
       * @param {string} _locale Locale name
       */
      setLocale: function(_locale) {
        activeLocale = _locale;
      },

      /**
       * @class inflector
       *
       * @description
       *
       * The inflector service provides a set of string transformation methods.
       */
      $get: ['$log', function($log) {

        function loadRulesFor(_locale) {
          _locale = _locale || activeLocale;
          var rules = localeMap[_locale];
          if(!rules) $log.warn('Invalid inflector locale ' + _locale);
          return rules;
        }

        return {

          /**
           * @memberof inflector#
           *
           * @description
           *
           * Transform a string to camelcase, removing every space, dash and underscore
           *
           * @param {string} _string String to transform
           * @param {boolean} _constant If set to false, first letter is not uppercased, defaults to false.
           * @return {string} The transformed string
           */
          camelize: function(_string, _constant) {
            if (typeof _string !== 'string') return _string;
            return _string.replace(/(?:^[-_\s]*|[-_\s]+)([A-Z\d])/gi, function (match, _first, _index) {
              return (!_constant && _index === 0) ? _first : _first.toUpperCase();
            });
          },

          /**
           * @memberof inflector#
           *
           * @description
           *
           * Transforms a camelcase string to a snakecase string
           *
           * @param {string} _string String to transform
           * @param {string} _sep Separator, defaults to '-'
           * @return {string} The transformed string
           */
          parameterize: function(_string, _sep) {
            if (typeof _string !== 'string') return _string;
            return _string.replace(/(?:[A-Z]+|[0-9]+)/g, function (_match, _index) {
              return _index === 0 ? _match : (_sep || '-') + _match;
            }).toLowerCase();
          },

          /**
           * @memberof inflector#
           *
           * @description
           *
           * Transforms a string to snakecase, replaces every space, dash and undercore by the provided separator.
           *
           * @param {string} _string String to transform
           * @param {string} _sep Separator, defaults to '-'
           * @return {string} The transformed string
           */
          dasherize: function(_string, _sep) {
            return _string.replace(/[-_\s]+/g, _sep || '-');
          },

          /**
           * @memberof inflector#
           *
           * @description
           *
           * Transforms a string to its singular form.
           *
           * @param {string} _string String to transform
           * @param {string} _locale) Locale to use, defaults to the default locale
           * @return {string} The transformed string
           */
          singularize: function(_string, _locale) {
            var rules = loadRulesFor(_locale);
            return rules ? applyRules(_string, rules.singular, rules.uncountable) : _string;
          },

          /**
           * @memberof inflector#
           *
           * @description
           *
           * Transforms a string to its plural form.
           *
           * @param {string} _string String to transform
           * @param {string} _locale) Locale to use, defaults to the default locale
           * @return {string} The transformed string
           */
          pluralize: function(_string, _locale) {
            var rules = loadRulesFor(_locale);
            return rules ? applyRules(_string, rules.plural, rules.uncountable) : _string;
          }
        };

      }]
    };
  }]);

})(angular);
// Preload some angular stuff
var RMModule = angular.module('restmod', ['ng', 'platanus.inflector']);

/**
 * @class restmodProvider
 *
 * @description
 *
 * The restmodProvider exposes restmod configuration methods
 */
RMModule.provider('restmod', [function() {

  var BASE_CHAIN = ['RMBuilderExt', 'RMBuilderRelations', 'RMBuilderComputed'];

  function wrapInInvoke(_mixin) {
    return function(_injector) {
      _injector.invoke(_mixin, this, { $builder: this });
    };
  }

  return {
    /**
     * @memberof restmodProvider#
     *
     * @description
     *
     * Adds base mixins for every generated model.
     *
     * **ATTENTION** Model names should NOT be added to this chain.
     *
     * All mixins added to the chain are prepended to every generated model.
     *
     * Usage:
     *
     * ```javascript
     * $provider.rebase('ChangeModel', 'LazyRelations', 'ThrottledModel')
     * ```
     */
    rebase: function(/* _mix_names */) {
      var mixin, i, l = arguments.length;
      for(i = 0; i < l; i++) {
        mixin = arguments[i];
        if(angular.isArray(mixin) || angular.isFunction(mixin)) {
          mixin = wrapInInvoke(mixin);
        }
        BASE_CHAIN.push(mixin);
      }
      return this;
    },

    /**
     * @class restmod
     *
     * @description
     *
     * The restmod service provides factory methods for the different restmod consumables.
     */
    $get: ['RMModelFactory', '$log', function(buildModel, $log) {

      var arraySlice = Array.prototype.slice;

      var restmod = {
        /**
         * @memberOf restmod#
         *
         * @description
         *
         * The model factory is used to generate new restmod model types. It's recommended to put models inside factories,
         * this is usefull later when defining relations and inheritance, since the angular $injector is used by
         * these features. It's also the angular way of doing things.
         *
         * A simple model can be built like this:
         *
         * ```javascript
         * angular.module('bike-app').factory('Bike', function(restmod) {
         *   return restmod.model('/bikes');
         * });
         *```
         *
         * The `_url` parameter is the resource url the generated model will be bound to, if `null` is given then
         * the model is *nested* and can only be used in another model context.
         *
         * The model also accepts one or more definition providers as one or more arguments after the _url parameter,
         * posible definition providers are:
         *
         * * A definition object (more on this at the {@link BuilderApi}):
         *
         * ```javascript
         * restmod.model('/bikes', {
         *   viewed: { init: false },
         *   parts: { hasMany: 'Part' },
         *   '~afterCreate': function() {
         *     alert('Bike created!!');
         *   }
         * });
         *```
         *
         * * A definition function (more on this at the {@link BuilderApi}):
         *
         * ```javascript
         * restmod.model('/bikes', function() {
         *   this.attrDefault('viewed', false);
         *   this.attrMask('id', 'CU');
         * });
         *```
         *
         * * A mixin (generated using the mixin method) or model factory name:
         *
         * ```javascript
         * restmod.model('/bikes', 'BaseModel', 'PagedModel');
         *```
         *
         * * A mixin (generated using the mixin method) or model object:
         *
         * ```javascript
         * restmod.model('/bikes', BaseModel, PagedModel);
         * ```
         *
         * @param {string} _url Resource url.
         * @param {mixed} _mix One or more mixins, description objects or description blocks.
         * @return {StaticApi} The new model.
         */
        model: function(_baseUrl/* , _mix */) {
          var model = buildModel(_baseUrl, BASE_CHAIN);

          if(arguments.length > 1) {
            model.mix(arraySlice.call(arguments, 1));
            $log.warn('Passing mixins and difinitions in the model method will be deprecated in restmod 1.2, use restmod.model().mix() instead.');
          }

          return model;
        },

        /**
         * @memberOf restmod#
         *
         * @description
         *
         * The mixin factory is used to pack model behaviors without the overload of generating a new
         * model. The mixin can then be passed as argument to a call to {@link restmod#model#model}
         * to extend the model capabilities.
         *
         * A mixin can also be passed to the {@link restmodProvider#rebase} method to provide
         * a base behavior for all generated models.
         *
         * @param {mixed} _mix One or more mixins, description objects or description blocks.
         * @return {object} The mixin
         */
        mixin: function(/* _mix */) {
          return { $isAbstract: true, $$chain: arraySlice.call(arguments, 0) };
        },

        /**
         * @memberOf restmod#
         *
         * @description
         *
         * Shorcut method used to create singleton resources.
         *
         * Same as calling `restmod.model(null).$single(_url)`
         *
         * Check the {@link StaticApi#$single} documentation for more information.
         *
         * @param {string} _url Resource url,
         * @param {mixed} _mix Mixin chain.
         * @return {RecordApi} New resource instance.
         */
        singleton: function(_url/*, _mix */) {
          return restmod.model.apply(this, arguments).single(_url);
        }
      };

      return restmod;
    }]
  };
}])
.factory('model', ['restmod', function(restmod) {
  return restmod.model;
}])
.factory('mixin', ['restmod', function(restmod) {
  return restmod.mixin;
}]);

RMModule.factory('RMCollectionApi', ['RMUtils', function(Utils) {

  var extend = angular.extend;

  /**
   * @class CollectionApi
   *
   * @extends ScopeApi
   * @extends CommonApi
   *
   * @description
   *
   * A restmod collection is an extended array type bound REST resource route.
   *
   * Every time a new restmod model is created, an associated collection type is created too.
   *
   * TODO: talk about fetch/refresh behaviour, lifecycles, collection scopes, adding/removing
   *
   * For `$fetch` on a collection:
   *
   * * before-fetch-many
   * * before-request
   * * after-request[-error]
   * * after-feed (called for every record if no errors)
   * * after-feed-many (only called if no errors)
   * * after-fetch-many[-error]
   *
   * @property {boolean} $isCollection Helper flag to separate collections from the main type
   * @property {object} $scope The collection scope (hierarchical scope, not angular scope)
   * @property {object} $params The collection query parameters
   *
   */
  return {

    $isCollection: true,

    /**
     * @memberof CollectionApi#
     *
     * @description Called by collection constructor on initialization.
     *
     * Note: Is better to add a hook on after-init than overriding this method.
     */
    $initialize: function() {
      // after initialization hook
      this.$dispatch('after-collection-init');
    },

    /**
     * @memberof CollectionApi#
     *
     * @description Feeds raw collection data into the collection.
     *
     * This method is for use in collections only.
     *
     * @param {array} _raw Data to add
     * @param  {string} _mask 'CRU' mask
     * @return {CollectionApi} self
     */
    $decode: function(_raw, _mask) {

      Utils.assert(_raw && angular.isArray(_raw), 'Collection $decode expected array');

      for(var i = 0, l = _raw.length; i < l; i++) {
        this.$buildRaw(_raw[i], _mask).$reveal(); // build and disclose every item.
      }

      this.$dispatch('after-feed-many', [_raw]);
      return this;
    },

    /**
     * @memberof CollectionApi#
     *
     * @description Encodes array data into a its serialized version.
     *
     * @param  {string} _mask 'CRU' mask
     * @return {CollectionApi} self
     */
    $encode: function(_mask) {
      var raw = [];
      for(var i = 0, l = this.length; i < l; i++) {
        raw.push(this[i].$encode(_mask));
      }

      this.$dispatch('before-render-many', [raw]);
      return raw;
    },

    /**
     * @memberof CollectionApi#
     *
     * @description Resets the collection's contents
     *
     * @return {CollectionApi} self
     */
    $clear: function() {
      return this.$always(function() {
        this.length = 0; // reset the collection contents
      });
    },

    /**
     * @memberof CollectionApi#
     *
     * @description Begin a server request to populate collection. This method does not
     * clear the collection contents by default, use `$refresh` to reset and fetch.
     *
     * This method is for use in collections only.
     *
     * @param {object|function} _params Additional request parameters, not stored in collection,
     * if a function is given, then it will be called with the request object to allow requet customization.
     * @return {CollectionApi} self
     */
    $fetch: function(_params) {
      return this.$action(function() {
        var request = { method: 'GET', url: this.$url('fetchMany'), params: this.$params };

        if(_params) {
          request.params = request.params ? extend(request.params, _params) : _params;
        }

        // TODO: check that collection is bound.

        this
          .$dispatch('before-fetch-many', [request])
          .$send(request, function(_response) {
            this
              .$unwrap(_response.data)
              .$dispatch('after-fetch-many', [_response]);
          }, function(_response) {
            this.$dispatch('after-fetch-many-error', [_response]);
          });
      });
    },

    /**
     * @memberof CollectionApi#
     *
     * @description Adds an item to the back of the collection. This method does not attempt to send changes
     * to the server. To create a new item and add it use $create or $build.
     *
     * Triggers after-add callbacks.
     *
     * @param {RecordApi} _obj Item to be added
     * @return {CollectionApi} self
     */
    $add: function(_obj, _idx) {
      Utils.assert(_obj.$type && _obj.$type === this.$type, 'Collection $add expects record of the same $type');

      return this.$action(function() {
        if(_obj.$position === undefined) {
          if(_idx !== undefined) {
            this.splice(_idx, 0, _obj);
          } else {
            this.push(_obj);
          }
          _obj.$position = true; // use true for now, keeping position updated can be expensive
          this.$dispatch('after-add', [_obj]);
        }
      });
    },

    /**
     * @memberof CollectionApi#
     *
     * @description  Removes an item from the collection.
     *
     * This method does not send a DELETE request to the server, it just removes the
     * item locally. To remove an item AND send a DELETE use the item's $destroy method.
     *
     * Triggers after-remove callbacks.
     *
     * @param {RecordApi} _obj Item to be removed
     * @return {CollectionApi} self
     */
    $remove: function(_obj) {
      return this.$action(function() {
        var idx = this.$indexOf(_obj);
        if(idx !== -1) {
          this.splice(idx, 1);
          _obj.$position = undefined;
          this.$dispatch('after-remove', [_obj]);
        }
      });
    },

    /**
     * @memberof CollectionApi#
     *
     * @description Finds the location of an object in the array.
     *
     * If a function is provided then the index of the first item for which the function returns true is returned.
     *
     * @param {RecordApi|function} _obj Object to find
     * @return {number} Object index or -1 if not found
     */
    $indexOf: function(_obj) {
      var accept = typeof _obj === 'function' ? _obj : false;
      for(var i = 0, l = this.length; i < l; i++) {
        if(accept ? accept(this[i]) : this[i] === _obj) return i;
      }
      return -1;
    }
  };

}]);
RMModule.factory('RMCommonApi', ['$http', 'RMFastQ', '$log', function($http, $q, $log) {

  var EMPTY_ARRAY = [];

  function wrapPromise(_ctx, _fun) {
    var dsp = _ctx.$dispatcher();
    return function(_last) {
      // save and reset promise
      var oldPromise = _ctx.$promise;
      _ctx.$promise = undefined;
      try {
        _ctx.$last = _last;
        var result = dsp ? _ctx.$decorate(dsp, _fun, [_ctx]) : _fun.call(_ctx, _ctx);
        return result === undefined ? _ctx.$promise : result;
      } finally {
        _ctx.$promise = oldPromise; // restore old promise
      }
    };
  }

  /**
   * @class CommonApi
   *
   * @description
   *
   * Provides a common framework for restmod resources.
   *
   * This API is included in {@link RecordApi} and {@link CollectionApi}.
   * making its methods available in every structure generated by restmod.
   *
   * TODO: Describe hook mechanism, promise mechanism and send lifecycle.
   *
   * @property {promise} $promise The last operation promise (undefined if no promise has been created yet)
   * @property {array} $pending Pending requests associated to this resource (undefined if no request has been initiated)
   * @property {object} $$cb Scope call backs (undefined if no callbacks have been defined, private api)
   * @property {function} $$dsp The current event dispatcher (private api)
   */
  var CommonApi = {

    /**
     * @memberof CommonApi#
     *
     * @description Gets this resource url.
     *
     * @param {string} _for Intended usage for the url (optional)
     * @return {string} The resource url.
     */
    $url: function(_for) {
      if(_for) {
        _for = '$' + _for + 'UrlFor';
        if(this.$scope[_for]) return this.$scope[_for](this);
      } else if(this.$scope.$canonicalUrlFor) {
        return this.$scope.$canonicalUrlFor(this);
      }

      return this.$scope.$urlFor(this);
    },

    // Hooks API

    /**
     * @memberof CommonApi#
     *
     * @description Executes a given hook callbacks using the current dispatcher context.
     *
     * This method can be used to provide custom object lifecycle hooks.
     *
     * Usage:
     *
     * ```javascript
     * var mixin = restmod.mixin({
     *   triggerDummy: function(_param) {
     *     this.$dispatch('dummy-hook', _param);
     *   }
     * });
     *
     * // Then hook can be used at model definition to provide type-level customization:
     * var Bike $resmod.model('/api/bikes', mixin, {
     *   '~dummy-hook': function() {
     *     alert('This is called for every bike');
     *   }
     * };
     *
     * // or at instance level:
     * var myBike = Bike.$build();
     * myBike.$on('dummy-hook', function() {
     *   alert('This is called for myBike only');
     * });
     *
     * // or event at decorated context level
     * myBike.$decorate({
     *   'dummy-hook': function() {
     *     alert('This is called for myBike only inside the decorated context');
     *   }
     * }, fuction() {
     *  // decorated context
     * });
     * ```
     *
     * @param  {string} _hook Hook name
     * @param  {array} _args Hook arguments
     * @param  {object} _ctx Hook execution context override
     *
     * @return {CommonApi} self
     */
    $dispatch: function(_hook, _args, _ctx) {
      var cbs, i, cb, dsp = this.$$dsp;

      if(!_ctx) _ctx = this;

      // context callbacks
      if(dsp) {
        this.$$dsp = undefined; // disable dsp for hooks
        dsp(_hook, _args, _ctx);
      }

      // instance callbacks
      if(this.$$cb && (cbs = this.$$cb[_hook])) {
        for(i = 0; !!(cb = cbs[i]); i++) {
          cb.apply(_ctx, _args || EMPTY_ARRAY);
        }
      }

      // bubble up the object scope, bubble to type only if there isnt a viable parent scope.
      if(this.$scope && this.$scope.$dispatch) {
        this.$scope.$dispatch(_hook, _args, _ctx);
      } else if(this.$type) {
        this.$type.$dispatch(_hook, _args, _ctx);
      }

      this.$$dsp = dsp; // reenable dsp.

      return this;
    },

    /**
     * @memberof CommonApi#
     *
     * @description Registers an instance hook.
     *
     * An instance hook is called only for events generated by the calling object.
     *
     * ```javascript
     * var bike = Model.$build(), bike2 = Model.$build();
     * bike.$on('before-save', function() { alert('saved!'); });
     *
     * bike.$save(); // 'saved!' alert is shown after bike is saved
     * bike2.$save(); // no alert is shown after bike2 is saved
     * ```
     *
     * @param {string} _hook Hook name
     * @param {function} _fun Callback
     * @return {CommonApi} self
     */
    $on: function(_hook, _fun) {
      var hooks = (this.$$cb || (this.$$cb = {}))[_hook] || (this.$$cb[_hook] = []);
      hooks.push(_fun);
      return this;
    },

    /**
     * @memberof CommonApi#
     *
     * @description Registers hooks to be used only inside the given function (decorated context).
     *
     * ```javascript
     * // special fetch method that sends a special token header.
     * restmod.mixin({
     *   $fetchWithToken: function(_token) {
     *     return this.$decorate({
     *       'before-fetch': function(_req) {
     *         _req.headers = _req.headers || {};
     *         _req.headers['Token'] = _token;
     *       }
     *     ), function() {
     *       return this.$fetch();
     *     })
     *   }
     * });
     * ```
     *
     * @param {object|function} _hooks Hook mapping object or hook execution method.
     * @param {function} _fun Function to be executed in with decorated context, this function is executed in the callee object context.
     * @return {CommonApi} self
     */
    $decorate: function(_hooks, _fun, _args) {

      var oldDispatcher = this.$$dsp;

      // set new dispatcher
      this.$$dsp = (typeof _hooks === 'function' || !_hooks) ? _hooks : function(_hook, _args, _ctx) {
        if(oldDispatcher) oldDispatcher.apply(null, arguments);
        var extraCb = _hooks[_hook];
        if(extraCb) extraCb.apply(_ctx, _args || EMPTY_ARRAY);
      };

      try {
        return _fun.apply(this, _args);
      } finally {
        // reset dispatcher with old value
        this.$$dsp = oldDispatcher;
      }
    },

    /**
     * @memberof CommonApi#
     *
     * @description Retrieves the current object's event dispatcher function.
     *
     * This method can be used in conjuction with `$decorate` to provide a consistent hook context
     * during async operations. This is important when building extensions that want to support the
     * contextual hook system in asynchronic operations.
     *
     * For more information aboout contextual hooks, see the {@link CommonApi#decorate} documentation.
     *
     * Usage:
     *
     * ```javascript
     * restmod.mixin({
     *   $saveAndTrack: function() {
     *     var dsp = this.$dispatcher(), // capture the current dispatcher function.
     *         self = this;
     *     this.$save().$then(function() {
     *       this.$send({ path: '/traces', data: 'ble' }, function() {
     *         this.$decorate(dsp, function() {
     *           // the event is dispatched using the dispatcher function available when $saveAndTrack was called.
     *           this.$dispatch('trace-stored');
     *         });
     *       });
     *     });
     *   }
     * })
     * ```
     *
     * @return {function} Dispatcher evaluator
     */
    $dispatcher: function() {
      return this.$$dsp;
    },

    // Promise API

    /**
     * @memberof CommonApi#
     *
     * @description Returns this object last promise.
     *
     * If promise does not exist, then a new one is generated that resolves to the object itsef. The
     * new promise is not set as the current object promise, for that use `$then`.
     *
     * Usage:
     *
     * ```javascript
     * col.$fetch().$asPromise();
     * ```
     *
     * @return {promise} $q promise
     */
    $asPromise: function() {
      var _this = this;
      return this.$promise ? this.$promise.then(
        function() { return _this; },
        function() { return $q.reject(_this); }
      ) : $q.when(this);
    },

    /**
     * @memberof CommonApi#
     *
     * @description Promise chaining method, keeps the model instance as the chain context.
     *
     * Calls `$q.then` on the model's last promise.
     *
     * Usage:
     *
     * ```javascript
     * col.$fetch().$then(function() { });
     * ```
     *
     * @param {function} _success success callback
     * @param {function} _error error callback
     * @return {CommonApi} self
     */
    $then: function(_success, _error) {

      if(!this.$promise) {
        this.$promise = $q.when(wrapPromise(this, _success)(this));
      } else {
        this.$promise = this.$promise.then(
          _success ? wrapPromise(this, _success) : _success,
          _error ? wrapPromise(this, _error) : _error
        );
      }

      return this;
    },

    /**
     * @memberof CommonApi#
     *
     * @description Promise chaining method, similar to then but executes same callback in success or error.
     *
     * Usage:
     *
     * ```javascript
     * col.$fetch().$always(function() { });
     * ```
     *
     * @param {function} _fun success/error callback
     * @return {CommonApi} self
     */
    $always: function(_fun) {
      return this.$then(_fun, _fun);
    },

    /**
     * @memberof CommonApi#
     *
     * @description Promise chaining, keeps the model instance as the chain context.
     *
     * Calls ´$q.finally´ on the collection's last promise, updates last promise with finally result.
     *
     * Usage:
     *
     * ```javascript
     * col.$fetch().$finally(function() { });
     * ```
     *
     * @param {function} _cb callback
     * @return {CommonApi} self
     */
    $finally: function(_cb) {
      this.$promise = this.$promise['finally'](wrapPromise(this, _cb));
      return this;
    },

    // Communication API

    /**
     * @memberof CommonApi#
     *
     * @description Low level communication method, wraps the $http api.
     *
     * * You can access last request promise using the `$asPromise` method.
     * * Pending requests will be available at the $pending property (array).
     * * Current request execution status can be queried using the $status property (current request, not last).
     * * The $status property refers to the current request inside $send `_success` and `_error` callbacks.
     *
     * @param {object} _options $http options
     * @param {function} _success sucess callback (sync)
     * @param {function} _error error callback (sync)
     * @return {CommonApi} self
     */
    $send: function(_options, _success, _error) {

      // make sure a style base was selected for the model
      if(!this.$type.getProperty('style')) {
        $log.warn('No API style base was selected, see the Api Integration FAQ for more information on this warning');
      }

      var action = this.$$action;

      return this.$always(function() {

        this.$response = null;
        this.$status = 'pending';
        this.$dispatch('before-request', [_options]);

        return $http(_options).then(wrapPromise(this, function() {
          if(action && action.canceled) {
            // if request was canceled during request, ignore post request actions.
            this.$status =  'canceled';
          } else {
            this.$status = 'ok';
            this.$response = this.$last;
            this.$dispatch('after-request', [this.$last]);
            if(_success) _success.call(this, this.$last);
          }
        }), wrapPromise(this, function() {
          if(action && action.canceled) {
            // if request was canceled during request, ignore error handling
            this.$status = 'canceled';
          } else {
            this.$status = 'error';
            this.$response = this.$last;

            // IDEA: Consider flushing pending request in case of an error. Also continue ignoring requests
            // until the error flag is reset by user.

            this.$dispatch('after-request-error', [this.$last]);
            if(_error) _error.call(this, this.$last);
            return $q.reject(this); // TODO: this will step over any promise generated in _error!!
          }
        }));
      });
    },

    // Actions API

    /**
     * @memberof CommonApi#
     *
     * @description Registers a new action to be executed in the promise queue.
     *
     * Registered pending actions can be canceled using `$cancel`
     *
     * `$cancel` will also cancel any ongoing call to `$send` (will not abort it yet though...)
     *
     * @return {CommonApi} self
     */
    $action: function(_fun) {
      var status = {
        canceled: false
      }, pending = this.$pending || (this.$pending = []);

      pending.push(status);

      return this.$always(function() {
        var oldAction = this.$$action;
        try {
          if(!status.canceled) {
            this.$$action = status;
            return _fun.call(this);
          } else {
            return $q.reject(this);
          }
        } finally {
          // restore object state and pending actions
          this.$$action = oldAction;
        }
      }).$finally(function() {
        // after action and related async code finishes, remove status from pending list
        pending.splice(pending.indexOf(status), 1);
      });
    },

    /**
     * @memberof CommonApi#
     *
     * @description Cancels all pending actions registered with $action.
     *
     * @return {CommonApi} self
     */
    $cancel: function() {
      // cancel every pending request.
      if(this.$pending) {
        angular.forEach(this.$pending, function(_status) {
          _status.canceled = true;
        });
      }

      return this;
    },

    /**
     * @memberof CommonApi#
     *
     * @description Returns true if object has queued actions
     *
     * @return {Boolean} Object request pending status.
     */
    $hasPendingActions: function() {
      var pendingCount = 0;

      if(this.$pending) {
        angular.forEach(this.$pending, function(_status) {
          if(!_status.canceled) pendingCount++;
        });
      }

      return pendingCount > 0;
    }
  };

  return CommonApi;

}]);
RMModule.factory('RMExtendedApi', ['$q', 'RMPackerCache', function($q, packerCache) {

  /**
   * @class ExtendedApi
   *
   * @description
   *
   * Provides a common framework **on top** of the {@link RecordApi} and {@link CollectionApi}.
   *
   * @property {boolean} $resolved The collection resolve status, is undefined on intialization
   */
  return {

    // override decode to detect resolution of resource
    $decode: function(_raw, _mask) {
      if(this.$resolved === false && this.$clear) this.$clear(); // clear if not resolved.
      this.$super(_raw, _mask);
      this.$resolved = true;
      return this;
    },

    /// Misc common methods

    /**
     * @memberof ExtendedApi#
     *
     * @description
     *
     * Unpacks and decode raw data from a server generated structure.
     *
     * ATTENTION: do not override this method to change the object wrapping strategy,
     * instead, override the static {@link Model.$unpack} method.
     *
     * @param  {mixed} _raw Raw server data
     * @param  {string} _mask 'CRU' mask
     * @return {ExtendedApi} this
     */
    $unwrap: function(_raw, _mask) {
      try {
        packerCache.prepare();
        _raw = this.$type.unpack(this, _raw);
        return this.$decode(_raw, _mask);
      } finally {
        packerCache.clear();
      }
    },

    /**
     * @memberof ExtendedApi#
     *
     * @description
     *
     * Encode and packs object into a server compatible structure that can be used for PUT/POST operations.
     *
     * ATTENTION: do not override this method to change the object wrapping strategy,
     * instead, override the static {@link Model.$pack} method.
     *
     * @param  {string} _mask 'CRU' mask
     * @return {string} raw data
     */
    $wrap: function(_mask) {
      var raw = this.$encode(_mask);
      raw = this.$type.pack(this, raw);
      return raw;
    },

    /**
     * @memberof ExtendedApi#
     *
     * @description Resets the resource's $resolved status.
     *
     * After being reset, calls to `$resolve` will execute a new $fetch.
     *
     * Also, if reset, resource will be cleared on new data.
     *
     * @return {ExtendedApi} self
     */
    $reset: function() {
      // cancel outside promise chain
      // TODO: find a way of only ignoring requests that will lead to resolution, maybe using action metadata
      return this.$cancel().$action(function() {
        this.$resolved = false;
      });
    },

    /**
     * @memberof ExtendedApi#
     *
     * @description Resolves the resource's contents.
     *
     * If already resolved then this method will return a resolved promise, if not then
     * it will initiate a `$fetch` operation and return the operation promise.
     *
     * This method will trigger a `before-resolve` event before checking the resolve status.
     *
     * @param  {object} _params `$fetch` params
     * @return {promise} Promise that resolves to the resource.
     */
    $resolve: function(_params) {
      return this.$action(function() { // chain resolution in request promise chain
        this.$dispatch('before-resolve', []);
        if(!this.$resolved) this.$fetch(_params);
      });
    },

    /**
     * @memberof ExtendedApi#
     *
     * @description Resets and fetches the resource contents.
     *
     * @param  {object} _params `$fetch` params
     * @return {ExtendedApi} self
     */
    $refresh: function(_params) {
      return this.$reset().$fetch(_params);
    }
  };

}]);
RMModule.factory('RMListApi', [function() {

  /**
   * @class ListApi
   *
   * @description Common methods for Lists and Collections.
   */
  return {

    /**
     * @memberof ListApi#
     *
     * @description Generates a new list from this one.
     *
     * If called without arguments, the list is popupated with the same contents as this list.
     *
     * If there is a pending async operation on the host collection/list, then this method will
     * return an empty list and fill it when the async operation finishes. If you don't need the async behavior
     * then use `$type.list` directly to generate a new list.
     *
     * @param {function} _filter A filter function that should return the list contents as an array.
     * @return {ListApi} list
     */
    $asList: function(_filter) {
      var list = this.$type.list(),
          promise = this.$asPromise();

      // set the list initial promise to the resolution of the parent promise.
      list.$promise = promise.then(function(_this) {
        list.push.apply(list, _filter ? _filter(_this) : _this);
      });

      return list;
    }
  };

}]);
RMModule.factory('RMRecordApi', ['RMUtils', function(Utils) {

  /**
   * @class RelationScope
   *
   * @description
   *
   * Special scope a record provides to resources related via hasMany or hasOne relation.
   */
  var RelationScope = function(_scope, _target, _partial) {
    this.$scope = _scope;
    this.$target = _target;
    this.$partial = Utils.cleanUrl(_partial);
  };

  RelationScope.prototype = {

    $nestedUrl: function() {
      return Utils.joinUrl(this.$scope.$url(), this.$partial);
    },

    // url is nested for collections and nested records
    $urlFor: function(_resource) {
      if(_resource.$isCollection || this.$target.isNested()) {
        return this.$nestedUrl();
      } else {
        return this.$target.$urlFor(_resource);
      }
    },

    // a record's fetch url is always nested
    $fetchUrlFor: function(/* _resource */) {
      return this.$nestedUrl();
    },

    // create is not posible in nested members
    $createUrlFor: function() {
      return null;
    }
  };

  /**
   * @class RecordApi
   * @extends CommonApi
   *
   * @property {object} $scope The record's scope (see {@link ScopeApi})
   * @property {mixed} $pk The record's primary key
   *
   * @description
   *
   * Provides record synchronization and manipulation methods. This is the base API for every restmod record.
   *
   * TODO: Talk about the object lifecycle.
   *
   * ### Object lifecycle hooks
   *
   * For `$fetch`:
   *
   * * before-fetch
   * * before-request
   * * after-request[-error]
   * * after-feed (only called if no errors)
   * * after-fetch[-error]
   *
   * For `$save` when creating:
   *
   * * before-render
   * * before-save
   * * before-create
   * * before-request
   * * after-request[-error]
   * * after-feed (only called if no errors)
   * * after-create[-error]
   * * after-save[-error]
   *
   * For `$save` when updating:
   *
   * * before-render
   * * before-save
   * * before-update
   * * before-request
   * * after-request[-error]
   * * after-feed (only called if no errors)
   * * after-update[-error]
   * * after-save[-error]
   *
   * For `$destroy`:
   *
   * * before-destroy
   * * before-request
   * * after-request[-error]
   * * after-destroy[-error]
   *
   * @property {mixed} $pk The record primary key
   * @property {object} $scope The collection scope (hierarchical scope, not angular scope)
   */
	return {

    /**
     * @memberof RecordApi#
     *
     * @description Called by record constructor on initialization.
     *
     * Note: Is better to add a hook to after-init than overriding this method.
     */
    $initialize: function() {
      // apply defaults
      this.$super();

      // after initialization hook
      // TODO: put this on $new so it can use stacked DSP?
      this.$dispatch('after-init');
    },

    /**
     * @memberof RecordApi#
     *
     * @description Called the resource's scope $urlFor method to build the url for the record using the proper scope.
     *
     * By default the resource partial url is just its `$pk` property. This can be overriden to provide other routing approaches.
     *
     * @return {string} The resource partial url
     */
    $buildUrl: function(_scope) {
      return (this.$pk === undefined || this.$pk === null) ? null : Utils.joinUrl(_scope.$url(), this.$pk + '');
    },

    /**
     * @memberof RecordApi#
     *
     * @description Default item child scope factory.
     *
     * By default, no create url is provided and the update/destroy url providers
     * attempt to first use the unscoped resource url.
     *
     * // TODO: create special api to hold scope (so it is not necessary to recreate the whole object every time.)
     *
     * @param {mixed} _for Scope target type, accepts any model class.
     * @param {string} _partial Partial route.
     * @return {RelationScope} New scope.
     */
    $buildScope: function(_for, _partial) {
      if(_for.$buildOwnScope) {
        // TODO
      } else {
        return new RelationScope(this, _for, _partial);
      }
    },

    /**
     * @memberof RecordApi#
     *
     * @description Iterates over the object non-private properties
     *
     * @param {function} _fun Function to call for each
     * @return {RecordApi} self
     */
    $each: function(_fun, _ctx) {
      for(var key in this) {
        if(this.hasOwnProperty(key) && key[0] !== '$') {
          _fun.call(_ctx || this[key], this[key], key);
        }
      }

      return this;
    },

    /**
     * @memberof RecordApi#
     *
     * @description Feed raw data to this instance.
     *
     * @param {object} _raw Raw data to be fed
     * @param {string} _mask 'CRU' mask
     * @return {RecordApi} this
     */
    $decode: function(_raw, _mask) {
      // IDEA: let user override serializer
      this.$type.decode(this, _raw, _mask || Utils.READ_MASK);
      if(this.$pk === undefined || this.$pk === null) this.$pk = this.$type.inferKey(_raw); // TODO: warn if key changes
      this.$dispatch('after-feed', [_raw]);
      return this;
    },

    /**
     * @memberof RecordApi#
     *
     * @description Generate data to be sent to the server when creating/updating the resource.
     *
     * @param {string} _mask 'CRU' mask
     * @return {string} raw data
     */
    $encode: function(_mask) {
      var raw = this.$type.encode(this, _mask || Utils.CREATE_MASK);
      this.$dispatch('before-render', [raw]);
      return raw;
    },

    /**
     * @memberof RecordApi#
     *
     * @description Begin a server request for updated resource data.
     *
     * The request's promise can be accessed using the `$asPromise` method.
     *
     * @param {object} _params Optional list of params to be passed to object request.
     * @return {RecordApi} this
     */
    $fetch: function(_params) {
      return this.$action(function() {
        var url = this.$url('fetch');
        Utils.assert(!!url, 'Cant $fetch if resource is not bound');

        var request = { method: 'GET', url: url, params: _params };

        this.$dispatch('before-fetch', [request]);
        this.$send(request, function(_response) {
          this.$unwrap(_response.data);
          this.$dispatch('after-fetch', [_response]);
        }, function(_response) {
          this.$dispatch('after-fetch-error', [_response]);
        });
      });
    },

    /**
     * @memberof RecordApi#
     *
     * @description Copyies another object's non-private properties.
     *
     * This method runs inside the promise chain, so calling
     *
     * ```javascript
     * Bike.$find(1).$extend({ size: "L" }).$save();
     * ```
     * Will first fetch the bike data and after it is loaded the new size will be applied and then the
     * updated model saved.
     *
     * @param {object} _other Object to merge.
     * @return {RecordApi} self
     */
    $extend: function(_other) {
      return this.$action(function() {
        for(var tmp in _other) {
          if (_other.hasOwnProperty(tmp) && tmp[0] !== '$') {
            this[tmp] = _other[tmp];
          }
        }
      });
    },

    /**
     * @memberof RecordApi#
     *
     * @description Shortcut method used to extend and save a model.
     *
     * This method will not force a PUT, if object is new `$update` will attempt to POST.
     *
     * @param {object} _other Data to change
     * @return {RecordApi} self
     */
    $update: function(_other) {
      return this.$extend(_other).$save();
    },

    /**
     * @memberof RecordApi#
     *
     * @description Begin a server request to create/update/patch resource.
     *
     * A patch is only executed if model is identified and a patch property list is given. It is posible to
     * change the method used for PATCH operations by setting the `patchMethod` configuration.
     *
     * If resource is new and it belongs to a collection and it hasnt been revealed, then it will be revealed.
     *
     * The request's promise can be accessed using the `$asPromise` method.
     *
     * @param {array} _patch Optional list of properties to send in update operation.
     * @return {RecordApi} this
     */
    $save: function(_patch) {
      return this.$action(function() {
        var url = this.$url('update'), request;

        if(url) {

          // If bound, update
          if(_patch) {
            request = {
              method: this.$type.getProperty('patchMethod', 'PATCH'), // allow user to override patch method
              url: url,
              // Use special mask for patches, mask everything that is not in the patch list.
              data: this.$wrap(function(_name) {
                _name = _name.replace('[]', '');
                for(var i = 0, l = _patch.length; i < l; i++) {
                  if(_name === _patch[i] ||
                    _name.indexOf(_patch[i] + '.') === 0 ||
                    _patch[i].indexOf(_name + '.') === 0
                  ) { return false; }
                }

                return true;
              })
            };
          } else {
            request = { method: 'PUT', url: url, data: this.$wrap(Utils.UPDATE_MASK) };
          }

          this
            .$dispatch('before-update', [request, !!_patch])
            .$dispatch('before-save', [request])
            .$send(request, function(_response) {
              this
                .$unwrap(_response.data)
                .$dispatch('after-update', [_response, !!_patch])
                .$dispatch('after-save', [_response]);
            }, function(_response) {
              this
                .$dispatch('after-update-error', [_response, !!_patch])
                .$dispatch('after-save-error', [_response]);
            });
        } else {
          // If not bound create.
          url = this.$url('create') || this.$scope.$url();
          Utils.assert(!!url, 'Cant $create if parent scope is not bound');

          request = { method: 'POST', url: url, data: this.$wrap(Utils.CREATE_MASK) };
          this
            .$dispatch('before-save', [request])
            .$dispatch('before-create', [request])
            .$send(request, function(_response) {
              this.$unwrap(_response.data);

              // reveal item (if not yet positioned)
              if(this.$scope.$isCollection && this.$position === undefined && !this.$preventReveal) {
                this.$scope.$add(this, this.$revealAt);
              }

              this
                .$dispatch('after-create', [_response])
                .$dispatch('after-save', [_response]);
            }, function(_response) {
              this
                .$dispatch('after-create-error', [_response])
                .$dispatch('after-save-error', [_response]);
            });
        }
      });
    },

    /**
     * @memberof RecordApi#
     *
     * @description Begin a server request to destroy the resource.
     *
     * The request's promise can be accessed using the `$asPromise` method.
     *
     * @return {RecordApi} this
     */
    $destroy: function() {
      return this.$action(function() {
        var url = this.$url('destroy');
        if(url)
        {
          var request = { method: 'DELETE', url: url };

          this
            .$dispatch('before-destroy', [request])
            .$send(request, function(_response) {

              // remove from scope
              if(this.$scope.$remove) {
                this.$scope.$remove(this);
              }

              this.$dispatch('after-destroy', [_response]);
            }, function(_response) {
              this.$dispatch('after-destroy-error', [_response]);
            });
        }
        else
        {
          // If not yet bound, just remove from parent
          if(this.$scope.$remove) this.$scope.$remove(this);
        }
      });
    },

    // Collection related methods.

    /**
     * @memberof RecordApi#
     *
     * @description Changes the location of the object in the bound collection.
     *
     * If object hasn't been revealed, then this method will change the index where object will be revealed at.
     *
     * @param  {integer} _to New object position (index)
     * @return {RecordApi} this
     */
    $moveTo: function(_to) {
      if(this.$position !== undefined) {
        // TODO: move item to given index.
        // TODO: callback
      } else {
        this.$revealAt = _to;
      }
      return this;
    },

    /**
     * @memberof RecordApi#
     *
     * @description Reveal in collection
     *
     * If instance is bound to a collection and it hasnt been revealed (because it's new and hasn't been saved),
     * then calling this method without parameters will force the object to be added to the collection.
     *
     * If this method is called with **_show** set to `false`, then the object wont be revealed by a save operation.
     *
     * @param  {boolean} _show Whether to reveal inmediatelly or prevent automatic reveal.
     * @return {RecordApi} this
     */
    $reveal: function(_show) {
      if(_show === undefined || _show) {
        this.$scope.$add(this, this.$revealAt);
      } else {
        this.$preventReveal = true;
      }
      return this;
    }
  };

}]);
RMModule.factory('RMScopeApi', ['RMUtils', function(Utils) {

  /**
   * @class ScopeApi
   *
   * @description Common behaviour for record scopes.
   *
   * Record scopes are starting points for record operations (like base type or a collection)
   *
   * TODO: Talk about record building here
   */
  return {

    /**
     * @memberof ScopeApi#
     *
     * @description provides urls for scope's resources.
     *
     * @param {mixed} _resource The target resource.
     * @return {string|null} The url or nill if resource does not meet the url requirements.
     */
    $urlFor: function(_resource) {
      // force item unscoping if model is not nested (maybe make this optional)
      var scope = this.$type.isNested() ? this : this.$type;
      return typeof _resource.$buildUrl === 'function' ? _resource.$buildUrl(scope) : scope.$url();
    },

    /**
     * @memberof ScopeApi#
     *
     * @description Builds a new instance of this model, bound to this instance scope, sets its primary key.
     *
     * @param {mixed} _pk object private key
     * @param {object} _scope scope override (optional)
     * @return {RecordApi} New model instance
     */
    $new: function(_pk, _scope) {
      return this.$super(_pk, _scope);
    },

    /**
     * @memberof ScopeApi#
     *
     * @description Builds a new instance of this model, does not assign a pk to the created object.
     *
     * ATTENTION: item will not show in collection until `$save` is called. To reveal item before than call `$reveal`.
     *
     * @param  {object} _init Initial values
     * @return {RecordApi} single record
     */
    $build: function(_init) {
      return this.$new().$extend(_init);
    },

    /**
     * @memberof ScopeApi#
     *
     * @description Builds a new instance of this model using undecoded data.
     *
     * ATTENTION: does not automatically reveal item in collection, chain a call to $reveal to do so.
     *
     * @param  {object} _raw Undecoded data
     * @return {RecordApi} single record
     */
    $buildRaw: function(_raw, _mask) {
      var obj = this.$new(this.$type.inferKey(_raw));
      obj.$decode(_raw, _mask);
      return obj;
    },

    /**
     * @memberof ScopeApi#
     *
     * @description Attempts to resolve a resource using provided private key.
     *
     * @param {mixed} _pk Private key
     * @param {object} _params Additional query parameters
     * @return {RecordApi} single record
     */
    $find: function(_pk, _params) {
      return this.$new(_pk).$resolve(_params);
    },

    /**
     * @memberof ScopeApi#
     *
     * @description Builds and saves a new instance of this model
     *
     * @param  {object} _attr Data to be saved
     * @return {RecordApi} single record
     */
    $create: function(_attr) {
      return this.$build(_attr).$save();
    },

    /**
     * @memberof ScopeApi#
     *
     * @description Builds a new collection bound to this scope.
     *
     * If scope is another collection then it will inherit its parameters
     *
     * Collections are bound to an api resource.
     *
     * @param  {object} _params  Additional query string parameters
     * @param  {object} _scope  Scope override (optional)
     * @return {CollectionApi} Model Collection
     */
    $collection: function(_params, _scope) {
      return this.$super(_params, _scope);
    },

    /**
     * @memberof ScopeApi#
     *
     * @description Generates a new collection bound to this context and url and calls $fetch on it.
     *
     * @param {object} _params Collection parameters
     * @return {CollectionApi} record collection
     */
    $search: function(_params) {
      return this.$collection(_params).$fetch();
    }
  };

}]);
RMModule.factory('RMBuilder', ['$injector', 'inflector', '$log', 'RMUtils', function($injector, inflector, $log, Utils) {

  // TODO: add urlPrefix option

  var forEach = angular.forEach,
      isObject = angular.isObject,
      isArray = angular.isArray,
      isFunction = angular.isFunction,
      extend = angular.extend,
      VAR_RGX = /^[A-Z]+[A-Z_0-9]*$/;

  /**
   * @class BuilderApi
   *
   * @description
   *
   * Provides the DSL for model generation, it supports to modes of model definitions:
   *
   * ## Definition object
   *
   * This is the preferred way of describing a model behavior.
   *
   * A model description object looks like this:
   *
   * ```javascript
   * restmod.model({
   *
   *   // MODEL CONFIGURATION
   *
   *   $config: {
   *     name: 'resource',
   *     primaryKey: '_id'
   *   },
   *
   *   // ATTRIBUTE MODIFIERS AND RELATIONS
   *
   *   propWithDefault: { init: 20 },
   *   propWithDecoder: { decode: 'date', chain: true },
   *   hasManyRelation: { hasMany: 'Other' },
   *   hasOneRelation: { hasOne: 'Other' },
   *
   *   // HOOKS
   *
   *   $hooks: {
   *     'after-create': function() {
   *     }
   *   },
   *
   *   // METHODS
   *
   *   $extend: {
   *     Record: {
   *       instanceMethod: function() {
   *       }
   *     },
   *     Model: {
   *       scopeMethod: function() {
   *       }
   *     }
   *   }
   * });
   * ```
   *
   * Special model configuration variables can be set by using a `$config` block:
   *
   * ```javascript
   * restmod.model({
   *
   *   $config: {
   *     name: 'resource',
   *     primaryKey: '_id'
   *   }
   *
   *  });
   * ```
   *
   * With the exception of model configuration variables and properties starting with a special character (**@** or **~**),
   * each property in the definition object asigns a behavior to the same named property in a model's record.
   *
   * To modify a property behavior assign an object with the desired modifiers to a
   * definition property with the same name. Builtin modifiers are:
   *
   * The following built in property modifiers are provided (see each mapped-method docs for usage information):
   *
   * * `init` sets an attribute default value, see {@link BuilderApi#attrDefault}
   * * `mask` and `ignore` sets an attribute mask, see {@link BuilderApi#attrMask}
   * * `map` sets an explicit server attribute mapping, see {@link BuilderApi#attrMap}
   * * `decode` sets how an attribute is decoded after being fetch, maps to {@link BuilderApi#attrDecoder}
   * * `encode` sets how an attribute is encoded before being sent, maps to {@link BuilderApi#attrEncoder}
   * * `volatile` sets the attribute volatility, maps to {@link BuilderApi#attrVolatile}
   *
   * **For relations modifiers take a look at {@link RelationBuilderApi}**
   *
   * **For other extended bundled methods check out the {@link ExtendedBuilderApi}**
   *
   * If other kind of value (different from object or function) is passed to a definition property,
   * then it is considered to be a default value. (same as calling {@link BuilderApi#define} at a definition function)
   *
   * ```javascript
   * var Model = restmod.model('/', {
   *   im20: 20 // same as { init: 20 }
   * })
   *
   * // then say hello is available for use at model records
   * Model.$new().im20; // 20
   * ```
   *
   * To add/override methods from the record api, use the `$extend` block:
   *
   * ```javascript
   * var Model = restmod.model('/', {
   *   $extend: {
   *     sayHello: function() { alert('hello!'); }
   *   }
   * })
   *
   * // then say hello is available for use at model records
   * Model.$new().sayHello();
   * ```
   *
   * To add a static method or a collection method, you must specify the method scope: , prefix the definition key with **^**, to add it to the model collection prototype,
   * prefix it with ***** static/collection methods to the Model, prefix the definition property name with **@**
   * (same as calling {@link BuilderApi#scopeDefine} at a definition function).
   *
   * ```javascript
   * var Model = restmod.model('/', {
   *   $extend: {
   *     'Collection.count': function() { return this.length; },  // scope is set using a prefix
   *
   *     Model: {
   *       sayHello: function() { alert('hello!'); } // scope is set using a block
   *     }
   * })
   *
   * // then the following call will be valid.
   * Model.sayHello();
   * Model.$collection().count();
   * ```
   *
   * More information about method scopes can be found in {@link BuilderApi#define}
   *
   * To add hooks to the Model lifecycle events use the `$hooks` block:
   *
   * ```javascript
   * var Model = restmod.model('/', {
   *   $hooks: {
   *     'after-init': function() { alert('hello!'); }
   *   }
   * })
   *
   * // the after-init hook is called after every record initialization.
   * Model.$new(); // alerts 'hello!';
   * ```
   *
   * ## Definition function
   *
   * The definition function gives complete access to the model builder api, every model builder function described
   * in this page can be called from the definition function by referencing *this*.
   *
   * ```javascript
   * restmod.model('', function() {
   *   this.attrDefault('propWithDefault', 20)
   *       .attrAsCollection('hasManyRelation', 'ModelName')
   *       .on('after-create', function() {
   *         // do something after create.
   *       });
   * });
   * ```
   *
   */
  function Builder(_baseDsl) {

    var mappings = {
      init: ['attrDefault'],
      mask: ['attrMask'],
      ignore: ['attrMask'],
      map: ['attrMap', 'force'],
      decode: ['attrDecoder', 'param', 'chain'],
      encode: ['attrEncoder', 'param', 'chain'],
      'volatile': ['attrVolatile']
    };

    // DSL core functions.

    this.dsl = extend(_baseDsl, {

      /**
       * @memberof BuilderApi#
       *
       * @description Parses a description object, calls the proper builder method depending
       * on each property description type.
       *
       * @param {object} _description The description object
       * @return {BuilderApi} self
       */
      describe: function(_description) {
        forEach(_description, function(_desc, _attr) {
          switch(_attr.charAt(0)) {
          case '@':
            $log.warn('Usage of @ in description objects will be removed in 1.2, use a $extend block instead');
            this.define('Scope.' + _attr.substring(1), _desc); // set static method
            break;
          case '~':
            _attr = inflector.parameterize(_attr.substring(1));
            $log.warn('Usage of ~ in description objects will be removed in 1.2, use a $hooks block instead');
            this.on(_attr, _desc);
            break;
          default:
            if(_attr === '$config') { // configuration block
              for(var key in _desc) {
                if(_desc.hasOwnProperty(key)) this.setProperty(key, _desc[key]);
              }
            } else if(_attr === '$extend') { // extension block
              for(var key in _desc) {
                if(_desc.hasOwnProperty(key)) this.define(key, _desc[key]);
              }
            } else if(_attr === '$hooks') { // hooks block
              for(var key in _desc) {
                if(_desc.hasOwnProperty(key)) this.on(key, _desc[key]);
              }
            } else if(VAR_RGX.test(_attr)) {
              $log.warn('Usage of ~ in description objects will be removed in 1.2, use a $config block instead');
              _attr = inflector.camelize(_attr.toLowerCase());
              this.setProperty(_attr, _desc);
            }
            else if(isObject(_desc)) this.attribute(_attr, _desc);
            else if(isFunction(_desc)) this.define(_attr, _desc);
            else this.attrDefault(_attr, _desc);
          }
        }, this);
        return this;
      },

      /**
       * @memberof BuilderApi#
       *
       * @description Extends the builder DSL
       *
       * Adds a function to de builder and alternatively maps the function to an
       * attribute definition keyword that can be later used when calling
       * `define` or `attribute`.
       *
       * Mapping works as following:
       *
       *    // Given the following call
       *    builder.extend('testAttr', function(_attr, _test, _param1, param2) {
       *      // wharever..
       *    }, ['test', 'testP1', 'testP2']);
       *
       *    // A call to
       *    builder.attribute('chapter', { test: 'hello', testP1: 'world' });
       *
       *    // Its equivalent to
       *    builder.testAttr('chapter', 'hello', 'world');
       *
       * The method can also be passed an object with various methods to be added.
       *
       * @param {string|object} _name function name or object to merge
       * @param {function} _fun function
       * @param {array} _mapping function mapping definition
       * @return {BuilderApi} self
       */
      extend: function(_name, _fun, _mapping) {
        if(typeof _name === 'string') {
          this[_name] = Utils.override(this[name], _fun);
          if(_mapping) {
            mappings[_mapping[0]] = _mapping;
            _mapping[0] = _name;
          }
        } else Utils.extendOverriden(this, _name);
        return this;
      },

      /**
       * @memberof BuilderApi#
       *
       * @description Sets an attribute properties.
       *
       * This method uses the attribute modifiers mapping to call proper
       * modifiers on the argument.
       *
       * For example, using the following description on the createdAt attribute
       *
       *    { decode: 'date', param; 'YY-mm-dd' }
       *
       * Is the same as calling
       *
       *    builder.attrDecoder('createdAt', 'date', 'YY-mm-dd')
       *
       * @param {string} _name Attribute name
       * @param {object} _description Description object
       * @return {BuilderApi} self
       */
      attribute: function(_name, _description) {
        var key, map, args, i;
        for(key in _description) {
          if(_description.hasOwnProperty(key)) {
            map = mappings[key];
            if(map) {
              args = [_name, _description[key]];
              for(i = 1; i < map.length; i++) {
                args.push(_description[map[i]]);
              }
              args.push(_description);
              this[map[0]].apply(this, args);
            }
          }
        }
        return this;
      }
    });
  }

  Builder.prototype = {

    // use the builder to process a mixin chain
    chain: function(_chain) {
      for(var i = 0, l = _chain.length; i < l; i++) {
        this.mixin(_chain[i]);
      }
    },

    // use the builder to process a single mixin
    mixin: function(_mix) {
      if(_mix.$$chain) {
        this.chain(_mix.$$chain);
      } else if(typeof _mix === 'string') {
        this.mixin($injector.get(_mix));
      } else if(isArray(_mix)) {
        this.chain(_mix);
      } else if(isFunction(_mix)) {
        _mix.call(this.dsl, $injector);
      } else {
        this.dsl.describe(_mix);
      }
    }
  };

  return Builder;

}]);
RMModule.factory('RMBuilderComputed', ['restmod',
  function(restmod) {
    /**
     * @class RMBuilderComputedApi
     *
     * @description
     *
     * Builder DSL extension to build computed properties.
     *
     * A computed property is a "virtual" property which is created using
     * other model properties. For example, a user has a firstName and lastName,
     * A computed property, fullName, is generated from the two.
     *
     * Adds the following property modifiers:
     * * `computed` function will be assigned as getter to Model, maps to {@link RMBuilderComputedApi#attrAsComputed}
     *
     */
    var EXT = {

      /**
       * @memberof RMBuilderComputedApi#
       *
       * @description Registers a model computed property
       *
       * @param {string}  _attr Attribute name
       * @param {function} _fn Function that returns the desired attribute value when run.
       * @return {BuilderApi} self
       */
      attrAsComputed: function(_attr, _fn) {
        this.attrComputed(_attr, _fn);
        return this;
      }
    };

    return restmod.mixin(function() {
      this.extend('attrAsComputed', EXT.attrAsComputed, ['computed']);
    });
  }
]);
RMModule.factory('RMBuilderExt', ['$injector', '$parse', 'inflector', '$log', 'restmod', function($injector, $parse, inflector, $log, restmod) {

  var bind = angular.bind,
      isFunction = angular.isFunction;

  /**
   * @class ExtendedBuilderApi
   *
   * @description
   *
   * Non-core builder extensions
   *
   * Adds the following property modifiers:
   * * `serialize` sets the encoder and decoder beaviour for an attribute, maps to {@link BuilderApi#attrSerializer}
   *
   */
  var EXT = {
    /**
     * @memberof ExtendedBuilderApi#
     *
     * @description Sets an url prefix to be added to every url generated by the model.
     *
     * This applies even to objects generated by the `$single` method.
     *
     * This method is intended to be used in a base model mixin so everymodel that extends from it
     * gets the same url prefix.
     *
     * Usage:
     *
     * ```javascript
     * var BaseModel = restmod.mixin(function() {
     *   this.setUrlPrefix('/api');
     * })
     *
     * var bike = restmod.model('/bikes', BaseModel).$build({ id: 1 });
     * console.log(bike.$url()) // outputs '/api/bikes/1'
     * ```
     *
     * @param {string} _prefix url portion
     * @return {BuilderApi} self
     */
    setUrlPrefix: function(_prefix) {
      return this.setProperty('urlPrefix', _prefix);
    },

    /**
     * @memberof ExtendedBuilderApi#
     *
     * @description Changes the model's primary key.
     *
     * Primary keys are passed to scope's url methods to generate urls. The default primary key is 'id'.
     *
     * **ATTENTION** Primary keys are extracted from raw data, so _key must use raw api naming.
     *
     * @param {string|function} _key New primary key.
     * @return {BuilderApi} self
     */
    setPrimaryKey: function(_key) {
      return this.setProperty('primaryKey', _key);
    },

    /**
     * @memberof ExtendedBuilderApi#
     *
     * @description Assigns a serializer to a given attribute.
     *
     * A _serializer is:
     * * an object that defines both a `decode` and a `encode` method
     * * a function that when called returns an object that matches the above description.
     * * a string that represents an injectable that matches any of the above descriptions.
     *
     * @param {string} _name Attribute name
     * @param {string|object|function} _serializer The serializer
     * @return {BuilderApi} self
     */
    attrSerializer: function(_name, _serializer, _opt) {
      if(typeof _serializer === 'string') {
        _serializer = $injector.get(inflector.camelize(_serializer, true) + 'Serializer');
      }

      if(isFunction(_serializer)) _serializer = _serializer(_opt);
      if(_serializer.decode) this.attrDecoder(_name, bind(_serializer, _serializer.decode));
      if(_serializer.encode) this.attrEncoder(_name, bind(_serializer, _serializer.encode));
      return this;
    },

    /// Experimental modifiers

    /**
     * @memberof ExtendedBuilderApi#
     *
     * @description Expression attributes are evaluated every time new data is fed to the model.
     *
     * @param {string}  _name Attribute name
     * @param {string} _expr Angular expression to evaluate
     * @return {BuilderApi} self
     */
    attrExpression: function(_name, _expr) {
      var filter = $parse(_expr);
      return this.on('after-feed', function() {
        this[_name] = filter(this);
      });
    }
  };

  return restmod.mixin(function() {
    this.extend('setUrlPrefix', EXT.setUrlPrefix)
        .extend('setPrimaryKey', EXT.setPrimaryKey)
        .extend('attrSerializer', EXT.attrSerializer, ['serialize']);
  });
}]);
RMModule.factory('RMBuilderRelations', ['$injector', 'inflector', '$log', 'RMUtils', 'restmod', 'RMPackerCache', function($injector, inflector, $log, Utils, restmod, packerCache) {

  // wraps a hook callback to give access to the $owner object
  function wrapHook(_fun, _owner) {
    return function() {
      var oldOwner = this.$owner;
      this.$owner = _owner;
      try {
        return _fun.apply(this, arguments);
      } finally {
        this.$owner = oldOwner;
      }
    };
  }

  // wraps a bunch of hooks
  function applyHooks(_target, _hooks, _owner) {
    for(var key in _hooks) {
      if(_hooks.hasOwnProperty(key)) {
        _target.$on(key, wrapHook(_hooks[key], _owner));
      }
    }
  }

  /**
   * @class RelationBuilderApi
   *
   * @description
   *
   * Builder DSL extension to build model relations
   *
   * Adds the following property modifiers:
   * * `hasMany` sets a one to many hierarchical relation under the attribute name, maps to {@link RelationBuilderApi#attrAsCollection}
   * * `hasOne` sets a one to one hierarchical relation under the attribute name, maps to {@link RelationBuilderApi#attrAsResource}
   * * `belongsTo` sets a one to one reference relation under the attribute name, maps to {@link RelationBuilderApi#attrAsReference}
   * * `belongsToMany` sets a one to many reference relation under the attribute name, maps to {@link RelationBuilderApi#attrAsReferenceToMany}
   *
   */
  var EXT = {
    /**
     * @memberof RelationBuilderApi#
     *
     * @description Registers a model **resources** relation
     *
     * @param {string}  _name Attribute name
     * @param {string|object} _model Other model, supports a model name or a direct reference.
     * @param {string} _url Partial url
     * @param {string} _source Inline resource alias (optional)
     * @param {string} _inverseOf Inverse property name (optional)
     * @param {object} _params Generated collection default parameters
     * @param {object} _hooks Hooks to be applied just to the generated collection
     * @return {BuilderApi} self
     */
    attrAsCollection: function(_attr, _model, _url, _source, _inverseOf, _params, _hooks) {

      var options, globalHooks; // global relation configuration

      this.attrDefault(_attr, function() {

        if(typeof _model === 'string') {
          _model = $injector.get(_model);

          // retrieve global options
          options = _model.getProperty('hasMany', {});
          globalHooks = options.hooks;

          if(_inverseOf) {
            var desc = _model.$$getDescription(_inverseOf);
            if(!desc || desc.relation !== 'belongs_to') {
              $log.warn('Must define an inverse belongsTo relation for inverseOf to work');
              _inverseOf = false; // disable the inverse if no inverse relation is found.
            }
          }
        }

        var scope = this.$buildScope(_model, _url || _model.encodeUrlName(_attr)), col;

        // setup collection
        col = _model.$collection(_params || null, scope);
        if(globalHooks) applyHooks(col, globalHooks, this);
        if(_hooks) applyHooks(col, _hooks, this);
        col.$dispatch('after-has-many-init');

        // set inverse property if required.
        if(_inverseOf) {
          var self = this;
          col.$on('after-add', function(_obj) {
            _obj[_inverseOf] = self;
          });
        }

        return col;
      });

      if(_source || _url) this.attrMap(_attr, _source || _url);

      this.attrDecoder(_attr, function(_raw) {
            this[_attr].$reset().$decode(_raw);
          })
          .attrMask(_attr, Utils.WRITE_MASK)
          .attrMeta(_attr, { relation: 'has_many' });

      return this;
    },

    /**
     * @memberof RelationBuilderApi#
     *
     * @description Registers a model **resource** relation
     *
     * @param {string}  _name Attribute name
     * @param {string|object} _model Other model, supports a model name or a direct reference.
     * @param {string} _url Partial url (optional)
     * @param {string} _source Inline resource alias (optional)
     * @param {string} _inverseOf Inverse property name (optional)
     * @param {object} _hooks Hooks to be applied just to the instantiated record
     * @return {BuilderApi} self
     */
    attrAsResource: function(_attr, _model, _url, _source, _inverseOf, _hooks) {

      var options, globalHooks; // global relation configuration

      this.attrDefault(_attr, function() {

        if(typeof _model === 'string') {
          _model = $injector.get(_model);

          // retrieve global options
          options = _model.getProperty('hasOne', {});
          globalHooks = options.hooks;

          if(_inverseOf) {
            var desc = _model.$$getDescription(_inverseOf);
            if(!desc || desc.relation !== 'belongs_to') {
              $log.warn('Must define an inverse belongsTo relation for inverseOf to work');
              _inverseOf = false; // disable the inverse if no inverse relation is found.
            }
          }
        }

        var scope = this.$buildScope(_model, _url || _model.encodeUrlName(_attr)), inst;

        // setup record
        inst = _model.$new(null, scope);
        if(globalHooks) applyHooks(inst, globalHooks, this);
        if(_hooks) applyHooks(inst, _hooks, this);
        inst.$dispatch('after-has-one-init');

        if(_inverseOf) {
          inst[_inverseOf] = this;
        }

        return inst;
      });

      if(_source || _url) this.attrMap(_attr, _source || _url);

      this.attrDecoder(_attr, function(_raw) {
            this[_attr].$decode(_raw);
          })
          .attrMask(_attr, Utils.WRITE_MASK)
          .attrMeta(_attr, { relation: 'has_one' });

      return this;
    },

    /**
     * @memberof RelationBuilderApi#
     *
     * @description Registers a model **reference** relation.
     *
     * A reference relation expects the host object to provide the primary key of the referenced object or the referenced object itself (including its key).
     *
     * For example, given the following resource structure with a foreign key:
     *
     * ```json
     * {
     *   user_id: 20
     * }
     * ```
     *
     * Or this other structure with inlined data:
     *
     * ```json
     * {
     *   user: {
     *     id: 30,
     *     name: 'Steve'
     *   }
     * }
     * ```
     *
     * You should define the following model:
     *
     * ```javascript
     * restmod.model('/bikes', {
     *   user: { belongsTo: 'User' } // works for both cases detailed above
     * })
     * ```
     *
     * The object generated by the relation is not scoped to the host object, but to it's base class instead (not like hasOne),
     * so the type should not be nested.
     *
     * Its also posible to override the **foreign key name**.
     *
     * When a object containing a belongsTo reference is encoded for a server request, only the primary key value is sent using the
     * same **foreign key name** that was using on decoding. (`user_id` in the above example).
     *
     * @param {string}  _name Attribute name
     * @param {string|object} _model Other model, supports a model name or a direct reference.
     * @param {string} _key foreign key property name (optional, defaults to _attr + '_id').
     * @param {bool} _prefetch if set to true, $fetch will be automatically called on relation object load.
     * @return {BuilderApi} self
     */
    attrAsReference: function(_attr, _model, _key, _prefetch) {

      this.attrDefault(_attr, null)
          .attrMask(_attr, Utils.WRITE_MASK)
          .attrMeta(_attr, { relation: 'belongs_to' });

      function loadModel() {
        if(typeof _model === 'string') {
          _model = $injector.get(_model);
        }
      }

      // TODO: the following code assumes that attribute is at root level! (when uses this[_attr] or this[_attr + 'Id'])

      // inline data handling
      this.attrDecoder(_attr, function(_raw) {
        if(_raw === null) return null;
        loadModel();
        if(!this[_attr] || this[_attr].$pk !== _model.inferKey(_raw)) {
          this[_attr] = _model.$buildRaw(_raw);
        } else {
          this[_attr].$decode(_raw);
        }
      });

      // foreign key handling
      if(_key !== false) {
        this.attrMap(_attr + 'Id', _key || '*', true) // set a forced mapping to always generate key
            .attrDecoder(_attr + 'Id', function(_value) {
              if(_value === undefined) return;
              if(!this[_attr] || this[_attr].$pk !== _value) {
                if(_value !== null && _value !== false) {
                  loadModel();
                  this[_attr] = packerCache.resolve(_model.$new(_value)); // resolve inmediatelly if cached
                  if(_prefetch) this[_attr].$fetch();
                } else {
                  this[_attr] = null;
                }
              }
            })
            .attrEncoder(_attr + 'Id', function() {
              return this[_attr] ? this[_attr].$pk : null;
            });
      }

      return this;
    },

    /**
     * @memberof RelationBuilderApi#
     *
     * @description Registers a model **reference** relation.
     *
     * A reference relation expects the host object to provide the primary key of the referenced objects or the referenced objects themselves (including its key).
     *
     * For example, given the following resource structure with a foreign key array:
     *
     * ```json
     * {
     *   users_ids: [20, 30]
     * }
     * ```
     *
     * Or this other structure with inlined data:
     *
     * ```json
     * {
     *   users: [{
     *     id: 20,
     *     name: 'Steve'
     *   },{
     *     id: 30,
     *     name: 'Pili'
     *   }]
     * }
     * ```
     *
     * You should define the following model:
     *
     * ```javascript
     * restmod.model('/bikes', {
     *   users: { belongsToMany: 'User' } // works for both cases detailed above
     * })
     * ```
     *
     * The object generated by the relation is not scoped to the host object, but to it's base class instead (unlike hasMany),
     * so the referenced type should not be nested.
     *
     * When a object containing a belongsToMany reference is encoded for a server request, only the primary key value is sent for each object.
     *
     * @param {string}  _name Attribute name
     * @param {string|object} _model Other model, supports a model name or a direct reference.
     * @param {string} _keys Server name for the property that holds the referenced keys in response and request.
     * @return {BuilderApi} self
     */
    attrAsReferenceToMany: function(_attr, _model, _keys) {

      this.attrDefault(_attr, function() { return []; })
          .attrMask(_attr, Utils.WRITE_MASK)
          .attrMeta(_attr, { relation: 'belongs_to_many' });

      // TODO: the following code assumes that attribute is at root level! (when uses this[_attr])

      function loadModel() {
        if(typeof _model === 'string') {
          _model = $injector.get(_model);
        }
      }

      function processInbound(_raw, _ref) {
        loadModel();
        _ref.length = 0;
        // TODO: reuse objects that do not change (compare $pks)
        for(var i = 0, l = _raw.length; i < l; i++) {
          if(typeof _raw[i] === 'object') {
            _ref.push(_model.$buildRaw(_raw[i]));
          } else {
            _ref.push(packerCache.resolve(_model.$new(_raw[i])));
          }
        }
      }

      // inline data handling
      this.attrDecoder(_attr, function(_raw) {
        // TODO: if _keys == _attr then inbound data will be processed twice!
        if(_raw) processInbound(_raw, this[_attr]);
      });

      // foreign key handling
      if(_keys !== false) {
        var attrIds = inflector.singularize(_attr) + 'Ids';
        this.attrMap(attrIds, _keys || '*', true)
            .attrDecoder(attrIds, function(_raw) {
              if(_raw) processInbound(_raw, this[_attr]);
            })
            .attrEncoder(attrIds, function() {
              var result = [], others = this[_attr];
              for(var i = 0, l = others.length; i < l; i++) {
                result.push(others[i].$pk);
              }
              return result;
            });
      }

      return this;
    }
  };

  return restmod.mixin(function() {
    this.extend('attrAsCollection', EXT.attrAsCollection, ['hasMany', 'path', 'source', 'inverseOf', 'params', 'hooks']) // TODO: rename source to map, but disable attrMap if map is used here...
        .extend('attrAsResource', EXT.attrAsResource, ['hasOne', 'path', 'source', 'inverseOf', 'hooks'])
        .extend('attrAsReference', EXT.attrAsReference, ['belongsTo', 'key', 'prefetch'])
        .extend('attrAsReferenceToMany', EXT.attrAsReferenceToMany, ['belongsToMany', 'keys']);
  });

}]);
RMModule.factory('RMModelFactory', ['$injector', '$log', 'inflector', 'RMUtils', 'RMScopeApi', 'RMCommonApi', 'RMRecordApi', 'RMListApi', 'RMCollectionApi', 'RMExtendedApi', 'RMSerializer', 'RMBuilder',
  function($injector, $log, inflector, Utils, ScopeApi, CommonApi, RecordApi, ListApi, CollectionApi, ExtendedApi, Serializer, Builder) {

  var NAME_RGX = /(.*?)([^\/]+)\/?$/,
      extend = Utils.extendOverriden;

  return function(_baseUrl, _baseChain) {

    // IDEA: make constructor inaccessible, use separate type for records?
    // * Will ensure proper usage.
    // * Will lose type checking
    function Model(_scope, _pk) {
      this.$scope = _scope || Model;
      this.$pk = _pk;
      this.$initialize();
    }

    _baseUrl = Utils.cleanUrl(_baseUrl);

    var config = {
        primaryKey: 'id',
        urlPrefix: null
      },
      serializer = new Serializer(Model),
      defaults = [],                    // attribute defaults as an array of [key, value]
      computes = [],                    // computed attributes
      meta = {},                        // atribute metadata
      hooks = {},
      builder;                          // the model builder

    // make sure the resource name and plural name are available if posible:

    if(!config.name && _baseUrl) {
      config.name = inflector.singularize(_baseUrl.replace(NAME_RGX, '$2'));
    }

    if(!config.plural && config.name) {
      config.plural = inflector.pluralize(config.name);
    }

    var Collection = Utils.buildArrayType(),
        List = Utils.buildArrayType(),
        Dummy = function(_asCollection) {
          this.$isCollection = _asCollection;
          this.$initialize(); // TODO: deprecate this
        };

    // Collection factory
    function newCollection(_params, _scope) {
      var col = new Collection();
      col.$scope = _scope || Model;
      col.$params = _params;
      col.$initialize();
      return col;
    }

    ///// Setup static api

    /**
     * @class StaticApi
     * @extends ScopeApi
     * @extends CommonApi
     *
     * @description
     *
     * The restmod type API, every generated restmod model type exposes this API.
     *
     * @property {object} $type Reference to the type itself, for compatibility with the {@link ScopeApi}
     *
     * #### About object creation
     *
     * Direct construction of object instances using `new` is not recommended. A collection of
     * static methods are available to generate new instances of a model, for more information
     * read the {@link ModelCollection} documentation.
     */
    extend(Model, {

      // gets an attribute description (metadata)
      $$getDescription: function(_attribute) {
        return meta[_attribute];
      },

      // definition chain
      $$chain: [],

      // keep a reference to type itself for scope api compatibility
      $type: Model,

      // creates a new model bound by default to the static scope
      $new: function(_pk, _scope) {
        return new Model(_scope || Model, _pk);
      },

      // creates a new collection bound by default to the static scope
      $collection: newCollection,

      // gets scope url
      $url: function() {
        return config.urlPrefix ? Utils.joinUrl(config.urlPrefix, _baseUrl) : _baseUrl;
      },

      // bubbles events comming from related resources
      $dispatch: function(_hook, _args, _ctx) {
        var cbs = hooks[_hook], i, cb;
        if(cbs) {
          for(i = 0; !!(cb = cbs[i]); i++) {
            cb.apply(_ctx || this, _args || []);
          }
        }
        return this;
      },

      /**
       * @memberof StaticApi#
       *
       * @description
       *
       * Extracts the primary key from raw record data.
       *
       * Uses the key configured in the PRIMARY_KEY variable or 'id' by default.
       *
       * Some considerations:
       * * This method can be overriden to handle other scenarios.
       * * This method should not change the raw data passed to it.
       * * The primary key value extracted by this method should be comparable using the == operator.
       *
       * @param  {string} _rawData Raw object data (before it goes into decode)
       * @return {mixed} The primary key value.
       */
      inferKey: function(_rawData) {
        if(!_rawData || typeof _rawData[config.primaryKey] === 'undefined') return null;
        return _rawData[config.primaryKey];
      },

      /**
       * @memberof StaticApi#
       *
       * @description
       *
       * Gets a model's internal property value.
       *
       * Some builtin properties:
       * * url
       * * urlPrefix
       * * primaryKey
       *
       * @param  {string} _key Property name
       * @param  {mixed} _default Value to return if property is not defined
       * @return {mixed} value
       */
      getProperty: function(_key, _default) {
        var val = config[_key];
        return val !== undefined ? val : _default;
      },

      /**
       * @memberof StaticApi#
       *
       * @description Returns true if model is nested.
       *
       * An nested model can only be used as a nested resource (using hasMany or hasOne relations)
       *
       * @return {boolean} true if model is nested.
       */
      isNested: function() {
        return !_baseUrl;
      },

      /**
       * @memberof StaticApi#
       *
       * @description Returns a resource bound to a given url, with no parent scope.
       *
       * This can be used to create singleton resources:
       *
       * ```javascript
       * module('BikeShop', []).factory('Status', function(restmod) {
       *   return restmod.model(null).$single('/api/status');
       * };)
       * ```
       *
       * @param {string} _url Url to bound resource to.
       * @return {Model} new resource instance.
       */
      single: function(_url) {
        return new Model({
          $urlFor: function() {
            return config.urlPrefix ? Utils.joinUrl(config.urlPrefix, _url) : _url;
          }
        }, '');
      },

      /**
       * Builds a new dummy resource, the dummy resource can be used to execute random queries
       * using the same infrastructure as records and collections.
       *
       * @return {Dummy} the dummy object
       */
      dummy: function(_asCollection) {
        return new Dummy(_asCollection);
      },

      /**
       * Creates a new record list.
       *
       * A list is a ordered set of records not bound to a particular scope.
       *
       * Contained records can belong to any scope.
       *
       * @return {List} the new list
       */
      list: function(_items) {
        var list = new List();
        if(_items) list.push.apply(list, _items);
        return list;
      },

      /**
       * @memberof StaticApi#
       *
       * @description Returns the model API name.
       *
       * This name should match the one used throughout the API. It's only used by some extended
       * functionality, like the default packer.
       *
       * By default model name is infered from the url, but for nested models and special cases
       * it should be manually set by writing the name and plural properties:
       *
       * ```javascript
       * restmod.model(null, {
       *   __name__: 'resource',
       *   __plural__: 'resourciness' // set only if inflector cant properly gess the name.
       * });
       * ```
       *
       * @return {boolean} If true, return plural name
       * @return {string} The base url.
       */
      identity: function(_plural) {
        return _plural ? config.plural : config.name;
      },

      /**
       * @memberof StaticApi#
       *
       * @description Modifies model behavior.
       *
       * @params {mixed} _mixins One or more mixins or model definitions.
       * @return {Model} The model
       */
      mix: function(/* mixins */) {
        builder.chain(arguments);
        this.$$chain.push.apply(this.$$chain, arguments);
        return this;
      },

      // Strategies

      /**
       * @memberof StaticApi#
       *
       * @description The model unpacking strategy
       *
       * This method is called to extract record data from a request response, its also
       * responsible of handling the response metadata.
       *
       * Override this method to change the metadata processing strategy, by default its a noop
       *
       * @params {mixed} _resource Related resource instance
       * @params {mixed} _raw Response raw data
       * @return {mixed} Resource raw data
       */
      unpack: function(_resource, _raw) { return _raw; },

      /**
       * @memberof StaticApi#
       *
       * @description The model packing strategy
       *
       * This method is called to wrap raw record data to be sent in a request.
       *
       * Override this method to change the request packing strategy, by default its a noop
       *
       * @params {mixed} _resource Related resource instance
       * @params {mixed} _raw Record data to be sent (can be an array if resource is collection)
       * @return {mixed} Wrapped data
       */
      pack: function(_record, _raw) { return _raw; },

      /**
       * @memberof StaticApi#
       *
       * @description The model decoding strategy
       *
       * This method is called to populate a record from raw data (unppacked)
       */
      decode: serializer.decode,

      /**
       * @memberof StaticApi#
       *
       * @description The model encoding strategy
       *
       * This method is called to extract raw data from a record to be sent to server (before packing)
       */
      encode: serializer.encode,

      /**
       * @memberof StaticApi#
       *
       * @description The model name decoding strategy
       *
       * This method is called on every raw record data property to rename it, by default is not defined.
       *
       * Override this method to change the property renaming strategy.
       *
       * @params {string} _name Response (raw) name
       * @return {string} Record name
       */
      decodeName: null,

      /**
       * @memberof StaticApi#
       *
       * @description The model name encoding strategy
       *
       * This method is called when encoding a record to rename the record properties into the raw data properties,
       * by default is not defined.
       *
       * Override this method to change the property renaming strategy
       *
       * @params {string} _name Record name
       * @return {string} Response (raw) name
       */
      encodeName: null,

      /**
       * @memberof StaticApi#
       *
       * @description The model name to url encoding strategy
       *
       * This method is called when translating a name into an url fragment (mainly by relations).
       *
       * By default it uses the `inflector.parameterize` method, in 1.2 this will change and the default
       * behaviour will be to do nothing.
       *
       * @params {string} _name local name
       * @return {string} url fragment
       */
      encodeUrlName: function(_name) {
        $log.warn('Default paremeterization of urls will be disabled in 1.2, override Model.encodeUrlName with inflector.parameterize in your base model to keep the same behaviour.');
        return inflector.parameterize(_name);
      }

    }, ScopeApi);

    ///// Setup record api

    extend(Model.prototype, {

      $type: Model,

      // default initializer: loads the default parameter values
      $initialize: function() {
        var tmp, i, self = this;
        for(i = 0; (tmp = defaults[i]); i++) {
          this[tmp[0]] = (typeof tmp[1] === 'function') ? tmp[1].apply(this) : tmp[1];
        }

        for(i = 0; (tmp = computes[i]); i++) {
          Object.defineProperty(self, tmp[0], {
            enumerable: true,
            get: tmp[1]
          });
        }
      }

    }, CommonApi, RecordApi, ExtendedApi);

    ///// Setup collection api

    extend(Collection.prototype, {

      $type: Model,

      // provide record contructor
      $new: function(_pk, _scope) {
        return Model.$new(_pk, _scope || this);
      },

      // provide collection constructor
      $collection: function(_params, _scope) {
        _params = this.$params ? angular.extend({}, this.$params, _params) : _params;
        return newCollection(_params, _scope || this.$scope);
      }

    }, ListApi, ScopeApi, CommonApi, CollectionApi, ExtendedApi);

    ///// Setup list api

    extend(List.prototype, {

      $type: Model

    }, ListApi, CommonApi);

    ///// Setup dummy api

    extend(Dummy.prototype, {

      $type: Model,

      $initialize: function() {
        // Nothing by default
      }

    }, CommonApi);

    ///// Setup builder

    var APIS = {
      Model: Model,
      Record: Model.prototype,
      Collection: Collection.prototype,
      List: List.prototype,
      Dummy: Dummy.prototype
    };

    // helper used to extend api's
    function helpDefine(_api, _name, _fun) {
      var api = APIS[_api];

      Utils.assert(!!api, 'Invalid api name $1', _api);

      if(_name) {
        api[_name] = Utils.override(api[_name], _fun);
      } else {
        Utils.extendOverriden(api, _fun);
      }
    }

    // load the builder
    builder = new Builder(angular.extend(serializer.dsl(), {

      /**
       * @memberof BuilderApi#
       *
       * Sets one of the model's configuration properties.
       *
       * The following configuration parameters are available by default:
       * * primaryKey: The model's primary key, defaults to **id**. Keys must use server naming convention!
       * * urlPrefix: Url prefix to prepend to resource url, usefull to use in a base mixin when multiples models have the same prefix.
       * * url: The resource base url, null by default. If not given resource is considered nested.
       *
       * @param {string} _key The configuration key to set.
       * @param {mixed} _value The configuration value.
       * @return {BuilderApi} self
       */
      setProperty: function (_key, _value) {
        config[_key] = _value;
        return this;
      },

      /**
       * @memberof BuilderApi#
       *
       * @description Sets the default value for an attribute.
       *
       * Defaults values are set only on object construction phase.
       *
       * if `_init` is a function, then its evaluated every time the
       * default value is required.
       *
       * @param {string} _attr Attribute name
       * @param {mixed} _init Defaulf value / iniline function
       * @return {BuilderApi} self
       */
      attrDefault: function(_attr, _init) {
        defaults.push([_attr, _init]);
        return this;
      },

      /**
       * @memberof BuilderApi#
       *
       * @description Sets a computed value for an attribute.
       *
       * Computed values are set only on object construction phase.
       * Computed values are always masked
       *
       * @param {string} _attr Attribute name
       * @param {function} _fn Function that returns value
       * @return {BuilderApi} self
       */
      attrComputed: function(_attr, _fn) {
        computes.push([_attr, _fn]);
        this.attrMask(_attr, true);
        return this;
      },

      /**
       * @memberof BuilderApi#
       *
       * @description Registers attribute metadata.
       *
       * @param {string} _name Attribute name
       * @param {object} _metadata Attribute metadata
       * @return {BuilderApi} self
       */
      attrMeta: function(_name, _metadata) {
        meta[_name] = extend(meta[_name] || {}, _metadata);
        return this;
      },

      /**
       * @memberof BuilderApi#
       *
       * @description Adds methods to the model
       *
       * This method allows to extend the different model API's.
       *
       * The following API's can be extended using this method:
       * * Model: The static API, affects the Model object itself.
       * * Record: Affects each record generated by the model.
       * * Collection: Affects each collection generated by the model.
       * * Scope: Affects both the static API and collections.
       * * Resource: Affects records and collections.
       *
       * If no api is given
       *
       *
       * If no scope is given,
       * By default this method extends the **Record** prototype.
       * If called with an object
       * instead of a function it can be used to extend the collection and the type with
       * specific implementations.
       *
       * Usage:
       *
       * ```javascript
       * restmod.mixin(function() {
       *   this.define('myRecordMethod', function() {})
       *       .define('Model.myStaticMethod', function() {})
       *       .define('Collection', { }); // object to extend collection api with
       * });
       * ```
       *
       * It is posible to override an existing method using define, if overriden,
       * the old method can be called using `this.$super` inside de new method.
       *
       * @param {string} _where
       * @param {function} _fun Function to define or object with particular implementations
       * @param {string} _api One of the api names listed above, if not given defaults to 'Record'
       * @return {BuilderApi} self
       */
      define: function(_where, _fun) {

        var name = false, api = 'Record';
        if(typeof _fun === 'object' && _fun) {
          api = _where;
        } else {
          name = _where.split('.');
          if(name.length === 1) {
            name = name[0];
          } else {
            api = name[0];
            name = name[1];
          }
        }

        switch(api) {
        // Virtual API's
        case 'List':
          helpDefine('Collection', name, _fun);
          helpDefine('List', name, _fun);
          break;
        case 'Scope':
          helpDefine('Model', name, _fun);
          helpDefine('Collection', name, _fun);
          break;
        case 'Resource':
          helpDefine('Record', name, _fun);
          helpDefine('Collection', name, _fun);
          helpDefine('List', name, _fun);
          helpDefine('Dummy', name, _fun);
          break;
        default:
          helpDefine(api, name, _fun);
        }

        return this;
      },

      /**
       * @memberof BuilderApi#
       *
       * @description Adds an event hook
       *
       * Hooks are used to extend or modify the model behavior, and are not
       * designed to be used as an event listening system.
       *
       * The given function is executed in the hook's context, different hooks
       * make different parameters available to callbacks.
       *
       * @param {string} _hook The hook name, refer to restmod docs for builtin hooks.
       * @param {function} _do function to be executed
       * @return {BuilderApi} self
       */
      on: function(_hook, _do) {
        (hooks[_hook] || (hooks[_hook] = [])).push(_do);
        return this;
      }
    }));

    builder.chain(_baseChain); // load base chain.

    return Model;
  };

}]);

/**
 * @class FastQ
 *
 * @description
 *
 * Synchronous promise implementation (partial)
 *
 */
RMModule.factory('RMFastQ', [function() {

  var isFunction = angular.isFunction,
      catchError = function(_error) {
        return this.then(null, _error);
      };

  function simpleQ(_val, _withError) {

    if(_val && isFunction(_val.then)) return wrappedQ(_val);

    return {
      simple: true,

      then: function(_success, _error) {
        return simpleQ(_withError ? _error(_val) : _success(_val));
      },
      'catch': catchError,
      'finally': function(_cb) {
        var result = _cb();
        if(result && isFunction(_val.then)) {
          // if finally returns a promise, then
          return wrappedQ(_val.then(
            function() { return _withError ? simpleQ(_val, true) : _val; },
            function() { return _withError ? simpleQ(_val, true) : _val; })
          );
        } else {
          return this;
        }
      }
    };
  }

  function wrappedQ(_promise) {
    if(_promise.simple) return _promise;

    var simple;

    // when resolved, make $q a simpleQ
    _promise.then(function(_val) {
      simple = simpleQ(_val);
    }, function(_val) {
      simple = simpleQ(_val, true);
    });

    return {
      then: function(_success, _error) {
        return simple ?
          simple.then(_success, _error) :
          wrappedQ(_promise.then(_success, _error));
      },
      'catch': catchError,
      'finally': function(_cb) {
        return simple ?
          simple['finally'](_cb) :
          wrappedQ(_promise['finally'](_cb));
      }
    };
  }

  return {
    reject: function(_reason) {
      return simpleQ(_reason, true);
    },

    // non waiting promise, if resolved executes immediately
    when: function(_val) {
      return simpleQ(_val, false);
    },

    wrap: wrappedQ
  };
}]);

RMModule.factory('RMPackerCache', [function() {

  var packerCache;

  /**
   * @class PackerCache
   *
   * @description
   *
   * The packer cache service enables packing strategies to register raw object data that can be then used by
   * supporting relations during the decoding process to preload other related resources.
   *
   * This is specially useful for apis that include linked objects data in external metadata.
   *
   * The packer cache is reset on every response unwrapping so it's not supposed to be used as an
   * application wide cache.
   *
   * ### For extension developers:
   *
   * Use the `feed` method to add new raw data to cache.
   *
   * ### For relation developers:
   *
   * Use the `resolve` method to inject cache data into a given identified record.
   *
   */
  return {
    /**
     * @memberof PackerCache#
     *
     * @description Feed data to the cache.
     *
     * @param {string} _name Resource name (singular)
     * @param {array} _rawRecords Raw record data as an array
     */
    feed: function(_name, _rawRecords) {
      packerCache[_name] = _rawRecords; // TODO: maybe append new record to support extended scenarios.
    },

    // IDEA: feedSingle: would require two step resolve many -> single

    /**
     * @memberof PackerCache#
     *
     * @description Searches for data matching the record's pk, if found data is then fed to the record using $decode.
     *
     * @param {RecordApi} _record restmod record to resolve, must be identified.
     * @return {RecordApi} The record, so call can be nested.
     */
    resolve: function(_record) {

      if(packerCache) { // make sure this is a packer cache enabled context.

        var modelType = _record.$type,
            cache = packerCache[modelType.identity(true)];

        if(cache && _record.$pk) {
          for(var i = 0, l = cache.length; i < l; i++) {
            if(_record.$pk === modelType.inferKey(cache[i])) { // this could be sort of slow? nah
              _record.$decode(cache[i]);
              break;
            }
          }
        }
      }

      return _record;
    },

    // private api method used by the unwrapper function.
    prepare: function() {
      packerCache = {};
    },

    // private api internal method used by the unwrapper function.
    clear: function() {
      packerCache = null;
    }
  };

}]);
RMModule.factory('RMSerializer', ['$injector', 'inflector', '$filter', 'RMUtils', function($injector, inflector, $filter, Utils) {

  function extract(_from, _path) {
    var node;
    for(var i = 0; _from && (node = _path[i]); i++) {
      _from = _from[node];
    }
    return _from;
  }

  function insert(_into, _path, _value) {
    for(var i = 0, l = _path.length-1; i < l; i++) {
      var node = _path[i];
      _into = _into[node] || (_into[node] = {});
    }
    _into[_path[_path.length-1]] = _value;
  }

  return function(_strategies) {

    var isArray = angular.isArray;

    // Private serializer attributes
    var masks = {},
        decoders = {},
        encoders = {},
        mapped = {},
        mappings = {},
        vol = {};

    function isMasked(_name, _mask) {
      if(typeof _mask === 'function') return _mask(_name);
      var mask = masks[_name];
      return (mask && (mask === true || mask.indexOf(_mask) !== -1));
    }

    function decode(_from, _to, _prefix, _mask, _ctx) {
      var key, decodedName, fullName, value, maps, isMapped, i, l,
          prefix = _prefix ? _prefix + '.' : '';

      // explicit mappings
      maps = mappings[_prefix];
      if(maps) {
        for(i = 0, l = maps.length; i < l; i++) {
          fullName = prefix + maps[i].path;
          if(isMasked(fullName, _mask)) continue;

          if(maps[i].map) {
            value = extract(_from, maps[i].map);
          } else {
            value = _from[_strategies.encodeName ? _strategies.encodeName(maps[i].path) : maps[i].path];
          }

          if(!maps[i].forced && value === undefined) continue;

          value = decodeProp(value, fullName, _mask, _ctx);
          if(value !== undefined) _to[maps[i].path] = value;
        }
      }

      // implicit mappings
      for(key in _from) {
        if(_from.hasOwnProperty(key)) {

          decodedName = _strategies.decodeName ? _strategies.decodeName(key) : key;
          if(decodedName[0] === '$') continue;

          if(maps) {
            // ignore already mapped keys
            // TODO: ignore nested mappings too.
            for(
              // is this so much faster than using .some? http://jsperf.com/some-vs-for-loop
              isMapped = false, i = 0, l = maps.length;
              i < l && !(isMapped = (maps[i].mapPath === key));
              i++
            );
            if(isMapped) continue;
          }

          fullName = prefix + decodedName;
          // prevent masked or already mapped properties to be set
          if(mapped[fullName] || isMasked(fullName, _mask)) continue;

          value = decodeProp(_from[key], fullName, _mask, _ctx);
          if(value !== undefined) _to[decodedName] = value; // ignore value if filter returns undefined
        }
      }
    }

    function decodeProp(_value, _name, _mask, _ctx) {
      var filter = decoders[_name], result = _value;

      if(filter) {
        result = filter.call(_ctx, _value);
      } else if(typeof _value === 'object') {
        // IDEA: make extended decoding/encoding optional, could be a little taxing for some apps
        if(isArray(_value)) {
          result = [];
          for(var i = 0, l = _value.length; i < l; i++) {
            result.push(decodeProp(_value[i], _name + '[]', _mask, _ctx));
          }
        } else if(_value) {
          result = {};
          decode(_value, result, _name, _mask, _ctx);
        }
      }

      return result;
    }

    function encode(_from, _to, _prefix, _mask, _ctx) {
      var key, fullName, encodedName, value, maps,
          prefix = _prefix ? _prefix + '.' : '';

      // implicit mappings
      for(key in _from) {
        if(_from.hasOwnProperty(key) && key[0] !== '$') {
          fullName = prefix + key;
          // prevent masked or already mapped properties to be copied
          if(mapped[fullName] || isMasked(fullName, _mask)) continue;

          value = encodeProp(_from[key], fullName, _mask, _ctx);
          if(value !== undefined) {
            encodedName = _strategies.encodeName ? _strategies.encodeName(key) : key;
            _to[encodedName] = value;
          }

          if(vol[fullName]) delete _from[key];
        }
      }

      // explicit mappings:
      maps = mappings[_prefix];
      if(maps) {
        for(var i = 0, l = maps.length; i < l; i++) {
          fullName = prefix + maps[i].path;
          if(isMasked(fullName, _mask)) continue;

          value = _from[maps[i].path];
          if(!maps[i].forced && value === undefined) continue;

          value = encodeProp(value, fullName, _mask, _ctx);
          if(value !== undefined) {
            if(maps[i].map) {
              insert(_to, maps[i].map, value);
            } else {
              _to[_strategies.encodeName ? _strategies.encodeName(maps[i].path) : maps[i].path] = value;
            }
          }
        }
      }
    }

    function encodeProp(_value, _name, _mask, _ctx) {
      var filter = encoders[_name], result = _value;

      if(filter) {
        result = filter.call(_ctx, _value);
      } else if(_value !== null && typeof _value === 'object' && typeof _value.toJSON !== 'function') {
        // IDEA: make deep decoding/encoding optional, could be a little taxing for some apps
        if(isArray(_value)) {
          result = [];
          for(var i = 0, l = _value.length; i < l; i++) {
            result.push(encodeProp(_value[i], _name + '[]', _mask, _ctx));
          }
        } else if(_value) {
          result = {};
          encode(_value, result, _name, _mask, _ctx);
        }
      }

      return result;
    }

    return {

      // decodes a raw record into a record
      decode: function(_record, _raw, _mask) {
        decode(_raw, _record, '', _mask, _record);
      },

      // encodes a record, returning a raw record
      encode: function(_record, _mask) {
        var raw = {};
        encode(_record, raw, '', _mask, _record);
        return raw;
      },

      // builds a serializerd DSL, is a standalone object that can be extended.
      dsl: function() {

        return {

          /**
           * @memberof BuilderApi#
           *
           * @description Sets an attribute mapping.
           *
           * Allows a explicit server to model property mapping to be defined.
           *
           * For example, to map the response property `stats.created_at` to model's `created` property.
           *
           * ```javascript
           * builder.attrMap('created', 'stats.created_at');
           * ```
           *
           * It's also posible to use a wildcard '*' as server name to use the default name decoder as
           * server name. This is used to force a property to be processed on decode/encode even if its
           * not present on request/record (respectively), by doing this its posible, for example, to define
           * a dynamic property that is generated automatically before the object is send to the server.
           *
           * @param {string} _attr Attribute name
           * @param {string} _serverName Server (request/response) property name
           * @return {BuilderApi} self
           */
          attrMap: function(_attr, _serverPath, _forced) {
            // extract parent node from client name:
            var index = _attr.lastIndexOf('.'),
                node = index !== -1 ? _attr.substr(0, index) : '',
                leaf = index !== -1 ? _attr.substr(index + 1) : _attr;

            mapped[_attr] = true;

            var nodes = (mappings[node] || (mappings[node] = []));
            nodes.push({ path: leaf, map: _serverPath === '*' ? null : _serverPath.split('.'), mapPath: _serverPath, forced: _forced });
            return this;
          },

          /**
           * @memberof BuilderApi#
           *
           * @description Sets an attribute mask.
           *
           * An attribute mask prevents the attribute to be loaded from or sent to the server on certain operations.
           *
           * The attribute mask is a string composed by:
           * * C: To prevent attribute from being sent on create
           * * R: To prevent attribute from being loaded from server
           * * U: To prevent attribute from being sent on update
           *
           * For example, the following will prevent an attribute to be send on create or update:
           *
           * ```javascript
           * builder.attrMask('readOnly', 'CU');
           * ```
           *
           * If a true boolean value is passed as mask, then 'CRU' will be used
           * If a false boolean valus is passed as mask, then mask will be removed
           *
           * @param {string} _attr Attribute name
           * @param {boolean|string} _mask Attribute mask
           * @return {BuilderApi} self
           */
          attrMask: function(_attr, _mask) {
            if(!_mask) {
              delete masks[_attr];
            } else {
              masks[_attr] = _mask;
            }
            return this;
          },

          /**
           * @memberof BuilderApi#
           *
           * @description Assigns a decoding function/filter to a given attribute.
           *
           * @param {string} _name Attribute name
           * @param {string|function} _filter filter or function to register
           * @param {mixed} _filterParam Misc filter parameter
           * @param {boolean} _chain If true, filter is chained to the current attribute filter.
           * @return {BuilderApi} self
           */
          attrDecoder: function(_attr, _filter, _filterParam, _chain) {

            if(typeof _filter === 'string') {
              var filter = $filter(_filter);
              _filter = function(_value) { return filter(_value, _filterParam); };
            }

            decoders[_attr] = _chain ? Utils.chain(decoders[_attr], _filter) : _filter;
            return this;
          },

          /**
           * @memberof BuilderApi#
           *
           * @description Assigns a encoding function/filter to a given attribute.
           *
           * @param {string} _name Attribute name
           * @param {string|function} _filter filter or function to register
           * @param {mixed} _filterParam Misc filter parameter
           * @param {boolean} _chain If true, filter is chained to the current attribute filter.
           * @return {BuilderApi} self
           */
          attrEncoder: function(_attr, _filter, _filterParam, _chain) {

            if(typeof _filter === 'string') {
              var filter = $filter(_filter);
              _filter = function(_value) { return filter(_value, _filterParam); };
            }

            encoders[_attr] = _chain ? Utils.chain(encoders[_attr], _filter) : _filter;
            return this;
          },

          /**
           * @memberof BuilderApi#
           *
           * @description Makes an attribute volatile, a volatile attribute is deleted from source after encoding.
           *
           * @param {string} _name Attribute name
           * @param {boolean} _isVolatile defaults to true, if set to false then the attribute is no longer volatile.
           * @return {BuilderApi} self
           */
          attrVolatile: function(_attr, _isVolatile) {
            vol[_attr] = _isVolatile === undefined ? true : _isVolatile;
            return this;
          }
        };
      }
    };
  };

}]);
RMModule.factory('DefaultPacker', ['restmod', 'inflector', 'RMPackerCache', function(restmod, inflector, packerCache) {

  function include(_source, _list, _do) {
    for(var i = 0, l = _list.length; i < l; i++) {
      _do(_list[i], _source[_list[i]]);
    }
  }

  function exclude(_source, _skip, _do) {
    for(var key in _source) {
      if(_source.hasOwnProperty(key) && _skip.indexOf(key) === -1) {
        _do(key, _source[key]);
      }
    }
  }

  // process links and stores them in the packer cache
  function processFeature(_raw, _name, _feature, _other, _do) {
    if(_feature === '.' || _feature === true) {
      var skip = [_name];
      if(_other) skip.push.apply(skip, angular.isArray(_other) ? _other : [_other]);
      exclude(_raw, skip, _do);
    } else if(typeof _feature === 'string') {
      exclude(_raw[_feature], [], _do);
    } else { // links is an array
      include(_raw, _feature, _do);
    }
  }

  /**
   * @class DefaultPacker
   *
   * @description
   *
   * Simple `$unpack` implementation that attempts to cover the standard proposed by
   * [active_model_serializers](https://github.com/rails-api/active_model_serializers.
   *
   * This is a simplified version of the wrapping structure recommented by the jsonapi.org standard,
   * it supports side loaded associated resources (via supporting relations) and metadata extraction.
   *
   * To activate add mixin to model chain
   *
   * ```javascript
   * restmodProvide.rebase('DefaultPacker');
   * ```
   *
   * ### Json root
   *
   * By default the mixin will use the singular model name as json root for single resource requests
   * and pluralized name for collection requests. Make sure the model name is correctly set.
   *
   * To override the name used by the mixin set the **jsonRootSingle** and **jsonRootMany** variables.
   * Or set **jsonRoot** to override both.
   *
   * ### Side loaded resources
   *
   * By default the mixin will look for links to other resources in the 'linked' root property, you
   * can change this by setting the jsonLinks variable. To use the root element as link source
   * use `jsonLinks: '.'`. You can also explicitly select which properties to consider links using an
   * array of property names. To skip links processing altogether, set it to false.
   *
   * Links are expected to use the pluralized version of the name for the referenced model. For example,
   * given the following response:
   *
   * ```json
   * {
   *   bikes: [...],
   *   links {
   *     parts: [...]
   *   }
   * }
   * ```
   *
   * Restmod will expect that the Part model plural name is correctly set parts. Only properties declared
   * as reference relations (belongsTo and belongsToMany) will be correctly resolved.
   *
   * ### Metadata
   *
   * By default metadata is only captured if it comes in the 'meta' root property. Metadata is then
   * stored in the $meta property of the resource being unwrapped.
   *
   * Just like links, to change the metadata source property set the jsonMeta property to the desired name, set
   * it to '.' to capture the entire raw response or set it to false to skip metadata and set it to an array of properties
   * to be extract selected properties.
   *
   * @property {mixed} single The expected single resource wrapper property name
   * @property {object} plural The expected collection wrapper property name
   * @property {mixed} links The links repository property name
   * @property {object} meta The metadata repository property name
   *
   */
  return restmod.mixin(function() {
    this.define('Model.unpack', function(_resource, _raw) {
      var name = null,
          links = this.getProperty('jsonLinks', 'linked'),
          meta = this.getProperty('jsonMeta', 'meta');

      if(_resource.$isCollection) {
        name = this.getProperty('jsonRootMany') || this.getProperty('jsonRoot') || this.getProperty('plural');
      } else {
        // TODO: use plural for single resource option.
        name = this.getProperty('jsonRootSingle') || this.getProperty('jsonRoot') || this.getProperty('name');
      }

      if(meta) {
        _resource.$metadata = {};
        processFeature(_raw, name, meta, links, function(_key, _value) {
          _resource.$metadata[_key] = _value;
        });
      }

      if(links) {
        processFeature(_raw, name, links, meta, function(_key, _value) {
          // TODO: check that cache is an array.
          packerCache.feed(_key, _value);
        });
      }

      return _raw[name];
    });
  });

}]);
/**
 * @class Utils
 *
 * @description
 *
 * Various utilities used across the library.
 *
 */
RMModule.factory('RMUtils', ['$log', function($log) {

  // determine browser support for object prototype changing
  var IFRAME_REF = [];
  var PROTO_SETTER = (function() {
    var Test = function() {};
    if(Object.setPrototypeOf) {
      return function(_target, _proto) {
        Object.setPrototypeOf(_target, _proto); // Not sure about supporting this...
      };
    } else if((new Test).__proto__ === Test.prototype) {
      return function(_target, _proto) {
        _target.__proto__ = _proto;
      };
    }
  })();

  var Utils = {

    // Ignore Masks
    CREATE_MASK: 'C',
    UPDATE_MASK: 'U',
    READ_MASK: 'R',
    WRITE_MASK: 'CU',
    FULL_MASK: 'CRU',

    /**
     * @memberof Utils
     *
     * @description
     *
     * Formats a string
     *
     * @param  {string} _str String to format
     * @param  {array} _args String arguments
     * @return {string} Formated string
     */
    format: function(_str, _args) {
      for(var i = 0; _args && i < _args.length; i++) {
        _str = _str.replace('$' + (i+1), _args[i]);
      }
      return _str;
    },

    /**
     * @memberof Utils
     *
     * @description
     *
     * Test for a condition to be met, if not an exception is thrown.
     *
     * @param  {boolean} _condition Condition to assert
     * @param  {string} _msg Error message
     */
    assert: function(_condition, _msg /*, params */) {
      if(!_condition) {
        var params = Array.prototype.slice.call(arguments, 2);
        _msg = Utils.format(_msg, params);
        $log.error(_msg); // log error message
        throw new Error(_msg);
      }
    },

    /**
     * @memberof Utils
     *
     * @description
     *
     * Simple url joining, returns null if _head or _tail is null.
     *
     * @param  {string} _head Url prefix
     * @param  {string} _tail Url suffix
     * @return {string} Resulting url
     */
    joinUrl: function(_head, _tail) {
      if(!_head || !_tail) return null;
      return (_head+'').replace(/\/$/, '') + '/' + (_tail+'').replace(/^\//, '');
    },

    /**
     * @memberof Utils
     *
     * @description
     *
     * Cleans trailing slashes from an url
     *
     * @param  {string} _url Url to clean
     * @return {string} Resulting url
     */
    cleanUrl: function(_url) {
      return _url ? _url.replace(/\/$/, '') : _url;
    },

    /**
     * @memberof Utils
     *
     * @description
     *
     * Chains to filtering functions together
     *
     * @param  {function} _first original function
     * @param  {function} _fun   function to call on the original function result
     * @return {mixed} value returned by the last function call
     */
    chain: function(_first, _fun) {
      if(!_first) return _fun;
      return function(_value) {
        return _fun.call(this, _first.call(this, _value));
      };
    },

    /**
     * @memberof Utils
     *
     * @description
     *
     * Override a property value, making overriden function available as this.$super
     *
     * @param  {function} _super Original value
     * @param  {mixed} _fun New property value
     * @return {mixed} Value returned by new function
     */
    override: function(_super, _fun) {
      if(!_super || typeof _fun !== 'function') return _fun;

      return function() {
        var oldSuper = this.$super;
        try {
          this.$super = _super;
          return _fun.apply(this, arguments);
        } finally {
          this.$super = oldSuper;
        }
      };
    },

    /**
     * @memberof Utils
     *
     * @description
     *
     * Extend an object using `Utils.override` instead of just replacing the functions.
     *
     * @param  {object} _target Object to be extended
     * @param  {object} _other  Source object
     */
    extendOverriden: function(_target) {
      for(var i = 1; i < arguments.length; i++) {
        var other = arguments[i];
        for(var key in other) {
          if(other.hasOwnProperty(key)) {
            _target[key] = _target[key] && typeof _target[key] === 'function' ? Utils.override(_target[key], other[key]) : other[key];
          }
        }
      }

      return _target;
    },

    /**
     * @memberof Utils
     *
     * @description
     *
     * Generates a new array type, handles platform specifics (bag-O-hacks)
     *
     * @return {object} Independent array type.
     */
    buildArrayType: function(_forceIframe) {

      var arrayType;

      if(PROTO_SETTER && !_forceIframe) {

        // Use object prototype override technique
        //
        // Very nice array subclassing analysis: http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array/#why_subclass_an_array
        //

        var SubArray = function() {
          var arr = [ ];
          arr.push.apply(arr, arguments);
          PROTO_SETTER(arr, SubArray.prototype);
          return arr;
        };

        SubArray.prototype = [];
        SubArray.prototype.last = function() {
          return this[this.length - 1];
        };

        arrayType = SubArray;

      } else  {

        // Use iframe hijack technique for IE11<
        //
        // Based on the awesome blog post of Dean Edwards: http://dean.edwards.name/weblog/2006/11/hooray/
        //

        // create a hidden <iframe>.
        var iframe = document.createElement('iframe');
        iframe.style.display = 'none';
        iframe.height = 0;
        iframe.width = 0;
        iframe.border = 0;

        document.body.appendChild(iframe);

        // write a script into the <iframe> and steal its Array object.
        window.frames[window.frames.length - 1].document.write('<script>parent.RestmodArray = Array;<\/script>');

        // take the array object and move it to local context.
        arrayType = window.RestmodArray;
        delete window.RestmodArray;

        // copy this context Array's extensions to new array type (could be a little slow...)
        for(var key in Array.prototype) {
          if(typeof Array.prototype[key] === 'function' && !arrayType.prototype[key]) {
            arrayType.prototype[key] = Array.prototype[key];
          }
        }

        // remove iframe from DOM.
        //
        // Even though MS says that removing iframe from DOM will release it's related structures (http://msdn.microsoft.com/en-us/library/ie/gg622929(v=vs.85).aspx),
        // actually keeping it referenced has proven to be enough to keep the structures alive. (that includes our array type)
        //
        document.body.removeChild(iframe);
        IFRAME_REF.push(iframe); // keep iframe reference!
      }

      return arrayType;
    }
  };

  return Utils;
}]);
})(angular);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/vendor/angular-restmod/dist/angular-restmod-bundle.js","/resources/assets/vendor/angular-restmod/dist")

},{"_process":7,"buffer":3}],75:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/**
 * API Bound Models for AngularJS
 * @version v1.1.7 - 2015-01-06
 * @link https://github.com/angular-platanus/restmod
 * @author Ignacio Baixas <ignacio@platan.us>
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
!function(a){"use strict";a.module("restmod").factory("AMSApi",["restmod","inflector",function(a,b){return a.mixin("DefaultPacker",{$config:{style:"AMS",primaryKey:"id",jsonMeta:"meta",jsonLinks:"links"},$extend:{Model:{decodeName:b.camelize,encodeName:function(a){return b.parameterize(a,"_")},encodeUrlName:b.parameterize}}})}])}(angular);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/vendor/angular-restmod/dist/styles/ams.min.js","/resources/assets/vendor/angular-restmod/dist/styles")

},{"_process":7,"buffer":3}],76:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/**
 * Created by macintosh on 1/28/15.
 */

require('./angular.min.js');
module.exports = angular;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/vendor/angular/angular-index.js","/resources/assets/vendor/angular")

},{"./angular.min.js":77,"_process":7,"buffer":3}],77:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*
 AngularJS v1.3.13
 (c) 2010-2014 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(M,Y,t){'use strict';function S(b){return function(){var a=arguments[0],c;c="["+(b?b+":":"")+a+"] http://errors.angularjs.org/1.3.13/"+(b?b+"/":"")+a;for(a=1;a<arguments.length;a++){c=c+(1==a?"?":"&")+"p"+(a-1)+"=";var d=encodeURIComponent,e;e=arguments[a];e="function"==typeof e?e.toString().replace(/ \{[\s\S]*$/,""):"undefined"==typeof e?"undefined":"string"!=typeof e?JSON.stringify(e):e;c+=d(e)}return Error(c)}}function Ta(b){if(null==b||Ua(b))return!1;var a=b.length;return b.nodeType===
oa&&a?!0:F(b)||H(b)||0===a||"number"===typeof a&&0<a&&a-1 in b}function s(b,a,c){var d,e;if(b)if(G(b))for(d in b)"prototype"==d||"length"==d||"name"==d||b.hasOwnProperty&&!b.hasOwnProperty(d)||a.call(c,b[d],d,b);else if(H(b)||Ta(b)){var f="object"!==typeof b;d=0;for(e=b.length;d<e;d++)(f||d in b)&&a.call(c,b[d],d,b)}else if(b.forEach&&b.forEach!==s)b.forEach(a,c,b);else for(d in b)b.hasOwnProperty(d)&&a.call(c,b[d],d,b);return b}function Ed(b,a,c){for(var d=Object.keys(b).sort(),e=0;e<d.length;e++)a.call(c,
b[d[e]],d[e]);return d}function lc(b){return function(a,c){b(c,a)}}function Fd(){return++ob}function mc(b,a){a?b.$$hashKey=a:delete b.$$hashKey}function x(b){for(var a=b.$$hashKey,c=1,d=arguments.length;c<d;c++){var e=arguments[c];if(e)for(var f=Object.keys(e),g=0,h=f.length;g<h;g++){var l=f[g];b[l]=e[l]}}mc(b,a);return b}function ba(b){return parseInt(b,10)}function Pb(b,a){return x(Object.create(b),a)}function z(){}function pa(b){return b}function ea(b){return function(){return b}}function B(b){return"undefined"===
typeof b}function y(b){return"undefined"!==typeof b}function I(b){return null!==b&&"object"===typeof b}function F(b){return"string"===typeof b}function V(b){return"number"===typeof b}function qa(b){return"[object Date]"===Da.call(b)}function G(b){return"function"===typeof b}function pb(b){return"[object RegExp]"===Da.call(b)}function Ua(b){return b&&b.window===b}function Va(b){return b&&b.$evalAsync&&b.$watch}function Wa(b){return"boolean"===typeof b}function nc(b){return!(!b||!(b.nodeName||b.prop&&
b.attr&&b.find))}function Gd(b){var a={};b=b.split(",");var c;for(c=0;c<b.length;c++)a[b[c]]=!0;return a}function ua(b){return Q(b.nodeName||b[0]&&b[0].nodeName)}function Xa(b,a){var c=b.indexOf(a);0<=c&&b.splice(c,1);return a}function Ea(b,a,c,d){if(Ua(b)||Va(b))throw Ka("cpws");if(a){if(b===a)throw Ka("cpi");c=c||[];d=d||[];if(I(b)){var e=c.indexOf(b);if(-1!==e)return d[e];c.push(b);d.push(a)}if(H(b))for(var f=a.length=0;f<b.length;f++)e=Ea(b[f],null,c,d),I(b[f])&&(c.push(b[f]),d.push(e)),a.push(e);
else{var g=a.$$hashKey;H(a)?a.length=0:s(a,function(b,c){delete a[c]});for(f in b)b.hasOwnProperty(f)&&(e=Ea(b[f],null,c,d),I(b[f])&&(c.push(b[f]),d.push(e)),a[f]=e);mc(a,g)}}else if(a=b)H(b)?a=Ea(b,[],c,d):qa(b)?a=new Date(b.getTime()):pb(b)?(a=new RegExp(b.source,b.toString().match(/[^\/]*$/)[0]),a.lastIndex=b.lastIndex):I(b)&&(e=Object.create(Object.getPrototypeOf(b)),a=Ea(b,e,c,d));return a}function ra(b,a){if(H(b)){a=a||[];for(var c=0,d=b.length;c<d;c++)a[c]=b[c]}else if(I(b))for(c in a=a||{},
b)if("$"!==c.charAt(0)||"$"!==c.charAt(1))a[c]=b[c];return a||b}function ga(b,a){if(b===a)return!0;if(null===b||null===a)return!1;if(b!==b&&a!==a)return!0;var c=typeof b,d;if(c==typeof a&&"object"==c)if(H(b)){if(!H(a))return!1;if((c=b.length)==a.length){for(d=0;d<c;d++)if(!ga(b[d],a[d]))return!1;return!0}}else{if(qa(b))return qa(a)?ga(b.getTime(),a.getTime()):!1;if(pb(b)&&pb(a))return b.toString()==a.toString();if(Va(b)||Va(a)||Ua(b)||Ua(a)||H(a))return!1;c={};for(d in b)if("$"!==d.charAt(0)&&!G(b[d])){if(!ga(b[d],
a[d]))return!1;c[d]=!0}for(d in a)if(!c.hasOwnProperty(d)&&"$"!==d.charAt(0)&&a[d]!==t&&!G(a[d]))return!1;return!0}return!1}function Ya(b,a,c){return b.concat(Za.call(a,c))}function oc(b,a){var c=2<arguments.length?Za.call(arguments,2):[];return!G(a)||a instanceof RegExp?a:c.length?function(){return arguments.length?a.apply(b,Ya(c,arguments,0)):a.apply(b,c)}:function(){return arguments.length?a.apply(b,arguments):a.call(b)}}function Hd(b,a){var c=a;"string"===typeof b&&"$"===b.charAt(0)&&"$"===b.charAt(1)?
c=t:Ua(a)?c="$WINDOW":a&&Y===a?c="$DOCUMENT":Va(a)&&(c="$SCOPE");return c}function $a(b,a){if("undefined"===typeof b)return t;V(a)||(a=a?2:null);return JSON.stringify(b,Hd,a)}function pc(b){return F(b)?JSON.parse(b):b}function va(b){b=D(b).clone();try{b.empty()}catch(a){}var c=D("<div>").append(b).html();try{return b[0].nodeType===qb?Q(c):c.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,function(a,b){return"<"+Q(b)})}catch(d){return Q(c)}}function qc(b){try{return decodeURIComponent(b)}catch(a){}}function rc(b){var a=
{},c,d;s((b||"").split("&"),function(b){b&&(c=b.replace(/\+/g,"%20").split("="),d=qc(c[0]),y(d)&&(b=y(c[1])?qc(c[1]):!0,sc.call(a,d)?H(a[d])?a[d].push(b):a[d]=[a[d],b]:a[d]=b))});return a}function Qb(b){var a=[];s(b,function(b,d){H(b)?s(b,function(b){a.push(Fa(d,!0)+(!0===b?"":"="+Fa(b,!0)))}):a.push(Fa(d,!0)+(!0===b?"":"="+Fa(b,!0)))});return a.length?a.join("&"):""}function rb(b){return Fa(b,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function Fa(b,a){return encodeURIComponent(b).replace(/%40/gi,
"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,a?"%20":"+")}function Id(b,a){var c,d,e=sb.length;b=D(b);for(d=0;d<e;++d)if(c=sb[d]+a,F(c=b.attr(c)))return c;return null}function Jd(b,a){var c,d,e={};s(sb,function(a){a+="app";!c&&b.hasAttribute&&b.hasAttribute(a)&&(c=b,d=b.getAttribute(a))});s(sb,function(a){a+="app";var e;!c&&(e=b.querySelector("["+a.replace(":","\\:")+"]"))&&(c=e,d=e.getAttribute(a))});c&&(e.strictDi=null!==Id(c,"strict-di"),
a(c,d?[d]:[],e))}function tc(b,a,c){I(c)||(c={});c=x({strictDi:!1},c);var d=function(){b=D(b);if(b.injector()){var d=b[0]===Y?"document":va(b);throw Ka("btstrpd",d.replace(/</,"&lt;").replace(/>/,"&gt;"));}a=a||[];a.unshift(["$provide",function(a){a.value("$rootElement",b)}]);c.debugInfoEnabled&&a.push(["$compileProvider",function(a){a.debugInfoEnabled(!0)}]);a.unshift("ng");d=ab(a,c.strictDi);d.invoke(["$rootScope","$rootElement","$compile","$injector",function(a,b,c,d){a.$apply(function(){b.data("$injector",
d);c(b)(a)})}]);return d},e=/^NG_ENABLE_DEBUG_INFO!/,f=/^NG_DEFER_BOOTSTRAP!/;M&&e.test(M.name)&&(c.debugInfoEnabled=!0,M.name=M.name.replace(e,""));if(M&&!f.test(M.name))return d();M.name=M.name.replace(f,"");ca.resumeBootstrap=function(b){s(b,function(b){a.push(b)});return d()};G(ca.resumeDeferredBootstrap)&&ca.resumeDeferredBootstrap()}function Kd(){M.name="NG_ENABLE_DEBUG_INFO!"+M.name;M.location.reload()}function Ld(b){b=ca.element(b).injector();if(!b)throw Ka("test");return b.get("$$testability")}
function uc(b,a){a=a||"_";return b.replace(Md,function(b,d){return(d?a:"")+b.toLowerCase()})}function Nd(){var b;vc||((sa=M.jQuery)&&sa.fn.on?(D=sa,x(sa.fn,{scope:La.scope,isolateScope:La.isolateScope,controller:La.controller,injector:La.injector,inheritedData:La.inheritedData}),b=sa.cleanData,sa.cleanData=function(a){var c;if(Rb)Rb=!1;else for(var d=0,e;null!=(e=a[d]);d++)(c=sa._data(e,"events"))&&c.$destroy&&sa(e).triggerHandler("$destroy");b(a)}):D=R,ca.element=D,vc=!0)}function Sb(b,a,c){if(!b)throw Ka("areq",
a||"?",c||"required");return b}function tb(b,a,c){c&&H(b)&&(b=b[b.length-1]);Sb(G(b),a,"not a function, got "+(b&&"object"===typeof b?b.constructor.name||"Object":typeof b));return b}function Ma(b,a){if("hasOwnProperty"===b)throw Ka("badname",a);}function wc(b,a,c){if(!a)return b;a=a.split(".");for(var d,e=b,f=a.length,g=0;g<f;g++)d=a[g],b&&(b=(e=b)[d]);return!c&&G(b)?oc(e,b):b}function ub(b){var a=b[0];b=b[b.length-1];var c=[a];do{a=a.nextSibling;if(!a)break;c.push(a)}while(a!==b);return D(c)}function ha(){return Object.create(null)}
function Od(b){function a(a,b,c){return a[b]||(a[b]=c())}var c=S("$injector"),d=S("ng");b=a(b,"angular",Object);b.$$minErr=b.$$minErr||S;return a(b,"module",function(){var b={};return function(f,g,h){if("hasOwnProperty"===f)throw d("badname","module");g&&b.hasOwnProperty(f)&&(b[f]=null);return a(b,f,function(){function a(c,d,e,f){f||(f=b);return function(){f[e||"push"]([c,d,arguments]);return u}}if(!g)throw c("nomod",f);var b=[],d=[],e=[],q=a("$injector","invoke","push",d),u={_invokeQueue:b,_configBlocks:d,
_runBlocks:e,requires:g,name:f,provider:a("$provide","provider"),factory:a("$provide","factory"),service:a("$provide","service"),value:a("$provide","value"),constant:a("$provide","constant","unshift"),animation:a("$animateProvider","register"),filter:a("$filterProvider","register"),controller:a("$controllerProvider","register"),directive:a("$compileProvider","directive"),config:q,run:function(a){e.push(a);return this}};h&&q(h);return u})}})}function Pd(b){x(b,{bootstrap:tc,copy:Ea,extend:x,equals:ga,
element:D,forEach:s,injector:ab,noop:z,bind:oc,toJson:$a,fromJson:pc,identity:pa,isUndefined:B,isDefined:y,isString:F,isFunction:G,isObject:I,isNumber:V,isElement:nc,isArray:H,version:Qd,isDate:qa,lowercase:Q,uppercase:vb,callbacks:{counter:0},getTestability:Ld,$$minErr:S,$$csp:bb,reloadWithDebugInfo:Kd});cb=Od(M);try{cb("ngLocale")}catch(a){cb("ngLocale",[]).provider("$locale",Rd)}cb("ng",["ngLocale"],["$provide",function(a){a.provider({$$sanitizeUri:Sd});a.provider("$compile",xc).directive({a:Td,
input:yc,textarea:yc,form:Ud,script:Vd,select:Wd,style:Xd,option:Yd,ngBind:Zd,ngBindHtml:$d,ngBindTemplate:ae,ngClass:be,ngClassEven:ce,ngClassOdd:de,ngCloak:ee,ngController:fe,ngForm:ge,ngHide:he,ngIf:ie,ngInclude:je,ngInit:ke,ngNonBindable:le,ngPluralize:me,ngRepeat:ne,ngShow:oe,ngStyle:pe,ngSwitch:qe,ngSwitchWhen:re,ngSwitchDefault:se,ngOptions:te,ngTransclude:ue,ngModel:ve,ngList:we,ngChange:xe,pattern:zc,ngPattern:zc,required:Ac,ngRequired:Ac,minlength:Bc,ngMinlength:Bc,maxlength:Cc,ngMaxlength:Cc,
ngValue:ye,ngModelOptions:ze}).directive({ngInclude:Ae}).directive(wb).directive(Dc);a.provider({$anchorScroll:Be,$animate:Ce,$browser:De,$cacheFactory:Ee,$controller:Fe,$document:Ge,$exceptionHandler:He,$filter:Ec,$interpolate:Ie,$interval:Je,$http:Ke,$httpBackend:Le,$location:Me,$log:Ne,$parse:Oe,$rootScope:Pe,$q:Qe,$$q:Re,$sce:Se,$sceDelegate:Te,$sniffer:Ue,$templateCache:Ve,$templateRequest:We,$$testability:Xe,$timeout:Ye,$window:Ze,$$rAF:$e,$$asyncCallback:af,$$jqLite:bf})}])}function db(b){return b.replace(cf,
function(a,b,d,e){return e?d.toUpperCase():d}).replace(df,"Moz$1")}function Fc(b){b=b.nodeType;return b===oa||!b||9===b}function Gc(b,a){var c,d,e=a.createDocumentFragment(),f=[];if(Tb.test(b)){c=c||e.appendChild(a.createElement("div"));d=(ef.exec(b)||["",""])[1].toLowerCase();d=ia[d]||ia._default;c.innerHTML=d[1]+b.replace(ff,"<$1></$2>")+d[2];for(d=d[0];d--;)c=c.lastChild;f=Ya(f,c.childNodes);c=e.firstChild;c.textContent=""}else f.push(a.createTextNode(b));e.textContent="";e.innerHTML="";s(f,function(a){e.appendChild(a)});
return e}function R(b){if(b instanceof R)return b;var a;F(b)&&(b=U(b),a=!0);if(!(this instanceof R)){if(a&&"<"!=b.charAt(0))throw Ub("nosel");return new R(b)}if(a){a=Y;var c;b=(c=gf.exec(b))?[a.createElement(c[1])]:(c=Gc(b,a))?c.childNodes:[]}Hc(this,b)}function Vb(b){return b.cloneNode(!0)}function xb(b,a){a||yb(b);if(b.querySelectorAll)for(var c=b.querySelectorAll("*"),d=0,e=c.length;d<e;d++)yb(c[d])}function Ic(b,a,c,d){if(y(d))throw Ub("offargs");var e=(d=zb(b))&&d.events,f=d&&d.handle;if(f)if(a)s(a.split(" "),
function(a){if(y(c)){var d=e[a];Xa(d||[],c);if(d&&0<d.length)return}b.removeEventListener(a,f,!1);delete e[a]});else for(a in e)"$destroy"!==a&&b.removeEventListener(a,f,!1),delete e[a]}function yb(b,a){var c=b.ng339,d=c&&Ab[c];d&&(a?delete d.data[a]:(d.handle&&(d.events.$destroy&&d.handle({},"$destroy"),Ic(b)),delete Ab[c],b.ng339=t))}function zb(b,a){var c=b.ng339,c=c&&Ab[c];a&&!c&&(b.ng339=c=++hf,c=Ab[c]={events:{},data:{},handle:t});return c}function Wb(b,a,c){if(Fc(b)){var d=y(c),e=!d&&a&&!I(a),
f=!a;b=(b=zb(b,!e))&&b.data;if(d)b[a]=c;else{if(f)return b;if(e)return b&&b[a];x(b,a)}}}function Bb(b,a){return b.getAttribute?-1<(" "+(b.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+a+" "):!1}function Cb(b,a){a&&b.setAttribute&&s(a.split(" "),function(a){b.setAttribute("class",U((" "+(b.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+U(a)+" "," ")))})}function Db(b,a){if(a&&b.setAttribute){var c=(" "+(b.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");
s(a.split(" "),function(a){a=U(a);-1===c.indexOf(" "+a+" ")&&(c+=a+" ")});b.setAttribute("class",U(c))}}function Hc(b,a){if(a)if(a.nodeType)b[b.length++]=a;else{var c=a.length;if("number"===typeof c&&a.window!==a){if(c)for(var d=0;d<c;d++)b[b.length++]=a[d]}else b[b.length++]=a}}function Jc(b,a){return Eb(b,"$"+(a||"ngController")+"Controller")}function Eb(b,a,c){9==b.nodeType&&(b=b.documentElement);for(a=H(a)?a:[a];b;){for(var d=0,e=a.length;d<e;d++)if((c=D.data(b,a[d]))!==t)return c;b=b.parentNode||
11===b.nodeType&&b.host}}function Kc(b){for(xb(b,!0);b.firstChild;)b.removeChild(b.firstChild)}function Lc(b,a){a||xb(b);var c=b.parentNode;c&&c.removeChild(b)}function jf(b,a){a=a||M;if("complete"===a.document.readyState)a.setTimeout(b);else D(a).on("load",b)}function Mc(b,a){var c=Fb[a.toLowerCase()];return c&&Nc[ua(b)]&&c}function kf(b,a){var c=b.nodeName;return("INPUT"===c||"TEXTAREA"===c)&&Oc[a]}function lf(b,a){var c=function(c,e){c.isDefaultPrevented=function(){return c.defaultPrevented};var f=
a[e||c.type],g=f?f.length:0;if(g){if(B(c.immediatePropagationStopped)){var h=c.stopImmediatePropagation;c.stopImmediatePropagation=function(){c.immediatePropagationStopped=!0;c.stopPropagation&&c.stopPropagation();h&&h.call(c)}}c.isImmediatePropagationStopped=function(){return!0===c.immediatePropagationStopped};1<g&&(f=ra(f));for(var l=0;l<g;l++)c.isImmediatePropagationStopped()||f[l].call(b,c)}};c.elem=b;return c}function bf(){this.$get=function(){return x(R,{hasClass:function(b,a){b.attr&&(b=b[0]);
return Bb(b,a)},addClass:function(b,a){b.attr&&(b=b[0]);return Db(b,a)},removeClass:function(b,a){b.attr&&(b=b[0]);return Cb(b,a)}})}}function Na(b,a){var c=b&&b.$$hashKey;if(c)return"function"===typeof c&&(c=b.$$hashKey()),c;c=typeof b;return c="function"==c||"object"==c&&null!==b?b.$$hashKey=c+":"+(a||Fd)():c+":"+b}function eb(b,a){if(a){var c=0;this.nextUid=function(){return++c}}s(b,this.put,this)}function mf(b){return(b=b.toString().replace(Pc,"").match(Qc))?"function("+(b[1]||"").replace(/[\s\r\n]+/,
" ")+")":"fn"}function ab(b,a){function c(a){return function(b,c){if(I(b))s(b,lc(a));else return a(b,c)}}function d(a,b){Ma(a,"service");if(G(b)||H(b))b=q.instantiate(b);if(!b.$get)throw Ga("pget",a);return n[a+"Provider"]=b}function e(a,b){return function(){var c=r.invoke(b,this);if(B(c))throw Ga("undef",a);return c}}function f(a,b,c){return d(a,{$get:!1!==c?e(a,b):b})}function g(a){var b=[],c;s(a,function(a){function d(a){var b,c;b=0;for(c=a.length;b<c;b++){var e=a[b],f=q.get(e[0]);f[e[1]].apply(f,
e[2])}}if(!m.get(a)){m.put(a,!0);try{F(a)?(c=cb(a),b=b.concat(g(c.requires)).concat(c._runBlocks),d(c._invokeQueue),d(c._configBlocks)):G(a)?b.push(q.invoke(a)):H(a)?b.push(q.invoke(a)):tb(a,"module")}catch(e){throw H(a)&&(a=a[a.length-1]),e.message&&e.stack&&-1==e.stack.indexOf(e.message)&&(e=e.message+"\n"+e.stack),Ga("modulerr",a,e.stack||e.message||e);}}});return b}function h(b,c){function d(a,e){if(b.hasOwnProperty(a)){if(b[a]===l)throw Ga("cdep",a+" <- "+k.join(" <- "));return b[a]}try{return k.unshift(a),
b[a]=l,b[a]=c(a,e)}catch(f){throw b[a]===l&&delete b[a],f;}finally{k.shift()}}function e(b,c,f,g){"string"===typeof f&&(g=f,f=null);var h=[],k=ab.$$annotate(b,a,g),l,q,n;q=0;for(l=k.length;q<l;q++){n=k[q];if("string"!==typeof n)throw Ga("itkn",n);h.push(f&&f.hasOwnProperty(n)?f[n]:d(n,g))}H(b)&&(b=b[l]);return b.apply(c,h)}return{invoke:e,instantiate:function(a,b,c){var d=Object.create((H(a)?a[a.length-1]:a).prototype||null);a=e(a,d,b,c);return I(a)||G(a)?a:d},get:d,annotate:ab.$$annotate,has:function(a){return n.hasOwnProperty(a+
"Provider")||b.hasOwnProperty(a)}}}a=!0===a;var l={},k=[],m=new eb([],!0),n={$provide:{provider:c(d),factory:c(f),service:c(function(a,b){return f(a,["$injector",function(a){return a.instantiate(b)}])}),value:c(function(a,b){return f(a,ea(b),!1)}),constant:c(function(a,b){Ma(a,"constant");n[a]=b;u[a]=b}),decorator:function(a,b){var c=q.get(a+"Provider"),d=c.$get;c.$get=function(){var a=r.invoke(d,c);return r.invoke(b,null,{$delegate:a})}}}},q=n.$injector=h(n,function(a,b){ca.isString(b)&&k.push(b);
throw Ga("unpr",k.join(" <- "));}),u={},r=u.$injector=h(u,function(a,b){var c=q.get(a+"Provider",b);return r.invoke(c.$get,c,t,a)});s(g(b),function(a){r.invoke(a||z)});return r}function Be(){var b=!0;this.disableAutoScrolling=function(){b=!1};this.$get=["$window","$location","$rootScope",function(a,c,d){function e(a){var b=null;Array.prototype.some.call(a,function(a){if("a"===ua(a))return b=a,!0});return b}function f(b){if(b){b.scrollIntoView();var c;c=g.yOffset;G(c)?c=c():nc(c)?(c=c[0],c="fixed"!==
a.getComputedStyle(c).position?0:c.getBoundingClientRect().bottom):V(c)||(c=0);c&&(b=b.getBoundingClientRect().top,a.scrollBy(0,b-c))}else a.scrollTo(0,0)}function g(){var a=c.hash(),b;a?(b=h.getElementById(a))?f(b):(b=e(h.getElementsByName(a)))?f(b):"top"===a&&f(null):f(null)}var h=a.document;b&&d.$watch(function(){return c.hash()},function(a,b){a===b&&""===a||jf(function(){d.$evalAsync(g)})});return g}]}function af(){this.$get=["$$rAF","$timeout",function(b,a){return b.supported?function(a){return b(a)}:
function(b){return a(b,0,!1)}}]}function nf(b,a,c,d){function e(a){try{a.apply(null,Za.call(arguments,1))}finally{if(v--,0===v)for(;w.length;)try{w.pop()()}catch(b){c.error(b)}}}function f(a,b){(function N(){s(L,function(a){a()});C=b(N,a)})()}function g(){h();l()}function h(){A=b.history.state;A=B(A)?null:A;ga(A,J)&&(A=J);J=A}function l(){if(E!==m.url()||O!==A)E=m.url(),O=A,s(W,function(a){a(m.url(),A)})}function k(a){try{return decodeURIComponent(a)}catch(b){return a}}var m=this,n=a[0],q=b.location,
u=b.history,r=b.setTimeout,P=b.clearTimeout,p={};m.isMock=!1;var v=0,w=[];m.$$completeOutstandingRequest=e;m.$$incOutstandingRequestCount=function(){v++};m.notifyWhenNoOutstandingRequests=function(a){s(L,function(a){a()});0===v?a():w.push(a)};var L=[],C;m.addPollFn=function(a){B(C)&&f(100,r);L.push(a);return a};var A,O,E=q.href,T=a.find("base"),X=null;h();O=A;m.url=function(a,c,e){B(e)&&(e=null);q!==b.location&&(q=b.location);u!==b.history&&(u=b.history);if(a){var f=O===e;if(E===a&&(!d.history||f))return m;
var g=E&&Ha(E)===Ha(a);E=a;O=e;!d.history||g&&f?(g||(X=a),c?q.replace(a):g?(c=q,e=a.indexOf("#"),a=-1===e?"":a.substr(e+1),c.hash=a):q.href=a):(u[c?"replaceState":"pushState"](e,"",a),h(),O=A);return m}return X||q.href.replace(/%27/g,"'")};m.state=function(){return A};var W=[],wa=!1,J=null;m.onUrlChange=function(a){if(!wa){if(d.history)D(b).on("popstate",g);D(b).on("hashchange",g);wa=!0}W.push(a);return a};m.$$checkUrlChange=l;m.baseHref=function(){var a=T.attr("href");return a?a.replace(/^(https?\:)?\/\/[^\/]*/,
""):""};var fa={},y="",da=m.baseHref();m.cookies=function(a,b){var d,e,f,g;if(a)b===t?n.cookie=encodeURIComponent(a)+"=;path="+da+";expires=Thu, 01 Jan 1970 00:00:00 GMT":F(b)&&(d=(n.cookie=encodeURIComponent(a)+"="+encodeURIComponent(b)+";path="+da).length+1,4096<d&&c.warn("Cookie '"+a+"' possibly not set or overflowed because it was too large ("+d+" > 4096 bytes)!"));else{if(n.cookie!==y)for(y=n.cookie,d=y.split("; "),fa={},f=0;f<d.length;f++)e=d[f],g=e.indexOf("="),0<g&&(a=k(e.substring(0,g)),
fa[a]===t&&(fa[a]=k(e.substring(g+1))));return fa}};m.defer=function(a,b){var c;v++;c=r(function(){delete p[c];e(a)},b||0);p[c]=!0;return c};m.defer.cancel=function(a){return p[a]?(delete p[a],P(a),e(z),!0):!1}}function De(){this.$get=["$window","$log","$sniffer","$document",function(b,a,c,d){return new nf(b,d,a,c)}]}function Ee(){this.$get=function(){function b(b,d){function e(a){a!=n&&(q?q==a&&(q=a.n):q=a,f(a.n,a.p),f(a,n),n=a,n.n=null)}function f(a,b){a!=b&&(a&&(a.p=b),b&&(b.n=a))}if(b in a)throw S("$cacheFactory")("iid",
b);var g=0,h=x({},d,{id:b}),l={},k=d&&d.capacity||Number.MAX_VALUE,m={},n=null,q=null;return a[b]={put:function(a,b){if(k<Number.MAX_VALUE){var c=m[a]||(m[a]={key:a});e(c)}if(!B(b))return a in l||g++,l[a]=b,g>k&&this.remove(q.key),b},get:function(a){if(k<Number.MAX_VALUE){var b=m[a];if(!b)return;e(b)}return l[a]},remove:function(a){if(k<Number.MAX_VALUE){var b=m[a];if(!b)return;b==n&&(n=b.p);b==q&&(q=b.n);f(b.n,b.p);delete m[a]}delete l[a];g--},removeAll:function(){l={};g=0;m={};n=q=null},destroy:function(){m=
h=l=null;delete a[b]},info:function(){return x({},h,{size:g})}}}var a={};b.info=function(){var b={};s(a,function(a,e){b[e]=a.info()});return b};b.get=function(b){return a[b]};return b}}function Ve(){this.$get=["$cacheFactory",function(b){return b("templates")}]}function xc(b,a){function c(a,b){var c=/^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/,d={};s(a,function(a,e){var f=a.match(c);if(!f)throw ja("iscp",b,e,a);d[e]={mode:f[1][0],collection:"*"===f[2],optional:"?"===f[3],attrName:f[4]||e}});return d}var d=
{},e=/^\s*directive\:\s*([\w\-]+)\s+(.*)$/,f=/(([\w\-]+)(?:\:([^;]+))?;?)/,g=Gd("ngSrc,ngSrcset,src,srcset"),h=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,l=/^(on[a-z]+|formaction)$/;this.directive=function n(a,e){Ma(a,"directive");F(a)?(Sb(e,"directiveFactory"),d.hasOwnProperty(a)||(d[a]=[],b.factory(a+"Directive",["$injector","$exceptionHandler",function(b,e){var f=[];s(d[a],function(d,g){try{var h=b.invoke(d);G(h)?h={compile:ea(h)}:!h.compile&&h.link&&(h.compile=ea(h.link));h.priority=h.priority||0;h.index=
g;h.name=h.name||a;h.require=h.require||h.controller&&h.name;h.restrict=h.restrict||"EA";I(h.scope)&&(h.$$isolateBindings=c(h.scope,h.name));f.push(h)}catch(l){e(l)}});return f}])),d[a].push(e)):s(a,lc(n));return this};this.aHrefSanitizationWhitelist=function(b){return y(b)?(a.aHrefSanitizationWhitelist(b),this):a.aHrefSanitizationWhitelist()};this.imgSrcSanitizationWhitelist=function(b){return y(b)?(a.imgSrcSanitizationWhitelist(b),this):a.imgSrcSanitizationWhitelist()};var k=!0;this.debugInfoEnabled=
function(a){return y(a)?(k=a,this):k};this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$document","$sce","$animate","$$sanitizeUri",function(a,b,c,r,P,p,v,w,L,C,A){function O(a,b){try{a.addClass(b)}catch(c){}}function E(a,b,c,d,e){a instanceof D||(a=D(a));s(a,function(b,c){b.nodeType==qb&&b.nodeValue.match(/\S+/)&&(a[c]=D(b).wrap("<span></span>").parent()[0])});var f=T(a,b,a,c,d,e);E.$$addScopeClass(a);var g=null;return function(b,c,
d){Sb(b,"scope");d=d||{};var e=d.parentBoundTranscludeFn,h=d.transcludeControllers;d=d.futureParentElement;e&&e.$$boundTransclude&&(e=e.$$boundTransclude);g||(g=(d=d&&d[0])?"foreignobject"!==ua(d)&&d.toString().match(/SVG/)?"svg":"html":"html");d="html"!==g?D(Xb(g,D("<div>").append(a).html())):c?La.clone.call(a):a;if(h)for(var l in h)d.data("$"+l+"Controller",h[l].instance);E.$$addScopeInfo(d,b);c&&c(d,b);f&&f(b,d,d,e);return d}}function T(a,b,c,d,e,f){function g(a,c,d,e){var f,l,k,q,n,p,w;if(r)for(w=
Array(c.length),q=0;q<h.length;q+=3)f=h[q],w[f]=c[f];else w=c;q=0;for(n=h.length;q<n;)l=w[h[q++]],c=h[q++],f=h[q++],c?(c.scope?(k=a.$new(),E.$$addScopeInfo(D(l),k)):k=a,p=c.transcludeOnThisElement?X(a,c.transclude,e,c.elementTranscludeOnThisElement):!c.templateOnThisElement&&e?e:!e&&b?X(a,b):null,c(f,k,l,d,p)):f&&f(a,l.childNodes,t,e)}for(var h=[],l,k,q,n,r,p=0;p<a.length;p++){l=new Yb;k=W(a[p],[],l,0===p?d:t,e);(f=k.length?fa(k,a[p],l,b,c,null,[],[],f):null)&&f.scope&&E.$$addScopeClass(l.$$element);
l=f&&f.terminal||!(q=a[p].childNodes)||!q.length?null:T(q,f?(f.transcludeOnThisElement||!f.templateOnThisElement)&&f.transclude:b);if(f||l)h.push(p,f,l),n=!0,r=r||f;f=null}return n?g:null}function X(a,b,c,d){return function(d,e,f,g,h){d||(d=a.$new(!1,h),d.$$transcluded=!0);return b(d,e,{parentBoundTranscludeFn:c,transcludeControllers:f,futureParentElement:g})}}function W(a,b,c,d,g){var h=c.$attr,l;switch(a.nodeType){case oa:da(b,ya(ua(a)),"E",d,g);for(var k,q,n,r=a.attributes,p=0,w=r&&r.length;p<
w;p++){var P=!1,L=!1;k=r[p];l=k.name;q=U(k.value);k=ya(l);if(n=gb.test(k))l=l.replace(Sc,"").substr(8).replace(/_(.)/g,function(a,b){return b.toUpperCase()});var u=k.replace(/(Start|End)$/,"");B(u)&&k===u+"Start"&&(P=l,L=l.substr(0,l.length-5)+"end",l=l.substr(0,l.length-6));k=ya(l.toLowerCase());h[k]=l;if(n||!c.hasOwnProperty(k))c[k]=q,Mc(a,k)&&(c[k]=!0);Pa(a,b,q,k,n);da(b,k,"A",d,g,P,L)}a=a.className;I(a)&&(a=a.animVal);if(F(a)&&""!==a)for(;l=f.exec(a);)k=ya(l[2]),da(b,k,"C",d,g)&&(c[k]=U(l[3])),
a=a.substr(l.index+l[0].length);break;case qb:M(b,a.nodeValue);break;case 8:try{if(l=e.exec(a.nodeValue))k=ya(l[1]),da(b,k,"M",d,g)&&(c[k]=U(l[2]))}catch(v){}}b.sort(N);return b}function wa(a,b,c){var d=[],e=0;if(b&&a.hasAttribute&&a.hasAttribute(b)){do{if(!a)throw ja("uterdir",b,c);a.nodeType==oa&&(a.hasAttribute(b)&&e++,a.hasAttribute(c)&&e--);d.push(a);a=a.nextSibling}while(0<e)}else d.push(a);return D(d)}function J(a,b,c){return function(d,e,f,g,h){e=wa(e[0],b,c);return a(d,e,f,g,h)}}function fa(a,
d,e,f,g,l,k,n,r){function w(a,b,c,d){if(a){c&&(a=J(a,c,d));a.require=K.require;a.directiveName=x;if(T===K||K.$$isolateScope)a=Z(a,{isolateScope:!0});k.push(a)}if(b){c&&(b=J(b,c,d));b.require=K.require;b.directiveName=x;if(T===K||K.$$isolateScope)b=Z(b,{isolateScope:!0});n.push(b)}}function L(a,b,c,d){var e,f="data",g=!1,l=c,k;if(F(b)){k=b.match(h);b=b.substring(k[0].length);k[3]&&(k[1]?k[3]=null:k[1]=k[3]);"^"===k[1]?f="inheritedData":"^^"===k[1]&&(f="inheritedData",l=c.parent());"?"===k[2]&&(g=!0);
e=null;d&&"data"===f&&(e=d[b])&&(e=e.instance);e=e||l[f]("$"+b+"Controller");if(!e&&!g)throw ja("ctreq",b,a);return e||null}H(b)&&(e=[],s(b,function(b){e.push(L(a,b,c,d))}));return e}function v(a,c,f,g,h){function l(a,b,c){var d;Va(a)||(c=b,b=a,a=t);z&&(d=O);c||(c=z?W.parent():W);return h(a,b,d,c,wa)}var r,w,u,A,O,fb,W,J;d===f?(J=e,W=e.$$element):(W=D(f),J=new Yb(W,e));T&&(A=c.$new(!0));h&&(fb=l,fb.$$boundTransclude=h);C&&(X={},O={},s(C,function(a){var b={$scope:a===T||a.$$isolateScope?A:c,$element:W,
$attrs:J,$transclude:fb};u=a.controller;"@"==u&&(u=J[a.name]);b=p(u,b,!0,a.controllerAs);O[a.name]=b;z||W.data("$"+a.name+"Controller",b.instance);X[a.name]=b}));if(T){E.$$addScopeInfo(W,A,!0,!(ka&&(ka===T||ka===T.$$originalDirective)));E.$$addScopeClass(W,!0);g=X&&X[T.name];var xa=A;g&&g.identifier&&!0===T.bindToController&&(xa=g.instance);s(A.$$isolateBindings=T.$$isolateBindings,function(a,d){var e=a.attrName,f=a.optional,g,h,l,k;switch(a.mode){case "@":J.$observe(e,function(a){xa[d]=a});J.$$observers[e].$$scope=
c;J[e]&&(xa[d]=b(J[e])(c));break;case "=":if(f&&!J[e])break;h=P(J[e]);k=h.literal?ga:function(a,b){return a===b||a!==a&&b!==b};l=h.assign||function(){g=xa[d]=h(c);throw ja("nonassign",J[e],T.name);};g=xa[d]=h(c);f=function(a){k(a,xa[d])||(k(a,g)?l(c,a=xa[d]):xa[d]=a);return g=a};f.$stateful=!0;f=a.collection?c.$watchCollection(J[e],f):c.$watch(P(J[e],f),null,h.literal);A.$on("$destroy",f);break;case "&":h=P(J[e]),xa[d]=function(a){return h(c,a)}}})}X&&(s(X,function(a){a()}),X=null);g=0;for(r=k.length;g<
r;g++)w=k[g],$(w,w.isolateScope?A:c,W,J,w.require&&L(w.directiveName,w.require,W,O),fb);var wa=c;T&&(T.template||null===T.templateUrl)&&(wa=A);a&&a(wa,f.childNodes,t,h);for(g=n.length-1;0<=g;g--)w=n[g],$(w,w.isolateScope?A:c,W,J,w.require&&L(w.directiveName,w.require,W,O),fb)}r=r||{};for(var A=-Number.MAX_VALUE,O,C=r.controllerDirectives,X,T=r.newIsolateScopeDirective,ka=r.templateDirective,fa=r.nonTlbTranscludeDirective,da=!1,B=!1,z=r.hasElementTranscludeDirective,aa=e.$$element=D(d),K,x,N,Aa=f,
Q,M=0,R=a.length;M<R;M++){K=a[M];var Pa=K.$$start,gb=K.$$end;Pa&&(aa=wa(d,Pa,gb));N=t;if(A>K.priority)break;if(N=K.scope)K.templateUrl||(I(N)?(Oa("new/isolated scope",T||O,K,aa),T=K):Oa("new/isolated scope",T,K,aa)),O=O||K;x=K.name;!K.templateUrl&&K.controller&&(N=K.controller,C=C||{},Oa("'"+x+"' controller",C[x],K,aa),C[x]=K);if(N=K.transclude)da=!0,K.$$tlb||(Oa("transclusion",fa,K,aa),fa=K),"element"==N?(z=!0,A=K.priority,N=aa,aa=e.$$element=D(Y.createComment(" "+x+": "+e[x]+" ")),d=aa[0],V(g,Za.call(N,
0),d),Aa=E(N,f,A,l&&l.name,{nonTlbTranscludeDirective:fa})):(N=D(Vb(d)).contents(),aa.empty(),Aa=E(N,f));if(K.template)if(B=!0,Oa("template",ka,K,aa),ka=K,N=G(K.template)?K.template(aa,e):K.template,N=Tc(N),K.replace){l=K;N=Tb.test(N)?Uc(Xb(K.templateNamespace,U(N))):[];d=N[0];if(1!=N.length||d.nodeType!==oa)throw ja("tplrt",x,"");V(g,aa,d);R={$attr:{}};N=W(d,[],R);var ba=a.splice(M+1,a.length-(M+1));T&&y(N);a=a.concat(N).concat(ba);Rc(e,R);R=a.length}else aa.html(N);if(K.templateUrl)B=!0,Oa("template",
ka,K,aa),ka=K,K.replace&&(l=K),v=S(a.splice(M,a.length-M),aa,e,g,da&&Aa,k,n,{controllerDirectives:C,newIsolateScopeDirective:T,templateDirective:ka,nonTlbTranscludeDirective:fa}),R=a.length;else if(K.compile)try{Q=K.compile(aa,e,Aa),G(Q)?w(null,Q,Pa,gb):Q&&w(Q.pre,Q.post,Pa,gb)}catch(of){c(of,va(aa))}K.terminal&&(v.terminal=!0,A=Math.max(A,K.priority))}v.scope=O&&!0===O.scope;v.transcludeOnThisElement=da;v.elementTranscludeOnThisElement=z;v.templateOnThisElement=B;v.transclude=Aa;r.hasElementTranscludeDirective=
z;return v}function y(a){for(var b=0,c=a.length;b<c;b++)a[b]=Pb(a[b],{$$isolateScope:!0})}function da(b,e,f,g,h,l,k){if(e===h)return null;h=null;if(d.hasOwnProperty(e)){var q;e=a.get(e+"Directive");for(var r=0,p=e.length;r<p;r++)try{q=e[r],(g===t||g>q.priority)&&-1!=q.restrict.indexOf(f)&&(l&&(q=Pb(q,{$$start:l,$$end:k})),b.push(q),h=q)}catch(w){c(w)}}return h}function B(b){if(d.hasOwnProperty(b))for(var c=a.get(b+"Directive"),e=0,f=c.length;e<f;e++)if(b=c[e],b.multiElement)return!0;return!1}function Rc(a,
b){var c=b.$attr,d=a.$attr,e=a.$$element;s(a,function(d,e){"$"!=e.charAt(0)&&(b[e]&&b[e]!==d&&(d+=("style"===e?";":" ")+b[e]),a.$set(e,d,!0,c[e]))});s(b,function(b,f){"class"==f?(O(e,b),a["class"]=(a["class"]?a["class"]+" ":"")+b):"style"==f?(e.attr("style",e.attr("style")+";"+b),a.style=(a.style?a.style+";":"")+b):"$"==f.charAt(0)||a.hasOwnProperty(f)||(a[f]=b,d[f]=c[f])})}function S(a,b,c,d,e,f,g,h){var l=[],k,q,n=b[0],p=a.shift(),w=Pb(p,{templateUrl:null,transclude:null,replace:null,$$originalDirective:p}),
P=G(p.templateUrl)?p.templateUrl(b,c):p.templateUrl,u=p.templateNamespace;b.empty();r(L.getTrustedResourceUrl(P)).then(function(r){var L,v;r=Tc(r);if(p.replace){r=Tb.test(r)?Uc(Xb(u,U(r))):[];L=r[0];if(1!=r.length||L.nodeType!==oa)throw ja("tplrt",p.name,P);r={$attr:{}};V(d,b,L);var A=W(L,[],r);I(p.scope)&&y(A);a=A.concat(a);Rc(c,r)}else L=n,b.html(r);a.unshift(w);k=fa(a,L,c,e,b,p,f,g,h);s(d,function(a,c){a==L&&(d[c]=b[0])});for(q=T(b[0].childNodes,e);l.length;){r=l.shift();v=l.shift();var C=l.shift(),
E=l.shift(),A=b[0];if(!r.$$destroyed){if(v!==n){var J=v.className;h.hasElementTranscludeDirective&&p.replace||(A=Vb(L));V(C,D(v),A);O(D(A),J)}v=k.transcludeOnThisElement?X(r,k.transclude,E):E;k(q,r,A,d,v)}}l=null});return function(a,b,c,d,e){a=e;b.$$destroyed||(l?l.push(b,c,d,a):(k.transcludeOnThisElement&&(a=X(b,k.transclude,e)),k(q,b,c,d,a)))}}function N(a,b){var c=b.priority-a.priority;return 0!==c?c:a.name!==b.name?a.name<b.name?-1:1:a.index-b.index}function Oa(a,b,c,d){if(b)throw ja("multidir",
b.name,c.name,a,va(d));}function M(a,c){var d=b(c,!0);d&&a.push({priority:0,compile:function(a){a=a.parent();var b=!!a.length;b&&E.$$addBindingClass(a);return function(a,c){var e=c.parent();b||E.$$addBindingClass(e);E.$$addBindingInfo(e,d.expressions);a.$watch(d,function(a){c[0].nodeValue=a})}}})}function Xb(a,b){a=Q(a||"html");switch(a){case "svg":case "math":var c=Y.createElement("div");c.innerHTML="<"+a+">"+b+"</"+a+">";return c.childNodes[0].childNodes;default:return b}}function R(a,b){if("srcdoc"==
b)return L.HTML;var c=ua(a);if("xlinkHref"==b||"form"==c&&"action"==b||"img"!=c&&("src"==b||"ngSrc"==b))return L.RESOURCE_URL}function Pa(a,c,d,e,f){var h=R(a,e);f=g[e]||f;var k=b(d,!0,h,f);if(k){if("multiple"===e&&"select"===ua(a))throw ja("selmulti",va(a));c.push({priority:100,compile:function(){return{pre:function(a,c,g){c=g.$$observers||(g.$$observers={});if(l.test(e))throw ja("nodomevents");var n=g[e];n!==d&&(k=n&&b(n,!0,h,f),d=n);k&&(g[e]=k(a),(c[e]||(c[e]=[])).$$inter=!0,(g.$$observers&&g.$$observers[e].$$scope||
a).$watch(k,function(a,b){"class"===e&&a!=b?g.$updateClass(a,b):g.$set(e,a)}))}}}})}}function V(a,b,c){var d=b[0],e=b.length,f=d.parentNode,g,h;if(a)for(g=0,h=a.length;g<h;g++)if(a[g]==d){a[g++]=c;h=g+e-1;for(var l=a.length;g<l;g++,h++)h<l?a[g]=a[h]:delete a[g];a.length-=e-1;a.context===d&&(a.context=c);break}f&&f.replaceChild(c,d);a=Y.createDocumentFragment();a.appendChild(d);D(c).data(D(d).data());sa?(Rb=!0,sa.cleanData([d])):delete D.cache[d[D.expando]];d=1;for(e=b.length;d<e;d++)f=b[d],D(f).remove(),
a.appendChild(f),delete b[d];b[0]=c;b.length=1}function Z(a,b){return x(function(){return a.apply(null,arguments)},a,b)}function $(a,b,d,e,f,g){try{a(b,d,e,f,g)}catch(h){c(h,va(d))}}var Yb=function(a,b){if(b){var c=Object.keys(b),d,e,f;d=0;for(e=c.length;d<e;d++)f=c[d],this[f]=b[f]}else this.$attr={};this.$$element=a};Yb.prototype={$normalize:ya,$addClass:function(a){a&&0<a.length&&C.addClass(this.$$element,a)},$removeClass:function(a){a&&0<a.length&&C.removeClass(this.$$element,a)},$updateClass:function(a,
b){var c=Vc(a,b);c&&c.length&&C.addClass(this.$$element,c);(c=Vc(b,a))&&c.length&&C.removeClass(this.$$element,c)},$set:function(a,b,d,e){var f=this.$$element[0],g=Mc(f,a),h=kf(f,a),f=a;g?(this.$$element.prop(a,b),e=g):h&&(this[h]=b,f=h);this[a]=b;e?this.$attr[a]=e:(e=this.$attr[a])||(this.$attr[a]=e=uc(a,"-"));g=ua(this.$$element);if("a"===g&&"href"===a||"img"===g&&"src"===a)this[a]=b=A(b,"src"===a);else if("img"===g&&"srcset"===a){for(var g="",h=U(b),l=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,l=/\s/.test(h)?
l:/(,)/,h=h.split(l),l=Math.floor(h.length/2),k=0;k<l;k++)var q=2*k,g=g+A(U(h[q]),!0),g=g+(" "+U(h[q+1]));h=U(h[2*k]).split(/\s/);g+=A(U(h[0]),!0);2===h.length&&(g+=" "+U(h[1]));this[a]=b=g}!1!==d&&(null===b||b===t?this.$$element.removeAttr(e):this.$$element.attr(e,b));(a=this.$$observers)&&s(a[f],function(a){try{a(b)}catch(d){c(d)}})},$observe:function(a,b){var c=this,d=c.$$observers||(c.$$observers=ha()),e=d[a]||(d[a]=[]);e.push(b);v.$evalAsync(function(){!e.$$inter&&c.hasOwnProperty(a)&&b(c[a])});
return function(){Xa(e,b)}}};var Aa=b.startSymbol(),ka=b.endSymbol(),Tc="{{"==Aa||"}}"==ka?pa:function(a){return a.replace(/\{\{/g,Aa).replace(/}}/g,ka)},gb=/^ngAttr[A-Z]/;E.$$addBindingInfo=k?function(a,b){var c=a.data("$binding")||[];H(b)?c=c.concat(b):c.push(b);a.data("$binding",c)}:z;E.$$addBindingClass=k?function(a){O(a,"ng-binding")}:z;E.$$addScopeInfo=k?function(a,b,c,d){a.data(c?d?"$isolateScopeNoTemplate":"$isolateScope":"$scope",b)}:z;E.$$addScopeClass=k?function(a,b){O(a,b?"ng-isolate-scope":
"ng-scope")}:z;return E}]}function ya(b){return db(b.replace(Sc,""))}function Vc(b,a){var c="",d=b.split(/\s+/),e=a.split(/\s+/),f=0;a:for(;f<d.length;f++){for(var g=d[f],h=0;h<e.length;h++)if(g==e[h])continue a;c+=(0<c.length?" ":"")+g}return c}function Uc(b){b=D(b);var a=b.length;if(1>=a)return b;for(;a--;)8===b[a].nodeType&&pf.call(b,a,1);return b}function Fe(){var b={},a=!1,c=/^(\S+)(\s+as\s+(\w+))?$/;this.register=function(a,c){Ma(a,"controller");I(a)?x(b,a):b[a]=c};this.allowGlobals=function(){a=
!0};this.$get=["$injector","$window",function(d,e){function f(a,b,c,d){if(!a||!I(a.$scope))throw S("$controller")("noscp",d,b);a.$scope[b]=c}return function(g,h,l,k){var m,n,q;l=!0===l;k&&F(k)&&(q=k);if(F(g)){k=g.match(c);if(!k)throw qf("ctrlfmt",g);n=k[1];q=q||k[3];g=b.hasOwnProperty(n)?b[n]:wc(h.$scope,n,!0)||(a?wc(e,n,!0):t);tb(g,n,!0)}if(l)return l=(H(g)?g[g.length-1]:g).prototype,m=Object.create(l||null),q&&f(h,q,m,n||g.name),x(function(){d.invoke(g,m,h,n);return m},{instance:m,identifier:q});
m=d.instantiate(g,h,n);q&&f(h,q,m,n||g.name);return m}}]}function Ge(){this.$get=["$window",function(b){return D(b.document)}]}function He(){this.$get=["$log",function(b){return function(a,c){b.error.apply(b,arguments)}}]}function Zb(b,a){if(F(b)){var c=b.replace(rf,"").trim();if(c){var d=a("Content-Type");(d=d&&0===d.indexOf(Wc))||(d=(d=c.match(sf))&&tf[d[0]].test(c));d&&(b=pc(c))}}return b}function Xc(b){var a=ha(),c,d,e;if(!b)return a;s(b.split("\n"),function(b){e=b.indexOf(":");c=Q(U(b.substr(0,
e)));d=U(b.substr(e+1));c&&(a[c]=a[c]?a[c]+", "+d:d)});return a}function Yc(b){var a=I(b)?b:t;return function(c){a||(a=Xc(b));return c?(c=a[Q(c)],void 0===c&&(c=null),c):a}}function Zc(b,a,c,d){if(G(d))return d(b,a,c);s(d,function(d){b=d(b,a,c)});return b}function Ke(){var b=this.defaults={transformResponse:[Zb],transformRequest:[function(a){return I(a)&&"[object File]"!==Da.call(a)&&"[object Blob]"!==Da.call(a)&&"[object FormData]"!==Da.call(a)?$a(a):a}],headers:{common:{Accept:"application/json, text/plain, */*"},
post:ra($b),put:ra($b),patch:ra($b)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN"},a=!1;this.useApplyAsync=function(b){return y(b)?(a=!!b,this):a};var c=this.interceptors=[];this.$get=["$httpBackend","$browser","$cacheFactory","$rootScope","$q","$injector",function(d,e,f,g,h,l){function k(a){function c(a){var b=x({},a);b.data=a.data?Zc(a.data,a.headers,a.status,e.transformResponse):a.data;a=a.status;return 200<=a&&300>a?b:h.reject(b)}function d(a){var b,c={};s(a,function(a,d){G(a)?(b=
a(),null!=b&&(c[d]=b)):c[d]=a});return c}if(!ca.isObject(a))throw S("$http")("badreq",a);var e=x({method:"get",transformRequest:b.transformRequest,transformResponse:b.transformResponse},a);e.headers=function(a){var c=b.headers,e=x({},a.headers),f,g,c=x({},c.common,c[Q(a.method)]);a:for(f in c){a=Q(f);for(g in e)if(Q(g)===a)continue a;e[f]=c[f]}return d(e)}(a);e.method=vb(e.method);var f=[function(a){var d=a.headers,e=Zc(a.data,Yc(d),t,a.transformRequest);B(e)&&s(d,function(a,b){"content-type"===Q(b)&&
delete d[b]});B(a.withCredentials)&&!B(b.withCredentials)&&(a.withCredentials=b.withCredentials);return m(a,e).then(c,c)},t],g=h.when(e);for(s(u,function(a){(a.request||a.requestError)&&f.unshift(a.request,a.requestError);(a.response||a.responseError)&&f.push(a.response,a.responseError)});f.length;){a=f.shift();var l=f.shift(),g=g.then(a,l)}g.success=function(a){g.then(function(b){a(b.data,b.status,b.headers,e)});return g};g.error=function(a){g.then(null,function(b){a(b.data,b.status,b.headers,e)});
return g};return g}function m(c,f){function l(b,c,d,e){function f(){m(c,b,d,e)}O&&(200<=b&&300>b?O.put(X,[b,c,Xc(d),e]):O.remove(X));a?g.$applyAsync(f):(f(),g.$$phase||g.$apply())}function m(a,b,d,e){b=Math.max(b,0);(200<=b&&300>b?C.resolve:C.reject)({data:a,status:b,headers:Yc(d),config:c,statusText:e})}function w(a){m(a.data,a.status,ra(a.headers()),a.statusText)}function u(){var a=k.pendingRequests.indexOf(c);-1!==a&&k.pendingRequests.splice(a,1)}var C=h.defer(),A=C.promise,O,E,s=c.headers,X=n(c.url,
c.params);k.pendingRequests.push(c);A.then(u,u);!c.cache&&!b.cache||!1===c.cache||"GET"!==c.method&&"JSONP"!==c.method||(O=I(c.cache)?c.cache:I(b.cache)?b.cache:q);O&&(E=O.get(X),y(E)?E&&G(E.then)?E.then(w,w):H(E)?m(E[1],E[0],ra(E[2]),E[3]):m(E,200,{},"OK"):O.put(X,A));B(E)&&((E=$c(c.url)?e.cookies()[c.xsrfCookieName||b.xsrfCookieName]:t)&&(s[c.xsrfHeaderName||b.xsrfHeaderName]=E),d(c.method,X,f,l,s,c.timeout,c.withCredentials,c.responseType));return A}function n(a,b){if(!b)return a;var c=[];Ed(b,
function(a,b){null===a||B(a)||(H(a)||(a=[a]),s(a,function(a){I(a)&&(a=qa(a)?a.toISOString():$a(a));c.push(Fa(b)+"="+Fa(a))}))});0<c.length&&(a+=(-1==a.indexOf("?")?"?":"&")+c.join("&"));return a}var q=f("$http"),u=[];s(c,function(a){u.unshift(F(a)?l.get(a):l.invoke(a))});k.pendingRequests=[];(function(a){s(arguments,function(a){k[a]=function(b,c){return k(x(c||{},{method:a,url:b}))}})})("get","delete","head","jsonp");(function(a){s(arguments,function(a){k[a]=function(b,c,d){return k(x(d||{},{method:a,
url:b,data:c}))}})})("post","put","patch");k.defaults=b;return k}]}function uf(){return new M.XMLHttpRequest}function Le(){this.$get=["$browser","$window","$document",function(b,a,c){return vf(b,uf,b.defer,a.angular.callbacks,c[0])}]}function vf(b,a,c,d,e){function f(a,b,c){var f=e.createElement("script"),m=null;f.type="text/javascript";f.src=a;f.async=!0;m=function(a){f.removeEventListener("load",m,!1);f.removeEventListener("error",m,!1);e.body.removeChild(f);f=null;var g=-1,u="unknown";a&&("load"!==
a.type||d[b].called||(a={type:"error"}),u=a.type,g="error"===a.type?404:200);c&&c(g,u)};f.addEventListener("load",m,!1);f.addEventListener("error",m,!1);e.body.appendChild(f);return m}return function(e,h,l,k,m,n,q,u){function r(){v&&v();w&&w.abort()}function P(a,d,e,f,g){C!==t&&c.cancel(C);v=w=null;a(d,e,f,g);b.$$completeOutstandingRequest(z)}b.$$incOutstandingRequestCount();h=h||b.url();if("jsonp"==Q(e)){var p="_"+(d.counter++).toString(36);d[p]=function(a){d[p].data=a;d[p].called=!0};var v=f(h.replace("JSON_CALLBACK",
"angular.callbacks."+p),p,function(a,b){P(k,a,d[p].data,"",b);d[p]=z})}else{var w=a();w.open(e,h,!0);s(m,function(a,b){y(a)&&w.setRequestHeader(b,a)});w.onload=function(){var a=w.statusText||"",b="response"in w?w.response:w.responseText,c=1223===w.status?204:w.status;0===c&&(c=b?200:"file"==Ba(h).protocol?404:0);P(k,c,b,w.getAllResponseHeaders(),a)};e=function(){P(k,-1,null,null,"")};w.onerror=e;w.onabort=e;q&&(w.withCredentials=!0);if(u)try{w.responseType=u}catch(L){if("json"!==u)throw L;}w.send(l||
null)}if(0<n)var C=c(r,n);else n&&G(n.then)&&n.then(r)}}function Ie(){var b="{{",a="}}";this.startSymbol=function(a){return a?(b=a,this):b};this.endSymbol=function(b){return b?(a=b,this):a};this.$get=["$parse","$exceptionHandler","$sce",function(c,d,e){function f(a){return"\\\\\\"+a}function g(f,g,u,r){function P(c){return c.replace(k,b).replace(m,a)}function p(a){try{var b=a;a=u?e.getTrusted(u,b):e.valueOf(b);var c;if(r&&!y(a))c=a;else if(null==a)c="";else{switch(typeof a){case "string":break;case "number":a=
""+a;break;default:a=$a(a)}c=a}return c}catch(g){c=ac("interr",f,g.toString()),d(c)}}r=!!r;for(var v,w,L=0,C=[],A=[],O=f.length,E=[],s=[];L<O;)if(-1!=(v=f.indexOf(b,L))&&-1!=(w=f.indexOf(a,v+h)))L!==v&&E.push(P(f.substring(L,v))),L=f.substring(v+h,w),C.push(L),A.push(c(L,p)),L=w+l,s.push(E.length),E.push("");else{L!==O&&E.push(P(f.substring(L)));break}if(u&&1<E.length)throw ac("noconcat",f);if(!g||C.length){var X=function(a){for(var b=0,c=C.length;b<c;b++){if(r&&B(a[b]))return;E[s[b]]=a[b]}return E.join("")};
return x(function(a){var b=0,c=C.length,e=Array(c);try{for(;b<c;b++)e[b]=A[b](a);return X(e)}catch(g){a=ac("interr",f,g.toString()),d(a)}},{exp:f,expressions:C,$$watchDelegate:function(a,b,c){var d;return a.$watchGroup(A,function(c,e){var f=X(c);G(b)&&b.call(this,f,c!==e?d:f,a);d=f},c)}})}}var h=b.length,l=a.length,k=new RegExp(b.replace(/./g,f),"g"),m=new RegExp(a.replace(/./g,f),"g");g.startSymbol=function(){return b};g.endSymbol=function(){return a};return g}]}function Je(){this.$get=["$rootScope",
"$window","$q","$$q",function(b,a,c,d){function e(e,h,l,k){var m=a.setInterval,n=a.clearInterval,q=0,u=y(k)&&!k,r=(u?d:c).defer(),P=r.promise;l=y(l)?l:0;P.then(null,null,e);P.$$intervalId=m(function(){r.notify(q++);0<l&&q>=l&&(r.resolve(q),n(P.$$intervalId),delete f[P.$$intervalId]);u||b.$apply()},h);f[P.$$intervalId]=r;return P}var f={};e.cancel=function(b){return b&&b.$$intervalId in f?(f[b.$$intervalId].reject("canceled"),a.clearInterval(b.$$intervalId),delete f[b.$$intervalId],!0):!1};return e}]}
function Rd(){this.$get=function(){return{id:"en-us",NUMBER_FORMATS:{DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{minInt:1,minFrac:0,maxFrac:3,posPre:"",posSuf:"",negPre:"-",negSuf:"",gSize:3,lgSize:3},{minInt:1,minFrac:2,maxFrac:2,posPre:"\u00a4",posSuf:"",negPre:"(\u00a4",negSuf:")",gSize:3,lgSize:3}],CURRENCY_SYM:"$"},DATETIME_FORMATS:{MONTH:"January February March April May June July August September October November December".split(" "),SHORTMONTH:"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),
DAY:"Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),SHORTDAY:"Sun Mon Tue Wed Thu Fri Sat".split(" "),AMPMS:["AM","PM"],medium:"MMM d, y h:mm:ss a","short":"M/d/yy h:mm a",fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",mediumDate:"MMM d, y",shortDate:"M/d/yy",mediumTime:"h:mm:ss a",shortTime:"h:mm a"},pluralCat:function(b){return 1===b?"one":"other"}}}}function bc(b){b=b.split("/");for(var a=b.length;a--;)b[a]=rb(b[a]);return b.join("/")}function ad(b,a){var c=Ba(b);a.$$protocol=
c.protocol;a.$$host=c.hostname;a.$$port=ba(c.port)||wf[c.protocol]||null}function bd(b,a){var c="/"!==b.charAt(0);c&&(b="/"+b);var d=Ba(b);a.$$path=decodeURIComponent(c&&"/"===d.pathname.charAt(0)?d.pathname.substring(1):d.pathname);a.$$search=rc(d.search);a.$$hash=decodeURIComponent(d.hash);a.$$path&&"/"!=a.$$path.charAt(0)&&(a.$$path="/"+a.$$path)}function za(b,a){if(0===a.indexOf(b))return a.substr(b.length)}function Ha(b){var a=b.indexOf("#");return-1==a?b:b.substr(0,a)}function Gb(b){return b.replace(/(#.+)|#$/,
"$1")}function cc(b){return b.substr(0,Ha(b).lastIndexOf("/")+1)}function dc(b,a){this.$$html5=!0;a=a||"";var c=cc(b);ad(b,this);this.$$parse=function(a){var b=za(c,a);if(!F(b))throw Hb("ipthprfx",a,c);bd(b,this);this.$$path||(this.$$path="/");this.$$compose()};this.$$compose=function(){var a=Qb(this.$$search),b=this.$$hash?"#"+rb(this.$$hash):"";this.$$url=bc(this.$$path)+(a?"?"+a:"")+b;this.$$absUrl=c+this.$$url.substr(1)};this.$$parseLinkUrl=function(d,e){if(e&&"#"===e[0])return this.hash(e.slice(1)),
!0;var f,g;(f=za(b,d))!==t?(g=f,g=(f=za(a,f))!==t?c+(za("/",f)||f):b+g):(f=za(c,d))!==t?g=c+f:c==d+"/"&&(g=c);g&&this.$$parse(g);return!!g}}function ec(b,a){var c=cc(b);ad(b,this);this.$$parse=function(d){d=za(b,d)||za(c,d);var e;"#"===d.charAt(0)?(e=za(a,d),B(e)&&(e=d)):e=this.$$html5?d:"";bd(e,this);d=this.$$path;var f=/^\/[A-Z]:(\/.*)/;0===e.indexOf(b)&&(e=e.replace(b,""));f.exec(e)||(d=(e=f.exec(d))?e[1]:d);this.$$path=d;this.$$compose()};this.$$compose=function(){var c=Qb(this.$$search),e=this.$$hash?
"#"+rb(this.$$hash):"";this.$$url=bc(this.$$path)+(c?"?"+c:"")+e;this.$$absUrl=b+(this.$$url?a+this.$$url:"")};this.$$parseLinkUrl=function(a,c){return Ha(b)==Ha(a)?(this.$$parse(a),!0):!1}}function cd(b,a){this.$$html5=!0;ec.apply(this,arguments);var c=cc(b);this.$$parseLinkUrl=function(d,e){if(e&&"#"===e[0])return this.hash(e.slice(1)),!0;var f,g;b==Ha(d)?f=d:(g=za(c,d))?f=b+a+g:c===d+"/"&&(f=c);f&&this.$$parse(f);return!!f};this.$$compose=function(){var c=Qb(this.$$search),e=this.$$hash?"#"+rb(this.$$hash):
"";this.$$url=bc(this.$$path)+(c?"?"+c:"")+e;this.$$absUrl=b+a+this.$$url}}function Ib(b){return function(){return this[b]}}function dd(b,a){return function(c){if(B(c))return this[b];this[b]=a(c);this.$$compose();return this}}function Me(){var b="",a={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(a){return y(a)?(b=a,this):b};this.html5Mode=function(b){return Wa(b)?(a.enabled=b,this):I(b)?(Wa(b.enabled)&&(a.enabled=b.enabled),Wa(b.requireBase)&&(a.requireBase=b.requireBase),Wa(b.rewriteLinks)&&
(a.rewriteLinks=b.rewriteLinks),this):a};this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(c,d,e,f,g){function h(a,b,c){var e=k.url(),f=k.$$state;try{d.url(a,b,c),k.$$state=d.state()}catch(g){throw k.url(e),k.$$state=f,g;}}function l(a,b){c.$broadcast("$locationChangeSuccess",k.absUrl(),a,k.$$state,b)}var k,m;m=d.baseHref();var n=d.url(),q;if(a.enabled){if(!m&&a.requireBase)throw Hb("nobase");q=n.substring(0,n.indexOf("/",n.indexOf("//")+2))+(m||"/");m=e.history?dc:cd}else q=
Ha(n),m=ec;k=new m(q,"#"+b);k.$$parseLinkUrl(n,n);k.$$state=d.state();var u=/^\s*(javascript|mailto):/i;f.on("click",function(b){if(a.rewriteLinks&&!b.ctrlKey&&!b.metaKey&&!b.shiftKey&&2!=b.which&&2!=b.button){for(var e=D(b.target);"a"!==ua(e[0]);)if(e[0]===f[0]||!(e=e.parent())[0])return;var h=e.prop("href"),l=e.attr("href")||e.attr("xlink:href");I(h)&&"[object SVGAnimatedString]"===h.toString()&&(h=Ba(h.animVal).href);u.test(h)||!h||e.attr("target")||b.isDefaultPrevented()||!k.$$parseLinkUrl(h,
l)||(b.preventDefault(),k.absUrl()!=d.url()&&(c.$apply(),g.angular["ff-684208-preventDefault"]=!0))}});Gb(k.absUrl())!=Gb(n)&&d.url(k.absUrl(),!0);var r=!0;d.onUrlChange(function(a,b){c.$evalAsync(function(){var d=k.absUrl(),e=k.$$state,f;k.$$parse(a);k.$$state=b;f=c.$broadcast("$locationChangeStart",a,d,b,e).defaultPrevented;k.absUrl()===a&&(f?(k.$$parse(d),k.$$state=e,h(d,!1,e)):(r=!1,l(d,e)))});c.$$phase||c.$digest()});c.$watch(function(){var a=Gb(d.url()),b=Gb(k.absUrl()),f=d.state(),g=k.$$replace,
q=a!==b||k.$$html5&&e.history&&f!==k.$$state;if(r||q)r=!1,c.$evalAsync(function(){var b=k.absUrl(),d=c.$broadcast("$locationChangeStart",b,a,k.$$state,f).defaultPrevented;k.absUrl()===b&&(d?(k.$$parse(a),k.$$state=f):(q&&h(b,g,f===k.$$state?null:k.$$state),l(a,f)))});k.$$replace=!1});return k}]}function Ne(){var b=!0,a=this;this.debugEnabled=function(a){return y(a)?(b=a,this):b};this.$get=["$window",function(c){function d(a){a instanceof Error&&(a.stack?a=a.message&&-1===a.stack.indexOf(a.message)?
"Error: "+a.message+"\n"+a.stack:a.stack:a.sourceURL&&(a=a.message+"\n"+a.sourceURL+":"+a.line));return a}function e(a){var b=c.console||{},e=b[a]||b.log||z;a=!1;try{a=!!e.apply}catch(l){}return a?function(){var a=[];s(arguments,function(b){a.push(d(b))});return e.apply(b,a)}:function(a,b){e(a,null==b?"":b)}}return{log:e("log"),info:e("info"),warn:e("warn"),error:e("error"),debug:function(){var c=e("debug");return function(){b&&c.apply(a,arguments)}}()}}]}function ta(b,a){if("__defineGetter__"===
b||"__defineSetter__"===b||"__lookupGetter__"===b||"__lookupSetter__"===b||"__proto__"===b)throw la("isecfld",a);return b}function ma(b,a){if(b){if(b.constructor===b)throw la("isecfn",a);if(b.window===b)throw la("isecwindow",a);if(b.children&&(b.nodeName||b.prop&&b.attr&&b.find))throw la("isecdom",a);if(b===Object)throw la("isecobj",a);}return b}function fc(b){return b.constant}function hb(b,a,c,d,e){ma(b,e);ma(a,e);c=c.split(".");for(var f,g=0;1<c.length;g++){f=ta(c.shift(),e);var h=0===g&&a&&a[f]||
b[f];h||(h={},b[f]=h);b=ma(h,e)}f=ta(c.shift(),e);ma(b[f],e);return b[f]=d}function Qa(b){return"constructor"==b}function ed(b,a,c,d,e,f,g){ta(b,f);ta(a,f);ta(c,f);ta(d,f);ta(e,f);var h=function(a){return ma(a,f)},l=g||Qa(b)?h:pa,k=g||Qa(a)?h:pa,m=g||Qa(c)?h:pa,n=g||Qa(d)?h:pa,q=g||Qa(e)?h:pa;return function(f,g){var h=g&&g.hasOwnProperty(b)?g:f;if(null==h)return h;h=l(h[b]);if(!a)return h;if(null==h)return t;h=k(h[a]);if(!c)return h;if(null==h)return t;h=m(h[c]);if(!d)return h;if(null==h)return t;
h=n(h[d]);return e?null==h?t:h=q(h[e]):h}}function xf(b,a){return function(c,d){return b(c,d,ma,a)}}function yf(b,a,c){var d=a.expensiveChecks,e=d?zf:Af,f=e[b];if(f)return f;var g=b.split("."),h=g.length;if(a.csp)f=6>h?ed(g[0],g[1],g[2],g[3],g[4],c,d):function(a,b){var e=0,f;do f=ed(g[e++],g[e++],g[e++],g[e++],g[e++],c,d)(a,b),b=t,a=f;while(e<h);return f};else{var l="";d&&(l+="s = eso(s, fe);\nl = eso(l, fe);\n");var k=d;s(g,function(a,b){ta(a,c);var e=(b?"s":'((l&&l.hasOwnProperty("'+a+'"))?l:s)')+
"."+a;if(d||Qa(a))e="eso("+e+", fe)",k=!0;l+="if(s == null) return undefined;\ns="+e+";\n"});l+="return s;";a=new Function("s","l","eso","fe",l);a.toString=ea(l);k&&(a=xf(a,c));f=a}f.sharedGetter=!0;f.assign=function(a,c,d){return hb(a,d,b,c,b)};return e[b]=f}function gc(b){return G(b.valueOf)?b.valueOf():Bf.call(b)}function Oe(){var b=ha(),a=ha();this.$get=["$filter","$sniffer",function(c,d){function e(a){var b=a;a.sharedGetter&&(b=function(b,c){return a(b,c)},b.literal=a.literal,b.constant=a.constant,
b.assign=a.assign);return b}function f(a,b){for(var c=0,d=a.length;c<d;c++){var e=a[c];e.constant||(e.inputs?f(e.inputs,b):-1===b.indexOf(e)&&b.push(e))}return b}function g(a,b){return null==a||null==b?a===b:"object"===typeof a&&(a=gc(a),"object"===typeof a)?!1:a===b||a!==a&&b!==b}function h(a,b,c,d){var e=d.$$inputs||(d.$$inputs=f(d.inputs,[])),h;if(1===e.length){var l=g,e=e[0];return a.$watch(function(a){var b=e(a);g(b,l)||(h=d(a),l=b&&gc(b));return h},b,c)}for(var k=[],q=0,n=e.length;q<n;q++)k[q]=
g;return a.$watch(function(a){for(var b=!1,c=0,f=e.length;c<f;c++){var l=e[c](a);if(b||(b=!g(l,k[c])))k[c]=l&&gc(l)}b&&(h=d(a));return h},b,c)}function l(a,b,c,d){var e,f;return e=a.$watch(function(a){return d(a)},function(a,c,d){f=a;G(b)&&b.apply(this,arguments);y(a)&&d.$$postDigest(function(){y(f)&&e()})},c)}function k(a,b,c,d){function e(a){var b=!0;s(a,function(a){y(a)||(b=!1)});return b}var f,g;return f=a.$watch(function(a){return d(a)},function(a,c,d){g=a;G(b)&&b.call(this,a,c,d);e(a)&&d.$$postDigest(function(){e(g)&&
f()})},c)}function m(a,b,c,d){var e;return e=a.$watch(function(a){return d(a)},function(a,c,d){G(b)&&b.apply(this,arguments);e()},c)}function n(a,b){if(!b)return a;var c=a.$$watchDelegate,c=c!==k&&c!==l?function(c,d){var e=a(c,d);return b(e,c,d)}:function(c,d){var e=a(c,d),f=b(e,c,d);return y(e)?f:e};a.$$watchDelegate&&a.$$watchDelegate!==h?c.$$watchDelegate=a.$$watchDelegate:b.$stateful||(c.$$watchDelegate=h,c.inputs=[a]);return c}var q={csp:d.csp,expensiveChecks:!1},u={csp:d.csp,expensiveChecks:!0};
return function(d,f,g){var v,w,L;switch(typeof d){case "string":L=d=d.trim();var C=g?a:b;v=C[L];v||(":"===d.charAt(0)&&":"===d.charAt(1)&&(w=!0,d=d.substring(2)),g=g?u:q,v=new hc(g),v=(new ib(v,c,g)).parse(d),v.constant?v.$$watchDelegate=m:w?(v=e(v),v.$$watchDelegate=v.literal?k:l):v.inputs&&(v.$$watchDelegate=h),C[L]=v);return n(v,f);case "function":return n(d,f);default:return n(z,f)}}}]}function Qe(){this.$get=["$rootScope","$exceptionHandler",function(b,a){return fd(function(a){b.$evalAsync(a)},
a)}]}function Re(){this.$get=["$browser","$exceptionHandler",function(b,a){return fd(function(a){b.defer(a)},a)}]}function fd(b,a){function c(a,b,c){function d(b){return function(c){e||(e=!0,b.call(a,c))}}var e=!1;return[d(b),d(c)]}function d(){this.$$state={status:0}}function e(a,b){return function(c){b.call(a,c)}}function f(c){!c.processScheduled&&c.pending&&(c.processScheduled=!0,b(function(){var b,d,e;e=c.pending;c.processScheduled=!1;c.pending=t;for(var f=0,g=e.length;f<g;++f){d=e[f][0];b=e[f][c.status];
try{G(b)?d.resolve(b(c.value)):1===c.status?d.resolve(c.value):d.reject(c.value)}catch(h){d.reject(h),a(h)}}}))}function g(){this.promise=new d;this.resolve=e(this,this.resolve);this.reject=e(this,this.reject);this.notify=e(this,this.notify)}var h=S("$q",TypeError);d.prototype={then:function(a,b,c){var d=new g;this.$$state.pending=this.$$state.pending||[];this.$$state.pending.push([d,a,b,c]);0<this.$$state.status&&f(this.$$state);return d.promise},"catch":function(a){return this.then(null,a)},"finally":function(a,
b){return this.then(function(b){return k(b,!0,a)},function(b){return k(b,!1,a)},b)}};g.prototype={resolve:function(a){this.promise.$$state.status||(a===this.promise?this.$$reject(h("qcycle",a)):this.$$resolve(a))},$$resolve:function(b){var d,e;e=c(this,this.$$resolve,this.$$reject);try{if(I(b)||G(b))d=b&&b.then;G(d)?(this.promise.$$state.status=-1,d.call(b,e[0],e[1],this.notify)):(this.promise.$$state.value=b,this.promise.$$state.status=1,f(this.promise.$$state))}catch(g){e[1](g),a(g)}},reject:function(a){this.promise.$$state.status||
this.$$reject(a)},$$reject:function(a){this.promise.$$state.value=a;this.promise.$$state.status=2;f(this.promise.$$state)},notify:function(c){var d=this.promise.$$state.pending;0>=this.promise.$$state.status&&d&&d.length&&b(function(){for(var b,e,f=0,g=d.length;f<g;f++){e=d[f][0];b=d[f][3];try{e.notify(G(b)?b(c):c)}catch(h){a(h)}}})}};var l=function(a,b){var c=new g;b?c.resolve(a):c.reject(a);return c.promise},k=function(a,b,c){var d=null;try{G(c)&&(d=c())}catch(e){return l(e,!1)}return d&&G(d.then)?
d.then(function(){return l(a,b)},function(a){return l(a,!1)}):l(a,b)},m=function(a,b,c,d){var e=new g;e.resolve(a);return e.promise.then(b,c,d)},n=function u(a){if(!G(a))throw h("norslvr",a);if(!(this instanceof u))return new u(a);var b=new g;a(function(a){b.resolve(a)},function(a){b.reject(a)});return b.promise};n.defer=function(){return new g};n.reject=function(a){var b=new g;b.reject(a);return b.promise};n.when=m;n.all=function(a){var b=new g,c=0,d=H(a)?[]:{};s(a,function(a,e){c++;m(a).then(function(a){d.hasOwnProperty(e)||
(d[e]=a,--c||b.resolve(d))},function(a){d.hasOwnProperty(e)||b.reject(a)})});0===c&&b.resolve(d);return b.promise};return n}function $e(){this.$get=["$window","$timeout",function(b,a){var c=b.requestAnimationFrame||b.webkitRequestAnimationFrame,d=b.cancelAnimationFrame||b.webkitCancelAnimationFrame||b.webkitCancelRequestAnimationFrame,e=!!c,f=e?function(a){var b=c(a);return function(){d(b)}}:function(b){var c=a(b,16.66,!1);return function(){a.cancel(c)}};f.supported=e;return f}]}function Pe(){var b=
10,a=S("$rootScope"),c=null,d=null;this.digestTtl=function(a){arguments.length&&(b=a);return b};this.$get=["$injector","$exceptionHandler","$parse","$browser",function(e,f,g,h){function l(){this.$id=++ob;this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null;this.$root=this;this.$$destroyed=!1;this.$$listeners={};this.$$listenerCount={};this.$$isolateBindings=null}function k(b){if(r.$$phase)throw a("inprog",r.$$phase);r.$$phase=b}function m(a,
b,c){do a.$$listenerCount[c]-=b,0===a.$$listenerCount[c]&&delete a.$$listenerCount[c];while(a=a.$parent)}function n(){}function q(){for(;v.length;)try{v.shift()()}catch(a){f(a)}d=null}function u(){null===d&&(d=h.defer(function(){r.$apply(q)}))}l.prototype={constructor:l,$new:function(a,b){function c(){d.$$destroyed=!0}var d;b=b||this;a?(d=new l,d.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=function(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null;this.$$listeners=
{};this.$$listenerCount={};this.$id=++ob;this.$$ChildScope=null},this.$$ChildScope.prototype=this),d=new this.$$ChildScope);d.$parent=b;d.$$prevSibling=b.$$childTail;b.$$childHead?(b.$$childTail.$$nextSibling=d,b.$$childTail=d):b.$$childHead=b.$$childTail=d;(a||b!=this)&&d.$on("$destroy",c);return d},$watch:function(a,b,d){var e=g(a);if(e.$$watchDelegate)return e.$$watchDelegate(this,b,d,e);var f=this.$$watchers,h={fn:b,last:n,get:e,exp:a,eq:!!d};c=null;G(b)||(h.fn=z);f||(f=this.$$watchers=[]);f.unshift(h);
return function(){Xa(f,h);c=null}},$watchGroup:function(a,b){function c(){h=!1;l?(l=!1,b(e,e,g)):b(e,d,g)}var d=Array(a.length),e=Array(a.length),f=[],g=this,h=!1,l=!0;if(!a.length){var k=!0;g.$evalAsync(function(){k&&b(e,e,g)});return function(){k=!1}}if(1===a.length)return this.$watch(a[0],function(a,c,f){e[0]=a;d[0]=c;b(e,a===c?e:d,f)});s(a,function(a,b){var l=g.$watch(a,function(a,f){e[b]=a;d[b]=f;h||(h=!0,g.$evalAsync(c))});f.push(l)});return function(){for(;f.length;)f.shift()()}},$watchCollection:function(a,
b){function c(a){e=a;var b,d,g,h;if(!B(e)){if(I(e))if(Ta(e))for(f!==q&&(f=q,u=f.length=0,k++),a=e.length,u!==a&&(k++,f.length=u=a),b=0;b<a;b++)h=f[b],g=e[b],d=h!==h&&g!==g,d||h===g||(k++,f[b]=g);else{f!==m&&(f=m={},u=0,k++);a=0;for(b in e)e.hasOwnProperty(b)&&(a++,g=e[b],h=f[b],b in f?(d=h!==h&&g!==g,d||h===g||(k++,f[b]=g)):(u++,f[b]=g,k++));if(u>a)for(b in k++,f)e.hasOwnProperty(b)||(u--,delete f[b])}else f!==e&&(f=e,k++);return k}}c.$stateful=!0;var d=this,e,f,h,l=1<b.length,k=0,n=g(a,c),q=[],m=
{},p=!0,u=0;return this.$watch(n,function(){p?(p=!1,b(e,e,d)):b(e,h,d);if(l)if(I(e))if(Ta(e)){h=Array(e.length);for(var a=0;a<e.length;a++)h[a]=e[a]}else for(a in h={},e)sc.call(e,a)&&(h[a]=e[a]);else h=e})},$digest:function(){var e,g,l,m,u,v,s=b,t,W=[],y,J;k("$digest");h.$$checkUrlChange();this===r&&null!==d&&(h.defer.cancel(d),q());c=null;do{v=!1;for(t=this;P.length;){try{J=P.shift(),J.scope.$eval(J.expression,J.locals)}catch(D){f(D)}c=null}a:do{if(m=t.$$watchers)for(u=m.length;u--;)try{if(e=m[u])if((g=
e.get(t))!==(l=e.last)&&!(e.eq?ga(g,l):"number"===typeof g&&"number"===typeof l&&isNaN(g)&&isNaN(l)))v=!0,c=e,e.last=e.eq?Ea(g,null):g,e.fn(g,l===n?g:l,t),5>s&&(y=4-s,W[y]||(W[y]=[]),W[y].push({msg:G(e.exp)?"fn: "+(e.exp.name||e.exp.toString()):e.exp,newVal:g,oldVal:l}));else if(e===c){v=!1;break a}}catch(B){f(B)}if(!(m=t.$$childHead||t!==this&&t.$$nextSibling))for(;t!==this&&!(m=t.$$nextSibling);)t=t.$parent}while(t=m);if((v||P.length)&&!s--)throw r.$$phase=null,a("infdig",b,W);}while(v||P.length);
for(r.$$phase=null;p.length;)try{p.shift()()}catch(da){f(da)}},$destroy:function(){if(!this.$$destroyed){var a=this.$parent;this.$broadcast("$destroy");this.$$destroyed=!0;if(this!==r){for(var b in this.$$listenerCount)m(this,this.$$listenerCount[b],b);a.$$childHead==this&&(a.$$childHead=this.$$nextSibling);a.$$childTail==this&&(a.$$childTail=this.$$prevSibling);this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling);this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling);
this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=z;this.$on=this.$watch=this.$watchGroup=function(){return z};this.$$listeners={};this.$parent=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=this.$root=this.$$watchers=null}}},$eval:function(a,b){return g(a)(this,b)},$evalAsync:function(a,b){r.$$phase||P.length||h.defer(function(){P.length&&r.$digest()});P.push({scope:this,expression:a,locals:b})},$$postDigest:function(a){p.push(a)},$apply:function(a){try{return k("$apply"),
this.$eval(a)}catch(b){f(b)}finally{r.$$phase=null;try{r.$digest()}catch(c){throw f(c),c;}}},$applyAsync:function(a){function b(){c.$eval(a)}var c=this;a&&v.push(b);u()},$on:function(a,b){var c=this.$$listeners[a];c||(this.$$listeners[a]=c=[]);c.push(b);var d=this;do d.$$listenerCount[a]||(d.$$listenerCount[a]=0),d.$$listenerCount[a]++;while(d=d.$parent);var e=this;return function(){var d=c.indexOf(b);-1!==d&&(c[d]=null,m(e,1,a))}},$emit:function(a,b){var c=[],d,e=this,g=!1,h={name:a,targetScope:e,
stopPropagation:function(){g=!0},preventDefault:function(){h.defaultPrevented=!0},defaultPrevented:!1},l=Ya([h],arguments,1),k,m;do{d=e.$$listeners[a]||c;h.currentScope=e;k=0;for(m=d.length;k<m;k++)if(d[k])try{d[k].apply(null,l)}catch(n){f(n)}else d.splice(k,1),k--,m--;if(g)return h.currentScope=null,h;e=e.$parent}while(e);h.currentScope=null;return h},$broadcast:function(a,b){var c=this,d=this,e={name:a,targetScope:this,preventDefault:function(){e.defaultPrevented=!0},defaultPrevented:!1};if(!this.$$listenerCount[a])return e;
for(var g=Ya([e],arguments,1),h,l;c=d;){e.currentScope=c;d=c.$$listeners[a]||[];h=0;for(l=d.length;h<l;h++)if(d[h])try{d[h].apply(null,g)}catch(k){f(k)}else d.splice(h,1),h--,l--;if(!(d=c.$$listenerCount[a]&&c.$$childHead||c!==this&&c.$$nextSibling))for(;c!==this&&!(d=c.$$nextSibling);)c=c.$parent}e.currentScope=null;return e}};var r=new l,P=r.$$asyncQueue=[],p=r.$$postDigestQueue=[],v=r.$$applyAsyncQueue=[];return r}]}function Sd(){var b=/^\s*(https?|ftp|mailto|tel|file):/,a=/^\s*((https?|ftp|file|blob):|data:image\/)/;
this.aHrefSanitizationWhitelist=function(a){return y(a)?(b=a,this):b};this.imgSrcSanitizationWhitelist=function(b){return y(b)?(a=b,this):a};this.$get=function(){return function(c,d){var e=d?a:b,f;f=Ba(c).href;return""===f||f.match(e)?c:"unsafe:"+f}}}function Cf(b){if("self"===b)return b;if(F(b)){if(-1<b.indexOf("***"))throw Ca("iwcard",b);b=gd(b).replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*");return new RegExp("^"+b+"$")}if(pb(b))return new RegExp("^"+b.source+"$");throw Ca("imatcher");}function hd(b){var a=
[];y(b)&&s(b,function(b){a.push(Cf(b))});return a}function Te(){this.SCE_CONTEXTS=na;var b=["self"],a=[];this.resourceUrlWhitelist=function(a){arguments.length&&(b=hd(a));return b};this.resourceUrlBlacklist=function(b){arguments.length&&(a=hd(b));return a};this.$get=["$injector",function(c){function d(a,b){return"self"===a?$c(b):!!a.exec(b.href)}function e(a){var b=function(a){this.$$unwrapTrustedValue=function(){return a}};a&&(b.prototype=new a);b.prototype.valueOf=function(){return this.$$unwrapTrustedValue()};
b.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()};return b}var f=function(a){throw Ca("unsafe");};c.has("$sanitize")&&(f=c.get("$sanitize"));var g=e(),h={};h[na.HTML]=e(g);h[na.CSS]=e(g);h[na.URL]=e(g);h[na.JS]=e(g);h[na.RESOURCE_URL]=e(h[na.URL]);return{trustAs:function(a,b){var c=h.hasOwnProperty(a)?h[a]:null;if(!c)throw Ca("icontext",a,b);if(null===b||b===t||""===b)return b;if("string"!==typeof b)throw Ca("itype",a);return new c(b)},getTrusted:function(c,e){if(null===
e||e===t||""===e)return e;var g=h.hasOwnProperty(c)?h[c]:null;if(g&&e instanceof g)return e.$$unwrapTrustedValue();if(c===na.RESOURCE_URL){var g=Ba(e.toString()),n,q,u=!1;n=0;for(q=b.length;n<q;n++)if(d(b[n],g)){u=!0;break}if(u)for(n=0,q=a.length;n<q;n++)if(d(a[n],g)){u=!1;break}if(u)return e;throw Ca("insecurl",e.toString());}if(c===na.HTML)return f(e);throw Ca("unsafe");},valueOf:function(a){return a instanceof g?a.$$unwrapTrustedValue():a}}}]}function Se(){var b=!0;this.enabled=function(a){arguments.length&&
(b=!!a);return b};this.$get=["$parse","$sceDelegate",function(a,c){if(b&&8>Ra)throw Ca("iequirks");var d=ra(na);d.isEnabled=function(){return b};d.trustAs=c.trustAs;d.getTrusted=c.getTrusted;d.valueOf=c.valueOf;b||(d.trustAs=d.getTrusted=function(a,b){return b},d.valueOf=pa);d.parseAs=function(b,c){var e=a(c);return e.literal&&e.constant?e:a(c,function(a){return d.getTrusted(b,a)})};var e=d.parseAs,f=d.getTrusted,g=d.trustAs;s(na,function(a,b){var c=Q(b);d[db("parse_as_"+c)]=function(b){return e(a,
b)};d[db("get_trusted_"+c)]=function(b){return f(a,b)};d[db("trust_as_"+c)]=function(b){return g(a,b)}});return d}]}function Ue(){this.$get=["$window","$document",function(b,a){var c={},d=ba((/android (\d+)/.exec(Q((b.navigator||{}).userAgent))||[])[1]),e=/Boxee/i.test((b.navigator||{}).userAgent),f=a[0]||{},g,h=/^(Moz|webkit|ms)(?=[A-Z])/,l=f.body&&f.body.style,k=!1,m=!1;if(l){for(var n in l)if(k=h.exec(n)){g=k[0];g=g.substr(0,1).toUpperCase()+g.substr(1);break}g||(g="WebkitOpacity"in l&&"webkit");
k=!!("transition"in l||g+"Transition"in l);m=!!("animation"in l||g+"Animation"in l);!d||k&&m||(k=F(f.body.style.webkitTransition),m=F(f.body.style.webkitAnimation))}return{history:!(!b.history||!b.history.pushState||4>d||e),hasEvent:function(a){if("input"===a&&11>=Ra)return!1;if(B(c[a])){var b=f.createElement("div");c[a]="on"+a in b}return c[a]},csp:bb(),vendorPrefix:g,transitions:k,animations:m,android:d}}]}function We(){this.$get=["$templateCache","$http","$q",function(b,a,c){function d(e,f){d.totalPendingRequests++;
var g=a.defaults&&a.defaults.transformResponse;H(g)?g=g.filter(function(a){return a!==Zb}):g===Zb&&(g=null);return a.get(e,{cache:b,transformResponse:g}).finally(function(){d.totalPendingRequests--}).then(function(a){return a.data},function(a){if(!f)throw ja("tpload",e);return c.reject(a)})}d.totalPendingRequests=0;return d}]}function Xe(){this.$get=["$rootScope","$browser","$location",function(b,a,c){return{findBindings:function(a,b,c){a=a.getElementsByClassName("ng-binding");var g=[];s(a,function(a){var d=
ca.element(a).data("$binding");d&&s(d,function(d){c?(new RegExp("(^|\\s)"+gd(b)+"(\\s|\\||$)")).test(d)&&g.push(a):-1!=d.indexOf(b)&&g.push(a)})});return g},findModels:function(a,b,c){for(var g=["ng-","data-ng-","ng\\:"],h=0;h<g.length;++h){var l=a.querySelectorAll("["+g[h]+"model"+(c?"=":"*=")+'"'+b+'"]');if(l.length)return l}},getLocation:function(){return c.url()},setLocation:function(a){a!==c.url()&&(c.url(a),b.$digest())},whenStable:function(b){a.notifyWhenNoOutstandingRequests(b)}}}]}function Ye(){this.$get=
["$rootScope","$browser","$q","$$q","$exceptionHandler",function(b,a,c,d,e){function f(f,l,k){var m=y(k)&&!k,n=(m?d:c).defer(),q=n.promise;l=a.defer(function(){try{n.resolve(f())}catch(a){n.reject(a),e(a)}finally{delete g[q.$$timeoutId]}m||b.$apply()},l);q.$$timeoutId=l;g[l]=n;return q}var g={};f.cancel=function(b){return b&&b.$$timeoutId in g?(g[b.$$timeoutId].reject("canceled"),delete g[b.$$timeoutId],a.defer.cancel(b.$$timeoutId)):!1};return f}]}function Ba(b){Ra&&(Z.setAttribute("href",b),b=Z.href);
Z.setAttribute("href",b);return{href:Z.href,protocol:Z.protocol?Z.protocol.replace(/:$/,""):"",host:Z.host,search:Z.search?Z.search.replace(/^\?/,""):"",hash:Z.hash?Z.hash.replace(/^#/,""):"",hostname:Z.hostname,port:Z.port,pathname:"/"===Z.pathname.charAt(0)?Z.pathname:"/"+Z.pathname}}function $c(b){b=F(b)?Ba(b):b;return b.protocol===id.protocol&&b.host===id.host}function Ze(){this.$get=ea(M)}function Ec(b){function a(c,d){if(I(c)){var e={};s(c,function(b,c){e[c]=a(c,b)});return e}return b.factory(c+
"Filter",d)}this.register=a;this.$get=["$injector",function(a){return function(b){return a.get(b+"Filter")}}];a("currency",jd);a("date",kd);a("filter",Df);a("json",Ef);a("limitTo",Ff);a("lowercase",Gf);a("number",ld);a("orderBy",md);a("uppercase",Hf)}function Df(){return function(b,a,c){if(!H(b))return b;var d;switch(typeof a){case "function":break;case "boolean":case "number":case "string":d=!0;case "object":a=If(a,c,d);break;default:return b}return b.filter(a)}}function If(b,a,c){var d=I(b)&&"$"in
b;!0===a?a=ga:G(a)||(a=function(a,b){if(I(a)||I(b))return!1;a=Q(""+a);b=Q(""+b);return-1!==a.indexOf(b)});return function(e){return d&&!I(e)?Ia(e,b.$,a,!1):Ia(e,b,a,c)}}function Ia(b,a,c,d,e){var f=typeof b,g=typeof a;if("string"===g&&"!"===a.charAt(0))return!Ia(b,a.substring(1),c,d);if(H(b))return b.some(function(b){return Ia(b,a,c,d)});switch(f){case "object":var h;if(d){for(h in b)if("$"!==h.charAt(0)&&Ia(b[h],a,c,!0))return!0;return e?!1:Ia(b,a,c,!1)}if("object"===g){for(h in a)if(e=a[h],!G(e)&&
(f="$"===h,!Ia(f?b:b[h],e,c,f,f)))return!1;return!0}return c(b,a);case "function":return!1;default:return c(b,a)}}function jd(b){var a=b.NUMBER_FORMATS;return function(b,d,e){B(d)&&(d=a.CURRENCY_SYM);B(e)&&(e=a.PATTERNS[1].maxFrac);return null==b?b:nd(b,a.PATTERNS[1],a.GROUP_SEP,a.DECIMAL_SEP,e).replace(/\u00A4/g,d)}}function ld(b){var a=b.NUMBER_FORMATS;return function(b,d){return null==b?b:nd(b,a.PATTERNS[0],a.GROUP_SEP,a.DECIMAL_SEP,d)}}function nd(b,a,c,d,e){if(!isFinite(b)||I(b))return"";var f=
0>b;b=Math.abs(b);var g=b+"",h="",l=[],k=!1;if(-1!==g.indexOf("e")){var m=g.match(/([\d\.]+)e(-?)(\d+)/);m&&"-"==m[2]&&m[3]>e+1?b=0:(h=g,k=!0)}if(k)0<e&&1>b&&(h=b.toFixed(e),b=parseFloat(h));else{g=(g.split(od)[1]||"").length;B(e)&&(e=Math.min(Math.max(a.minFrac,g),a.maxFrac));b=+(Math.round(+(b.toString()+"e"+e)).toString()+"e"+-e);var g=(""+b).split(od),k=g[0],g=g[1]||"",n=0,q=a.lgSize,u=a.gSize;if(k.length>=q+u)for(n=k.length-q,m=0;m<n;m++)0===(n-m)%u&&0!==m&&(h+=c),h+=k.charAt(m);for(m=n;m<k.length;m++)0===
(k.length-m)%q&&0!==m&&(h+=c),h+=k.charAt(m);for(;g.length<e;)g+="0";e&&"0"!==e&&(h+=d+g.substr(0,e))}0===b&&(f=!1);l.push(f?a.negPre:a.posPre,h,f?a.negSuf:a.posSuf);return l.join("")}function Jb(b,a,c){var d="";0>b&&(d="-",b=-b);for(b=""+b;b.length<a;)b="0"+b;c&&(b=b.substr(b.length-a));return d+b}function $(b,a,c,d){c=c||0;return function(e){e=e["get"+b]();if(0<c||e>-c)e+=c;0===e&&-12==c&&(e=12);return Jb(e,a,d)}}function Kb(b,a){return function(c,d){var e=c["get"+b](),f=vb(a?"SHORT"+b:b);return d[f][e]}}
function pd(b){var a=(new Date(b,0,1)).getDay();return new Date(b,0,(4>=a?5:12)-a)}function qd(b){return function(a){var c=pd(a.getFullYear());a=+new Date(a.getFullYear(),a.getMonth(),a.getDate()+(4-a.getDay()))-+c;a=1+Math.round(a/6048E5);return Jb(a,b)}}function kd(b){function a(a){var b;if(b=a.match(c)){a=new Date(0);var f=0,g=0,h=b[8]?a.setUTCFullYear:a.setFullYear,l=b[8]?a.setUTCHours:a.setHours;b[9]&&(f=ba(b[9]+b[10]),g=ba(b[9]+b[11]));h.call(a,ba(b[1]),ba(b[2])-1,ba(b[3]));f=ba(b[4]||0)-f;
g=ba(b[5]||0)-g;h=ba(b[6]||0);b=Math.round(1E3*parseFloat("0."+(b[7]||0)));l.call(a,f,g,h,b)}return a}var c=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(c,e,f){var g="",h=[],l,k;e=e||"mediumDate";e=b.DATETIME_FORMATS[e]||e;F(c)&&(c=Jf.test(c)?ba(c):a(c));V(c)&&(c=new Date(c));if(!qa(c))return c;for(;e;)(k=Kf.exec(e))?(h=Ya(h,k,1),e=h.pop()):(h.push(e),e=null);f&&"UTC"===f&&(c=new Date(c.getTime()),c.setMinutes(c.getMinutes()+
c.getTimezoneOffset()));s(h,function(a){l=Lf[a];g+=l?l(c,b.DATETIME_FORMATS):a.replace(/(^'|'$)/g,"").replace(/''/g,"'")});return g}}function Ef(){return function(b,a){B(a)&&(a=2);return $a(b,a)}}function Ff(){return function(b,a){V(b)&&(b=b.toString());return H(b)||F(b)?(a=Infinity===Math.abs(Number(a))?Number(a):ba(a))?0<a?b.slice(0,a):b.slice(a):F(b)?"":[]:b}}function md(b){return function(a,c,d){function e(a,b){return b?function(b,c){return a(c,b)}:a}function f(a){switch(typeof a){case "number":case "boolean":case "string":return!0;
default:return!1}}function g(a){return null===a?"null":"function"===typeof a.valueOf&&(a=a.valueOf(),f(a))||"function"===typeof a.toString&&(a=a.toString(),f(a))?a:""}function h(a,b){var c=typeof a,d=typeof b;c===d&&"object"===c&&(a=g(a),b=g(b));return c===d?("string"===c&&(a=a.toLowerCase(),b=b.toLowerCase()),a===b?0:a<b?-1:1):c<d?-1:1}if(!Ta(a))return a;c=H(c)?c:[c];0===c.length&&(c=["+"]);c=c.map(function(a){var c=!1,d=a||pa;if(F(a)){if("+"==a.charAt(0)||"-"==a.charAt(0))c="-"==a.charAt(0),a=a.substring(1);
if(""===a)return e(h,c);d=b(a);if(d.constant){var f=d();return e(function(a,b){return h(a[f],b[f])},c)}}return e(function(a,b){return h(d(a),d(b))},c)});return Za.call(a).sort(e(function(a,b){for(var d=0;d<c.length;d++){var e=c[d](a,b);if(0!==e)return e}return 0},d))}}function Ja(b){G(b)&&(b={link:b});b.restrict=b.restrict||"AC";return ea(b)}function rd(b,a,c,d,e){var f=this,g=[],h=f.$$parentForm=b.parent().controller("form")||Lb;f.$error={};f.$$success={};f.$pending=t;f.$name=e(a.name||a.ngForm||
"")(c);f.$dirty=!1;f.$pristine=!0;f.$valid=!0;f.$invalid=!1;f.$submitted=!1;h.$addControl(f);f.$rollbackViewValue=function(){s(g,function(a){a.$rollbackViewValue()})};f.$commitViewValue=function(){s(g,function(a){a.$commitViewValue()})};f.$addControl=function(a){Ma(a.$name,"input");g.push(a);a.$name&&(f[a.$name]=a)};f.$$renameControl=function(a,b){var c=a.$name;f[c]===a&&delete f[c];f[b]=a;a.$name=b};f.$removeControl=function(a){a.$name&&f[a.$name]===a&&delete f[a.$name];s(f.$pending,function(b,c){f.$setValidity(c,
null,a)});s(f.$error,function(b,c){f.$setValidity(c,null,a)});s(f.$$success,function(b,c){f.$setValidity(c,null,a)});Xa(g,a)};sd({ctrl:this,$element:b,set:function(a,b,c){var d=a[b];d?-1===d.indexOf(c)&&d.push(c):a[b]=[c]},unset:function(a,b,c){var d=a[b];d&&(Xa(d,c),0===d.length&&delete a[b])},parentForm:h,$animate:d});f.$setDirty=function(){d.removeClass(b,Sa);d.addClass(b,Mb);f.$dirty=!0;f.$pristine=!1;h.$setDirty()};f.$setPristine=function(){d.setClass(b,Sa,Mb+" ng-submitted");f.$dirty=!1;f.$pristine=
!0;f.$submitted=!1;s(g,function(a){a.$setPristine()})};f.$setUntouched=function(){s(g,function(a){a.$setUntouched()})};f.$setSubmitted=function(){d.addClass(b,"ng-submitted");f.$submitted=!0;h.$setSubmitted()}}function ic(b){b.$formatters.push(function(a){return b.$isEmpty(a)?a:a.toString()})}function jb(b,a,c,d,e,f){var g=Q(a[0].type);if(!e.android){var h=!1;a.on("compositionstart",function(a){h=!0});a.on("compositionend",function(){h=!1;l()})}var l=function(b){k&&(f.defer.cancel(k),k=null);if(!h){var e=
a.val();b=b&&b.type;"password"===g||c.ngTrim&&"false"===c.ngTrim||(e=U(e));(d.$viewValue!==e||""===e&&d.$$hasNativeValidators)&&d.$setViewValue(e,b)}};if(e.hasEvent("input"))a.on("input",l);else{var k,m=function(a,b,c){k||(k=f.defer(function(){k=null;b&&b.value===c||l(a)}))};a.on("keydown",function(a){var b=a.keyCode;91===b||15<b&&19>b||37<=b&&40>=b||m(a,this,this.value)});if(e.hasEvent("paste"))a.on("paste cut",m)}a.on("change",l);d.$render=function(){a.val(d.$isEmpty(d.$viewValue)?"":d.$viewValue)}}
function Nb(b,a){return function(c,d){var e,f;if(qa(c))return c;if(F(c)){'"'==c.charAt(0)&&'"'==c.charAt(c.length-1)&&(c=c.substring(1,c.length-1));if(Mf.test(c))return new Date(c);b.lastIndex=0;if(e=b.exec(c))return e.shift(),f=d?{yyyy:d.getFullYear(),MM:d.getMonth()+1,dd:d.getDate(),HH:d.getHours(),mm:d.getMinutes(),ss:d.getSeconds(),sss:d.getMilliseconds()/1E3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},s(e,function(b,c){c<a.length&&(f[a[c]]=+b)}),new Date(f.yyyy,f.MM-1,f.dd,f.HH,f.mm,f.ss||0,
1E3*f.sss||0)}return NaN}}function kb(b,a,c,d){return function(e,f,g,h,l,k,m){function n(a){return a&&!(a.getTime&&a.getTime()!==a.getTime())}function q(a){return y(a)?qa(a)?a:c(a):t}td(e,f,g,h);jb(e,f,g,h,l,k);var u=h&&h.$options&&h.$options.timezone,r;h.$$parserName=b;h.$parsers.push(function(b){return h.$isEmpty(b)?null:a.test(b)?(b=c(b,r),"UTC"===u&&b.setMinutes(b.getMinutes()-b.getTimezoneOffset()),b):t});h.$formatters.push(function(a){if(a&&!qa(a))throw Ob("datefmt",a);if(n(a)){if((r=a)&&"UTC"===
u){var b=6E4*r.getTimezoneOffset();r=new Date(r.getTime()+b)}return m("date")(a,d,u)}r=null;return""});if(y(g.min)||g.ngMin){var s;h.$validators.min=function(a){return!n(a)||B(s)||c(a)>=s};g.$observe("min",function(a){s=q(a);h.$validate()})}if(y(g.max)||g.ngMax){var p;h.$validators.max=function(a){return!n(a)||B(p)||c(a)<=p};g.$observe("max",function(a){p=q(a);h.$validate()})}}}function td(b,a,c,d){(d.$$hasNativeValidators=I(a[0].validity))&&d.$parsers.push(function(b){var c=a.prop("validity")||{};
return c.badInput&&!c.typeMismatch?t:b})}function ud(b,a,c,d,e){if(y(d)){b=b(d);if(!b.constant)throw S("ngModel")("constexpr",c,d);return b(a)}return e}function jc(b,a){b="ngClass"+b;return["$animate",function(c){function d(a,b){var c=[],d=0;a:for(;d<a.length;d++){for(var e=a[d],m=0;m<b.length;m++)if(e==b[m])continue a;c.push(e)}return c}function e(a){if(!H(a)){if(F(a))return a.split(" ");if(I(a)){var b=[];s(a,function(a,c){a&&(b=b.concat(c.split(" ")))});return b}}return a}return{restrict:"AC",link:function(f,
g,h){function l(a,b){var c=g.data("$classCounts")||{},d=[];s(a,function(a){if(0<b||c[a])c[a]=(c[a]||0)+b,c[a]===+(0<b)&&d.push(a)});g.data("$classCounts",c);return d.join(" ")}function k(b){if(!0===a||f.$index%2===a){var k=e(b||[]);if(!m){var u=l(k,1);h.$addClass(u)}else if(!ga(b,m)){var r=e(m),u=d(k,r),k=d(r,k),u=l(u,1),k=l(k,-1);u&&u.length&&c.addClass(g,u);k&&k.length&&c.removeClass(g,k)}}m=ra(b)}var m;f.$watch(h[b],k,!0);h.$observe("class",function(a){k(f.$eval(h[b]))});"ngClass"!==b&&f.$watch("$index",
function(c,d){var g=c&1;if(g!==(d&1)){var k=e(f.$eval(h[b]));g===a?(g=l(k,1),h.$addClass(g)):(g=l(k,-1),h.$removeClass(g))}})}}}]}function sd(b){function a(a,b){b&&!f[a]?(k.addClass(e,a),f[a]=!0):!b&&f[a]&&(k.removeClass(e,a),f[a]=!1)}function c(b,c){b=b?"-"+uc(b,"-"):"";a(lb+b,!0===c);a(vd+b,!1===c)}var d=b.ctrl,e=b.$element,f={},g=b.set,h=b.unset,l=b.parentForm,k=b.$animate;f[vd]=!(f[lb]=e.hasClass(lb));d.$setValidity=function(b,e,f){e===t?(d.$pending||(d.$pending={}),g(d.$pending,b,f)):(d.$pending&&
h(d.$pending,b,f),wd(d.$pending)&&(d.$pending=t));Wa(e)?e?(h(d.$error,b,f),g(d.$$success,b,f)):(g(d.$error,b,f),h(d.$$success,b,f)):(h(d.$error,b,f),h(d.$$success,b,f));d.$pending?(a(xd,!0),d.$valid=d.$invalid=t,c("",null)):(a(xd,!1),d.$valid=wd(d.$error),d.$invalid=!d.$valid,c("",d.$valid));e=d.$pending&&d.$pending[b]?t:d.$error[b]?!1:d.$$success[b]?!0:null;c(b,e);l.$setValidity(b,e,d)}}function wd(b){if(b)for(var a in b)return!1;return!0}var Nf=/^\/(.+)\/([a-z]*)$/,Q=function(b){return F(b)?b.toLowerCase():
b},sc=Object.prototype.hasOwnProperty,vb=function(b){return F(b)?b.toUpperCase():b},Ra,D,sa,Za=[].slice,pf=[].splice,Of=[].push,Da=Object.prototype.toString,Ka=S("ng"),ca=M.angular||(M.angular={}),cb,ob=0;Ra=Y.documentMode;z.$inject=[];pa.$inject=[];var H=Array.isArray,U=function(b){return F(b)?b.trim():b},gd=function(b){return b.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},bb=function(){if(y(bb.isActive_))return bb.isActive_;var b=!(!Y.querySelector("[ng-csp]")&&!Y.querySelector("[data-ng-csp]"));
if(!b)try{new Function("")}catch(a){b=!0}return bb.isActive_=b},sb=["ng-","data-ng-","ng:","x-ng-"],Md=/[A-Z]/g,vc=!1,Rb,oa=1,qb=3,Qd={full:"1.3.13",major:1,minor:3,dot:13,codeName:"meticulous-riffleshuffle"};R.expando="ng339";var Ab=R.cache={},hf=1;R._data=function(b){return this.cache[b[this.expando]]||{}};var cf=/([\:\-\_]+(.))/g,df=/^moz([A-Z])/,Pf={mouseleave:"mouseout",mouseenter:"mouseover"},Ub=S("jqLite"),gf=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,Tb=/<|&#?\w+;/,ef=/<([\w:]+)/,ff=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
ia={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ia.optgroup=ia.option;ia.tbody=ia.tfoot=ia.colgroup=ia.caption=ia.thead;ia.th=ia.td;var La=R.prototype={ready:function(b){function a(){c||(c=!0,b())}var c=!1;"complete"===Y.readyState?setTimeout(a):(this.on("DOMContentLoaded",a),R(M).on("load",a))},
toString:function(){var b=[];s(this,function(a){b.push(""+a)});return"["+b.join(", ")+"]"},eq:function(b){return 0<=b?D(this[b]):D(this[this.length+b])},length:0,push:Of,sort:[].sort,splice:[].splice},Fb={};s("multiple selected checked disabled readOnly required open".split(" "),function(b){Fb[Q(b)]=b});var Nc={};s("input select option textarea button form details".split(" "),function(b){Nc[b]=!0});var Oc={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern"};
s({data:Wb,removeData:yb},function(b,a){R[a]=b});s({data:Wb,inheritedData:Eb,scope:function(b){return D.data(b,"$scope")||Eb(b.parentNode||b,["$isolateScope","$scope"])},isolateScope:function(b){return D.data(b,"$isolateScope")||D.data(b,"$isolateScopeNoTemplate")},controller:Jc,injector:function(b){return Eb(b,"$injector")},removeAttr:function(b,a){b.removeAttribute(a)},hasClass:Bb,css:function(b,a,c){a=db(a);if(y(c))b.style[a]=c;else return b.style[a]},attr:function(b,a,c){var d=Q(a);if(Fb[d])if(y(c))c?
(b[a]=!0,b.setAttribute(a,d)):(b[a]=!1,b.removeAttribute(d));else return b[a]||(b.attributes.getNamedItem(a)||z).specified?d:t;else if(y(c))b.setAttribute(a,c);else if(b.getAttribute)return b=b.getAttribute(a,2),null===b?t:b},prop:function(b,a,c){if(y(c))b[a]=c;else return b[a]},text:function(){function b(a,b){if(B(b)){var d=a.nodeType;return d===oa||d===qb?a.textContent:""}a.textContent=b}b.$dv="";return b}(),val:function(b,a){if(B(a)){if(b.multiple&&"select"===ua(b)){var c=[];s(b.options,function(a){a.selected&&
c.push(a.value||a.text)});return 0===c.length?null:c}return b.value}b.value=a},html:function(b,a){if(B(a))return b.innerHTML;xb(b,!0);b.innerHTML=a},empty:Kc},function(b,a){R.prototype[a]=function(a,d){var e,f,g=this.length;if(b!==Kc&&(2==b.length&&b!==Bb&&b!==Jc?a:d)===t){if(I(a)){for(e=0;e<g;e++)if(b===Wb)b(this[e],a);else for(f in a)b(this[e],f,a[f]);return this}e=b.$dv;g=e===t?Math.min(g,1):g;for(f=0;f<g;f++){var h=b(this[f],a,d);e=e?e+h:h}return e}for(e=0;e<g;e++)b(this[e],a,d);return this}});
s({removeData:yb,on:function a(c,d,e,f){if(y(f))throw Ub("onargs");if(Fc(c)){var g=zb(c,!0);f=g.events;var h=g.handle;h||(h=g.handle=lf(c,f));for(var g=0<=d.indexOf(" ")?d.split(" "):[d],l=g.length;l--;){d=g[l];var k=f[d];k||(f[d]=[],"mouseenter"===d||"mouseleave"===d?a(c,Pf[d],function(a){var c=a.relatedTarget;c&&(c===this||this.contains(c))||h(a,d)}):"$destroy"!==d&&c.addEventListener(d,h,!1),k=f[d]);k.push(e)}}},off:Ic,one:function(a,c,d){a=D(a);a.on(c,function f(){a.off(c,d);a.off(c,f)});a.on(c,
d)},replaceWith:function(a,c){var d,e=a.parentNode;xb(a);s(new R(c),function(c){d?e.insertBefore(c,d.nextSibling):e.replaceChild(c,a);d=c})},children:function(a){var c=[];s(a.childNodes,function(a){a.nodeType===oa&&c.push(a)});return c},contents:function(a){return a.contentDocument||a.childNodes||[]},append:function(a,c){var d=a.nodeType;if(d===oa||11===d){c=new R(c);for(var d=0,e=c.length;d<e;d++)a.appendChild(c[d])}},prepend:function(a,c){if(a.nodeType===oa){var d=a.firstChild;s(new R(c),function(c){a.insertBefore(c,
d)})}},wrap:function(a,c){c=D(c).eq(0).clone()[0];var d=a.parentNode;d&&d.replaceChild(c,a);c.appendChild(a)},remove:Lc,detach:function(a){Lc(a,!0)},after:function(a,c){var d=a,e=a.parentNode;c=new R(c);for(var f=0,g=c.length;f<g;f++){var h=c[f];e.insertBefore(h,d.nextSibling);d=h}},addClass:Db,removeClass:Cb,toggleClass:function(a,c,d){c&&s(c.split(" "),function(c){var f=d;B(f)&&(f=!Bb(a,c));(f?Db:Cb)(a,c)})},parent:function(a){return(a=a.parentNode)&&11!==a.nodeType?a:null},next:function(a){return a.nextElementSibling},
find:function(a,c){return a.getElementsByTagName?a.getElementsByTagName(c):[]},clone:Vb,triggerHandler:function(a,c,d){var e,f,g=c.type||c,h=zb(a);if(h=(h=h&&h.events)&&h[g])e={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return!0===this.defaultPrevented},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return!0===this.immediatePropagationStopped},stopPropagation:z,type:g,target:a},c.type&&(e=x(e,
c)),c=ra(h),f=d?[e].concat(d):[e],s(c,function(c){e.isImmediatePropagationStopped()||c.apply(a,f)})}},function(a,c){R.prototype[c]=function(c,e,f){for(var g,h=0,l=this.length;h<l;h++)B(g)?(g=a(this[h],c,e,f),y(g)&&(g=D(g))):Hc(g,a(this[h],c,e,f));return y(g)?g:this};R.prototype.bind=R.prototype.on;R.prototype.unbind=R.prototype.off});eb.prototype={put:function(a,c){this[Na(a,this.nextUid)]=c},get:function(a){return this[Na(a,this.nextUid)]},remove:function(a){var c=this[a=Na(a,this.nextUid)];delete this[a];
return c}};var Qc=/^function\s*[^\(]*\(\s*([^\)]*)\)/m,Qf=/,/,Rf=/^\s*(_?)(\S+?)\1\s*$/,Pc=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg,Ga=S("$injector");ab.$$annotate=function(a,c,d){var e;if("function"===typeof a){if(!(e=a.$inject)){e=[];if(a.length){if(c)throw F(d)&&d||(d=a.name||mf(a)),Ga("strictdi",d);c=a.toString().replace(Pc,"");c=c.match(Qc);s(c[1].split(Qf),function(a){a.replace(Rf,function(a,c,d){e.push(d)})})}a.$inject=e}}else H(a)?(c=a.length-1,tb(a[c],"fn"),e=a.slice(0,c)):tb(a,"fn",!0);return e};
var Sf=S("$animate"),Ce=["$provide",function(a){this.$$selectors={};this.register=function(c,d){var e=c+"-animation";if(c&&"."!=c.charAt(0))throw Sf("notcsel",c);this.$$selectors[c.substr(1)]=e;a.factory(e,d)};this.classNameFilter=function(a){1===arguments.length&&(this.$$classNameFilter=a instanceof RegExp?a:null);return this.$$classNameFilter};this.$get=["$$q","$$asyncCallback","$rootScope",function(a,d,e){function f(d){var f,g=a.defer();g.promise.$$cancelFn=function(){f&&f()};e.$$postDigest(function(){f=
d(function(){g.resolve()})});return g.promise}function g(a,c){var d=[],e=[],f=ha();s((a.attr("class")||"").split(/\s+/),function(a){f[a]=!0});s(c,function(a,c){var g=f[c];!1===a&&g?e.push(c):!0!==a||g||d.push(c)});return 0<d.length+e.length&&[d.length?d:null,e.length?e:null]}function h(a,c,d){for(var e=0,f=c.length;e<f;++e)a[c[e]]=d}function l(){m||(m=a.defer(),d(function(){m.resolve();m=null}));return m.promise}function k(a,c){if(ca.isObject(c)){var d=x(c.from||{},c.to||{});a.css(d)}}var m;return{animate:function(a,
c,d){k(a,{from:c,to:d});return l()},enter:function(a,c,d,e){k(a,e);d?d.after(a):c.prepend(a);return l()},leave:function(a,c){a.remove();return l()},move:function(a,c,d,e){return this.enter(a,c,d,e)},addClass:function(a,c,d){return this.setClass(a,c,[],d)},$$addClassImmediately:function(a,c,d){a=D(a);c=F(c)?c:H(c)?c.join(" "):"";s(a,function(a){Db(a,c)});k(a,d);return l()},removeClass:function(a,c,d){return this.setClass(a,[],c,d)},$$removeClassImmediately:function(a,c,d){a=D(a);c=F(c)?c:H(c)?c.join(" "):
"";s(a,function(a){Cb(a,c)});k(a,d);return l()},setClass:function(a,c,d,e){var k=this,l=!1;a=D(a);var m=a.data("$$animateClasses");m?e&&m.options&&(m.options=ca.extend(m.options||{},e)):(m={classes:{},options:e},l=!0);e=m.classes;c=H(c)?c:c.split(" ");d=H(d)?d:d.split(" ");h(e,c,!0);h(e,d,!1);l&&(m.promise=f(function(c){var d=a.data("$$animateClasses");a.removeData("$$animateClasses");if(d){var e=g(a,d.classes);e&&k.$$setClassImmediately(a,e[0],e[1],d.options)}c()}),a.data("$$animateClasses",m));
return m.promise},$$setClassImmediately:function(a,c,d,e){c&&this.$$addClassImmediately(a,c);d&&this.$$removeClassImmediately(a,d);k(a,e);return l()},enabled:z,cancel:z}}]}],ja=S("$compile");xc.$inject=["$provide","$$sanitizeUriProvider"];var Sc=/^((?:x|data)[\:\-_])/i,qf=S("$controller"),Wc="application/json",$b={"Content-Type":Wc+";charset=utf-8"},sf=/^\[|^\{(?!\{)/,tf={"[":/]$/,"{":/}$/},rf=/^\)\]\}',?\n/,ac=S("$interpolate"),Tf=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,wf={http:80,https:443,ftp:21},Hb=
S("$location"),Uf={$$html5:!1,$$replace:!1,absUrl:Ib("$$absUrl"),url:function(a){if(B(a))return this.$$url;var c=Tf.exec(a);(c[1]||""===a)&&this.path(decodeURIComponent(c[1]));(c[2]||c[1]||""===a)&&this.search(c[3]||"");this.hash(c[5]||"");return this},protocol:Ib("$$protocol"),host:Ib("$$host"),port:Ib("$$port"),path:dd("$$path",function(a){a=null!==a?a.toString():"";return"/"==a.charAt(0)?a:"/"+a}),search:function(a,c){switch(arguments.length){case 0:return this.$$search;case 1:if(F(a)||V(a))a=
a.toString(),this.$$search=rc(a);else if(I(a))a=Ea(a,{}),s(a,function(c,e){null==c&&delete a[e]}),this.$$search=a;else throw Hb("isrcharg");break;default:B(c)||null===c?delete this.$$search[a]:this.$$search[a]=c}this.$$compose();return this},hash:dd("$$hash",function(a){return null!==a?a.toString():""}),replace:function(){this.$$replace=!0;return this}};s([cd,ec,dc],function(a){a.prototype=Object.create(Uf);a.prototype.state=function(c){if(!arguments.length)return this.$$state;if(a!==dc||!this.$$html5)throw Hb("nostate");
this.$$state=B(c)?null:c;return this}});var la=S("$parse"),Vf=Function.prototype.call,Wf=Function.prototype.apply,Xf=Function.prototype.bind,mb=ha();s({"null":function(){return null},"true":function(){return!0},"false":function(){return!1},undefined:function(){}},function(a,c){a.constant=a.literal=a.sharedGetter=!0;mb[c]=a});mb["this"]=function(a){return a};mb["this"].sharedGetter=!0;var nb=x(ha(),{"+":function(a,c,d,e){d=d(a,c);e=e(a,c);return y(d)?y(e)?d+e:d:y(e)?e:t},"-":function(a,c,d,e){d=d(a,
c);e=e(a,c);return(y(d)?d:0)-(y(e)?e:0)},"*":function(a,c,d,e){return d(a,c)*e(a,c)},"/":function(a,c,d,e){return d(a,c)/e(a,c)},"%":function(a,c,d,e){return d(a,c)%e(a,c)},"===":function(a,c,d,e){return d(a,c)===e(a,c)},"!==":function(a,c,d,e){return d(a,c)!==e(a,c)},"==":function(a,c,d,e){return d(a,c)==e(a,c)},"!=":function(a,c,d,e){return d(a,c)!=e(a,c)},"<":function(a,c,d,e){return d(a,c)<e(a,c)},">":function(a,c,d,e){return d(a,c)>e(a,c)},"<=":function(a,c,d,e){return d(a,c)<=e(a,c)},">=":function(a,
c,d,e){return d(a,c)>=e(a,c)},"&&":function(a,c,d,e){return d(a,c)&&e(a,c)},"||":function(a,c,d,e){return d(a,c)||e(a,c)},"!":function(a,c,d){return!d(a,c)},"=":!0,"|":!0}),Yf={n:"\n",f:"\f",r:"\r",t:"\t",v:"\v","'":"'",'"':'"'},hc=function(a){this.options=a};hc.prototype={constructor:hc,lex:function(a){this.text=a;this.index=0;for(this.tokens=[];this.index<this.text.length;)if(a=this.text.charAt(this.index),'"'===a||"'"===a)this.readString(a);else if(this.isNumber(a)||"."===a&&this.isNumber(this.peek()))this.readNumber();
else if(this.isIdent(a))this.readIdent();else if(this.is(a,"(){}[].,;:?"))this.tokens.push({index:this.index,text:a}),this.index++;else if(this.isWhitespace(a))this.index++;else{var c=a+this.peek(),d=c+this.peek(2),e=nb[c],f=nb[d];nb[a]||e||f?(a=f?d:e?c:a,this.tokens.push({index:this.index,text:a,operator:!0}),this.index+=a.length):this.throwError("Unexpected next character ",this.index,this.index+1)}return this.tokens},is:function(a,c){return-1!==c.indexOf(a)},peek:function(a){a=a||1;return this.index+
a<this.text.length?this.text.charAt(this.index+a):!1},isNumber:function(a){return"0"<=a&&"9">=a&&"string"===typeof a},isWhitespace:function(a){return" "===a||"\r"===a||"\t"===a||"\n"===a||"\v"===a||"\u00a0"===a},isIdent:function(a){return"a"<=a&&"z">=a||"A"<=a&&"Z">=a||"_"===a||"$"===a},isExpOperator:function(a){return"-"===a||"+"===a||this.isNumber(a)},throwError:function(a,c,d){d=d||this.index;c=y(c)?"s "+c+"-"+this.index+" ["+this.text.substring(c,d)+"]":" "+d;throw la("lexerr",a,c,this.text);
},readNumber:function(){for(var a="",c=this.index;this.index<this.text.length;){var d=Q(this.text.charAt(this.index));if("."==d||this.isNumber(d))a+=d;else{var e=this.peek();if("e"==d&&this.isExpOperator(e))a+=d;else if(this.isExpOperator(d)&&e&&this.isNumber(e)&&"e"==a.charAt(a.length-1))a+=d;else if(!this.isExpOperator(d)||e&&this.isNumber(e)||"e"!=a.charAt(a.length-1))break;else this.throwError("Invalid exponent")}this.index++}this.tokens.push({index:c,text:a,constant:!0,value:Number(a)})},readIdent:function(){for(var a=
this.index;this.index<this.text.length;){var c=this.text.charAt(this.index);if(!this.isIdent(c)&&!this.isNumber(c))break;this.index++}this.tokens.push({index:a,text:this.text.slice(a,this.index),identifier:!0})},readString:function(a){var c=this.index;this.index++;for(var d="",e=a,f=!1;this.index<this.text.length;){var g=this.text.charAt(this.index),e=e+g;if(f)"u"===g?(f=this.text.substring(this.index+1,this.index+5),f.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+f+"]"),this.index+=
4,d+=String.fromCharCode(parseInt(f,16))):d+=Yf[g]||g,f=!1;else if("\\"===g)f=!0;else{if(g===a){this.index++;this.tokens.push({index:c,text:e,constant:!0,value:d});return}d+=g}this.index++}this.throwError("Unterminated quote",c)}};var ib=function(a,c,d){this.lexer=a;this.$filter=c;this.options=d};ib.ZERO=x(function(){return 0},{sharedGetter:!0,constant:!0});ib.prototype={constructor:ib,parse:function(a){this.text=a;this.tokens=this.lexer.lex(a);a=this.statements();0!==this.tokens.length&&this.throwError("is an unexpected token",
this.tokens[0]);a.literal=!!a.literal;a.constant=!!a.constant;return a},primary:function(){var a;this.expect("(")?(a=this.filterChain(),this.consume(")")):this.expect("[")?a=this.arrayDeclaration():this.expect("{")?a=this.object():this.peek().identifier&&this.peek().text in mb?a=mb[this.consume().text]:this.peek().identifier?a=this.identifier():this.peek().constant?a=this.constant():this.throwError("not a primary expression",this.peek());for(var c,d;c=this.expect("(","[",".");)"("===c.text?(a=this.functionCall(a,
d),d=null):"["===c.text?(d=a,a=this.objectIndex(a)):"."===c.text?(d=a,a=this.fieldAccess(a)):this.throwError("IMPOSSIBLE");return a},throwError:function(a,c){throw la("syntax",c.text,a,c.index+1,this.text,this.text.substring(c.index));},peekToken:function(){if(0===this.tokens.length)throw la("ueoe",this.text);return this.tokens[0]},peek:function(a,c,d,e){return this.peekAhead(0,a,c,d,e)},peekAhead:function(a,c,d,e,f){if(this.tokens.length>a){a=this.tokens[a];var g=a.text;if(g===c||g===d||g===e||g===
f||!(c||d||e||f))return a}return!1},expect:function(a,c,d,e){return(a=this.peek(a,c,d,e))?(this.tokens.shift(),a):!1},consume:function(a){if(0===this.tokens.length)throw la("ueoe",this.text);var c=this.expect(a);c||this.throwError("is unexpected, expecting ["+a+"]",this.peek());return c},unaryFn:function(a,c){var d=nb[a];return x(function(a,f){return d(a,f,c)},{constant:c.constant,inputs:[c]})},binaryFn:function(a,c,d,e){var f=nb[c];return x(function(c,e){return f(c,e,a,d)},{constant:a.constant&&
d.constant,inputs:!e&&[a,d]})},identifier:function(){for(var a=this.consume().text;this.peek(".")&&this.peekAhead(1).identifier&&!this.peekAhead(2,"(");)a+=this.consume().text+this.consume().text;return yf(a,this.options,this.text)},constant:function(){var a=this.consume().value;return x(function(){return a},{constant:!0,literal:!0})},statements:function(){for(var a=[];;)if(0<this.tokens.length&&!this.peek("}",")",";","]")&&a.push(this.filterChain()),!this.expect(";"))return 1===a.length?a[0]:function(c,
d){for(var e,f=0,g=a.length;f<g;f++)e=a[f](c,d);return e}},filterChain:function(){for(var a=this.expression();this.expect("|");)a=this.filter(a);return a},filter:function(a){var c=this.$filter(this.consume().text),d,e;if(this.peek(":"))for(d=[],e=[];this.expect(":");)d.push(this.expression());var f=[a].concat(d||[]);return x(function(f,h){var l=a(f,h);if(e){e[0]=l;for(l=d.length;l--;)e[l+1]=d[l](f,h);return c.apply(t,e)}return c(l)},{constant:!c.$stateful&&f.every(fc),inputs:!c.$stateful&&f})},expression:function(){return this.assignment()},
assignment:function(){var a=this.ternary(),c,d;return(d=this.expect("="))?(a.assign||this.throwError("implies assignment but ["+this.text.substring(0,d.index)+"] can not be assigned to",d),c=this.ternary(),x(function(d,f){return a.assign(d,c(d,f),f)},{inputs:[a,c]})):a},ternary:function(){var a=this.logicalOR(),c;if(this.expect("?")&&(c=this.assignment(),this.consume(":"))){var d=this.assignment();return x(function(e,f){return a(e,f)?c(e,f):d(e,f)},{constant:a.constant&&c.constant&&d.constant})}return a},
logicalOR:function(){for(var a=this.logicalAND(),c;c=this.expect("||");)a=this.binaryFn(a,c.text,this.logicalAND(),!0);return a},logicalAND:function(){for(var a=this.equality(),c;c=this.expect("&&");)a=this.binaryFn(a,c.text,this.equality(),!0);return a},equality:function(){for(var a=this.relational(),c;c=this.expect("==","!=","===","!==");)a=this.binaryFn(a,c.text,this.relational());return a},relational:function(){for(var a=this.additive(),c;c=this.expect("<",">","<=",">=");)a=this.binaryFn(a,c.text,
this.additive());return a},additive:function(){for(var a=this.multiplicative(),c;c=this.expect("+","-");)a=this.binaryFn(a,c.text,this.multiplicative());return a},multiplicative:function(){for(var a=this.unary(),c;c=this.expect("*","/","%");)a=this.binaryFn(a,c.text,this.unary());return a},unary:function(){var a;return this.expect("+")?this.primary():(a=this.expect("-"))?this.binaryFn(ib.ZERO,a.text,this.unary()):(a=this.expect("!"))?this.unaryFn(a.text,this.unary()):this.primary()},fieldAccess:function(a){var c=
this.identifier();return x(function(d,e,f){d=f||a(d,e);return null==d?t:c(d)},{assign:function(d,e,f){var g=a(d,f);g||a.assign(d,g={},f);return c.assign(g,e)}})},objectIndex:function(a){var c=this.text,d=this.expression();this.consume("]");return x(function(e,f){var g=a(e,f),h=d(e,f);ta(h,c);return g?ma(g[h],c):t},{assign:function(e,f,g){var h=ta(d(e,g),c),l=ma(a(e,g),c);l||a.assign(e,l={},g);return l[h]=f}})},functionCall:function(a,c){var d=[];if(")"!==this.peekToken().text){do d.push(this.expression());
while(this.expect(","))}this.consume(")");var e=this.text,f=d.length?[]:null;return function(g,h){var l=c?c(g,h):y(c)?t:g,k=a(g,h,l)||z;if(f)for(var m=d.length;m--;)f[m]=ma(d[m](g,h),e);ma(l,e);if(k){if(k.constructor===k)throw la("isecfn",e);if(k===Vf||k===Wf||k===Xf)throw la("isecff",e);}l=k.apply?k.apply(l,f):k(f[0],f[1],f[2],f[3],f[4]);f&&(f.length=0);return ma(l,e)}},arrayDeclaration:function(){var a=[];if("]"!==this.peekToken().text){do{if(this.peek("]"))break;a.push(this.expression())}while(this.expect(","))
}this.consume("]");return x(function(c,d){for(var e=[],f=0,g=a.length;f<g;f++)e.push(a[f](c,d));return e},{literal:!0,constant:a.every(fc),inputs:a})},object:function(){var a=[],c=[];if("}"!==this.peekToken().text){do{if(this.peek("}"))break;var d=this.consume();d.constant?a.push(d.value):d.identifier?a.push(d.text):this.throwError("invalid key",d);this.consume(":");c.push(this.expression())}while(this.expect(","))}this.consume("}");return x(function(d,f){for(var g={},h=0,l=c.length;h<l;h++)g[a[h]]=
c[h](d,f);return g},{literal:!0,constant:c.every(fc),inputs:c})}};var Af=ha(),zf=ha(),Bf=Object.prototype.valueOf,Ca=S("$sce"),na={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},ja=S("$compile"),Z=Y.createElement("a"),id=Ba(M.location.href);Ec.$inject=["$provide"];jd.$inject=["$locale"];ld.$inject=["$locale"];var od=".",Lf={yyyy:$("FullYear",4),yy:$("FullYear",2,0,!0),y:$("FullYear",1),MMMM:Kb("Month"),MMM:Kb("Month",!0),MM:$("Month",2,1),M:$("Month",1,1),dd:$("Date",2),d:$("Date",
1),HH:$("Hours",2),H:$("Hours",1),hh:$("Hours",2,-12),h:$("Hours",1,-12),mm:$("Minutes",2),m:$("Minutes",1),ss:$("Seconds",2),s:$("Seconds",1),sss:$("Milliseconds",3),EEEE:Kb("Day"),EEE:Kb("Day",!0),a:function(a,c){return 12>a.getHours()?c.AMPMS[0]:c.AMPMS[1]},Z:function(a){a=-1*a.getTimezoneOffset();return a=(0<=a?"+":"")+(Jb(Math[0<a?"floor":"ceil"](a/60),2)+Jb(Math.abs(a%60),2))},ww:qd(2),w:qd(1)},Kf=/((?:[^yMdHhmsaZEw']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|w+))(.*)/,Jf=/^\-?\d+$/;
kd.$inject=["$locale"];var Gf=ea(Q),Hf=ea(vb);md.$inject=["$parse"];var Td=ea({restrict:"E",compile:function(a,c){if(!c.href&&!c.xlinkHref&&!c.name)return function(a,c){if("a"===c[0].nodeName.toLowerCase()){var f="[object SVGAnimatedString]"===Da.call(c.prop("href"))?"xlink:href":"href";c.on("click",function(a){c.attr(f)||a.preventDefault()})}}}}),wb={};s(Fb,function(a,c){if("multiple"!=a){var d=ya("ng-"+c);wb[d]=function(){return{restrict:"A",priority:100,link:function(a,f,g){a.$watch(g[d],function(a){g.$set(c,
!!a)})}}}}});s(Oc,function(a,c){wb[c]=function(){return{priority:100,link:function(a,e,f){if("ngPattern"===c&&"/"==f.ngPattern.charAt(0)&&(e=f.ngPattern.match(Nf))){f.$set("ngPattern",new RegExp(e[1],e[2]));return}a.$watch(f[c],function(a){f.$set(c,a)})}}}});s(["src","srcset","href"],function(a){var c=ya("ng-"+a);wb[c]=function(){return{priority:99,link:function(d,e,f){var g=a,h=a;"href"===a&&"[object SVGAnimatedString]"===Da.call(e.prop("href"))&&(h="xlinkHref",f.$attr[h]="xlink:href",g=null);f.$observe(c,
function(c){c?(f.$set(h,c),Ra&&g&&e.prop(g,f[h])):"href"===a&&f.$set(h,null)})}}}});var Lb={$addControl:z,$$renameControl:function(a,c){a.$name=c},$removeControl:z,$setValidity:z,$setDirty:z,$setPristine:z,$setSubmitted:z};rd.$inject=["$element","$attrs","$scope","$animate","$interpolate"];var yd=function(a){return["$timeout",function(c){return{name:"form",restrict:a?"EAC":"E",controller:rd,compile:function(a){a.addClass(Sa).addClass(lb);return{pre:function(a,d,g,h){if(!("action"in g)){var l=function(c){a.$apply(function(){h.$commitViewValue();
h.$setSubmitted()});c.preventDefault()};d[0].addEventListener("submit",l,!1);d.on("$destroy",function(){c(function(){d[0].removeEventListener("submit",l,!1)},0,!1)})}var k=h.$$parentForm,m=h.$name;m&&(hb(a,null,m,h,m),g.$observe(g.name?"name":"ngForm",function(c){m!==c&&(hb(a,null,m,t,m),m=c,hb(a,null,m,h,m),k.$$renameControl(h,m))}));d.on("$destroy",function(){k.$removeControl(h);m&&hb(a,null,m,t,m);x(h,Lb)})}}}}}]},Ud=yd(),ge=yd(!0),Mf=/\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/,
Zf=/^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/,$f=/^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,ag=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/,zd=/^(\d{4})-(\d{2})-(\d{2})$/,Ad=/^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,kc=/^(\d{4})-W(\d\d)$/,Bd=/^(\d{4})-(\d\d)$/,Cd=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Dd={text:function(a,c,d,e,f,g){jb(a,c,d,e,f,g);ic(e)},date:kb("date",zd,Nb(zd,["yyyy",
"MM","dd"]),"yyyy-MM-dd"),"datetime-local":kb("datetimelocal",Ad,Nb(Ad,"yyyy MM dd HH mm ss sss".split(" ")),"yyyy-MM-ddTHH:mm:ss.sss"),time:kb("time",Cd,Nb(Cd,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:kb("week",kc,function(a,c){if(qa(a))return a;if(F(a)){kc.lastIndex=0;var d=kc.exec(a);if(d){var e=+d[1],f=+d[2],g=d=0,h=0,l=0,k=pd(e),f=7*(f-1);c&&(d=c.getHours(),g=c.getMinutes(),h=c.getSeconds(),l=c.getMilliseconds());return new Date(e,0,k.getDate()+f,d,g,h,l)}}return NaN},"yyyy-Www"),month:kb("month",
Bd,Nb(Bd,["yyyy","MM"]),"yyyy-MM"),number:function(a,c,d,e,f,g){td(a,c,d,e);jb(a,c,d,e,f,g);e.$$parserName="number";e.$parsers.push(function(a){return e.$isEmpty(a)?null:ag.test(a)?parseFloat(a):t});e.$formatters.push(function(a){if(!e.$isEmpty(a)){if(!V(a))throw Ob("numfmt",a);a=a.toString()}return a});if(d.min||d.ngMin){var h;e.$validators.min=function(a){return e.$isEmpty(a)||B(h)||a>=h};d.$observe("min",function(a){y(a)&&!V(a)&&(a=parseFloat(a,10));h=V(a)&&!isNaN(a)?a:t;e.$validate()})}if(d.max||
d.ngMax){var l;e.$validators.max=function(a){return e.$isEmpty(a)||B(l)||a<=l};d.$observe("max",function(a){y(a)&&!V(a)&&(a=parseFloat(a,10));l=V(a)&&!isNaN(a)?a:t;e.$validate()})}},url:function(a,c,d,e,f,g){jb(a,c,d,e,f,g);ic(e);e.$$parserName="url";e.$validators.url=function(a,c){var d=a||c;return e.$isEmpty(d)||Zf.test(d)}},email:function(a,c,d,e,f,g){jb(a,c,d,e,f,g);ic(e);e.$$parserName="email";e.$validators.email=function(a,c){var d=a||c;return e.$isEmpty(d)||$f.test(d)}},radio:function(a,c,
d,e){B(d.name)&&c.attr("name",++ob);c.on("click",function(a){c[0].checked&&e.$setViewValue(d.value,a&&a.type)});e.$render=function(){c[0].checked=d.value==e.$viewValue};d.$observe("value",e.$render)},checkbox:function(a,c,d,e,f,g,h,l){var k=ud(l,a,"ngTrueValue",d.ngTrueValue,!0),m=ud(l,a,"ngFalseValue",d.ngFalseValue,!1);c.on("click",function(a){e.$setViewValue(c[0].checked,a&&a.type)});e.$render=function(){c[0].checked=e.$viewValue};e.$isEmpty=function(a){return!1===a};e.$formatters.push(function(a){return ga(a,
k)});e.$parsers.push(function(a){return a?k:m})},hidden:z,button:z,submit:z,reset:z,file:z},yc=["$browser","$sniffer","$filter","$parse",function(a,c,d,e){return{restrict:"E",require:["?ngModel"],link:{pre:function(f,g,h,l){l[0]&&(Dd[Q(h.type)]||Dd.text)(f,g,h,l[0],c,a,d,e)}}}}],bg=/^(true|false|\d+)$/,ye=function(){return{restrict:"A",priority:100,compile:function(a,c){return bg.test(c.ngValue)?function(a,c,f){f.$set("value",a.$eval(f.ngValue))}:function(a,c,f){a.$watch(f.ngValue,function(a){f.$set("value",
a)})}}}},Zd=["$compile",function(a){return{restrict:"AC",compile:function(c){a.$$addBindingClass(c);return function(c,e,f){a.$$addBindingInfo(e,f.ngBind);e=e[0];c.$watch(f.ngBind,function(a){e.textContent=a===t?"":a})}}}}],ae=["$interpolate","$compile",function(a,c){return{compile:function(d){c.$$addBindingClass(d);return function(d,f,g){d=a(f.attr(g.$attr.ngBindTemplate));c.$$addBindingInfo(f,d.expressions);f=f[0];g.$observe("ngBindTemplate",function(a){f.textContent=a===t?"":a})}}}}],$d=["$sce",
"$parse","$compile",function(a,c,d){return{restrict:"A",compile:function(e,f){var g=c(f.ngBindHtml),h=c(f.ngBindHtml,function(a){return(a||"").toString()});d.$$addBindingClass(e);return function(c,e,f){d.$$addBindingInfo(e,f.ngBindHtml);c.$watch(h,function(){e.html(a.getTrustedHtml(g(c))||"")})}}}}],xe=ea({restrict:"A",require:"ngModel",link:function(a,c,d,e){e.$viewChangeListeners.push(function(){a.$eval(d.ngChange)})}}),be=jc("",!0),de=jc("Odd",0),ce=jc("Even",1),ee=Ja({compile:function(a,c){c.$set("ngCloak",
t);a.removeClass("ng-cloak")}}),fe=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],Dc={},cg={blur:!0,focus:!0};s("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(a){var c=ya("ng-"+a);Dc[c]=["$parse","$rootScope",function(d,e){return{restrict:"A",compile:function(f,g){var h=d(g[c],null,!0);return function(c,d){d.on(a,function(d){var f=function(){h(c,{$event:d})};
cg[a]&&e.$$phase?c.$evalAsync(f):c.$apply(f)})}}}}]});var ie=["$animate",function(a){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(c,d,e,f,g){var h,l,k;c.$watch(e.ngIf,function(c){c?l||g(function(c,f){l=f;c[c.length++]=Y.createComment(" end ngIf: "+e.ngIf+" ");h={clone:c};a.enter(c,d.parent(),d)}):(k&&(k.remove(),k=null),l&&(l.$destroy(),l=null),h&&(k=ub(h.clone),a.leave(k).then(function(){k=null}),h=null))})}}}],je=["$templateRequest","$anchorScroll",
"$animate","$sce",function(a,c,d,e){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:ca.noop,compile:function(f,g){var h=g.ngInclude||g.src,l=g.onload||"",k=g.autoscroll;return function(f,g,q,s,r){var t=0,p,v,w,L=function(){v&&(v.remove(),v=null);p&&(p.$destroy(),p=null);w&&(d.leave(w).then(function(){v=null}),v=w,w=null)};f.$watch(e.parseAsResourceUrl(h),function(e){var h=function(){!y(k)||k&&!f.$eval(k)||c()},q=++t;e?(a(e,!0).then(function(a){if(q===t){var c=f.$new();
s.template=a;a=r(c,function(a){L();d.enter(a,null,g).then(h)});p=c;w=a;p.$emit("$includeContentLoaded",e);f.$eval(l)}},function(){q===t&&(L(),f.$emit("$includeContentError",e))}),f.$emit("$includeContentRequested",e)):(L(),s.template=null)})}}}}],Ae=["$compile",function(a){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(c,d,e,f){/SVG/.test(d[0].toString())?(d.empty(),a(Gc(f.template,Y).childNodes)(c,function(a){d.append(a)},{futureParentElement:d})):(d.html(f.template),a(d.contents())(c))}}}],
ke=Ja({priority:450,compile:function(){return{pre:function(a,c,d){a.$eval(d.ngInit)}}}}),we=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(a,c,d,e){var f=c.attr(d.$attr.ngList)||", ",g="false"!==d.ngTrim,h=g?U(f):f;e.$parsers.push(function(a){if(!B(a)){var c=[];a&&s(a.split(h),function(a){a&&c.push(g?U(a):a)});return c}});e.$formatters.push(function(a){return H(a)?a.join(f):t});e.$isEmpty=function(a){return!a||!a.length}}}},lb="ng-valid",vd="ng-invalid",Sa="ng-pristine",
Mb="ng-dirty",xd="ng-pending",Ob=new S("ngModel"),dg=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$rootScope","$q","$interpolate",function(a,c,d,e,f,g,h,l,k,m){this.$modelValue=this.$viewValue=Number.NaN;this.$$rawModelValue=t;this.$validators={};this.$asyncValidators={};this.$parsers=[];this.$formatters=[];this.$viewChangeListeners=[];this.$untouched=!0;this.$touched=!1;this.$pristine=!0;this.$dirty=!1;this.$valid=!0;this.$invalid=!1;this.$error={};this.$$success=
{};this.$pending=t;this.$name=m(d.name||"",!1)(a);var n=f(d.ngModel),q=n.assign,u=n,r=q,P=null,p=this;this.$$setOptions=function(a){if((p.$options=a)&&a.getterSetter){var c=f(d.ngModel+"()"),g=f(d.ngModel+"($$$p)");u=function(a){var d=n(a);G(d)&&(d=c(a));return d};r=function(a,c){G(n(a))?g(a,{$$$p:p.$modelValue}):q(a,p.$modelValue)}}else if(!n.assign)throw Ob("nonassign",d.ngModel,va(e));};this.$render=z;this.$isEmpty=function(a){return B(a)||""===a||null===a||a!==a};var v=e.inheritedData("$formController")||
Lb,w=0;sd({ctrl:this,$element:e,set:function(a,c){a[c]=!0},unset:function(a,c){delete a[c]},parentForm:v,$animate:g});this.$setPristine=function(){p.$dirty=!1;p.$pristine=!0;g.removeClass(e,Mb);g.addClass(e,Sa)};this.$setDirty=function(){p.$dirty=!0;p.$pristine=!1;g.removeClass(e,Sa);g.addClass(e,Mb);v.$setDirty()};this.$setUntouched=function(){p.$touched=!1;p.$untouched=!0;g.setClass(e,"ng-untouched","ng-touched")};this.$setTouched=function(){p.$touched=!0;p.$untouched=!1;g.setClass(e,"ng-touched",
"ng-untouched")};this.$rollbackViewValue=function(){h.cancel(P);p.$viewValue=p.$$lastCommittedViewValue;p.$render()};this.$validate=function(){if(!V(p.$modelValue)||!isNaN(p.$modelValue)){var a=p.$$rawModelValue,c=p.$valid,d=p.$modelValue,e=p.$options&&p.$options.allowInvalid;p.$$runValidators(p.$error[p.$$parserName||"parse"]?!1:t,a,p.$$lastCommittedViewValue,function(f){e||c===f||(p.$modelValue=f?a:t,p.$modelValue!==d&&p.$$writeModelToScope())})}};this.$$runValidators=function(a,c,d,e){function f(){var a=
!0;s(p.$validators,function(e,f){var g=e(c,d);a=a&&g;h(f,g)});return a?!0:(s(p.$asyncValidators,function(a,c){h(c,null)}),!1)}function g(){var a=[],e=!0;s(p.$asyncValidators,function(f,g){var l=f(c,d);if(!l||!G(l.then))throw Ob("$asyncValidators",l);h(g,t);a.push(l.then(function(){h(g,!0)},function(a){e=!1;h(g,!1)}))});a.length?k.all(a).then(function(){l(e)},z):l(!0)}function h(a,c){m===w&&p.$setValidity(a,c)}function l(a){m===w&&e(a)}w++;var m=w;(function(a){var c=p.$$parserName||"parse";if(a===
t)h(c,null);else if(h(c,a),!a)return s(p.$validators,function(a,c){h(c,null)}),s(p.$asyncValidators,function(a,c){h(c,null)}),!1;return!0})(a)?f()?g():l(!1):l(!1)};this.$commitViewValue=function(){var a=p.$viewValue;h.cancel(P);if(p.$$lastCommittedViewValue!==a||""===a&&p.$$hasNativeValidators)p.$$lastCommittedViewValue=a,p.$pristine&&this.$setDirty(),this.$$parseAndValidate()};this.$$parseAndValidate=function(){var c=p.$$lastCommittedViewValue,d=B(c)?t:!0;if(d)for(var e=0;e<p.$parsers.length;e++)if(c=
p.$parsers[e](c),B(c)){d=!1;break}V(p.$modelValue)&&isNaN(p.$modelValue)&&(p.$modelValue=u(a));var f=p.$modelValue,g=p.$options&&p.$options.allowInvalid;p.$$rawModelValue=c;g&&(p.$modelValue=c,p.$modelValue!==f&&p.$$writeModelToScope());p.$$runValidators(d,c,p.$$lastCommittedViewValue,function(a){g||(p.$modelValue=a?c:t,p.$modelValue!==f&&p.$$writeModelToScope())})};this.$$writeModelToScope=function(){r(a,p.$modelValue);s(p.$viewChangeListeners,function(a){try{a()}catch(d){c(d)}})};this.$setViewValue=
function(a,c){p.$viewValue=a;p.$options&&!p.$options.updateOnDefault||p.$$debounceViewValueCommit(c)};this.$$debounceViewValueCommit=function(c){var d=0,e=p.$options;e&&y(e.debounce)&&(e=e.debounce,V(e)?d=e:V(e[c])?d=e[c]:V(e["default"])&&(d=e["default"]));h.cancel(P);d?P=h(function(){p.$commitViewValue()},d):l.$$phase?p.$commitViewValue():a.$apply(function(){p.$commitViewValue()})};a.$watch(function(){var c=u(a);if(c!==p.$modelValue){p.$modelValue=p.$$rawModelValue=c;for(var d=p.$formatters,e=d.length,
f=c;e--;)f=d[e](f);p.$viewValue!==f&&(p.$viewValue=p.$$lastCommittedViewValue=f,p.$render(),p.$$runValidators(t,c,f,z))}return c})}],ve=["$rootScope",function(a){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:dg,priority:1,compile:function(c){c.addClass(Sa).addClass("ng-untouched").addClass(lb);return{pre:function(a,c,f,g){var h=g[0],l=g[1]||Lb;h.$$setOptions(g[2]&&g[2].$options);l.$addControl(h);f.$observe("name",function(a){h.$name!==a&&l.$$renameControl(h,a)});a.$on("$destroy",
function(){l.$removeControl(h)})},post:function(c,e,f,g){var h=g[0];if(h.$options&&h.$options.updateOn)e.on(h.$options.updateOn,function(a){h.$$debounceViewValueCommit(a&&a.type)});e.on("blur",function(e){h.$touched||(a.$$phase?c.$evalAsync(h.$setTouched):c.$apply(h.$setTouched))})}}}}}],eg=/(\s+|^)default(\s+|$)/,ze=function(){return{restrict:"A",controller:["$scope","$attrs",function(a,c){var d=this;this.$options=a.$eval(c.ngModelOptions);this.$options.updateOn!==t?(this.$options.updateOnDefault=
!1,this.$options.updateOn=U(this.$options.updateOn.replace(eg,function(){d.$options.updateOnDefault=!0;return" "}))):this.$options.updateOnDefault=!0}]}},le=Ja({terminal:!0,priority:1E3}),me=["$locale","$interpolate",function(a,c){var d=/{}/g,e=/^when(Minus)?(.+)$/;return{restrict:"EA",link:function(f,g,h){function l(a){g.text(a||"")}var k=h.count,m=h.$attr.when&&g.attr(h.$attr.when),n=h.offset||0,q=f.$eval(m)||{},u={},m=c.startSymbol(),r=c.endSymbol(),t=m+k+"-"+n+r,p=ca.noop,v;s(h,function(a,c){var d=
e.exec(c);d&&(d=(d[1]?"-":"")+Q(d[2]),q[d]=g.attr(h.$attr[c]))});s(q,function(a,e){u[e]=c(a.replace(d,t))});f.$watch(k,function(c){c=parseFloat(c);var d=isNaN(c);d||c in q||(c=a.pluralCat(c-n));c===v||d&&isNaN(v)||(p(),p=f.$watch(u[c],l),v=c)})}}}],ne=["$parse","$animate",function(a,c){var d=S("ngRepeat"),e=function(a,c,d,e,k,m,n){a[d]=e;k&&(a[k]=m);a.$index=c;a.$first=0===c;a.$last=c===n-1;a.$middle=!(a.$first||a.$last);a.$odd=!(a.$even=0===(c&1))};return{restrict:"A",multiElement:!0,transclude:"element",
priority:1E3,terminal:!0,$$tlb:!0,compile:function(f,g){var h=g.ngRepeat,l=Y.createComment(" end ngRepeat: "+h+" "),k=h.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!k)throw d("iexp",h);var m=k[1],n=k[2],q=k[3],u=k[4],k=m.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);if(!k)throw d("iidexp",m);var r=k[3]||k[1],y=k[2];if(q&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(q)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(q)))throw d("badident",
q);var p,v,w,B,z={$id:Na};u?p=a(u):(w=function(a,c){return Na(c)},B=function(a){return a});return function(a,f,g,k,m){p&&(v=function(c,d,e){y&&(z[y]=c);z[r]=d;z.$index=e;return p(a,z)});var u=ha();a.$watchCollection(n,function(g){var k,p,n=f[0],E,z=ha(),x,T,N,G,H,C,I;q&&(a[q]=g);if(Ta(g))H=g,p=v||w;else{p=v||B;H=[];for(I in g)g.hasOwnProperty(I)&&"$"!=I.charAt(0)&&H.push(I);H.sort()}x=H.length;I=Array(x);for(k=0;k<x;k++)if(T=g===H?k:H[k],N=g[T],G=p(T,N,k),u[G])C=u[G],delete u[G],z[G]=C,I[k]=C;else{if(z[G])throw s(I,
function(a){a&&a.scope&&(u[a.id]=a)}),d("dupes",h,G,N);I[k]={id:G,scope:t,clone:t};z[G]=!0}for(E in u){C=u[E];G=ub(C.clone);c.leave(G);if(G[0].parentNode)for(k=0,p=G.length;k<p;k++)G[k].$$NG_REMOVED=!0;C.scope.$destroy()}for(k=0;k<x;k++)if(T=g===H?k:H[k],N=g[T],C=I[k],C.scope){E=n;do E=E.nextSibling;while(E&&E.$$NG_REMOVED);C.clone[0]!=E&&c.move(ub(C.clone),null,D(n));n=C.clone[C.clone.length-1];e(C.scope,k,r,N,y,T,x)}else m(function(a,d){C.scope=d;var f=l.cloneNode(!1);a[a.length++]=f;c.enter(a,
null,D(n));n=f;C.clone=a;z[C.id]=C;e(C.scope,k,r,N,y,T,x)});u=z})}}}}],oe=["$animate",function(a){return{restrict:"A",multiElement:!0,link:function(c,d,e){c.$watch(e.ngShow,function(c){a[c?"removeClass":"addClass"](d,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],he=["$animate",function(a){return{restrict:"A",multiElement:!0,link:function(c,d,e){c.$watch(e.ngHide,function(c){a[c?"addClass":"removeClass"](d,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],pe=Ja(function(a,c,d){a.$watchCollection(d.ngStyle,
function(a,d){d&&a!==d&&s(d,function(a,d){c.css(d,"")});a&&c.css(a)})}),qe=["$animate",function(a){return{restrict:"EA",require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(c,d,e,f){var g=[],h=[],l=[],k=[],m=function(a,c){return function(){a.splice(c,1)}};c.$watch(e.ngSwitch||e.on,function(c){var d,e;d=0;for(e=l.length;d<e;++d)a.cancel(l[d]);d=l.length=0;for(e=k.length;d<e;++d){var r=ub(h[d].clone);k[d].$destroy();(l[d]=a.leave(r)).then(m(l,d))}h.length=0;k.length=0;(g=
f.cases["!"+c]||f.cases["?"])&&s(g,function(c){c.transclude(function(d,e){k.push(e);var f=c.element;d[d.length++]=Y.createComment(" end ngSwitchWhen: ");h.push({clone:d});a.enter(d,f.parent(),f)})})})}}}],re=Ja({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(a,c,d,e,f){e.cases["!"+d.ngSwitchWhen]=e.cases["!"+d.ngSwitchWhen]||[];e.cases["!"+d.ngSwitchWhen].push({transclude:f,element:c})}}),se=Ja({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,
link:function(a,c,d,e,f){e.cases["?"]=e.cases["?"]||[];e.cases["?"].push({transclude:f,element:c})}}),ue=Ja({restrict:"EAC",link:function(a,c,d,e,f){if(!f)throw S("ngTransclude")("orphan",va(c));f(function(a){c.empty();c.append(a)})}}),Vd=["$templateCache",function(a){return{restrict:"E",terminal:!0,compile:function(c,d){"text/ng-template"==d.type&&a.put(d.id,c[0].text)}}}],fg=S("ngOptions"),te=ea({restrict:"A",terminal:!0}),Wd=["$compile","$parse",function(a,c){var d=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,
e={$setViewValue:z};return{restrict:"E",require:["select","?ngModel"],controller:["$element","$scope","$attrs",function(a,c,d){var l=this,k={},m=e,n;l.databound=d.ngModel;l.init=function(a,c,d){m=a;n=d};l.addOption=function(c,d){Ma(c,'"option value"');k[c]=!0;m.$viewValue==c&&(a.val(c),n.parent()&&n.remove());d&&d[0].hasAttribute("selected")&&(d[0].selected=!0)};l.removeOption=function(a){this.hasOption(a)&&(delete k[a],m.$viewValue===a&&this.renderUnknownOption(a))};l.renderUnknownOption=function(c){c=
"? "+Na(c)+" ?";n.val(c);a.prepend(n);a.val(c);n.prop("selected",!0)};l.hasOption=function(a){return k.hasOwnProperty(a)};c.$on("$destroy",function(){l.renderUnknownOption=z})}],link:function(e,g,h,l){function k(a,c,d,e){d.$render=function(){var a=d.$viewValue;e.hasOption(a)?(C.parent()&&C.remove(),c.val(a),""===a&&p.prop("selected",!0)):B(a)&&p?c.val(""):e.renderUnknownOption(a)};c.on("change",function(){a.$apply(function(){C.parent()&&C.remove();d.$setViewValue(c.val())})})}function m(a,c,d){var e;
d.$render=function(){var a=new eb(d.$viewValue);s(c.find("option"),function(c){c.selected=y(a.get(c.value))})};a.$watch(function(){ga(e,d.$viewValue)||(e=ra(d.$viewValue),d.$render())});c.on("change",function(){a.$apply(function(){var a=[];s(c.find("option"),function(c){c.selected&&a.push(c.value)});d.$setViewValue(a)})})}function n(e,f,g){function h(a,c,d){S[x]=d;D&&(S[D]=c);return a(e,S)}function k(a){var c;if(u)if(M&&H(a)){c=new eb([]);for(var d=0;d<a.length;d++)c.put(h(M,null,a[d]),!0)}else c=
new eb(a);else M&&(a=h(M,null,a));return function(d,e){var f;f=M?M:B?B:F;return u?y(c.remove(h(f,d,e))):a===h(f,d,e)}}function l(){v||(e.$$postDigest(p),v=!0)}function m(a,c,d){a[c]=a[c]||0;a[c]+=d?1:-1}function p(){v=!1;var a={"":[]},c=[""],d,l,n,r,t;n=g.$viewValue;r=O(e)||[];var B=D?Object.keys(r).sort():r,x,A,H,F,N={};t=k(n);var J=!1,U,V;Q={};for(F=0;H=B.length,F<H;F++){x=F;if(D&&(x=B[F],"$"===x.charAt(0)))continue;A=r[x];d=h(I,x,A)||"";(l=a[d])||(l=a[d]=[],c.push(d));d=t(x,A);J=J||d;A=h(C,x,A);
A=y(A)?A:"";V=M?M(e,S):D?B[F]:F;M&&(Q[V]=x);l.push({id:V,label:A,selected:d})}u||(z||null===n?a[""].unshift({id:"",label:"",selected:!J}):J||a[""].unshift({id:"?",label:"",selected:!0}));x=0;for(B=c.length;x<B;x++){d=c[x];l=a[d];R.length<=x?(n={element:G.clone().attr("label",d),label:l.label},r=[n],R.push(r),f.append(n.element)):(r=R[x],n=r[0],n.label!=d&&n.element.attr("label",n.label=d));J=null;F=0;for(H=l.length;F<H;F++)d=l[F],(t=r[F+1])?(J=t.element,t.label!==d.label&&(m(N,t.label,!1),m(N,d.label,
!0),J.text(t.label=d.label),J.prop("label",t.label)),t.id!==d.id&&J.val(t.id=d.id),J[0].selected!==d.selected&&(J.prop("selected",t.selected=d.selected),Ra&&J.prop("selected",t.selected))):(""===d.id&&z?U=z:(U=w.clone()).val(d.id).prop("selected",d.selected).attr("selected",d.selected).prop("label",d.label).text(d.label),r.push(t={element:U,label:d.label,id:d.id,selected:d.selected}),m(N,d.label,!0),J?J.after(U):n.element.append(U),J=U);for(F++;r.length>F;)d=r.pop(),m(N,d.label,!1),d.element.remove()}for(;R.length>
x;){l=R.pop();for(F=1;F<l.length;++F)m(N,l[F].label,!1);l[0].element.remove()}s(N,function(a,c){0<a?q.addOption(c):0>a&&q.removeOption(c)})}var n;if(!(n=r.match(d)))throw fg("iexp",r,va(f));var C=c(n[2]||n[1]),x=n[4]||n[6],A=/ as /.test(n[0])&&n[1],B=A?c(A):null,D=n[5],I=c(n[3]||""),F=c(n[2]?n[1]:x),O=c(n[7]),M=n[8]?c(n[8]):null,Q={},R=[[{element:f,label:""}]],S={};z&&(a(z)(e),z.removeClass("ng-scope"),z.remove());f.empty();f.on("change",function(){e.$apply(function(){var a=O(e)||[],c;if(u)c=[],s(f.val(),
function(d){d=M?Q[d]:d;c.push("?"===d?t:""===d?null:h(B?B:F,d,a[d]))});else{var d=M?Q[f.val()]:f.val();c="?"===d?t:""===d?null:h(B?B:F,d,a[d])}g.$setViewValue(c);p()})});g.$render=p;e.$watchCollection(O,l);e.$watchCollection(function(){var a=O(e),c;if(a&&H(a)){c=Array(a.length);for(var d=0,f=a.length;d<f;d++)c[d]=h(C,d,a[d])}else if(a)for(d in c={},a)a.hasOwnProperty(d)&&(c[d]=h(C,d,a[d]));return c},l);u&&e.$watchCollection(function(){return g.$modelValue},l)}if(l[1]){var q=l[0];l=l[1];var u=h.multiple,
r=h.ngOptions,z=!1,p,v=!1,w=D(Y.createElement("option")),G=D(Y.createElement("optgroup")),C=w.clone();h=0;for(var A=g.children(),x=A.length;h<x;h++)if(""===A[h].value){p=z=A.eq(h);break}q.init(l,z,C);u&&(l.$isEmpty=function(a){return!a||0===a.length});r?n(e,g,l):u?m(e,g,l):k(e,g,l,q)}}}}],Yd=["$interpolate",function(a){var c={addOption:z,removeOption:z};return{restrict:"E",priority:100,compile:function(d,e){if(B(e.value)){var f=a(d.text(),!0);f||e.$set("value",d.text())}return function(a,d,e){var k=
d.parent(),m=k.data("$selectController")||k.parent().data("$selectController");m&&m.databound||(m=c);f?a.$watch(f,function(a,c){e.$set("value",a);c!==a&&m.removeOption(c);m.addOption(a,d)}):m.addOption(e.value,d);d.on("$destroy",function(){m.removeOption(e.value)})}}}}],Xd=ea({restrict:"E",terminal:!1}),Ac=function(){return{restrict:"A",require:"?ngModel",link:function(a,c,d,e){e&&(d.required=!0,e.$validators.required=function(a,c){return!d.required||!e.$isEmpty(c)},d.$observe("required",function(){e.$validate()}))}}},
zc=function(){return{restrict:"A",require:"?ngModel",link:function(a,c,d,e){if(e){var f,g=d.ngPattern||d.pattern;d.$observe("pattern",function(a){F(a)&&0<a.length&&(a=new RegExp("^"+a+"$"));if(a&&!a.test)throw S("ngPattern")("noregexp",g,a,va(c));f=a||t;e.$validate()});e.$validators.pattern=function(a){return e.$isEmpty(a)||B(f)||f.test(a)}}}}},Cc=function(){return{restrict:"A",require:"?ngModel",link:function(a,c,d,e){if(e){var f=-1;d.$observe("maxlength",function(a){a=ba(a);f=isNaN(a)?-1:a;e.$validate()});
e.$validators.maxlength=function(a,c){return 0>f||e.$isEmpty(c)||c.length<=f}}}}},Bc=function(){return{restrict:"A",require:"?ngModel",link:function(a,c,d,e){if(e){var f=0;d.$observe("minlength",function(a){f=ba(a)||0;e.$validate()});e.$validators.minlength=function(a,c){return e.$isEmpty(c)||c.length>=f}}}}};M.angular.bootstrap?console.log("WARNING: Tried to load angular more than once."):(Nd(),Pd(ca),D(Y).ready(function(){Jd(Y,tc)}))})(window,document);!window.angular.$$csp()&&window.angular.element(document).find("head").prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}</style>');
//# sourceMappingURL=angular.min.js.map

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/vendor/angular/angular.min.js","/resources/assets/vendor/angular")

},{"_process":7,"buffer":3}],78:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*
 AngularJS v1.3.0
 (c) 2010-2014 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(M,f,S){'use strict';f.module("ngAnimate",["ng"]).directive("ngAnimateChildren",function(){return function(T,B,k){k=k.ngAnimateChildren;f.isString(k)&&0===k.length?B.data("$$ngAnimateChildren",!0):T.$watch(k,function(f){B.data("$$ngAnimateChildren",!!f)})}}).factory("$$animateReflow",["$$rAF","$document",function(f,B){return function(k){return f(function(){k()})}}]).config(["$provide","$animateProvider",function(T,B){function k(f){for(var g=0;g<f.length;g++){var k=f[g];if(1==k.nodeType)return k}}
function N(f,g){return k(f)==k(g)}var s=f.noop,g=f.forEach,ba=B.$$selectors,$=f.isArray,ca=f.isString,da=f.isObject,t={running:!0};T.decorator("$animate",["$delegate","$$q","$injector","$sniffer","$rootElement","$$asyncCallback","$rootScope","$document","$templateRequest",function(O,M,I,U,x,C,P,S,V){function A(a,c){var b=a.data("$$ngAnimateState")||{};c&&(b.running=!0,b.structural=!0,a.data("$$ngAnimateState",b));return b.disabled||b.running&&b.structural}function z(a){var c,b=M.defer();b.promise.$$cancelFn=
function(){c&&c()};P.$$postDigest(function(){c=a(function(){b.resolve()})});return b.promise}function J(a){if(da(a))return a.tempClasses&&ca(a.tempClasses)&&(a.tempClasses=a.tempClasses.split(/\s+/)),a}function W(a,c,b){b=b||{};var e={};g(b,function(a,d){g(d.split(" "),function(d){e[d]=a})});var m=Object.create(null);g((a.attr("class")||"").split(/\s+/),function(a){m[a]=!0});var f=[],k=[];g(c.classes,function(a,d){var b=m[d],c=e[d]||{};!1===a?(b||"addClass"==c.event)&&k.push(d):!0===a&&(b&&"removeClass"!=
c.event||f.push(d))});return 0<f.length+k.length&&[f.join(" "),k.join(" ")]}function Q(a){if(a){var c=[],b={};a=a.substr(1).split(".");(U.transitions||U.animations)&&c.push(I.get(ba[""]));for(var e=0;e<a.length;e++){var f=a[e],k=ba[f];k&&!b[f]&&(c.push(I.get(k)),b[f]=!0)}return c}}function R(a,c,b,e){function m(a,d){var b=a[d],c=a["before"+d.charAt(0).toUpperCase()+d.substr(1)];if(b||c)return"leave"==d&&(c=b,b=null),l.push({event:d,fn:b}),H.push({event:d,fn:c}),!0}function k(c,h,G){var w=[];g(c,function(a){a.fn&&
w.push(a)});var f=0;g(w,function(c,n){var u=function(){a:{if(h){(h[n]||s)();if(++f<w.length)break a;h=null}G()}};switch(c.event){case "setClass":h.push(c.fn(a,F,d,u,e));break;case "animate":h.push(c.fn(a,b,e.from,e.to,u));break;case "addClass":h.push(c.fn(a,F||b,u,e));break;case "removeClass":h.push(c.fn(a,d||b,u,e));break;default:h.push(c.fn(a,u,e))}});h&&0===h.length&&G()}var p=a[0];if(p){e&&(e.to=e.to||{},e.from=e.from||{});var F,d;$(b)&&(F=b[0],d=b[1],F?d?b=F+" "+d:(b=F,c="addClass"):(b=d,c="removeClass"));
var h="setClass"==c,G=h||"addClass"==c||"removeClass"==c||"animate"==c,w=a.attr("class")+" "+b;if(X(w)){var u=s,n=[],H=[],q=s,r=[],l=[],w=(" "+w).replace(/\s+/g,".");g(Q(w),function(a){!m(a,c)&&h&&(m(a,"addClass"),m(a,"removeClass"))});return{node:p,event:c,className:b,isClassBased:G,isSetClassOperation:h,applyStyles:function(){e&&a.css(f.extend(e.from||{},e.to||{}))},before:function(a){u=a;k(H,n,function(){u=s;a()})},after:function(a){q=a;k(l,r,function(){q=s;a()})},cancel:function(){n&&(g(n,function(a){(a||
s)(!0)}),u(!0));r&&(g(r,function(a){(a||s)(!0)}),q(!0))}}}}}function y(a,c,b,e,m,k,p,F){function d(d){var h="$animate:"+d;H&&H[h]&&0<H[h].length&&C(function(){b.triggerHandler(h,{event:a,className:c})})}function h(){d("before")}function G(){d("after")}function w(){w.hasBeenRun||(w.hasBeenRun=!0,k())}function u(){if(!u.hasBeenRun){n&&n.applyStyles();u.hasBeenRun=!0;p&&p.tempClasses&&g(p.tempClasses,function(a){b.removeClass(a)});var h=b.data("$$ngAnimateState");h&&(n&&n.isClassBased?l(b,c):(C(function(){var d=
b.data("$$ngAnimateState")||{};v==d.index&&l(b,c,a)}),b.data("$$ngAnimateState",h)));d("close");F()}}var n=R(b,a,c,p);if(!n)return w(),h(),G(),u(),s;a=n.event;c=n.className;var H=f.element._data(n.node),H=H&&H.events;e||(e=m?m.parent():b.parent());if(Y(b,e))return w(),h(),G(),u(),s;e=b.data("$$ngAnimateState")||{};var q=e.active||{},r=e.totalActive||0,t=e.last;m=!1;if(0<r){r=[];if(n.isClassBased)"setClass"==t.event?(r.push(t),l(b,c)):q[c]&&(aa=q[c],aa.event==a?m=!0:(r.push(aa),l(b,c)));else if("leave"==
a&&q["ng-leave"])m=!0;else{for(var aa in q)r.push(q[aa]);e={};l(b,!0)}0<r.length&&g(r,function(a){a.cancel()})}!n.isClassBased||n.isSetClassOperation||"animate"==a||m||(m="addClass"==a==b.hasClass(c));if(m)return w(),h(),G(),d("close"),F(),s;q=e.active||{};r=e.totalActive||0;if("leave"==a)b.one("$destroy",function(a){a=f.element(this);var d=a.data("$$ngAnimateState");d&&(d=d.active["ng-leave"])&&(d.cancel(),l(a,"ng-leave"))});b.addClass("ng-animate");p&&p.tempClasses&&g(p.tempClasses,function(a){b.addClass(a)});
var v=Z++;r++;q[c]=n;b.data("$$ngAnimateState",{last:n,active:q,index:v,totalActive:r});h();n.before(function(d){var h=b.data("$$ngAnimateState");d=d||!h||!h.active[c]||n.isClassBased&&h.active[c].event!=a;w();!0===d?u():(G(),n.after(u))});return n.cancel}function K(a){if(a=k(a))a=f.isFunction(a.getElementsByClassName)?a.getElementsByClassName("ng-animate"):a.querySelectorAll(".ng-animate"),g(a,function(a){a=f.element(a);(a=a.data("$$ngAnimateState"))&&a.active&&g(a.active,function(a){a.cancel()})})}
function l(a,c){if(N(a,x))t.disabled||(t.running=!1,t.structural=!1);else if(c){var b=a.data("$$ngAnimateState")||{},e=!0===c;!e&&b.active&&b.active[c]&&(b.totalActive--,delete b.active[c]);if(e||!b.totalActive)a.removeClass("ng-animate"),a.removeData("$$ngAnimateState")}}function Y(a,c){if(t.disabled)return!0;if(N(a,x))return t.running;var b,e,k;do{if(0===c.length)break;var g=N(c,x),p=g?t:c.data("$$ngAnimateState")||{};if(p.disabled)return!0;g&&(k=!0);!1!==b&&(g=c.data("$$ngAnimateChildren"),f.isDefined(g)&&
(b=g));e=e||p.running||p.last&&!p.last.isClassBased}while(c=c.parent());return!k||!b&&e}x.data("$$ngAnimateState",t);var L=P.$watch(function(){return V.totalPendingRequests},function(a,c){0===a&&(L(),P.$$postDigest(function(){P.$$postDigest(function(){t.running=!1})}))}),Z=0,E=B.classNameFilter(),X=E?function(a){return E.test(a)}:function(){return!0};return{animate:function(a,c,b,e,g){e=e||"ng-inline-animate";g=J(g)||{};g.from=b?c:null;g.to=b?b:c;return z(function(b){return y("animate",e,f.element(k(a)),
null,null,s,g,b)})},enter:function(a,c,b,e){e=J(e);a=f.element(a);c=c&&f.element(c);b=b&&f.element(b);A(a,!0);O.enter(a,c,b);return z(function(g){return y("enter","ng-enter",f.element(k(a)),c,b,s,e,g)})},leave:function(a,c){c=J(c);a=f.element(a);K(a);A(a,!0);return z(function(b){return y("leave","ng-leave",f.element(k(a)),null,null,function(){O.leave(a)},c,b)})},move:function(a,c,b,e){e=J(e);a=f.element(a);c=c&&f.element(c);b=b&&f.element(b);K(a);A(a,!0);O.move(a,c,b);return z(function(g){return y("move",
"ng-move",f.element(k(a)),c,b,s,e,g)})},addClass:function(a,c,b){return this.setClass(a,c,[],b)},removeClass:function(a,c,b){return this.setClass(a,[],c,b)},setClass:function(a,c,b,e){e=J(e);a=f.element(a);a=f.element(k(a));if(A(a))return O.$$setClassImmediately(a,c,b,e);var m,l=a.data("$$animateClasses"),p=!!l;l||(l={classes:{}});m=l.classes;c=$(c)?c:c.split(" ");g(c,function(a){a&&a.length&&(m[a]=!0)});b=$(b)?b:b.split(" ");g(b,function(a){a&&a.length&&(m[a]=!1)});if(p)return e&&l.options&&(l.options=
f.extend(l.options||{},e)),l.promise;a.data("$$animateClasses",l={classes:m,options:e});return l.promise=z(function(b){var d=a.parent(),h=k(a),c=h.parentNode;if(!c||c.$$NG_REMOVED||h.$$NG_REMOVED)b();else{h=a.data("$$animateClasses");a.removeData("$$animateClasses");var c=a.data("$$ngAnimateState")||{},e=W(a,h,c.active);return e?y("setClass",e,a,d,null,function(){e[0]&&O.$$addClassImmediately(a,e[0]);e[1]&&O.$$removeClassImmediately(a,e[1])},h.options,b):b()}})},cancel:function(a){a.$$cancelFn()},
enabled:function(a,c){switch(arguments.length){case 2:if(a)l(c);else{var b=c.data("$$ngAnimateState")||{};b.disabled=!0;c.data("$$ngAnimateState",b)}break;case 1:t.disabled=!a;break;default:a=!t.disabled}return!!a}}}]);B.register("",["$window","$sniffer","$timeout","$$animateReflow",function(t,B,I,U){function x(){e||(e=U(function(){b=[];e=null;a={}}))}function C(c,d){e&&e();b.push(d);e=U(function(){g(b,function(a){a()});b=[];e=null;a={}})}function P(a,d){var h=k(a);a=f.element(h);p.push(a);h=Date.now()+
d;h<=N||(I.cancel(m),N=h,m=I(function(){T(p);p=[]},d,!1))}function T(a){g(a,function(a){(a=a.data("$$ngAnimateCSS3Data"))&&g(a.closeAnimationFns,function(a){a()})})}function V(b,d){var h=d?a[d]:null;if(!h){var c=0,e=0,f=0,k=0;g(b,function(a){if(1==a.nodeType){a=t.getComputedStyle(a)||{};c=Math.max(A(a[L+"Duration"]),c);e=Math.max(A(a[L+"Delay"]),e);k=Math.max(A(a[E+"Delay"]),k);var d=A(a[E+"Duration"]);0<d&&(d*=parseInt(a[E+"IterationCount"],10)||1);f=Math.max(d,f)}});h={total:0,transitionDelay:e,
transitionDuration:c,animationDelay:k,animationDuration:f};d&&(a[d]=h)}return h}function A(a){var d=0;a=ca(a)?a.split(/\s*,\s*/):[];g(a,function(a){d=Math.max(parseFloat(a)||0,d)});return d}function z(b,d,h,e){b=0<=["ng-enter","ng-leave","ng-move"].indexOf(h);var f,g=d.parent(),n=g.data("$$ngAnimateKey");n||(g.data("$$ngAnimateKey",++c),n=c);f=n+"-"+k(d).getAttribute("class");var g=f+" "+h,n=a[g]?++a[g].total:0,l={};if(0<n){var q=h+"-stagger",l=f+" "+q;(f=!a[l])&&d.addClass(q);l=V(d,l);f&&d.removeClass(q)}d.addClass(h);
var q=d.data("$$ngAnimateCSS3Data")||{},r=V(d,g);f=r.transitionDuration;r=r.animationDuration;if(b&&0===f&&0===r)return d.removeClass(h),!1;h=e||b&&0<f;b=0<r&&0<l.animationDelay&&0===l.animationDuration;d.data("$$ngAnimateCSS3Data",{stagger:l,cacheKey:g,running:q.running||0,itemIndex:n,blockTransition:h,closeAnimationFns:q.closeAnimationFns||[]});g=k(d);h&&(W(g,!0),e&&d.css(e));b&&(g.style[E+"PlayState"]="paused");return!0}function J(a,d,b,c,e){function f(){d.off(C,l);d.removeClass(q);d.removeClass(r);
z&&I.cancel(z);K(d,b);var a=k(d),c;for(c in p)a.style.removeProperty(p[c])}function l(a){a.stopPropagation();var d=a.originalEvent||a;a=d.$manualTimeStamp||d.timeStamp||Date.now();d=parseFloat(d.elapsedTime.toFixed(3));Math.max(a-B,0)>=A&&d>=x&&c()}var m=k(d);a=d.data("$$ngAnimateCSS3Data");if(-1!=m.getAttribute("class").indexOf(b)&&a){var q="",r="";g(b.split(" "),function(a,d){var b=(0<d?" ":"")+a;q+=b+"-active";r+=b+"-pending"});var p=[],t=a.itemIndex,v=a.stagger,s=0;if(0<t){s=0;0<v.transitionDelay&&
0===v.transitionDuration&&(s=v.transitionDelay*t);var y=0;0<v.animationDelay&&0===v.animationDuration&&(y=v.animationDelay*t,p.push(Y+"animation-play-state"));s=Math.round(100*Math.max(s,y))/100}s||(d.addClass(q),a.blockTransition&&W(m,!1));var D=V(d,a.cacheKey+" "+q),x=Math.max(D.transitionDuration,D.animationDuration);if(0===x)d.removeClass(q),K(d,b),c();else{!s&&e&&(D.transitionDuration||(d.css("transition",D.animationDuration+"s linear all"),p.push("transition")),d.css(e));var t=Math.max(D.transitionDelay,
D.animationDelay),A=1E3*t;0<p.length&&(v=m.getAttribute("style")||"",";"!==v.charAt(v.length-1)&&(v+=";"),m.setAttribute("style",v+" "));var B=Date.now(),C=X+" "+Z,t=1E3*(s+1.5*(t+x)),z;0<s&&(d.addClass(r),z=I(function(){z=null;0<D.transitionDuration&&W(m,!1);0<D.animationDuration&&(m.style[E+"PlayState"]="");d.addClass(q);d.removeClass(r);e&&(0===D.transitionDuration&&d.css("transition",D.animationDuration+"s linear all"),d.css(e),p.push("transition"))},1E3*s,!1));d.on(C,l);a.closeAnimationFns.push(function(){f();
c()});a.running++;P(d,t);return f}}else c()}function W(a,d){a.style[L+"Property"]=d?"none":""}function Q(a,d,b,c){if(z(a,d,b,c))return function(a){a&&K(d,b)}}function R(a,d,b,c,e){if(d.data("$$ngAnimateCSS3Data"))return J(a,d,b,c,e);K(d,b);c()}function y(a,d,b,c,e){var f=Q(a,d,b,e.from);if(f){var g=f;C(d,function(){g=R(a,d,b,c,e.to)});return function(a){(g||s)(a)}}x();c()}function K(a,d){a.removeClass(d);var b=a.data("$$ngAnimateCSS3Data");b&&(b.running&&b.running--,b.running&&0!==b.running||a.removeData("$$ngAnimateCSS3Data"))}
function l(a,d){var b="";a=$(a)?a:a.split(/\s+/);g(a,function(a,c){a&&0<a.length&&(b+=(0<c?" ":"")+a+d)});return b}var Y="",L,Z,E,X;M.ontransitionend===S&&M.onwebkittransitionend!==S?(Y="-webkit-",L="WebkitTransition",Z="webkitTransitionEnd transitionend"):(L="transition",Z="transitionend");M.onanimationend===S&&M.onwebkitanimationend!==S?(Y="-webkit-",E="WebkitAnimation",X="webkitAnimationEnd animationend"):(E="animation",X="animationend");var a={},c=0,b=[],e,m=null,N=0,p=[];return{animate:function(a,
d,b,c,e,f){f=f||{};f.from=b;f.to=c;return y("animate",a,d,e,f)},enter:function(a,b,c){c=c||{};return y("enter",a,"ng-enter",b,c)},leave:function(a,b,c){c=c||{};return y("leave",a,"ng-leave",b,c)},move:function(a,b,c){c=c||{};return y("move",a,"ng-move",b,c)},beforeSetClass:function(a,b,c,e,f){f=f||{};b=l(c,"-remove")+" "+l(b,"-add");if(f=Q("setClass",a,b,f.from))return C(a,e),f;x();e()},beforeAddClass:function(a,b,c,e){e=e||{};if(b=Q("addClass",a,l(b,"-add"),e.from))return C(a,c),b;x();c()},beforeRemoveClass:function(a,
b,c,e){e=e||{};if(b=Q("removeClass",a,l(b,"-remove"),e.from))return C(a,c),b;x();c()},setClass:function(a,b,c,e,f){f=f||{};c=l(c,"-remove");b=l(b,"-add");return R("setClass",a,c+" "+b,e,f.to)},addClass:function(a,b,c,e){e=e||{};return R("addClass",a,l(b,"-add"),c,e.to)},removeClass:function(a,b,c,e){e=e||{};return R("removeClass",a,l(b,"-remove"),c,e.to)}}}])}])})(window,window.angular);
//# sourceMappingURL=angular-animate.min.js.map

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/vendor/angular_animate/angular-animate.min.js","/resources/assets/vendor/angular_animate")

},{"_process":7,"buffer":3}],79:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*! 3.1.2 */
!function(){function a(a,b){window.XMLHttpRequest.prototype[a]=b(window.XMLHttpRequest.prototype[a])}function b(a,b,c){try{Object.defineProperty(a,b,{get:c})}catch(d){}}var c=function(){try{var a=new ActiveXObject("ShockwaveFlash.ShockwaveFlash");if(a)return!0}catch(b){if(void 0!=navigator.mimeTypes["application/x-shockwave-flash"])return!0}return!1};if(window.XMLHttpRequest&&!window.FormData||window.FileAPI&&FileAPI.forceLoad){var d=function(a){if(!a.__listeners){a.upload||(a.upload={}),a.__listeners=[];var b=a.upload.addEventListener;a.upload.addEventListener=function(c,d){a.__listeners[c]=d,b&&b.apply(this,arguments)}}};a("open",function(a){return function(b,c,e){d(this),this.__url=c;try{a.apply(this,[b,c,e])}catch(f){f.message.indexOf("Access is denied")>-1&&(this.__origError=f,a.apply(this,[b,"_fix_for_ie_crossdomain__",e]))}}}),a("getResponseHeader",function(a){return function(b){return this.__fileApiXHR&&this.__fileApiXHR.getResponseHeader?this.__fileApiXHR.getResponseHeader(b):null==a?null:a.apply(this,[b])}}),a("getAllResponseHeaders",function(a){return function(){return this.__fileApiXHR&&this.__fileApiXHR.getAllResponseHeaders?this.__fileApiXHR.getAllResponseHeaders():null==a?null:a.apply(this)}}),a("abort",function(a){return function(){return this.__fileApiXHR&&this.__fileApiXHR.abort?this.__fileApiXHR.abort():null==a?null:a.apply(this)}}),a("setRequestHeader",function(a){return function(b,c){if("__setXHR_"===b){d(this);var e=c(this);e instanceof Function&&e(this)}else this.__requestHeaders=this.__requestHeaders||{},this.__requestHeaders[b]=c,a.apply(this,arguments)}}),a("send",function(a){return function(){var d=this;if(arguments[0]&&arguments[0].__isFileAPIShim){var e=arguments[0],f={url:d.__url,jsonp:!1,cache:!0,complete:function(a,c){d.__completed=!0,!a&&d.__listeners.load&&d.__listeners.load({type:"load",loaded:d.__loaded,total:d.__total,target:d,lengthComputable:!0}),!a&&d.__listeners.loadend&&d.__listeners.loadend({type:"loadend",loaded:d.__loaded,total:d.__total,target:d,lengthComputable:!0}),"abort"===a&&d.__listeners.abort&&d.__listeners.abort({type:"abort",loaded:d.__loaded,total:d.__total,target:d,lengthComputable:!0}),void 0!==c.status&&b(d,"status",function(){return 0==c.status&&a&&"abort"!==a?500:c.status}),void 0!==c.statusText&&b(d,"statusText",function(){return c.statusText}),b(d,"readyState",function(){return 4}),void 0!==c.response&&b(d,"response",function(){return c.response});var e=c.responseText||(a&&0==c.status&&"abort"!==a?a:void 0);b(d,"responseText",function(){return e}),b(d,"response",function(){return e}),a&&b(d,"err",function(){return a}),d.__fileApiXHR=c,d.onreadystatechange&&d.onreadystatechange(),d.onload&&d.onload()},fileprogress:function(a){if(a.target=d,d.__listeners.progress&&d.__listeners.progress(a),d.__total=a.total,d.__loaded=a.loaded,a.total===a.loaded){var b=this;setTimeout(function(){d.__completed||(d.getAllResponseHeaders=function(){},b.complete(null,{status:204,statusText:"No Content"}))},FileAPI.noContentTimeout||1e4)}},headers:d.__requestHeaders};f.data={},f.files={};for(var g=0;g<e.data.length;g++){var h=e.data[g];null!=h.val&&null!=h.val.name&&null!=h.val.size&&null!=h.val.type?f.files[h.key]=h.val:f.data[h.key]=h.val}setTimeout(function(){if(!c())throw'Adode Flash Player need to be installed. To check ahead use "FileAPI.hasFlash"';d.__fileApiXHR=FileAPI.upload(f)},1)}else{if(this.__origError)throw this.__origError;a.apply(d,arguments)}}}),window.XMLHttpRequest.__isFileAPIShim=!0;var e=function(a){if(!c())throw'Adode Flash Player need to be installed. To check ahead use "FileAPI.hasFlash"';var b=angular.element(a);if(!b.attr("disabled")){for(var d=!1,e=0;e<b[0].attributes.length;e++){var f=b[0].attributes[e];if(-1!==f.name.indexOf("file-select")){d=!0;break}}if(!b.hasClass("js-fileapi-wrapper")&&(d||null!=b.attr("__afu_gen__"))&&(b.addClass("js-fileapi-wrapper"),null!=b.attr("__afu_gen__"))){for(var g=b[0].__refElem__&&angular.element(b[0].__refElem__)||b;g&&!g.attr("__refElem__");)g=angular.element(g[0].nextSibling);g.bind("mouseover",function(){(""===b.parent().css("position")||"static"===b.parent().css("position"))&&b.parent().css("position","relative"),b.css("position","absolute").css("top",g[0].offsetTop+"px").css("left",g[0].offsetLeft+"px").css("width",g[0].offsetWidth+"px").css("height",g[0].offsetHeight+"px").css("padding",g.css("padding")).css("margin",g.css("margin")).css("filter","alpha(opacity=0)"),g.attr("onclick",""),b.css("z-index","1000")})}}},f=function(a){return function(b){for(var c=FileAPI.getFiles(b),d=0;d<c.length;d++)void 0===c[d].size&&(c[d].size=0),void 0===c[d].name&&(c[d].name="file"),void 0===c[d].type&&(c[d].type="undefined");b.target||(b.target={}),b.target.files=c,b.target.files!=c&&(b.__files_=c),(b.__files_||b.target.files).item=function(a){return(b.__files_||b.target.files)[a]||null},a&&a.apply(this,[b])}},g=function(a,b){return("change"===b.toLowerCase()||"onchange"===b.toLowerCase())&&"file"==a.getAttribute("type")};HTMLInputElement.prototype.addEventListener&&(HTMLInputElement.prototype.addEventListener=function(a){return function(b,c,d,h){g(this,b)?(e(this),a.apply(this,[b,f(c),d,h])):a.apply(this,[b,c,d,h])}}(HTMLInputElement.prototype.addEventListener)),HTMLInputElement.prototype.attachEvent&&(HTMLInputElement.prototype.attachEvent=function(a){return function(b,c){g(this,b)?(e(this),window.jQuery?angular.element(this).bind("change",f(null)):a.apply(this,[b,f(c)])):a.apply(this,[b,c])}}(HTMLInputElement.prototype.attachEvent)),window.FormData=FormData=function(){return{append:function(a,b,c){b.__isFileAPIBlobShim&&(b=b.data[0]),this.data.push({key:a,val:b,name:c})},data:[],__isFileAPIShim:!0}},window.Blob=Blob=function(a){return{data:a,__isFileAPIBlobShim:!0}},function(){if(window.FileAPI||(window.FileAPI={}),FileAPI.forceLoad&&(FileAPI.html5=!1),!FileAPI.upload){var a,b,d,e,f,g=document.createElement("script"),h=document.getElementsByTagName("script");if(window.FileAPI.jsUrl)a=window.FileAPI.jsUrl;else if(window.FileAPI.jsPath)b=window.FileAPI.jsPath;else for(d=0;d<h.length;d++)if(f=h[d].src,e=f.search(/\/angular\-file\-upload[\-a-zA-z0-9\.]*\.js/),e>-1){b=f.substring(0,e+1);break}null==FileAPI.staticPath&&(FileAPI.staticPath=b),g.setAttribute("src",a||b+"FileAPI.min.js"),document.getElementsByTagName("head")[0].appendChild(g),FileAPI.hasFlash=c()}}(),FileAPI.disableFileInput=function(a,b){b?a.removeClass("js-fileapi-wrapper"):a.addClass("js-fileapi-wrapper")}}window.FileReader||(window.FileReader=function(){var a=this,b=!1;this.listeners={},this.addEventListener=function(b,c){a.listeners[b]=a.listeners[b]||[],a.listeners[b].push(c)},this.removeEventListener=function(b,c){a.listeners[b]&&a.listeners[b].splice(a.listeners[b].indexOf(c),1)},this.dispatchEvent=function(b){var c=a.listeners[b.type];if(c)for(var d=0;d<c.length;d++)c[d].call(a,b)},this.onabort=this.onerror=this.onload=this.onloadstart=this.onloadend=this.onprogress=null;var c=function(b,c){var d={type:b,target:a,loaded:c.loaded,total:c.total,error:c.error};return null!=c.result&&(d.target.result=c.result),d},d=function(d){if(b||(b=!0,a.onloadstart&&a.onloadstart(c("loadstart",d))),"load"===d.type){a.onloadend&&a.onloadend(c("loadend",d));var e=c("load",d);a.onload&&a.onload(e),a.dispatchEvent(e)}else if("progress"===d.type){var e=c("progress",d);a.onprogress&&a.onprogress(e),a.dispatchEvent(e)}else{var e=c("error",d);a.onerror&&a.onerror(e),a.dispatchEvent(e)}};this.readAsArrayBuffer=function(a){FileAPI.readAsBinaryString(a,d)},this.readAsBinaryString=function(a){FileAPI.readAsBinaryString(a,d)},this.readAsDataURL=function(a){FileAPI.readAsDataURL(a,d)},this.readAsText=function(a){FileAPI.readAsText(a,d)}})}();
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/vendor/angularjs-file-upload/angular-file-upload-shim.min.js","/resources/assets/vendor/angularjs-file-upload")

},{"_process":7,"buffer":3}],80:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*! 3.1.2 */
!function(){function a(a,b){window.XMLHttpRequest.prototype[a]=b(window.XMLHttpRequest.prototype[a])}function b(a,b,c,d,f,g,h){function i(){return"input"===b[0].tagName.toLowerCase()&&b.attr("type")&&"file"===b.attr("type").toLowerCase()}function j(c){g(function(){b.parent().length&&p.push(a.$watch(c,function(a,b){a!=b&&k()}))})}function k(){var c=b.clone();if(b.attr("__afu_gen__")&&angular.element(document.getElementById(b.attr("id").substring(1))).remove(),b.parent().length){for(var d=0;d<p.length;d++)p[d]();b.replaceWith(c),h(c)(a)}return c}function l(d,e){if(d){j(d);var g=f(d)(a);g?(b.attr(e,g),c[e]=g):(b.attr(e,null),delete c[e])}}function m(b){var e;e=b.__files_||b.target&&b.target.files,o(e,c,d,a,b)}function n(a){if(null!=q[0].value&&""!=q[0].value&&(q[0].value=null,-1===navigator.userAgent.indexOf("Trident/7")&&m({target:{files:[]}})),b.attr("__afu_clone__"))b.attr("__afu_clone__",null);else if(-1!==navigator.appVersion.indexOf("MSIE 10")||-1!==navigator.userAgent.indexOf("Trident/7")){var c=k();return c.attr("__afu_clone__",!0),c[0].click(),a.preventDefault(),a.stopPropagation(),!0}}function o(a,b,c,d,h){for(var i=[],j=[],k=f(b.ngAccept)(d),l=angular.isString(k)&&k?new RegExp(e(k),"gi"):null,m=l?null:b.ngAccept,n=0;n<a.length;n++){var o=a.item(n);!(!l||o.type.match(l)||null!=o.name&&o.name.match(l))||m&&!f(m)(d,{$file:o,$event:h})?j.push(o):i.push(o)}g(function(){c&&(f(b.ngModel).assign(d,i),c&&c.$setViewValue(null!=i&&0==i.length?"":i),b.ngModelRejected&&f(b.ngModelRejected).assign(d,j)),b.ngFileChange&&""!=b.ngFileChange&&f(b.ngFileChange)(d,{$files:i,$rejectedFiles:j,$event:h})})}var p=[];l(c.ngMultiple,"multiple"),l(c.ngAccept,"ng-accept"),l(c.ngCapture,"capture"),""!=c.ngFileSelect&&(c.ngFileChange=c.ngFileSelect);var q=b;if(i())b.bind("click",n);else{q=angular.element('<input type="file">'),b.attr("multiple")&&q.attr("multiple",b.attr("multiple")),b.attr("accept")&&q.attr("accept",b.attr("accept")),b.attr("capture")&&q.attr("capture",b.attr("capture"));for(var r in c)if(0==r.indexOf("inputFile")){var s=r.substring("inputFile".length);s=s[0].toLowerCase()+s.substring(1),q.attr(s,c[r])}q.css("width","0px").css("height","0px").css("position","absolute").css("padding",0).css("margin",0).css("overflow","hidden").attr("tabindex","-1").css("opacity",0).attr("__afu_gen__",!0),b.attr("__refElem__",!0),q[0].__refElem__=b[0],b.parent()[0].insertBefore(q[0],b[0]),b.css("overflow","hidden"),b.bind("click",function(a){n(a)||q[0].click()})}q.bind("change",m),b.on("$destroy",function(){for(var a=0;a<p.length;a++)p[a]();b[0]!=q[0]&&q.remove()}),p.push(a.$watch(c.ngModel,function(a,b){a==b||null!=a&&a.length||(-1!==navigator.appVersion.indexOf("MSIE 10")?k():q[0].value=null)}))}function c(a,b,c,f,g,h,i){function j(a,b,c){var d=!0;if(r||s){var e=c.dataTransfer.items;if(null!=e)for(var f=0;f<e.length&&d;f++)d=d&&("file"==e[f].kind||""==e[f].kind)&&(s&&g(s)(a,{$file:e[f],$event:c})||r&&null!=e[f].type&&e[f].type.match(r)||null!=e[f].name&&e[f].name.match(r))}var h=g(b.dragOverClass)(a,{$event:c});return h&&(h.delay&&(p=h.delay),h.accept&&(h=d?h.accept:h.reject)),h||b.dragOverClass||"dragover"}function k(b,c,d,e){function f(c){!(!r||c.type.match(r)||null!=c.name&&c.name.match(r))||s&&!g(s)(a,{$file:c,$event:b})?l.push(c):k.push(c)}function j(a,b,c){if(null!=b)if(b.isDirectory){var d=(c||"")+b.name;f({name:b.name,type:"directory",path:d});var e=b.createReader(),g=[];n++;var h=function(){e.readEntries(function(d){try{if(d.length)g=g.concat(Array.prototype.slice.call(d||[],0)),h();else{for(var e=0;e<g.length;e++)j(a,g[e],(c?c:"")+b.name+"/");n--}}catch(f){n--,console.error(f)}},function(){n--})};h()}else n++,b.file(function(a){try{n--,a.path=(c?c:"")+a.name,f(a)}catch(b){n--,console.error(b)}},function(){n--})}var k=[],l=[],m=b.dataTransfer.items,n=0;if(m&&m.length>0&&"file"!=i.protocol())for(var o=0;o<m.length;o++){if(m[o].webkitGetAsEntry&&m[o].webkitGetAsEntry()&&m[o].webkitGetAsEntry().isDirectory){var p=m[o].webkitGetAsEntry();if(p.isDirectory&&!d)continue;null!=p&&j(k,p)}else{var q=m[o].getAsFile();null!=q&&f(q)}if(!e&&k.length>0)break}else{var t=b.dataTransfer.files;if(null!=t)for(var o=0;o<t.length&&(f(t.item(o)),e||!(k.length>0));o++);}var u=0;!function v(a){h(function(){if(n)10*u++<2e4&&v(10);else{if(!e&&k.length>1){for(var a=0;"directory"==k[a].type;)a++;k=[k[a]]}c(k,l)}},a||0)}()}var l=d();if(c.dropAvailable&&h(function(){a.dropAvailable?a.dropAvailable.value=l:a.dropAvailable=l}),!l)return 0!=g(c.hideOnDropNotAvailable)(a)&&b.css("display","none"),void 0;var m,n=null,o=g(c.stopPropagation)(a),p=1,q=g(c.ngAccept)(a)||c.accept,r=angular.isString(q)&&q?new RegExp(e(q),"gi"):null,s=r?null:c.ngAccept;b[0].addEventListener("dragover",function(d){if(d.preventDefault(),o&&d.stopPropagation(),navigator.userAgent.indexOf("Chrome")>-1){var e=d.dataTransfer.effectAllowed;d.dataTransfer.dropEffect="move"===e||"linkMove"===e?"move":"copy"}h.cancel(n),a.actualDragOverClass||(m=j(a,c,d)),b.addClass(m)},!1),b[0].addEventListener("dragenter",function(a){a.preventDefault(),o&&a.stopPropagation()},!1),b[0].addEventListener("dragleave",function(){n=h(function(){b.removeClass(m),m=null},p||1)},!1),""!=c.ngFileDrop&&(c.ngFileChange=a.ngFileDrop),b[0].addEventListener("drop",function(d){d.preventDefault(),o&&d.stopPropagation(),b.removeClass(m),m=null,k(d,function(b,e){h(function(){f&&(g(c.ngModel).assign(a,b),f&&f.$setViewValue(null!=b&&0==b.length?"":b)),c.ngModelRejected&&a[c.ngModelRejected]&&g(c.ngModelRejected).assign(a,e)}),h(function(){g(c.ngFileChange)(a,{$files:b,$rejectedFiles:e,$event:d})})},0!=g(c.allowDir)(a),c.multiple||g(c.ngMultiple)(a))},!1)}function d(){var a=document.createElement("div");return"draggable"in a&&"ondrop"in a}function e(a){if(a.length>2&&"/"===a[0]&&"/"===a[a.length-1])return a.substring(1,a.length-1);var b=a.split(","),c="";if(b.length>1)for(var d=0;d<b.length;d++)c+="("+e(b[d])+")",d<b.length-1&&(c+="|");else 0==a.indexOf(".")&&(a="*"+a),c="^"+a.replace(new RegExp("[.\\\\+*?\\[\\^\\]$(){}=!<>|:\\-]","g"),"\\$&")+"$",c=c.replace(/\\\*/g,".*").replace(/\\\?/g,".");return c}window.XMLHttpRequest&&!window.XMLHttpRequest.__isFileAPIShim&&a("setRequestHeader",function(a){return function(b,c){if("__setXHR_"===b){var d=c(this);d instanceof Function&&d(this)}else a.apply(this,arguments)}});var f=angular.module("angularFileUpload",[]);f.version="3.1.2",f.service("$upload",["$http","$q","$timeout",function(a,b,c){function d(d){d.method=d.method||"POST",d.headers=d.headers||{},d.transformRequest=d.transformRequest||function(b,c){return window.ArrayBuffer&&b instanceof window.ArrayBuffer?b:a.defaults.transformRequest[0](b,c)};var e=b.defer(),f=e.promise;return d.headers.__setXHR_=function(){return function(a){a&&(d.__XHR=a,d.xhrFn&&d.xhrFn(a),a.upload.addEventListener("progress",function(a){a.config=d,e.notify?e.notify(a):f.progress_fn&&c(function(){f.progress_fn(a)})},!1),a.upload.addEventListener("load",function(a){a.lengthComputable&&(a.config=d,e.notify?e.notify(a):f.progress_fn&&c(function(){f.progress_fn(a)}))},!1))}},a(d).then(function(a){e.resolve(a)},function(a){e.reject(a)},function(a){e.notify(a)}),f.success=function(a){return f.then(function(b){a(b.data,b.status,b.headers,d)}),f},f.error=function(a){return f.then(null,function(b){a(b.data,b.status,b.headers,d)}),f},f.progress=function(a){return f.progress_fn=a,f.then(null,null,function(b){a(b)}),f},f.abort=function(){return d.__XHR&&c(function(){d.__XHR.abort()}),f},f.xhr=function(a){return d.xhrFn=function(b){return function(){b&&b.apply(f,arguments),a.apply(f,arguments)}}(d.xhrFn),f},f}this.upload=function(a){a.headers=a.headers||{},a.headers["Content-Type"]=void 0;a.transformRequest;return a.transformRequest=a.transformRequest?"[object Array]"===Object.prototype.toString.call(a.transformRequest)?a.transformRequest:[a.transformRequest]:[],a.transformRequest.push(function(b){var c=new FormData,d={};for(var e in a.fields)d[e]=a.fields[e];if(b&&(d.data=b),a.formDataAppender)for(var e in d)a.formDataAppender(c,e,d[e]);else for(var e in d){var f=d[e];void 0!==f&&("[object String]"===Object.prototype.toString.call(f)?c.append(e,f):a.sendObjectsAsJsonBlob&&"object"==typeof f?c.append(e,new Blob([f],{type:"application/json"})):c.append(e,JSON.stringify(f)))}if(null!=a.file){var g=a.fileFormDataName||"file";if("[object Array]"===Object.prototype.toString.call(a.file))for(var h="[object String]"===Object.prototype.toString.call(g),i=0;i<a.file.length;i++)c.append(h?g:g[i],a.file[i],a.fileName&&a.fileName[i]||a.file[i].name);else c.append(g,a.file,a.fileName||a.file.name)}return c}),d(a)},this.http=function(a){return d(a)}}]),f.directive("ngFileSelect",["$parse","$timeout","$compile",function(a,c,d){return{restrict:"AEC",require:"?ngModel",link:function(e,f,g,h){b(e,f,g,h,a,c,d)}}}]),f.directive("ngFileDrop",["$parse","$timeout","$location",function(a,b,d){return{restrict:"AEC",require:"?ngModel",link:function(e,f,g,h){c(e,f,g,h,a,b,d)}}}]),f.directive("ngNoFileDrop",function(){return function(a,b){d()&&b.css("display","none")}}),f.directive("ngFileDropAvailable",["$parse","$timeout",function(a,b){return function(c,e,f){if(d()){var g=a(f.ngFileDropAvailable);b(function(){g(c)})}}}]);var g=angular.module("ngFileUpload",[]);for(var h in f)g[h]=f[h]}();
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/vendor/angularjs-file-upload/angular-file-upload.min.js","/resources/assets/vendor/angularjs-file-upload")

},{"_process":7,"buffer":3}],81:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
angular.module("ngFabForm",["ngMessages"]),angular.module("ngFabForm").directive("form",["ngFabFormDirective",function(a){"use strict";return a}]),angular.module("ngFabForm").directive("input",["ngFabFormValidationsDirective",function(a){"use strict";return a}]),angular.module("ngFabForm").directive("textarea",["ngFabFormValidationsDirective",function(a){"use strict";return a}]),angular.module("ngFabForm").directive("select",["ngFabFormValidationsDirective",function(a){"use strict";return a}]),angular.module("ngFabForm").provider("ngFabForm",function(){"use strict";function a(a,b){var d=angular.element(angular.element("<div/>").html(a));return angular.forEach(b,function(a,b){var e=new RegExp(c.validationMsgPrefix);if(b.match(e)){var f=b.replace(c.validationMsgPrefix,"");f=f.charAt(0).toLowerCase()+f.slice(1);var g=d[0].querySelector('[ng-message="'+f+'"]');angular.element(g).html(a)}}),d}var b,c={validationsTemplate:"default-validation-msgs.html",preventInvalidSubmit:!0,preventDoubleSubmit:!0,preventDoubleSubmitTimeoutLength:1e3,setFormDirtyOnSubmit:!0,scrollToAndFocusFirstErrorOnSubmit:!0,scrollAnimationTime:500,scrollOffset:-100,disabledForms:!0,globalFabFormDisable:!1,setNovalidate:!0,setNamesByNgModel:!0,setAsteriskForRequiredLabel:!1,asteriskStr:"*",validationMsgPrefix:"validationMsg",emailRegex:/[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/,watchForFormCtrl:!1,formChangeEvent:"NG_FAB_FORM_OPTIONS_CHANGED"},d=function(a,b,c){"checkbox"===c.type||"radio"===c.type?b.parent().after(a):b.after(a)},e=function(){function a(a,b,c,d){return(a/=d/2)<1?c/2*a*a+b:-c/2*(--a*(a-2)-1)+b}function b(a,b){var c=500,d=Math.abs(a),e=b/10;return b*d/c+e}return function(c,d,e){function f(){l+=m;var b=a(l,j,k,i);window.scrollTo(h,b),i>l?setTimeout(f,m):c.focus()}var g=c.getBoundingClientRect().top+parseInt(e),h=c.getBoundingClientRect().left,i=b(g,d),j=window.pageYOffset,k=g,l=0,m=20;return 0===k?void c.focus():void f()}}();return{extendConfig:function(a){c=angular.extend(c,a)},setInsertErrorTplFn:function(a){d=a},setScrollToFn:function(a){e=a},setCustomValidatorsFn:function(a){b=a},$get:function(){return{insertErrorTpl:d,addCustomValidations:a,customValidators:b,scrollTo:e,config:c}}}}),angular.module("ngFabForm").run(["$templateCache",function(a){"use strict";a.put("default-validation-msgs.html",'<div ng-messages="field.$error" class="validation" ng-show="attrs.required==\'\'|| attrs.required"><ul class="list-unstyled validation-errors" ng-show="field.$invalid && (field.$touched || field.$dirty || form.$triedSubmit)"><li ng-message="required">This field is required</li><li ng-message="ngFabEnsureExpression">Not valid condition</li><li ng-message="password">Please enter a valid password</li><li ng-message="email">Please enter a valid e-mail</li><li ng-message="pattern">Invalid input format</li><li ng-message="date">Please enter a valid date</li><li ng-message="time">Please enter a valid time</li><li ng-message="datetime">Please enter a valid date and time</li><li ng-message="datetime-local">Please enter a valid date and time</li><li ng-message="number">This field must be numeric</li><li ng-message="color">Please enter a valid color</li><li ng-message="range">Please enter a valid range</li><li ng-message="month">Please enter a valid month</li><li ng-message="url">Please enter a valid URL</li><li ng-message="file">Invalid file</li><li ng-message="minlength">Please use at least {{ attrs.minlength }} characters</li><li ng-message="maxlength">Please do not exceed {{ attrs.maxlength }} characters</li><li ng-message="ngFabMatch">The {{ attrs.type ===\'password\'? \'passwords\' : \'values\' }} should match</li><li ng-if="attrs.type == \'time\' " ng-message="min">The time provided should after {{ attrs.min |date: \'HH:MM\' }}</li><li ng-message="max" ng-if="attrs.type == \'time\' ">The time provided should be before {{attrs.max |date: \'HH:MM\'}}</li><li ng-message="min" ng-if="attrs.type == \'date\' ">The date provided should be after {{attrs.min |date:\'dd.MM.yy\'}}</li><li ng-message="max" ng-if="attrs.type == \'date\' ">The date provided should be before {{attrs.max |date: \'dd.MM.yy\'}}</li></ul><div class="validation-success" ng-show="field.$valid && !field.$invalid"></div></div>')}]),angular.module("ngFabForm").factory("ngFabFormValidationsDirective",["ngFabForm","$compile","$templateRequest","$rootScope","$timeout",function(a,b,c,d,e){"use strict";function f(e){var f=e.el,g=e.cfg,h=e.formCtrl,i=e.ngModelCtrl,j=e.attrs;e.currentValidationVars.tpl&&0!==Object.keys(e.currentValidationVars.tpl).length&&angular.element(e.currentValidationVars.tpl).remove(),c(g.validationsTemplate).then(function(c){var g=d.$new(!0);e.currentValidationVars.privateScope=g,c=a.addCustomValidations(c,j),g.attrs=j,g.form=h,g.field=i;var k=b(c.children())(g);e.currentValidationVars.tpl=k[0],a.insertErrorTpl(k[0],f,j)})}function g(a,b,c){var d=document.querySelectorAll('label[for="'+b.name+'"]');if(!d||d.length<1){var e=a[0].previousElementSibling;e&&"LABEL"===e.tagName&&(d=[e])}if(d&&d.length>0&&"radio"!==b.type&&"checkbox"!==b.type)for(var f=0;f<d.length;f++){var g=d[f];g.textContent.slice(-c.asteriskStr.length)!==c.asteriskStr&&(g.textContent=g.textContent+c.asteriskStr)}}return{restrict:"E",require:"?ngModel",compile:function(b,c){return!c.type||"submit"!==c.type.toLowerCase()&&"button"!==c.type.toLowerCase()?(a.config.setNamesByNgModel&&c.ngModel&&!c.name&&!a.config.globalFabFormDisable&&(b.attr("name",c.ngModel),c.name=c.ngModel),function(b,c,d,h){function i(a){!h||!k.validationsTemplate||0===Object.keys(h.$validators).length&&0===Object.keys(h.$asyncValidators).length||a&&k.validationsTemplate===a.validationsTemplate?!k.validationsTemplate&&o.tpl&&0!==Object.keys(o.tpl).length&&(o.privateScope.$destroy(),angular.element(o.tpl).remove()):f({el:c,cfg:k,formCtrl:l,ngModelCtrl:h,attrs:d,currentValidationVars:o}),!k.setAsteriskForRequiredLabel||d.required!==!0||a&&k.setAsteriskForRequiredLabel===a.setAsteriskForRequiredLabel&&k.asteriskStr===a.asteriskStr||g(c,d,k)}function j(){e(function(){if(l=c.controller("form"),l&&h){if(k||(k=l.ngFabFormConfig),!k)return;k.emailRegex&&"email"===d.type&&(h.$validators.email=function(a){return h.$isEmpty(a)||k.emailRegex.test(a)}),a.customValidators&&a.customValidators(h,d),i(),m=b.$on(a.formChangeEvent,function(a,b,c){k=b,i(c)})}},0)}var k,l,m,n,o={tpl:void 0,privateScope:void 0};a.config.watchForFormCtrl?n=b.$watch(function(){return c.controller("form")},function(a){a&&(n(),j())}):j(),b.$on("$destroy",function(){o&&o.privateScope&&o.privateScope.$destroy()})}):void 0}}}]),angular.module("ngFabForm").directive("ngFabEnsureExpression",["$http","$parse",function(a,b){"use strict";return{require:"ngModel",link:function(a,c,d,e){a.$watch(d.ngModel,function(){var c=b(d.ngFabEnsureExpression)(a);e.$setValidity("ngFabEnsureExpression",c),e.$validate()})}}}]),angular.module("ngFabForm").directive("ngFabMatch",function(){"use strict";return{require:"ngModel",restrict:"A",scope:{ngFabMatch:"="},link:function(a,b,c,d){d.$validators.ngFabMatch=function(b){return Boolean(b)&&b==a.ngFabMatch},a.$watch("ngFabMatch",function(){d.$validate()})}}}),angular.module("ngFabForm").directive("ngFabResetFormOn",function(){"use strict";return{require:"^form",restrict:"A",scope:{ngFabResetFormOn:"@",doNotClearInputs:"@"},link:function(a,b,c,d){c.ngFabResetFormOn||(c.ngFabResetFormOn="click"),b.on(c.ngFabResetFormOn,function(){c.doNotClearInputs?d.$resetForm():d.$resetForm(!0),a.$apply()})}}}),angular.module("ngFabForm").factory("ngFabFormDirective",["$compile","$timeout","ngFabForm",function(a,b,c){"use strict";function d(a){a.preventDefault(),a.stopPropagation(),a.stopImmediatePropagation()}function e(a,b){if(b.disableForm){a.contents().wrap("<fieldset>");var c=a.children();b.$observe("disableForm",function(){"true"===b.disableForm||b.disableForm===!0?c.attr("disabled",!0):c.attr("disabled",!1)})}}function f(a,b,d,e){var f=a[0].querySelector(".ng-invalid");f&&b.$invalid&&c.scrollTo(f,parseInt(d),e)}return{restrict:"EAC",scope:!1,require:"form",compile:function(a,g){var h,i=angular.copy(c.config);if(i.globalFabFormDisable!==!0||!angular.isUndefined(g.ngFabForm))return!g.novalidate&&i.setNovalidate&&(a.attr("novalidate",!0),g.novalidate=!0),{pre:function(a,c,e,g){c.bind("submit",function(e){i.setFormDirtyOnSubmit&&a.$apply(function(){g.$triedSubmit=!0}),i.preventInvalidSubmit&&!g.$valid?d(e):i.preventDoubleSubmit&&(g.$preventDoubleSubmit&&d(e),h&&b.cancel(h),g.$preventDoubleSubmit=!0,h=b(function(){g.$preventDoubleSubmit=!1},i.preventDoubleSubmitTimeoutLength)),i.scrollToAndFocusFirstErrorOnSubmit&&f(c,g,i.scrollAnimationTime,i.scrollOffset)})},post:function(a,d,f,g){g.$triedSubmit=!1,g.$preventDoubleSubmit=!1,g.ngFabFormConfig=i,g.$resetForm=function(a){if(a===!0)for(var b=d.find("input"),c=0;c<b.length;c++){var e=angular.element(b[c]),f=e.controller("ngModel");f&&(f.$setViewValue(""),f.$render())}g.$triedSubmit=!1,g.$setPristine(),g.$setUntouched()},i.disabledForms&&e(d,f),f.ngFabFormOptions&&a.$watch(f.ngFabFormOptions,function(b){if(b){var d=angular.copy(i);i=g.ngFabFormConfig=angular.extend(i,b),a.$broadcast(c.formChangeEvent,i,d)}},!0),a.$on("$destroy",function(){h&&b.cancel(h)})}}}}}]),angular.module("ngFabForm").directive("ngForm",["ngFabFormDirective",function(a){"use strict";return a}]);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/vendor/ng-fab-form/dist/ng-fab-form.min.js","/resources/assets/vendor/ng-fab-form/dist")

},{"_process":7,"buffer":3}],82:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
!function(a,b){b["true"]=a,/**
 * @license Rangy, a cross-browser JavaScript range and selection library
 * http://code.google.com/p/rangy/
 *
 * Copyright 2012, Tim Down
 * Licensed under the MIT license.
 * Version: 1.2.3
 * Build date: 26 February 2012
 */
window.rangy=function(){function a(a,b){var c=typeof a[b];return c==l||!(c!=k||!a[b])||"unknown"==c}function b(a,b){return!(typeof a[b]!=k||!a[b])}function c(a,b){return typeof a[b]!=m}function d(a){return function(b,c){for(var d=c.length;d--;)if(!a(b,c[d]))return!1;return!0}}function e(a){return a&&r(a,q)&&t(a,p)}function f(a){window.alert("Rangy not supported in your browser. Reason: "+a),u.initialized=!0,u.supported=!1}function g(a){var b="Rangy warning: "+a;u.config.alertOnWarn?window.alert(b):typeof window.console!=m&&typeof window.console.log!=m&&window.console.log(b)}function h(){if(!u.initialized){var c,d=!1,g=!1;a(document,"createRange")&&(c=document.createRange(),r(c,o)&&t(c,n)&&(d=!0),c.detach());var h=b(document,"body")?document.body:document.getElementsByTagName("body")[0];h&&a(h,"createTextRange")&&(c=h.createTextRange(),e(c)&&(g=!0)),d||g||f("Neither Range nor TextRange are implemented"),u.initialized=!0,u.features={implementsDomRange:d,implementsTextRange:g};for(var i=w.concat(v),j=0,k=i.length;k>j;++j)try{i[j](u)}catch(l){b(window,"console")&&a(window.console,"log")&&window.console.log("Init listener threw an exception. Continuing.",l)}}}function i(a){a=a||window,h();for(var b=0,c=x.length;c>b;++b)x[b](a)}function j(a){this.name=a,this.initialized=!1,this.supported=!1}var k="object",l="function",m="undefined",n=["startContainer","startOffset","endContainer","endOffset","collapsed","commonAncestorContainer","START_TO_START","START_TO_END","END_TO_START","END_TO_END"],o=["setStart","setStartBefore","setStartAfter","setEnd","setEndBefore","setEndAfter","collapse","selectNode","selectNodeContents","compareBoundaryPoints","deleteContents","extractContents","cloneContents","insertNode","surroundContents","cloneRange","toString","detach"],p=["boundingHeight","boundingLeft","boundingTop","boundingWidth","htmlText","text"],q=["collapse","compareEndPoints","duplicate","getBookmark","moveToBookmark","moveToElementText","parentElement","pasteHTML","select","setEndPoint","getBoundingClientRect"],r=d(a),s=d(b),t=d(c),u={version:"1.2.3",initialized:!1,supported:!0,util:{isHostMethod:a,isHostObject:b,isHostProperty:c,areHostMethods:r,areHostObjects:s,areHostProperties:t,isTextRange:e},features:{},modules:{},config:{alertOnWarn:!1,preferTextRange:!1}};u.fail=f,u.warn=g,{}.hasOwnProperty?u.util.extend=function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])}:f("hasOwnProperty not supported");var v=[],w=[];u.init=h,u.addInitListener=function(a){u.initialized?a(u):v.push(a)};var x=[];u.addCreateMissingNativeApiListener=function(a){x.push(a)},u.createMissingNativeApi=i,j.prototype.fail=function(a){throw this.initialized=!0,this.supported=!1,new Error("Module '"+this.name+"' failed to load: "+a)},j.prototype.warn=function(a){u.warn("Module "+this.name+": "+a)},j.prototype.createError=function(a){return new Error("Error in Rangy "+this.name+" module: "+a)},u.createModule=function(a,b){var c=new j(a);u.modules[a]=c,w.push(function(a){b(a,c),c.initialized=!0,c.supported=!0})},u.requireModules=function(a){for(var b,c,d=0,e=a.length;e>d;++d){if(c=a[d],b=u.modules[c],!(b&&b instanceof j))throw new Error("Module '"+c+"' not found");if(!b.supported)throw new Error("Module '"+c+"' not supported")}};var y=!1,z=function(){y||(y=!0,u.initialized||h())};return typeof window==m?void f("No window found"):typeof document==m?void f("No document found"):(a(document,"addEventListener")&&document.addEventListener("DOMContentLoaded",z,!1),a(window,"addEventListener")?window.addEventListener("load",z,!1):a(window,"attachEvent")?window.attachEvent("onload",z):f("Window does not have required addEventListener or attachEvent method"),u)}(),rangy.createModule("DomUtil",function(a,b){function c(a){var b;return typeof a.namespaceURI==z||null===(b=a.namespaceURI)||"http://www.w3.org/1999/xhtml"==b}function d(a){var b=a.parentNode;return 1==b.nodeType?b:null}function e(a){for(var b=0;a=a.previousSibling;)b++;return b}function f(a){var b;return j(a)?a.length:(b=a.childNodes)?b.length:0}function g(a,b){var c,d=[];for(c=a;c;c=c.parentNode)d.push(c);for(c=b;c;c=c.parentNode)if(D(d,c))return c;return null}function h(a,b,c){for(var d=c?b:b.parentNode;d;){if(d===a)return!0;d=d.parentNode}return!1}function i(a,b,c){for(var d,e=c?a:a.parentNode;e;){if(d=e.parentNode,d===b)return e;e=d}return null}function j(a){var b=a.nodeType;return 3==b||4==b||8==b}function k(a,b){var c=b.nextSibling,d=b.parentNode;return c?d.insertBefore(a,c):d.appendChild(a),a}function l(a,b){var c=a.cloneNode(!1);return c.deleteData(0,b),a.deleteData(b,a.length-b),k(c,a),c}function m(a){if(9==a.nodeType)return a;if(typeof a.ownerDocument!=z)return a.ownerDocument;if(typeof a.document!=z)return a.document;if(a.parentNode)return m(a.parentNode);throw new Error("getDocument: no document found for node")}function n(a){var b=m(a);if(typeof b.defaultView!=z)return b.defaultView;if(typeof b.parentWindow!=z)return b.parentWindow;throw new Error("Cannot get a window object for node")}function o(a){if(typeof a.contentDocument!=z)return a.contentDocument;if(typeof a.contentWindow!=z)return a.contentWindow.document;throw new Error("getIframeWindow: No Document object found for iframe element")}function p(a){if(typeof a.contentWindow!=z)return a.contentWindow;if(typeof a.contentDocument!=z)return a.contentDocument.defaultView;throw new Error("getIframeWindow: No Window object found for iframe element")}function q(a){return A.isHostObject(a,"body")?a.body:a.getElementsByTagName("body")[0]}function r(a){for(var b;b=a.parentNode;)a=b;return a}function s(a,b,c,d){var f,h,j,k,l;if(a==c)return b===d?0:d>b?-1:1;if(f=i(c,a,!0))return b<=e(f)?-1:1;if(f=i(a,c,!0))return e(f)<d?-1:1;if(h=g(a,c),j=a===h?h:i(a,h,!0),k=c===h?h:i(c,h,!0),j===k)throw new Error("comparePoints got to case 4 and childA and childB are the same!");for(l=h.firstChild;l;){if(l===j)return-1;if(l===k)return 1;l=l.nextSibling}throw new Error("Should not be here!")}function t(a){for(var b,c=m(a).createDocumentFragment();b=a.firstChild;)c.appendChild(b);return c}function u(a){if(!a)return"[No node]";if(j(a))return'"'+a.data+'"';if(1==a.nodeType){var b=a.id?' id="'+a.id+'"':"";return"<"+a.nodeName+b+">["+a.childNodes.length+"]"}return a.nodeName}function v(a){this.root=a,this._next=a}function w(a){return new v(a)}function x(a,b){this.node=a,this.offset=b}function y(a){this.code=this[a],this.codeName=a,this.message="DOMException: "+this.codeName}var z="undefined",A=a.util;A.areHostMethods(document,["createDocumentFragment","createElement","createTextNode"])||b.fail("document missing a Node creation method"),A.isHostMethod(document,"getElementsByTagName")||b.fail("document missing getElementsByTagName method");var B=document.createElement("div");A.areHostMethods(B,["insertBefore","appendChild","cloneNode"]||!A.areHostObjects(B,["previousSibling","nextSibling","childNodes","parentNode"]))||b.fail("Incomplete Element implementation"),A.isHostProperty(B,"innerHTML")||b.fail("Element is missing innerHTML property");var C=document.createTextNode("test");A.areHostMethods(C,["splitText","deleteData","insertData","appendData","cloneNode"]||!A.areHostObjects(B,["previousSibling","nextSibling","childNodes","parentNode"])||!A.areHostProperties(C,["data"]))||b.fail("Incomplete Text Node implementation");var D=function(a,b){for(var c=a.length;c--;)if(a[c]===b)return!0;return!1};v.prototype={_current:null,hasNext:function(){return!!this._next},next:function(){var a,b,c=this._current=this._next;if(this._current)if(a=c.firstChild)this._next=a;else{for(b=null;c!==this.root&&!(b=c.nextSibling);)c=c.parentNode;this._next=b}return this._current},detach:function(){this._current=this._next=this.root=null}},x.prototype={equals:function(a){return this.node===a.node&this.offset==a.offset},inspect:function(){return"[DomPosition("+u(this.node)+":"+this.offset+")]"}},y.prototype={INDEX_SIZE_ERR:1,HIERARCHY_REQUEST_ERR:3,WRONG_DOCUMENT_ERR:4,NO_MODIFICATION_ALLOWED_ERR:7,NOT_FOUND_ERR:8,NOT_SUPPORTED_ERR:9,INVALID_STATE_ERR:11},y.prototype.toString=function(){return this.message},a.dom={arrayContains:D,isHtmlNamespace:c,parentElement:d,getNodeIndex:e,getNodeLength:f,getCommonAncestor:g,isAncestorOf:h,getClosestAncestorIn:i,isCharacterDataNode:j,insertAfter:k,splitDataNode:l,getDocument:m,getWindow:n,getIframeWindow:p,getIframeDocument:o,getBody:q,getRootContainer:r,comparePoints:s,inspectNode:u,fragmentFromNodeChildren:t,createIterator:w,DomPosition:x},a.DOMException=y}),rangy.createModule("DomRange",function(a){function b(a,b){return 3!=a.nodeType&&(L.isAncestorOf(a,b.startContainer,!0)||L.isAncestorOf(a,b.endContainer,!0))}function c(a){return L.getDocument(a.startContainer)}function d(a,b,c){var d=a._listeners[b];if(d)for(var e=0,f=d.length;f>e;++e)d[e].call(a,{target:a,args:c})}function e(a){return new M(a.parentNode,L.getNodeIndex(a))}function f(a){return new M(a.parentNode,L.getNodeIndex(a)+1)}function g(a,b,c){var d=11==a.nodeType?a.firstChild:a;return L.isCharacterDataNode(b)?c==b.length?L.insertAfter(a,b):b.parentNode.insertBefore(a,0==c?b:L.splitDataNode(b,c)):c>=b.childNodes.length?b.appendChild(a):b.insertBefore(a,b.childNodes[c]),d}function h(a){for(var b,d,e,f=c(a.range).createDocumentFragment();d=a.next();){if(b=a.isPartiallySelectedSubtree(),d=d.cloneNode(!b),b&&(e=a.getSubtreeIterator(),d.appendChild(h(e)),e.detach(!0)),10==d.nodeType)throw new N("HIERARCHY_REQUEST_ERR");f.appendChild(d)}return f}function i(a,b,c){var d,e;c=c||{stop:!1};for(var f,g;f=a.next();)if(a.isPartiallySelectedSubtree()){if(b(f)===!1)return void(c.stop=!0);if(g=a.getSubtreeIterator(),i(g,b,c),g.detach(!0),c.stop)return}else for(d=L.createIterator(f);e=d.next();)if(b(e)===!1)return void(c.stop=!0)}function j(a){for(var b;a.next();)a.isPartiallySelectedSubtree()?(b=a.getSubtreeIterator(),j(b),b.detach(!0)):a.remove()}function k(a){for(var b,d,e=c(a.range).createDocumentFragment();b=a.next();){if(a.isPartiallySelectedSubtree()?(b=b.cloneNode(!1),d=a.getSubtreeIterator(),b.appendChild(k(d)),d.detach(!0)):a.remove(),10==b.nodeType)throw new N("HIERARCHY_REQUEST_ERR");e.appendChild(b)}return e}function l(a,b,c){var d,e=!(!b||!b.length),f=!!c;e&&(d=new RegExp("^("+b.join("|")+")$"));var g=[];return i(new n(a,!1),function(a){e&&!d.test(a.nodeType)||f&&!c(a)||g.push(a)}),g}function m(a){var b="undefined"==typeof a.getName?"Range":a.getName();return"["+b+"("+L.inspectNode(a.startContainer)+":"+a.startOffset+", "+L.inspectNode(a.endContainer)+":"+a.endOffset+")]"}function n(a,b){if(this.range=a,this.clonePartiallySelectedTextNodes=b,!a.collapsed){this.sc=a.startContainer,this.so=a.startOffset,this.ec=a.endContainer,this.eo=a.endOffset;var c=a.commonAncestorContainer;this.sc===this.ec&&L.isCharacterDataNode(this.sc)?(this.isSingleCharacterDataNode=!0,this._first=this._last=this._next=this.sc):(this._first=this._next=this.sc!==c||L.isCharacterDataNode(this.sc)?L.getClosestAncestorIn(this.sc,c,!0):this.sc.childNodes[this.so],this._last=this.ec!==c||L.isCharacterDataNode(this.ec)?L.getClosestAncestorIn(this.ec,c,!0):this.ec.childNodes[this.eo-1])}}function o(a){this.code=this[a],this.codeName=a,this.message="RangeException: "+this.codeName}function p(a,b,c){this.nodes=l(a,b,c),this._next=this.nodes[0],this._position=0}function q(a){return function(b,c){for(var d,e=c?b:b.parentNode;e;){if(d=e.nodeType,L.arrayContains(a,d))return e;e=e.parentNode}return null}}function r(a,b){if(W(a,b))throw new o("INVALID_NODE_TYPE_ERR")}function s(a){if(!a.startContainer)throw new N("INVALID_STATE_ERR")}function t(a,b){if(!L.arrayContains(b,a.nodeType))throw new o("INVALID_NODE_TYPE_ERR")}function u(a,b){if(0>b||b>(L.isCharacterDataNode(a)?a.length:a.childNodes.length))throw new N("INDEX_SIZE_ERR")}function v(a,b){if(U(a,!0)!==U(b,!0))throw new N("WRONG_DOCUMENT_ERR")}function w(a){if(V(a,!0))throw new N("NO_MODIFICATION_ALLOWED_ERR")}function x(a,b){if(!a)throw new N(b)}function y(a){return!L.arrayContains(P,a.nodeType)&&!U(a,!0)}function z(a,b){return b<=(L.isCharacterDataNode(a)?a.length:a.childNodes.length)}function A(a){return!!a.startContainer&&!!a.endContainer&&!y(a.startContainer)&&!y(a.endContainer)&&z(a.startContainer,a.startOffset)&&z(a.endContainer,a.endOffset)}function B(a){if(s(a),!A(a))throw new Error("Range error: Range is no longer valid after DOM mutation ("+a.inspect()+")")}function C(){}function D(a){a.START_TO_START=ab,a.START_TO_END=bb,a.END_TO_END=cb,a.END_TO_START=db,a.NODE_BEFORE=eb,a.NODE_AFTER=fb,a.NODE_BEFORE_AND_AFTER=gb,a.NODE_INSIDE=hb}function E(a){D(a),D(a.prototype)}function F(a,b){return function(){B(this);var c,d,e=this.startContainer,g=this.startOffset,h=this.commonAncestorContainer,j=new n(this,!0);e!==h&&(c=L.getClosestAncestorIn(e,h,!0),d=f(c),e=d.node,g=d.offset),i(j,w),j.reset();var k=a(j);return j.detach(),b(this,e,g,e,g),k}}function G(c,d,g){function h(a,b){return function(c){s(this),t(c,O),t(T(c),P);var d=(a?e:f)(c);(b?i:l)(this,d.node,d.offset)}}function i(a,b,c){var e=a.endContainer,f=a.endOffset;(b!==a.startContainer||c!==a.startOffset)&&((T(b)!=T(e)||1==L.comparePoints(b,c,e,f))&&(e=b,f=c),d(a,b,c,e,f))}function l(a,b,c){var e=a.startContainer,f=a.startOffset;(b!==a.endContainer||c!==a.endOffset)&&((T(b)!=T(e)||-1==L.comparePoints(b,c,e,f))&&(e=b,f=c),d(a,e,f,b,c))}function m(a,b,c){(b!==a.startContainer||c!==a.startOffset||b!==a.endContainer||c!==a.endOffset)&&d(a,b,c,b,c)}c.prototype=new C,a.util.extend(c.prototype,{setStart:function(a,b){s(this),r(a,!0),u(a,b),i(this,a,b)},setEnd:function(a,b){s(this),r(a,!0),u(a,b),l(this,a,b)},setStartBefore:h(!0,!0),setStartAfter:h(!1,!0),setEndBefore:h(!0,!1),setEndAfter:h(!1,!1),collapse:function(a){B(this),a?d(this,this.startContainer,this.startOffset,this.startContainer,this.startOffset):d(this,this.endContainer,this.endOffset,this.endContainer,this.endOffset)},selectNodeContents:function(a){s(this),r(a,!0),d(this,a,0,a,L.getNodeLength(a))},selectNode:function(a){s(this),r(a,!1),t(a,O);var b=e(a),c=f(a);d(this,b.node,b.offset,c.node,c.offset)},extractContents:F(k,d),deleteContents:F(j,d),canSurroundContents:function(){B(this),w(this.startContainer),w(this.endContainer);var a=new n(this,!0),c=a._first&&b(a._first,this)||a._last&&b(a._last,this);return a.detach(),!c},detach:function(){g(this)},splitBoundaries:function(){B(this);var a=this.startContainer,b=this.startOffset,c=this.endContainer,e=this.endOffset,f=a===c;L.isCharacterDataNode(c)&&e>0&&e<c.length&&L.splitDataNode(c,e),L.isCharacterDataNode(a)&&b>0&&b<a.length&&(a=L.splitDataNode(a,b),f?(e-=b,c=a):c==a.parentNode&&e>=L.getNodeIndex(a)&&e++,b=0),d(this,a,b,c,e)},normalizeBoundaries:function(){B(this);var a=this.startContainer,b=this.startOffset,c=this.endContainer,e=this.endOffset,f=function(a){var b=a.nextSibling;b&&b.nodeType==a.nodeType&&(c=a,e=a.length,a.appendData(b.data),b.parentNode.removeChild(b))},g=function(d){var f=d.previousSibling;if(f&&f.nodeType==d.nodeType){a=d;var g=d.length;if(b=f.length,d.insertData(0,f.data),f.parentNode.removeChild(f),a==c)e+=b,c=a;else if(c==d.parentNode){var h=L.getNodeIndex(d);e==h?(c=d,e=g):e>h&&e--}}},h=!0;if(L.isCharacterDataNode(c))c.length==e&&f(c);else{if(e>0){var i=c.childNodes[e-1];i&&L.isCharacterDataNode(i)&&f(i)}h=!this.collapsed}if(h){if(L.isCharacterDataNode(a))0==b&&g(a);else if(b<a.childNodes.length){var j=a.childNodes[b];j&&L.isCharacterDataNode(j)&&g(j)}}else a=c,b=e;d(this,a,b,c,e)},collapseToPoint:function(a,b){s(this),r(a,!0),u(a,b),m(this,a,b)}}),E(c)}function H(a){a.collapsed=a.startContainer===a.endContainer&&a.startOffset===a.endOffset,a.commonAncestorContainer=a.collapsed?a.startContainer:L.getCommonAncestor(a.startContainer,a.endContainer)}function I(a,b,c,e,f){var g=a.startContainer!==b||a.startOffset!==c,h=a.endContainer!==e||a.endOffset!==f;a.startContainer=b,a.startOffset=c,a.endContainer=e,a.endOffset=f,H(a),d(a,"boundarychange",{startMoved:g,endMoved:h})}function J(a){s(a),a.startContainer=a.startOffset=a.endContainer=a.endOffset=null,a.collapsed=a.commonAncestorContainer=null,d(a,"detach",null),a._listeners=null}function K(a){this.startContainer=a,this.startOffset=0,this.endContainer=a,this.endOffset=0,this._listeners={boundarychange:[],detach:[]},H(this)}a.requireModules(["DomUtil"]);var L=a.dom,M=L.DomPosition,N=a.DOMException;n.prototype={_current:null,_next:null,_first:null,_last:null,isSingleCharacterDataNode:!1,reset:function(){this._current=null,this._next=this._first},hasNext:function(){return!!this._next},next:function(){var a=this._current=this._next;return a&&(this._next=a!==this._last?a.nextSibling:null,L.isCharacterDataNode(a)&&this.clonePartiallySelectedTextNodes&&(a===this.ec&&(a=a.cloneNode(!0)).deleteData(this.eo,a.length-this.eo),this._current===this.sc&&(a=a.cloneNode(!0)).deleteData(0,this.so))),a},remove:function(){var a,b,c=this._current;!L.isCharacterDataNode(c)||c!==this.sc&&c!==this.ec?c.parentNode&&c.parentNode.removeChild(c):(a=c===this.sc?this.so:0,b=c===this.ec?this.eo:c.length,a!=b&&c.deleteData(a,b-a))},isPartiallySelectedSubtree:function(){var a=this._current;return b(a,this.range)},getSubtreeIterator:function(){var a;if(this.isSingleCharacterDataNode)a=this.range.cloneRange(),a.collapse();else{a=new K(c(this.range));var b=this._current,d=b,e=0,f=b,g=L.getNodeLength(b);L.isAncestorOf(b,this.sc,!0)&&(d=this.sc,e=this.so),L.isAncestorOf(b,this.ec,!0)&&(f=this.ec,g=this.eo),I(a,d,e,f,g)}return new n(a,this.clonePartiallySelectedTextNodes)},detach:function(a){a&&this.range.detach(),this.range=this._current=this._next=this._first=this._last=this.sc=this.so=this.ec=this.eo=null}},o.prototype={BAD_BOUNDARYPOINTS_ERR:1,INVALID_NODE_TYPE_ERR:2},o.prototype.toString=function(){return this.message},p.prototype={_current:null,hasNext:function(){return!!this._next},next:function(){return this._current=this._next,this._next=this.nodes[++this._position],this._current},detach:function(){this._current=this._next=this.nodes=null}};var O=[1,3,4,5,7,8,10],P=[2,9,11],Q=[5,6,10,12],R=[1,3,4,5,7,8,10,11],S=[1,3,4,5,7,8],T=L.getRootContainer,U=q([9,11]),V=q(Q),W=q([6,10,12]),X=document.createElement("style"),Y=!1;try{X.innerHTML="<b>x</b>",Y=3==X.firstChild.nodeType}catch(Z){}a.features.htmlParsingConforms=Y;var $=Y?function(a){var b=this.startContainer,c=L.getDocument(b);if(!b)throw new N("INVALID_STATE_ERR");var d=null;return 1==b.nodeType?d=b:L.isCharacterDataNode(b)&&(d=L.parentElement(b)),d=null===d||"HTML"==d.nodeName&&L.isHtmlNamespace(L.getDocument(d).documentElement)&&L.isHtmlNamespace(d)?c.createElement("body"):d.cloneNode(!1),d.innerHTML=a,L.fragmentFromNodeChildren(d)}:function(a){s(this);var b=c(this),d=b.createElement("body");return d.innerHTML=a,L.fragmentFromNodeChildren(d)},_=["startContainer","startOffset","endContainer","endOffset","collapsed","commonAncestorContainer"],ab=0,bb=1,cb=2,db=3,eb=0,fb=1,gb=2,hb=3;C.prototype={attachListener:function(a,b){this._listeners[a].push(b)},compareBoundaryPoints:function(a,b){B(this),v(this.startContainer,b.startContainer);var c,d,e,f,g=a==db||a==ab?"start":"end",h=a==bb||a==ab?"start":"end";return c=this[g+"Container"],d=this[g+"Offset"],e=b[h+"Container"],f=b[h+"Offset"],L.comparePoints(c,d,e,f)},insertNode:function(a){if(B(this),t(a,R),w(this.startContainer),L.isAncestorOf(a,this.startContainer,!0))throw new N("HIERARCHY_REQUEST_ERR");var b=g(a,this.startContainer,this.startOffset);this.setStartBefore(b)},cloneContents:function(){B(this);var a,b;if(this.collapsed)return c(this).createDocumentFragment();if(this.startContainer===this.endContainer&&L.isCharacterDataNode(this.startContainer))return a=this.startContainer.cloneNode(!0),a.data=a.data.slice(this.startOffset,this.endOffset),b=c(this).createDocumentFragment(),b.appendChild(a),b;var d=new n(this,!0);return a=h(d),d.detach(),a},canSurroundContents:function(){B(this),w(this.startContainer),w(this.endContainer);var a=new n(this,!0),c=a._first&&b(a._first,this)||a._last&&b(a._last,this);return a.detach(),!c},surroundContents:function(a){if(t(a,S),!this.canSurroundContents())throw new o("BAD_BOUNDARYPOINTS_ERR");var b=this.extractContents();if(a.hasChildNodes())for(;a.lastChild;)a.removeChild(a.lastChild);g(a,this.startContainer,this.startOffset),a.appendChild(b),this.selectNode(a)},cloneRange:function(){B(this);for(var a,b=new K(c(this)),d=_.length;d--;)a=_[d],b[a]=this[a];return b},toString:function(){B(this);var a=this.startContainer;if(a===this.endContainer&&L.isCharacterDataNode(a))return 3==a.nodeType||4==a.nodeType?a.data.slice(this.startOffset,this.endOffset):"";var b=[],c=new n(this,!0);return i(c,function(a){(3==a.nodeType||4==a.nodeType)&&b.push(a.data)}),c.detach(),b.join("")},compareNode:function(a){B(this);var b=a.parentNode,c=L.getNodeIndex(a);if(!b)throw new N("NOT_FOUND_ERR");var d=this.comparePoint(b,c),e=this.comparePoint(b,c+1);return 0>d?e>0?gb:eb:e>0?fb:hb},comparePoint:function(a,b){return B(this),x(a,"HIERARCHY_REQUEST_ERR"),v(a,this.startContainer),L.comparePoints(a,b,this.startContainer,this.startOffset)<0?-1:L.comparePoints(a,b,this.endContainer,this.endOffset)>0?1:0},createContextualFragment:$,toHtml:function(){B(this);var a=c(this).createElement("div");return a.appendChild(this.cloneContents()),a.innerHTML},intersectsNode:function(a,b){if(B(this),x(a,"NOT_FOUND_ERR"),L.getDocument(a)!==c(this))return!1;var d=a.parentNode,e=L.getNodeIndex(a);x(d,"NOT_FOUND_ERR");var f=L.comparePoints(d,e,this.endContainer,this.endOffset),g=L.comparePoints(d,e+1,this.startContainer,this.startOffset);return b?0>=f&&g>=0:0>f&&g>0},isPointInRange:function(a,b){return B(this),x(a,"HIERARCHY_REQUEST_ERR"),v(a,this.startContainer),L.comparePoints(a,b,this.startContainer,this.startOffset)>=0&&L.comparePoints(a,b,this.endContainer,this.endOffset)<=0},intersectsRange:function(a,b){if(B(this),c(a)!=c(this))throw new N("WRONG_DOCUMENT_ERR");var d=L.comparePoints(this.startContainer,this.startOffset,a.endContainer,a.endOffset),e=L.comparePoints(this.endContainer,this.endOffset,a.startContainer,a.startOffset);return b?0>=d&&e>=0:0>d&&e>0},intersection:function(a){if(this.intersectsRange(a)){var b=L.comparePoints(this.startContainer,this.startOffset,a.startContainer,a.startOffset),c=L.comparePoints(this.endContainer,this.endOffset,a.endContainer,a.endOffset),d=this.cloneRange();return-1==b&&d.setStart(a.startContainer,a.startOffset),1==c&&d.setEnd(a.endContainer,a.endOffset),d}return null},union:function(a){if(this.intersectsRange(a,!0)){var b=this.cloneRange();return-1==L.comparePoints(a.startContainer,a.startOffset,this.startContainer,this.startOffset)&&b.setStart(a.startContainer,a.startOffset),1==L.comparePoints(a.endContainer,a.endOffset,this.endContainer,this.endOffset)&&b.setEnd(a.endContainer,a.endOffset),b}throw new o("Ranges do not intersect")},containsNode:function(a,b){return b?this.intersectsNode(a,!1):this.compareNode(a)==hb},containsNodeContents:function(a){return this.comparePoint(a,0)>=0&&this.comparePoint(a,L.getNodeLength(a))<=0},containsRange:function(a){return this.intersection(a).equals(a)},containsNodeText:function(a){var b=this.cloneRange();b.selectNode(a);var c=b.getNodes([3]);if(c.length>0){b.setStart(c[0],0);var d=c.pop();b.setEnd(d,d.length);var e=this.containsRange(b);return b.detach(),e}return this.containsNodeContents(a)},createNodeIterator:function(a,b){return B(this),new p(this,a,b)},getNodes:function(a,b){return B(this),l(this,a,b)},getDocument:function(){return c(this)},collapseBefore:function(a){s(this),this.setEndBefore(a),this.collapse(!1)},collapseAfter:function(a){s(this),this.setStartAfter(a),this.collapse(!0)},getName:function(){return"DomRange"},equals:function(a){return K.rangesEqual(this,a)},isValid:function(){return A(this)},inspect:function(){return m(this)}},G(K,I,J),a.rangePrototype=C.prototype,K.rangeProperties=_,K.RangeIterator=n,K.copyComparisonConstants=E,K.createPrototypeRange=G,K.inspect=m,K.getRangeDocument=c,K.rangesEqual=function(a,b){return a.startContainer===b.startContainer&&a.startOffset===b.startOffset&&a.endContainer===b.endContainer&&a.endOffset===b.endOffset},a.DomRange=K,a.RangeException=o}),rangy.createModule("WrappedRange",function(a){function b(a){var b=a.parentElement(),c=a.duplicate();c.collapse(!0);var d=c.parentElement();c=a.duplicate(),c.collapse(!1);var e=c.parentElement(),f=d==e?d:g.getCommonAncestor(d,e);return f==b?f:g.getCommonAncestor(b,f)}function c(a){return 0==a.compareEndPoints("StartToEnd",a)}function d(a,b,c,d){var e=a.duplicate();e.collapse(c);var f=e.parentElement();if(g.isAncestorOf(b,f,!0)||(f=b),!f.canHaveHTML)return new h(f.parentNode,g.getNodeIndex(f));var i,j,k,l,m,n=g.getDocument(f).createElement("span"),o=c?"StartToStart":"StartToEnd";do f.insertBefore(n,n.previousSibling),e.moveToElementText(n);while((i=e.compareEndPoints(o,a))>0&&n.previousSibling);if(m=n.nextSibling,-1==i&&m&&g.isCharacterDataNode(m)){e.setEndPoint(c?"EndToStart":"EndToEnd",a);var p;if(/[\r\n]/.test(m.data)){var q=e.duplicate(),r=q.text.replace(/\r\n/g,"\r").length;for(p=q.moveStart("character",r);-1==(i=q.compareEndPoints("StartToEnd",q));)p++,q.moveStart("character",1)}else p=e.text.length;l=new h(m,p)}else j=(d||!c)&&n.previousSibling,k=(d||c)&&n.nextSibling,l=k&&g.isCharacterDataNode(k)?new h(k,0):j&&g.isCharacterDataNode(j)?new h(j,j.length):new h(f,g.getNodeIndex(n));return n.parentNode.removeChild(n),l}function e(a,b){var c,d,e,f,h=a.offset,i=g.getDocument(a.node),j=i.body.createTextRange(),k=g.isCharacterDataNode(a.node);return k?(c=a.node,d=c.parentNode):(f=a.node.childNodes,c=h<f.length?f[h]:null,d=a.node),e=i.createElement("span"),e.innerHTML="&#feff;",c?d.insertBefore(e,c):d.appendChild(e),j.moveToElementText(e),j.collapse(!b),d.removeChild(e),k&&j[b?"moveStart":"moveEnd"]("character",h),j}a.requireModules(["DomUtil","DomRange"]);var f,g=a.dom,h=g.DomPosition,i=a.DomRange;if(!a.features.implementsDomRange||a.features.implementsTextRange&&a.config.preferTextRange){if(a.features.implementsTextRange){f=function(a){this.textRange=a,this.refresh()},f.prototype=new i(document),f.prototype.refresh=function(){var a,e,f=b(this.textRange);c(this.textRange)?e=a=d(this.textRange,f,!0,!0):(a=d(this.textRange,f,!0,!1),e=d(this.textRange,f,!1,!1)),this.setStart(a.node,a.offset),this.setEnd(e.node,e.offset)},i.copyComparisonConstants(f);var j=function(){return this}();"undefined"==typeof j.Range&&(j.Range=f),a.createNativeRange=function(a){return a=a||document,a.body.createTextRange()}}}else!function(){function b(a){for(var b,c=k.length;c--;)b=k[c],a[b]=a.nativeRange[b]}function c(a,b,c,d,e){var f=a.startContainer!==b||a.startOffset!=c,g=a.endContainer!==d||a.endOffset!=e;(f||g)&&(a.setEnd(d,e),a.setStart(b,c))}function d(a){a.nativeRange.detach(),a.detached=!0;for(var b,c=k.length;c--;)b=k[c],a[b]=null}var e,h,j,k=i.rangeProperties;f=function(a){if(!a)throw new Error("Range must be specified");this.nativeRange=a,b(this)},i.createPrototypeRange(f,c,d),e=f.prototype,e.selectNode=function(a){this.nativeRange.selectNode(a),b(this)},e.deleteContents=function(){this.nativeRange.deleteContents(),b(this)},e.extractContents=function(){var a=this.nativeRange.extractContents();return b(this),a},e.cloneContents=function(){return this.nativeRange.cloneContents()},e.surroundContents=function(a){this.nativeRange.surroundContents(a),b(this)},e.collapse=function(a){this.nativeRange.collapse(a),b(this)},e.cloneRange=function(){return new f(this.nativeRange.cloneRange())},e.refresh=function(){b(this)},e.toString=function(){return this.nativeRange.toString()};var l=document.createTextNode("test");g.getBody(document).appendChild(l);var m=document.createRange();m.setStart(l,0),m.setEnd(l,0);try{m.setStart(l,1),h=!0,e.setStart=function(a,c){this.nativeRange.setStart(a,c),b(this)},e.setEnd=function(a,c){this.nativeRange.setEnd(a,c),b(this)},j=function(a){return function(c){this.nativeRange[a](c),b(this)}}}catch(n){h=!1,e.setStart=function(a,c){try{this.nativeRange.setStart(a,c)}catch(d){this.nativeRange.setEnd(a,c),this.nativeRange.setStart(a,c)}b(this)},e.setEnd=function(a,c){try{this.nativeRange.setEnd(a,c)}catch(d){this.nativeRange.setStart(a,c),this.nativeRange.setEnd(a,c)}b(this)},j=function(a,c){return function(d){try{this.nativeRange[a](d)}catch(e){this.nativeRange[c](d),this.nativeRange[a](d)}b(this)}}}e.setStartBefore=j("setStartBefore","setEndBefore"),e.setStartAfter=j("setStartAfter","setEndAfter"),e.setEndBefore=j("setEndBefore","setStartBefore"),e.setEndAfter=j("setEndAfter","setStartAfter"),m.selectNodeContents(l),e.selectNodeContents=m.startContainer==l&&m.endContainer==l&&0==m.startOffset&&m.endOffset==l.length?function(a){this.nativeRange.selectNodeContents(a),b(this)}:function(a){this.setStart(a,0),this.setEnd(a,i.getEndOffset(a))},m.selectNodeContents(l),m.setEnd(l,3);var o=document.createRange();o.selectNodeContents(l),o.setEnd(l,4),o.setStart(l,2),e.compareBoundaryPoints=-1==m.compareBoundaryPoints(m.START_TO_END,o)&1==m.compareBoundaryPoints(m.END_TO_START,o)?function(a,b){return b=b.nativeRange||b,a==b.START_TO_END?a=b.END_TO_START:a==b.END_TO_START&&(a=b.START_TO_END),this.nativeRange.compareBoundaryPoints(a,b)}:function(a,b){return this.nativeRange.compareBoundaryPoints(a,b.nativeRange||b)},a.util.isHostMethod(m,"createContextualFragment")&&(e.createContextualFragment=function(a){return this.nativeRange.createContextualFragment(a)}),g.getBody(document).removeChild(l),m.detach(),o.detach()}(),a.createNativeRange=function(a){return a=a||document,a.createRange()};a.features.implementsTextRange&&(f.rangeToTextRange=function(a){if(a.collapsed){var b=e(new h(a.startContainer,a.startOffset),!0);return b}var c=e(new h(a.startContainer,a.startOffset),!0),d=e(new h(a.endContainer,a.endOffset),!1),f=g.getDocument(a.startContainer).body.createTextRange();return f.setEndPoint("StartToStart",c),f.setEndPoint("EndToEnd",d),f}),f.prototype.getName=function(){return"WrappedRange"},a.WrappedRange=f,a.createRange=function(b){return b=b||document,new f(a.createNativeRange(b))},a.createRangyRange=function(a){return a=a||document,new i(a)},a.createIframeRange=function(b){return a.createRange(g.getIframeDocument(b))},a.createIframeRangyRange=function(b){return a.createRangyRange(g.getIframeDocument(b))},a.addCreateMissingNativeApiListener(function(b){var c=b.document;"undefined"==typeof c.createRange&&(c.createRange=function(){return a.createRange(this)}),c=b=null})}),rangy.createModule("WrappedSelection",function(a,b){function c(a){return(a||window).getSelection()}function d(a){return(a||window).document.selection}function e(a,b,c){var d=c?"end":"start",e=c?"start":"end";a.anchorNode=b[d+"Container"],a.anchorOffset=b[d+"Offset"],a.focusNode=b[e+"Container"],a.focusOffset=b[e+"Offset"]}function f(a){var b=a.nativeSelection;a.anchorNode=b.anchorNode,a.anchorOffset=b.anchorOffset,a.focusNode=b.focusNode,a.focusOffset=b.focusOffset}function g(a){a.anchorNode=a.focusNode=null,a.anchorOffset=a.focusOffset=0,a.rangeCount=0,a.isCollapsed=!0,a._ranges.length=0}function h(b){var c;return b instanceof y?(c=b._selectionNativeRange,c||(c=a.createNativeRange(w.getDocument(b.startContainer)),c.setEnd(b.endContainer,b.endOffset),c.setStart(b.startContainer,b.startOffset),b._selectionNativeRange=c,b.attachListener("detach",function(){this._selectionNativeRange=null}))):b instanceof z?c=b.nativeRange:a.features.implementsDomRange&&b instanceof w.getWindow(b.startContainer).Range&&(c=b),c}function i(a){if(!a.length||1!=a[0].nodeType)return!1;for(var b=1,c=a.length;c>b;++b)if(!w.isAncestorOf(a[0],a[b]))return!1;return!0}function j(a){var b=a.getNodes();if(!i(b))throw new Error("getSingleElementFromRange: range "+a.inspect()+" did not consist of a single element");return b[0]}function k(a){return!!a&&"undefined"!=typeof a.text}function l(a,b){var c=new z(b);a._ranges=[c],e(a,c,!1),a.rangeCount=1,a.isCollapsed=c.collapsed}function m(b){if(b._ranges.length=0,"None"==b.docSelection.type)g(b);else{var c=b.docSelection.createRange();if(k(c))l(b,c);else{b.rangeCount=c.length;for(var d,f=w.getDocument(c.item(0)),h=0;h<b.rangeCount;++h)d=a.createRange(f),d.selectNode(c.item(h)),b._ranges.push(d);
b.isCollapsed=1==b.rangeCount&&b._ranges[0].collapsed,e(b,b._ranges[b.rangeCount-1],!1)}}}function n(a,b){for(var c=a.docSelection.createRange(),d=j(b),e=w.getDocument(c.item(0)),f=w.getBody(e).createControlRange(),g=0,h=c.length;h>g;++g)f.add(c.item(g));try{f.add(d)}catch(i){throw new Error("addRange(): Element within the specified Range could not be added to control selection (does it have layout?)")}f.select(),m(a)}function o(a,b,c){this.nativeSelection=a,this.docSelection=b,this._ranges=[],this.win=c,this.refresh()}function p(a,b){for(var c,d=w.getDocument(b[0].startContainer),e=w.getBody(d).createControlRange(),f=0;f<rangeCount;++f){c=j(b[f]);try{e.add(c)}catch(g){throw new Error("setRanges(): Element within the one of the specified Ranges could not be added to control selection (does it have layout?)")}}e.select(),m(a)}function q(a,b){if(a.anchorNode&&w.getDocument(a.anchorNode)!==w.getDocument(b))throw new A("WRONG_DOCUMENT_ERR")}function r(a){var b=[],c=new B(a.anchorNode,a.anchorOffset),d=new B(a.focusNode,a.focusOffset),e="function"==typeof a.getName?a.getName():"Selection";if("undefined"!=typeof a.rangeCount)for(var f=0,g=a.rangeCount;g>f;++f)b[f]=y.inspect(a.getRangeAt(f));return"["+e+"(Ranges: "+b.join(", ")+")(anchor: "+c.inspect()+", focus: "+d.inspect()+"]"}a.requireModules(["DomUtil","DomRange","WrappedRange"]),a.config.checkSelectionRanges=!0;var s,t,u="boolean",v="_rangySelection",w=a.dom,x=a.util,y=a.DomRange,z=a.WrappedRange,A=a.DOMException,B=w.DomPosition,C="Control",D=a.util.isHostMethod(window,"getSelection"),E=a.util.isHostObject(document,"selection"),F=E&&(!D||a.config.preferTextRange);F?(s=d,a.isSelectionValid=function(a){var b=(a||window).document,c=b.selection;return"None"!=c.type||w.getDocument(c.createRange().parentElement())==b}):D?(s=c,a.isSelectionValid=function(){return!0}):b.fail("Neither document.selection or window.getSelection() detected."),a.getNativeSelection=s;var G=s(),H=a.createNativeRange(document),I=w.getBody(document),J=x.areHostObjects(G,["anchorNode","focusNode"]&&x.areHostProperties(G,["anchorOffset","focusOffset"]));a.features.selectionHasAnchorAndFocus=J;var K=x.isHostMethod(G,"extend");a.features.selectionHasExtend=K;var L="number"==typeof G.rangeCount;a.features.selectionHasRangeCount=L;var M=!1,N=!0;x.areHostMethods(G,["addRange","getRangeAt","removeAllRanges"])&&"number"==typeof G.rangeCount&&a.features.implementsDomRange&&!function(){var a=document.createElement("iframe");a.frameBorder=0,a.style.position="absolute",a.style.left="-10000px",I.appendChild(a);var b=w.getIframeDocument(a);b.open(),b.write("<html><head></head><body>12</body></html>"),b.close();var c=w.getIframeWindow(a).getSelection(),d=b.documentElement,e=d.lastChild,f=e.firstChild,g=b.createRange();g.setStart(f,1),g.collapse(!0),c.addRange(g),N=1==c.rangeCount,c.removeAllRanges();var h=g.cloneRange();g.setStart(f,0),h.setEnd(f,2),c.addRange(g),c.addRange(h),M=2==c.rangeCount,g.detach(),h.detach(),I.removeChild(a)}(),a.features.selectionSupportsMultipleRanges=M,a.features.collapsedNonEditableSelectionsSupported=N;var O,P=!1;I&&x.isHostMethod(I,"createControlRange")&&(O=I.createControlRange(),x.areHostProperties(O,["item","add"])&&(P=!0)),a.features.implementsControlRange=P,t=J?function(a){return a.anchorNode===a.focusNode&&a.anchorOffset===a.focusOffset}:function(a){return a.rangeCount?a.getRangeAt(a.rangeCount-1).collapsed:!1};var Q;x.isHostMethod(G,"getRangeAt")?Q=function(a,b){try{return a.getRangeAt(b)}catch(c){return null}}:J&&(Q=function(b){var c=w.getDocument(b.anchorNode),d=a.createRange(c);return d.setStart(b.anchorNode,b.anchorOffset),d.setEnd(b.focusNode,b.focusOffset),d.collapsed!==this.isCollapsed&&(d.setStart(b.focusNode,b.focusOffset),d.setEnd(b.anchorNode,b.anchorOffset)),d}),a.getSelection=function(a){a=a||window;var b=a[v],c=s(a),e=E?d(a):null;return b?(b.nativeSelection=c,b.docSelection=e,b.refresh(a)):(b=new o(c,e,a),a[v]=b),b},a.getIframeSelection=function(b){return a.getSelection(w.getIframeWindow(b))};var R=o.prototype;if(!F&&J&&x.areHostMethods(G,["removeAllRanges","addRange"])){R.removeAllRanges=function(){this.nativeSelection.removeAllRanges(),g(this)};var S=function(b,c){var d=y.getRangeDocument(c),e=a.createRange(d);e.collapseToPoint(c.endContainer,c.endOffset),b.nativeSelection.addRange(h(e)),b.nativeSelection.extend(c.startContainer,c.startOffset),b.refresh()};R.addRange=L?function(b,c){if(P&&E&&this.docSelection.type==C)n(this,b);else if(c&&K)S(this,b);else{var d;if(M?d=this.rangeCount:(this.removeAllRanges(),d=0),this.nativeSelection.addRange(h(b)),this.rangeCount=this.nativeSelection.rangeCount,this.rangeCount==d+1){if(a.config.checkSelectionRanges){var f=Q(this.nativeSelection,this.rangeCount-1);f&&!y.rangesEqual(f,b)&&(b=new z(f))}this._ranges[this.rangeCount-1]=b,e(this,b,V(this.nativeSelection)),this.isCollapsed=t(this)}else this.refresh()}}:function(a,b){b&&K?S(this,a):(this.nativeSelection.addRange(h(a)),this.refresh())},R.setRanges=function(a){if(P&&a.length>1)p(this,a);else{this.removeAllRanges();for(var b=0,c=a.length;c>b;++b)this.addRange(a[b])}}}else{if(!(x.isHostMethod(G,"empty")&&x.isHostMethod(H,"select")&&P&&F))return b.fail("No means of selecting a Range or TextRange was found"),!1;R.removeAllRanges=function(){try{if(this.docSelection.empty(),"None"!=this.docSelection.type){var a;if(this.anchorNode)a=w.getDocument(this.anchorNode);else if(this.docSelection.type==C){var b=this.docSelection.createRange();b.length&&(a=w.getDocument(b.item(0)).body.createTextRange())}if(a){var c=a.body.createTextRange();c.select(),this.docSelection.empty()}}}catch(d){}g(this)},R.addRange=function(a){this.docSelection.type==C?n(this,a):(z.rangeToTextRange(a).select(),this._ranges[0]=a,this.rangeCount=1,this.isCollapsed=this._ranges[0].collapsed,e(this,a,!1))},R.setRanges=function(a){this.removeAllRanges();var b=a.length;b>1?p(this,a):b&&this.addRange(a[0])}}R.getRangeAt=function(a){if(0>a||a>=this.rangeCount)throw new A("INDEX_SIZE_ERR");return this._ranges[a]};var T;if(F)T=function(b){var c;a.isSelectionValid(b.win)?c=b.docSelection.createRange():(c=w.getBody(b.win.document).createTextRange(),c.collapse(!0)),b.docSelection.type==C?m(b):k(c)?l(b,c):g(b)};else if(x.isHostMethod(G,"getRangeAt")&&"number"==typeof G.rangeCount)T=function(b){if(P&&E&&b.docSelection.type==C)m(b);else if(b._ranges.length=b.rangeCount=b.nativeSelection.rangeCount,b.rangeCount){for(var c=0,d=b.rangeCount;d>c;++c)b._ranges[c]=new a.WrappedRange(b.nativeSelection.getRangeAt(c));e(b,b._ranges[b.rangeCount-1],V(b.nativeSelection)),b.isCollapsed=t(b)}else g(b)};else{if(!J||typeof G.isCollapsed!=u||typeof H.collapsed!=u||!a.features.implementsDomRange)return b.fail("No means of obtaining a Range or TextRange from the user's selection was found"),!1;T=function(a){var b,c=a.nativeSelection;c.anchorNode?(b=Q(c,0),a._ranges=[b],a.rangeCount=1,f(a),a.isCollapsed=t(a)):g(a)}}R.refresh=function(a){var b=a?this._ranges.slice(0):null;if(T(this),a){var c=b.length;if(c!=this._ranges.length)return!1;for(;c--;)if(!y.rangesEqual(b[c],this._ranges[c]))return!1;return!0}};var U=function(a,b){var c=a.getAllRanges(),d=!1;a.removeAllRanges();for(var e=0,f=c.length;f>e;++e)d||b!==c[e]?a.addRange(c[e]):d=!0;a.rangeCount||g(a)};R.removeRange=P?function(a){if(this.docSelection.type==C){for(var b,c=this.docSelection.createRange(),d=j(a),e=w.getDocument(c.item(0)),f=w.getBody(e).createControlRange(),g=!1,h=0,i=c.length;i>h;++h)b=c.item(h),b!==d||g?f.add(c.item(h)):g=!0;f.select(),m(this)}else U(this,a)}:function(a){U(this,a)};var V;!F&&J&&a.features.implementsDomRange?(V=function(a){var b=!1;return a.anchorNode&&(b=1==w.comparePoints(a.anchorNode,a.anchorOffset,a.focusNode,a.focusOffset)),b},R.isBackwards=function(){return V(this)}):V=R.isBackwards=function(){return!1},R.toString=function(){for(var a=[],b=0,c=this.rangeCount;c>b;++b)a[b]=""+this._ranges[b];return a.join("")},R.collapse=function(b,c){q(this,b);var d=a.createRange(w.getDocument(b));d.collapseToPoint(b,c),this.removeAllRanges(),this.addRange(d),this.isCollapsed=!0},R.collapseToStart=function(){if(!this.rangeCount)throw new A("INVALID_STATE_ERR");var a=this._ranges[0];this.collapse(a.startContainer,a.startOffset)},R.collapseToEnd=function(){if(!this.rangeCount)throw new A("INVALID_STATE_ERR");var a=this._ranges[this.rangeCount-1];this.collapse(a.endContainer,a.endOffset)},R.selectAllChildren=function(b){q(this,b);var c=a.createRange(w.getDocument(b));c.selectNodeContents(b),this.removeAllRanges(),this.addRange(c)},R.deleteFromDocument=function(){if(P&&E&&this.docSelection.type==C){for(var a,b=this.docSelection.createRange();b.length;)a=b.item(0),b.remove(a),a.parentNode.removeChild(a);this.refresh()}else if(this.rangeCount){var c=this.getAllRanges();this.removeAllRanges();for(var d=0,e=c.length;e>d;++d)c[d].deleteContents();this.addRange(c[e-1])}},R.getAllRanges=function(){return this._ranges.slice(0)},R.setSingleRange=function(a){this.setRanges([a])},R.containsNode=function(a,b){for(var c=0,d=this._ranges.length;d>c;++c)if(this._ranges[c].containsNode(a,b))return!0;return!1},R.toHtml=function(){var a="";if(this.rangeCount){for(var b=y.getRangeDocument(this._ranges[0]).createElement("div"),c=0,d=this._ranges.length;d>c;++c)b.appendChild(this._ranges[c].cloneContents());a=b.innerHTML}return a},R.getName=function(){return"WrappedSelection"},R.inspect=function(){return r(this)},R.detach=function(){this.win[v]=null,this.win=this.anchorNode=this.focusNode=null},o.inspect=r,a.Selection=o,a.selectionPrototype=R,a.addCreateMissingNativeApiListener(function(b){"undefined"==typeof b.getSelection&&(b.getSelection=function(){return a.getSelection(this)}),b=null})}),/**
 * @license Selection save and restore module for Rangy.
 * Saves and restores user selections using marker invisible elements in the DOM.
 *
 * Part of Rangy, a cross-browser JavaScript range and selection library
 * http://code.google.com/p/rangy/
 *
 * Depends on Rangy core.
 *
 * Copyright 2012, Tim Down
 * Licensed under the MIT license.
 * Version: 1.2.3
 * Build date: 26 February 2012
 */
rangy.createModule("SaveRestore",function(a,b){function c(a,b){return(b||document).getElementById(a)}function d(a,b){var c,d="selectionBoundary_"+ +new Date+"_"+(""+Math.random()).slice(2),e=k.getDocument(a.startContainer),f=a.cloneRange();return f.collapse(b),c=e.createElement("span"),c.id=d,c.style.lineHeight="0",c.style.display="none",c.className="rangySelectionBoundary",c.appendChild(e.createTextNode(l)),f.insertNode(c),f.detach(),c}function e(a,d,e,f){var g=c(e,a);g?(d[f?"setStartBefore":"setEndBefore"](g),g.parentNode.removeChild(g)):b.warn("Marker element has been removed. Cannot restore selection.")}function f(a,b){return b.compareBoundaryPoints(a.START_TO_START,a)}function g(e){e=e||window;var g=e.document;if(!a.isSelectionValid(e))return void b.warn("Cannot save selection. This usually happens when the selection is collapsed and the selection document has lost focus.");var h,i,j,k=a.getSelection(e),l=k.getAllRanges(),m=[];l.sort(f);for(var n=0,o=l.length;o>n;++n)j=l[n],j.collapsed?(i=d(j,!1),m.push({markerId:i.id,collapsed:!0})):(i=d(j,!1),h=d(j,!0),m[n]={startMarkerId:h.id,endMarkerId:i.id,collapsed:!1,backwards:1==l.length&&k.isBackwards()});for(n=o-1;n>=0;--n)j=l[n],j.collapsed?j.collapseBefore(c(m[n].markerId,g)):(j.setEndBefore(c(m[n].endMarkerId,g)),j.setStartAfter(c(m[n].startMarkerId,g)));return k.setRanges(l),{win:e,doc:g,rangeInfos:m,restored:!1}}function h(d,f){if(!d.restored){for(var g,h,i=d.rangeInfos,j=a.getSelection(d.win),k=[],l=i.length,m=l-1;m>=0;--m){if(g=i[m],h=a.createRange(d.doc),g.collapsed){var n=c(g.markerId,d.doc);if(n){n.style.display="inline";var o=n.previousSibling;o&&3==o.nodeType?(n.parentNode.removeChild(n),h.collapseToPoint(o,o.length)):(h.collapseBefore(n),n.parentNode.removeChild(n))}else b.warn("Marker element has been removed. Cannot restore selection.")}else e(d.doc,h,g.startMarkerId,!0),e(d.doc,h,g.endMarkerId,!1);1==l&&h.normalizeBoundaries(),k[m]=h}1==l&&f&&a.features.selectionHasExtend&&i[0].backwards?(j.removeAllRanges(),j.addRange(k[0],!0)):j.setRanges(k),d.restored=!0}}function i(a,b){var d=c(b,a);d&&d.parentNode.removeChild(d)}function j(a){for(var b,c=a.rangeInfos,d=0,e=c.length;e>d;++d)b=c[d],b.collapsed?i(a.doc,b.markerId):(i(a.doc,b.startMarkerId),i(a.doc,b.endMarkerId))}a.requireModules(["DomUtil","DomRange","WrappedRange"]);var k=a.dom,l="﻿";a.saveSelection=g,a.restoreSelection=h,a.removeMarkerElement=i,a.removeMarkers=j})}({},function(){return this}());
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/vendor/textAngular/dist/textAngular-rangy.min.js","/resources/assets/vendor/textAngular/dist")

},{"_process":7,"buffer":3}],83:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
!function(a,b){b["true"]=a,/**
 * @license AngularJS v1.3.10
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
function(a,b){"use strict";function c(){this.$get=["$$sanitizeUri",function(a){return function(b){var c=[];return f(b,k(c,function(b,c){return!/^unsafe/.test(a(b,c))})),c.join("")}}]}function d(a){var c=[],d=k(c,b.noop);return d.chars(a),c.join("")}function e(a){var b,c={},d=a.split(",");for(b=0;b<d.length;b++)c[d[b]]=!0;return c}function f(a,c){function d(a,d,f,h){if(d=b.lowercase(d),A[d])for(;k.last()&&B[k.last()];)e("",k.last());z[d]&&k.last()==d&&e("",d),h=w[d]||!!h,h||k.push(d);var i={};f.replace(o,function(a,b,c,d,e){var f=c||d||e||"";i[b]=g(f)}),c.start&&c.start(d,i,h)}function e(a,d){var e,f=0;if(d=b.lowercase(d))for(f=k.length-1;f>=0&&k[f]!=d;f--);if(f>=0){for(e=k.length-1;e>=f;e--)c.end&&c.end(k[e]);k.length=f}}"string"!=typeof a&&(a=null===a||"undefined"==typeof a?"":""+a);var f,h,i,j,k=[],u=a;for(k.last=function(){return k[k.length-1]};a;){if(j="",h=!0,k.last()&&D[k.last()]?(a=a.replace(new RegExp("([^]*)<\\s*\\/\\s*"+k.last()+"[^>]*>","i"),function(a,b){return b=b.replace(r,"$1").replace(t,"$1"),c.chars&&c.chars(g(b)),""}),e("",k.last())):(0===a.indexOf("<!--")?(f=a.indexOf("--",4),f>=0&&a.lastIndexOf("-->",f)===f&&(c.comment&&c.comment(a.substring(4,f)),a=a.substring(f+3),h=!1)):s.test(a)?(i=a.match(s),i&&(a=a.replace(i[0],""),h=!1)):q.test(a)?(i=a.match(n),i&&(a=a.substring(i[0].length),i[0].replace(n,e),h=!1)):p.test(a)&&(i=a.match(m),i?(i[4]&&(a=a.substring(i[0].length),i[0].replace(m,d)),h=!1):(j+="<",a=a.substring(1))),h&&(f=a.indexOf("<"),j+=0>f?a:a.substring(0,f),a=0>f?"":a.substring(f),c.chars&&c.chars(g(j)))),a==u)throw l("badparse","The sanitizer was unable to parse the following block of html: {0}",a);u=a}e()}function g(a){if(!a)return"";var b=K.exec(a),c=b[1],d=b[3],e=b[2];return e&&(J.innerHTML=e.replace(/</g,"&lt;"),e="textContent"in J?J.textContent:J.innerText),c+e+d}function h(a){return a.replace(/&/g,"&amp;").replace(u,function(a){var b=a.charCodeAt(0),c=a.charCodeAt(1);return"&#"+(1024*(b-55296)+(c-56320)+65536)+";"}).replace(v,function(a){var b=a.charCodeAt(0);return 159>=b||173==b||b>=1536&&1540>=b||1807==b||6068==b||6069==b||b>=8204&&8207>=b||b>=8232&&8239>=b||b>=8288&&8303>=b||65279==b||b>=65520&&65535>=b?"&#"+b+";":a}).replace(/</g,"&lt;").replace(/>/g,"&gt;")}function i(a){var c="",d=a.split(";");return b.forEach(d,function(a){var d=a.split(":");if(2==d.length){var e=L(b.lowercase(d[0])),a=L(b.lowercase(d[1]));(("color"===e||"background-color"===e)&&(a.match(/^rgb\([0-9%,\. ]*\)$/i)||a.match(/^rgba\([0-9%,\. ]*\)$/i)||a.match(/^hsl\([0-9%,\. ]*\)$/i)||a.match(/^hsla\([0-9%,\. ]*\)$/i)||a.match(/^#[0-9a-f]{3,6}$/i)||a.match(/^[a-z]*$/i))||"text-align"===e&&("left"===a||"right"===a||"center"===a||"justify"===a)||"float"===e&&("left"===a||"right"===a||"none"===a)||("width"===e||"height"===e)&&a.match(/[0-9\.]*(px|em|rem|%)/)||"direction"===e&&a.match(/^ltr|rtl|initial|inherit$/))&&(c+=e+": "+a+";")}}),c}function j(a,b,c,d){return"img"===a&&b["ta-insert-video"]&&("ta-insert-video"===c||"allowfullscreen"===c||"frameborder"===c||"contenteditable"===c&&"false"===d)?!0:!1}function k(a,c){var d=!1,e=b.bind(a,a.push);return{start:function(a,f,g){a=b.lowercase(a),!d&&D[a]&&(d=a),d||E[a]!==!0||(e("<"),e(a),b.forEach(f,function(d,g){var k=b.lowercase(g),l="img"===a&&"src"===k||"background"===k;("style"===k&&""!==(d=i(d))||j(a,f,k,d)||I[k]===!0&&(F[k]!==!0||c(d,l)))&&(e(" "),e(g),e('="'),e(h(d)),e('"'))}),e(g?"/>":">"))},end:function(a){a=b.lowercase(a),d||E[a]!==!0||(e("</"),e(a),e(">")),a==d&&(d=!1)},chars:function(a){d||e(h(a))}}}var l=b.$$minErr("$sanitize"),m=/^<((?:[a-zA-Z])[\w:-]*)((?:\s+[\w:-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)\s*(>?)/,n=/^<\/\s*([\w:-]+)[^>]*>/,o=/([\w:-]+)(?:\s*=\s*(?:(?:"((?:[^"])*)")|(?:'((?:[^'])*)')|([^>\s]+)))?/g,p=/^</,q=/^<\//,r=/<!--(.*?)-->/g,s=/<!DOCTYPE([^>]*?)>/i,t=/<!\[CDATA\[(.*?)]]>/g,u=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,v=/([^\#-~| |!])/g,w=e("area,br,col,hr,img,wbr"),x=e("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),y=e("rp,rt"),z=b.extend({},y,x),A=b.extend({},x,e("address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul")),B=b.extend({},y,e("a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var")),C=e("animate,animateColor,animateMotion,animateTransform,circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,radialGradient,rect,set,stop,svg,switch,text,title,tspan,use"),D=e("script,style"),E=b.extend({},w,A,B,z,C),F=e("background,cite,href,longdesc,src,usemap,xlink:href"),G=e("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,id,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,size,span,start,summary,target,title,type,valign,value,vspace,width"),H=e("accent-height,accumulate,additive,alphabetic,arabic-form,ascent,attributeName,attributeType,baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan"),I=b.extend({},F,H,G),J=document.createElement("pre"),K=/^(\s*)([\s\S]*?)(\s*)$/,L=function(){return String.prototype.trim?function(a){return b.isString(a)?a.trim():a}:function(a){return b.isString(a)?a.replace(/^\s\s*/,"").replace(/\s\s*$/,""):a}}();b.module("ngSanitize",[]).provider("$sanitize",c),b.module("ngSanitize").filter("linky",["$sanitize",function(a){var c=/((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"”’]/,e=/^mailto:/;return function(f,g){function h(a){a&&n.push(d(a))}function i(a,c){n.push("<a "),b.isDefined(g)&&n.push('target="',g,'" '),n.push('href="',a.replace(/"/g,"&quot;"),'">'),h(c),n.push("</a>")}if(!f)return f;for(var j,k,l,m=f,n=[];j=m.match(c);)k=j[0],j[2]||j[4]||(k=(j[3]?"http://":"mailto:")+k),l=j.index,h(m.substr(0,l)),i(k,j[0].replace(e,"")),m=m.substring(l+j[0].length);return h(m),a(n.join(""))}}])}(window,window.angular)}({},function(){return this}());
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/vendor/textAngular/dist/textAngular-sanitize.min.js","/resources/assets/vendor/textAngular/dist")

},{"_process":7,"buffer":3}],84:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
!function(a,b){b["true"]=a,/*
@license textAngular
Author : Austin Anderson
License : 2013 MIT
Version 1.3.7

See README.md or https://github.com/fraywing/textAngular/wiki for requirements and use.
*/
angular.module("textAngularSetup",[]).value("taOptions",{toolbar:[["h1","h2","h3","h4","h5","h6","p","pre","quote"],["bold","italics","underline","strikeThrough","ul","ol","redo","undo","clear"],["justifyLeft","justifyCenter","justifyRight","indent","outdent"],["html","insertImage","insertLink","insertVideo","wordcount","charcount"]],classes:{focussed:"focussed",toolbar:"btn-toolbar",toolbarGroup:"btn-group",toolbarButton:"btn btn-default",toolbarButtonActive:"active",disabled:"disabled",textEditor:"form-control",htmlEditor:"form-control"},setup:{textEditorSetup:function(){},htmlEditorSetup:function(){}},defaultFileDropHandler:function(a,b){var c=new FileReader;return"image"===a.type.substring(0,5)?(c.onload=function(){""!==c.result&&b("insertImage",c.result,!0)},c.readAsDataURL(a),!0):!1}}).value("taSelectableElements",["a","img"]).value("taCustomRenderers",[{selector:"img",customAttribute:"ta-insert-video",renderLogic:function(a){var b=angular.element("<iframe></iframe>"),c=a.prop("attributes");angular.forEach(c,function(a){b.attr(a.name,a.value)}),b.attr("src",b.attr("ta-insert-video")),a.replaceWith(b)}}]).value("taTranslations",{html:{tooltip:"Toggle html / Rich Text"},heading:{tooltip:"Heading "},p:{tooltip:"Paragraph"},pre:{tooltip:"Preformatted text"},ul:{tooltip:"Unordered List"},ol:{tooltip:"Ordered List"},quote:{tooltip:"Quote/unqoute selection or paragraph"},undo:{tooltip:"Undo"},redo:{tooltip:"Redo"},bold:{tooltip:"Bold"},italic:{tooltip:"Italic"},underline:{tooltip:"Underline"},strikeThrough:{tooltip:"Strikethrough"},justifyLeft:{tooltip:"Align text left"},justifyRight:{tooltip:"Align text right"},justifyCenter:{tooltip:"Center"},indent:{tooltip:"Increase indent"},outdent:{tooltip:"Decrease indent"},clear:{tooltip:"Clear formatting"},insertImage:{dialogPrompt:"Please enter an image URL to insert",tooltip:"Insert image",hotkey:"the - possibly language dependent hotkey ... for some future implementation"},insertVideo:{tooltip:"Insert video",dialogPrompt:"Please enter a youtube URL to embed"},insertLink:{tooltip:"Insert / edit link",dialogPrompt:"Please enter a URL to insert"},editLink:{reLinkButton:{tooltip:"Relink"},unLinkButton:{tooltip:"Unlink"},targetToggle:{buttontext:"Open in New Window"}},wordcount:{tooltip:"Display words Count"},charcount:{tooltip:"Display characters Count"}}).run(["taRegisterTool","$window","taTranslations","taSelection",function(a,b,c,d){a("html",{iconclass:"fa fa-code",tooltiptext:c.html.tooltip,action:function(){this.$editor().switchView()},activeState:function(){return this.$editor().showHtml}});var e=function(a){return function(){return this.$editor().queryFormatBlockState(a)}},f=function(){return this.$editor().wrapSelection("formatBlock","<"+this.name.toUpperCase()+">")};angular.forEach(["h1","h2","h3","h4","h5","h6"],function(b){a(b.toLowerCase(),{buttontext:b.toUpperCase(),tooltiptext:c.heading.tooltip+b.charAt(1),action:f,activeState:e(b.toLowerCase())})}),a("p",{buttontext:"P",tooltiptext:c.p.tooltip,action:function(){return this.$editor().wrapSelection("formatBlock","<P>")},activeState:function(){return this.$editor().queryFormatBlockState("p")}}),a("pre",{buttontext:"pre",tooltiptext:c.pre.tooltip,action:function(){return this.$editor().wrapSelection("formatBlock","<PRE>")},activeState:function(){return this.$editor().queryFormatBlockState("pre")}}),a("ul",{iconclass:"fa fa-list-ul",tooltiptext:c.ul.tooltip,action:function(){return this.$editor().wrapSelection("insertUnorderedList",null)},activeState:function(){return this.$editor().queryCommandState("insertUnorderedList")}}),a("ol",{iconclass:"fa fa-list-ol",tooltiptext:c.ol.tooltip,action:function(){return this.$editor().wrapSelection("insertOrderedList",null)},activeState:function(){return this.$editor().queryCommandState("insertOrderedList")}}),a("quote",{iconclass:"fa fa-quote-right",tooltiptext:c.quote.tooltip,action:function(){return this.$editor().wrapSelection("formatBlock","<BLOCKQUOTE>")},activeState:function(){return this.$editor().queryFormatBlockState("blockquote")}}),a("undo",{iconclass:"fa fa-undo",tooltiptext:c.undo.tooltip,action:function(){return this.$editor().wrapSelection("undo",null)}}),a("redo",{iconclass:"fa fa-repeat",tooltiptext:c.redo.tooltip,action:function(){return this.$editor().wrapSelection("redo",null)}}),a("bold",{iconclass:"fa fa-bold",tooltiptext:c.bold.tooltip,action:function(){return this.$editor().wrapSelection("bold",null)},activeState:function(){return this.$editor().queryCommandState("bold")},commandKeyCode:98}),a("justifyLeft",{iconclass:"fa fa-align-left",tooltiptext:c.justifyLeft.tooltip,action:function(){return this.$editor().wrapSelection("justifyLeft",null)},activeState:function(a){var b=!1;return a&&(b="left"===a.css("text-align")||"left"===a.attr("align")||"right"!==a.css("text-align")&&"center"!==a.css("text-align")&&"justify"!==a.css("text-align")&&!this.$editor().queryCommandState("justifyRight")&&!this.$editor().queryCommandState("justifyCenter")&&!this.$editor().queryCommandState("justifyFull")),b=b||this.$editor().queryCommandState("justifyLeft")}}),a("justifyRight",{iconclass:"fa fa-align-right",tooltiptext:c.justifyRight.tooltip,action:function(){return this.$editor().wrapSelection("justifyRight",null)},activeState:function(a){var b=!1;return a&&(b="right"===a.css("text-align")),b=b||this.$editor().queryCommandState("justifyRight")}}),a("justifyCenter",{iconclass:"fa fa-align-center",tooltiptext:c.justifyCenter.tooltip,action:function(){return this.$editor().wrapSelection("justifyCenter",null)},activeState:function(a){var b=!1;return a&&(b="center"===a.css("text-align")),b=b||this.$editor().queryCommandState("justifyCenter")}}),a("indent",{iconclass:"fa fa-indent",tooltiptext:c.indent.tooltip,action:function(){return this.$editor().wrapSelection("indent",null)},activeState:function(){return this.$editor().queryFormatBlockState("blockquote")}}),a("outdent",{iconclass:"fa fa-outdent",tooltiptext:c.outdent.tooltip,action:function(){return this.$editor().wrapSelection("outdent",null)},activeState:function(){return!1}}),a("italics",{iconclass:"fa fa-italic",tooltiptext:c.italic.tooltip,action:function(){return this.$editor().wrapSelection("italic",null)},activeState:function(){return this.$editor().queryCommandState("italic")},commandKeyCode:105}),a("underline",{iconclass:"fa fa-underline",tooltiptext:c.underline.tooltip,action:function(){return this.$editor().wrapSelection("underline",null)},activeState:function(){return this.$editor().queryCommandState("underline")},commandKeyCode:117}),a("strikeThrough",{iconclass:"fa fa-strikethrough",action:function(){return this.$editor().wrapSelection("strikeThrough",null)},activeState:function(){return document.queryCommandState("strikeThrough")}}),a("clear",{iconclass:"fa fa-ban",tooltiptext:c.clear.tooltip,action:function(a,b){var c;this.$editor().wrapSelection("removeFormat",null);var e=angular.element(d.getSelectionElement()),f=function(a){a=angular.element(a);var b=a;angular.forEach(a.children(),function(a){var c=angular.element("<p></p>");c.html(angular.element(a).html()),b.after(c),b=c}),a.remove()};if(angular.forEach(e.find("ul"),f),angular.forEach(e.find("ol"),f),"li"===e[0].tagName.toLowerCase()){var g=e[0].parentNode.childNodes,h=[],i=[],j=!1;for(c=0;c<g.length;c++)g[c]===e[0]?j=!0:j?i.push(g[c]):h.push(g[c]);var k=angular.element(e[0].parentNode),l=angular.element("<p></p>");if(l.html(angular.element(e[0]).html()),0===h.length||0===i.length)0===i.length?k.after(l):k[0].parentNode.insertBefore(l[0],k[0]),0===h.length&&0===i.length?k.remove():angular.element(e[0]).remove();else{var m=angular.element("<"+k[0].tagName+"></"+k[0].tagName+">"),n=angular.element("<"+k[0].tagName+"></"+k[0].tagName+">");for(c=0;c<h.length;c++)m.append(angular.element(h[c]));for(c=0;c<i.length;c++)n.append(angular.element(i[c]));k.after(n),k.after(l),k.after(m),k.remove()}d.setSelectionToElementEnd(l[0])}var o=this.$editor(),p=function(a){a=angular.element(a),a[0]!==o.displayElements.text[0]&&a.removeAttr("class"),angular.forEach(a.children(),p)};angular.forEach(e,p),"li"!==e[0].tagName.toLowerCase()&&"ol"!==e[0].tagName.toLowerCase()&&"ul"!==e[0].tagName.toLowerCase()&&this.$editor().wrapSelection("formatBlock","default"),b()}});var g=function(a,b,c){var d=function(){c.updateTaBindtaTextElement(),c.hidePopover()};a.preventDefault(),c.displayElements.popover.css("width","375px");var e=c.displayElements.popoverContainer;e.empty();var f=angular.element('<div class="btn-group" style="padding-right: 6px;">'),g=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1">100% </button>');g.on("click",function(a){a.preventDefault(),b.css({width:"100%",height:""}),d()});var h=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1">50% </button>');h.on("click",function(a){a.preventDefault(),b.css({width:"50%",height:""}),d()});var i=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1">25% </button>');i.on("click",function(a){a.preventDefault(),b.css({width:"25%",height:""}),d()});var j=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1">Reset</button>');j.on("click",function(a){a.preventDefault(),b.css({width:"",height:""}),d()}),f.append(g),f.append(h),f.append(i),f.append(j),e.append(f),f=angular.element('<div class="btn-group" style="padding-right: 6px;">');var k=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1"><i class="fa fa-align-left"></i></button>');k.on("click",function(a){a.preventDefault(),b.css("float","left"),b.css("cssFloat","left"),b.css("styleFloat","left"),d()});var l=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1"><i class="fa fa-align-right"></i></button>');l.on("click",function(a){a.preventDefault(),b.css("float","right"),b.css("cssFloat","right"),b.css("styleFloat","right"),d()});var m=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1"><i class="fa fa-align-justify"></i></button>');m.on("click",function(a){a.preventDefault(),b.css("float",""),b.css("cssFloat",""),b.css("styleFloat",""),d()}),f.append(k),f.append(m),f.append(l),e.append(f),f=angular.element('<div class="btn-group">');var n=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1"><i class="fa fa-trash-o"></i></button>');n.on("click",function(a){a.preventDefault(),b.remove(),d()}),f.append(n),e.append(f),c.showPopover(b),c.showResizeOverlay(b)};a("insertImage",{iconclass:"fa fa-picture-o",tooltiptext:c.insertImage.tooltip,action:function(){var a;return a=b.prompt(c.insertImage.dialogPrompt,"http://"),a&&""!==a&&"http://"!==a?this.$editor().wrapSelection("insertImage",a,!0):void 0},onElementSelect:{element:"img",action:g}}),a("insertVideo",{iconclass:"fa fa-youtube-play",tooltiptext:c.insertVideo.tooltip,action:function(){var a;if(a=b.prompt(c.insertVideo.dialogPrompt,"https://"),a&&""!==a&&"https://"!==a){var d=a.match(/(\?|&)v=[^&]*/);if(d&&d.length>0){var e="https://www.youtube.com/embed/"+d[0].substring(3),f='<img class="ta-insert-video" src="https://img.youtube.com/vi/'+d[0].substring(3)+'/hqdefault.jpg" ta-insert-video="'+e+'" contenteditable="false" src="" allowfullscreen="true" frameborder="0" />';return this.$editor().wrapSelection("insertHTML",f,!0)}}},onElementSelect:{element:"img",onlyWithAttrs:["ta-insert-video"],action:g}}),a("insertLink",{tooltiptext:c.insertLink.tooltip,iconclass:"fa fa-link",action:function(){var a;return a=b.prompt(c.insertLink.dialogPrompt,"http://"),a&&""!==a&&"http://"!==a?this.$editor().wrapSelection("createLink",a,!0):void 0},activeState:function(a){return a?"A"===a[0].tagName:!1},onElementSelect:{element:"a",action:function(a,d,e){a.preventDefault(),e.displayElements.popover.css("width","435px");var f=e.displayElements.popoverContainer;f.empty(),f.css("line-height","28px");var g=angular.element('<a href="'+d.attr("href")+'" target="_blank">'+d.attr("href")+"</a>");g.css({display:"inline-block","max-width":"200px",overflow:"hidden","text-overflow":"ellipsis","white-space":"nowrap","vertical-align":"middle"}),f.append(g);var h=angular.element('<div class="btn-group pull-right">'),i=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" tabindex="-1" unselectable="on" title="'+c.editLink.reLinkButton.tooltip+'"><i class="fa fa-edit icon-edit"></i></button>');i.on("click",function(a){a.preventDefault();var f=b.prompt(c.insertLink.dialogPrompt,d.attr("href"));f&&""!==f&&"http://"!==f&&(d.attr("href",f),e.updateTaBindtaTextElement()),e.hidePopover()}),h.append(i);var j=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" tabindex="-1" unselectable="on" title="'+c.editLink.unLinkButton.tooltip+'"><i class="fa fa-unlink icon-unlink"></i></button>');j.on("click",function(a){a.preventDefault(),d.replaceWith(d.contents()),e.updateTaBindtaTextElement(),e.hidePopover()}),h.append(j);var k=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" tabindex="-1" unselectable="on">'+c.editLink.targetToggle.buttontext+"</button>");"_blank"===d.attr("target")&&k.addClass("active"),k.on("click",function(a){a.preventDefault(),d.attr("target","_blank"===d.attr("target")?"":"_blank"),k.toggleClass("active"),e.updateTaBindtaTextElement()}),h.append(k),f.append(h),e.showPopover(d)}}}),a("wordcount",{display:'<div id="toolbarWC" style="display:block; min-width:100px;">Words:{{wordcount}}</div>',disabled:!0,wordcount:0,activeState:function(){var a=this.$editor().displayElements.text,b=a[0].innerHTML,c=b.replace(/(<[^>]*?>)/gi," "),d=c.match(/\S+/g),e=d&&d.length||0;return this.wordcount=e,this.$editor().wordcount=e,!1}}),a("charcount",{display:'<div id="toolbarCC" style="display:block; min-width:120px;">Characters:{{charcount}}</div>',disabled:!0,charcount:0,activeState:function(){var a=this.$editor().displayElements.text,b=a[0].innerText||a[0].textContent,c=b.replace(/(\r\n|\n|\r)/gm,"").replace(/^\s+/g," ").replace(/\s+$/g," ").length;return this.charcount=c,this.$editor().charcount=c,!1}})}]),/*
@license textAngular
Author : Austin Anderson
License : 2013 MIT
Version 1.3.7

See README.md or https://github.com/fraywing/textAngular/wiki for requirements and use.
*/
function(){"Use Strict";function a(a){try{return 0!==angular.element(a).length}catch(b){return!1}}function b(b,c){if(!b||""===b||r.hasOwnProperty(b))throw"textAngular Error: A unique name is required for a Tool Definition";if(c.display&&(""===c.display||!a(c.display))||!c.display&&!c.buttontext&&!c.iconclass)throw'textAngular Error: Tool Definition for "'+b+'" does not have a valid display/iconclass/buttontext value';r[b]=c}var c={ie:function(){for(var a,b=3,c=document.createElement("div"),d=c.getElementsByTagName("i");c.innerHTML="<!--[if gt IE "+ ++b+"]><i></i><![endif]-->",d[0];);return b>4?b:a}(),webkit:/AppleWebKit\/([\d.]+)/i.test(navigator.userAgent)},d=!1;c.webkit&&(document.addEventListener("mousedown",function(a){var b=a||window.event,c=b.target;if(d&&null!==c){for(var e=!1,f=c;null!==f&&"html"!==f.tagName.toLowerCase()&&!e;)e="true"===f.contentEditable,f=f.parentNode;e||(document.getElementById("textAngular-editableFix-010203040506070809").setSelectionRange(0,0),c.focus(),c.select&&c.select())}d=!1},!1),angular.element(document).ready(function(){angular.element(document.body).append(angular.element('<input id="textAngular-editableFix-010203040506070809" class="ta-hidden-input" unselectable="on" tabIndex="-1">'))}));var e=/^(address|article|aside|audio|blockquote|canvas|dd|div|dl|fieldset|figcaption|figure|footer|form|h1|h2|h3|h4|h5|h6|header|hgroup|hr|noscript|ol|output|p|pre|section|table|tfoot|ul|video)$/i,f=/^(ul|li|ol)$/i,g=/^(address|article|aside|audio|blockquote|canvas|dd|div|dl|fieldset|figcaption|figure|footer|form|h1|h2|h3|h4|h5|h6|header|hgroup|hr|noscript|ol|output|p|pre|section|table|tfoot|ul|video|li)$/i;String.prototype.trim||(String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g,"")});var h,i,k,l,m;if(c.ie>8||void 0===c.ie){for(var n=document.styleSheets,o=0;o<n.length;o++)if((0===n[o].media.length||n[o].media.mediaText.match(/(all|screen)/gi))&&n[o].href&&n[o].href.match(/textangular\.(min\.|)css/gi)){h=n[o];break}h||(h=function(){var a=document.createElement("style");return c.webkit&&a.appendChild(document.createTextNode("")),document.getElementsByTagName("head")[0].appendChild(a),a.sheet}()),i=function(a,b){return l(h,a,b)},l=function(a,b,c){var d;return a.cssRules?d=Math.max(a.cssRules.length-1,0):a.rules&&(d=Math.max(a.rules.length-1,0)),a.insertRule?a.insertRule(b+"{"+c+"}",d):a.addRule(b,c,d),d},k=function(a){m(h,a)},m=function(a,b){a.removeRule?a.removeRule(b):a.deleteRule(b)}}angular.module("textAngular.factories",[]).factory("taBrowserTag",[function(){return function(a){return a?""===a?void 0===c.ie?"div":c.ie<=8?"P":"p":c.ie<=8?a.toUpperCase():a:c.ie<=8?"P":"p"}}]).factory("taApplyCustomRenderers",["taCustomRenderers","taDOM",function(a,b){return function(c){var d=angular.element("<div></div>");return d[0].innerHTML=c,angular.forEach(a,function(a){var c=[];a.selector&&""!==a.selector?c=d.find(a.selector):a.customAttribute&&""!==a.customAttribute&&(c=b.getByAttribute(d,a.customAttribute)),angular.forEach(c,function(b){b=angular.element(b),a.selector&&""!==a.selector&&a.customAttribute&&""!==a.customAttribute?void 0!==b.attr(a.customAttribute)&&a.renderLogic(b):a.renderLogic(b)})}),d[0].innerHTML}}]).factory("taFixChrome",function(){var a=function(a){if(!a||!angular.isString(a)||a.length<=0)return a;for(var b,c,d,e=/<([^>\/]+?)style=("([^"]+)"|'([^']+)')([^>]*)>/gi,f="",g=0;b=e.exec(a);)c=b[3]||b[4],c&&c.match(/line-height: 1.428571429;|color: inherit; line-height: 1.1;/i)&&(c=c.replace(/( |)font-family: inherit;|( |)line-height: 1.428571429;|( |)line-height:1.1;|( |)color: inherit;/gi,""),d="<"+b[1].trim(),c.length>0&&(d+=" style="+b[2].substring(0,1)+c+b[2].substring(0,1)),d+=b[5].trim()+">",f+=a.substring(g,b.index)+d,g=b.index+b[0].length);return f+=a.substring(g),g>0?f.replace(/<span\s*>(.*?)<\/span>(<br(\/|)>|)/gi,"$1"):a};return a}).factory("taSanitize",["$sanitize","taDOM",function(a){function b(a,b){for(var c,d=0,e=0,f=/<[^>]*>/gi;c=f.exec(a);)if(e=c.index,"/"===c[0].substr(1,1)){if(0===d)break;d--}else d++;return b+a.substring(0,e)+angular.element(b)[0].outerHTML.substring(b.length)+a.substring(e)}function c(a){if(!a||!angular.isString(a)||a.length<=0)return a;for(var d,f,g,h,j,k=/<([^>\/]+?)style=("([^"]+)"|'([^']+)')([^>]*)>/gi,l="",m="",n=0;f=k.exec(a);){g=f[3]||f[4];var o=new RegExp(i,"i");if(angular.isString(g)&&o.test(g)){h="";for(var p=new RegExp(i,"ig");subMatch=p.exec(g);)for(d=0;d<e.length;d++)subMatch[2*d+2]&&(h+="<"+e[d].tag+">");j=c(a.substring(n,f.index)),m+=l.length>0?b(j,l):j,g=g.replace(new RegExp(i,"ig"),""),m+="<"+f[1].trim(),g.length>0&&(m+=' style="'+g+'"'),m+=f[5]+">",n=f.index+f[0].length,l=h}}return m+=l.length>0?b(a.substring(n),l):a.substring(n)}function d(a){if(!a||!angular.isString(a)||a.length<=0)return a;for(var b,c=/<([^>\/]+?)align=("([^"]+)"|'([^']+)')([^>]*)>/gi,d="",e=0;b=c.exec(a);)d+=a.substring(e,b.index),e=b.index+b[0].length,newTag="<"+b[1]+b[5],/style=("([^"]+)"|'([^']+)')/gi.test(newTag)?newTag=newTag.replace(/style=("([^"]+)"|'([^']+)')/i,'style="$2$3 text-align:'+(b[3]||b[4])+';"'):newTag+=' style="text-align:'+(b[3]||b[4])+';"',newTag+=">",d+=newTag;return d+a.substring(e)}for(var e=[{property:"font-weight",values:["bold"],tag:"b"},{property:"font-style",values:["italic"],tag:"i"}],f=[],g=0;g<e.length;g++){var h="("+e[g].property+":\\s*(";for(j=0;j<e[g].values.length;j++)j>0&&(h+="|"),h+=e[g].values[j];h+=");)",f.push(h)}var i="("+f.join("|")+")";return function(b,e,f){if(!f)try{b=c(b)}catch(g){}b=d(b);var h;try{h=a(b),f&&(h=b)}catch(g){h=e||""}var i=h.match(/(<pre[^>]*>.*?<\/pre[^>]*>)/gi);processedSafe=h.replace(/(&#(9|10);)*/gi,"");var j,k=/<pre[^>]*>.*?<\/pre[^>]*>/gi,l=0,m=0;for(h="";null!==(j=k.exec(processedSafe))&&l<i.length;)h+=processedSafe.substring(m,j.index)+i[l],m=j.index+j[0].length,l++;return h+processedSafe.substring(m)}}]).factory("taToolExecuteAction",["$q","$log",function(a,b){return function(c){void 0!==c&&(this.$editor=function(){return c});var d=a.defer(),e=d.promise,f=this.$editor();e["finally"](function(){f.endAction.call(f)});var g;try{g=this.action(d,f.startAction())}catch(h){b.error(h)}(g||void 0===g)&&d.resolve()}}]),angular.module("textAngular.DOM",["textAngular.factories"]).factory("taExecCommand",["taSelection","taBrowserTag","$document",function(a,b,c){var d=function(b,c){var d,e,f=b.find("li");for(e=f.length-1;e>=0;e--)d=angular.element("<"+c+">"+f[e].innerHTML+"</"+c+">"),b.after(d);b.remove(),a.setSelectionToElementEnd(d[0])},g=function(b){/(<br(|\/)>)$/i.test(b.innerHTML.trim())?a.setSelectionBeforeElement(angular.element(b).find("br")[0]):a.setSelectionToElementEnd(b)},h=function(a,b){var c=angular.element("<"+b+">"+a[0].innerHTML+"</"+b+">");a.after(c),a.remove(),g(c.find("li")[0])},i=function(a,c,d){for(var e="",f=0;f<a.length;f++)e+="<"+b("li")+">"+a[f].innerHTML+"</"+b("li")+">";var h=angular.element("<"+d+">"+e+"</"+d+">");c.after(h),c.remove(),g(h.find("li")[0])};return function(g,j){return g=b(g),function(k,l,m){var n,o,p,q,r,s,t,u=angular.element("<"+g+">");try{t=a.getSelectionElement()}catch(v){}var w=angular.element(t);if(void 0!==t){var x=t.tagName.toLowerCase();if("insertorderedlist"===k.toLowerCase()||"insertunorderedlist"===k.toLowerCase()){var y=b("insertorderedlist"===k.toLowerCase()?"ol":"ul");if(x===y)return d(w,g);if("li"===x&&w.parent()[0].tagName.toLowerCase()===y&&1===w.parent().children().length)return d(w.parent(),g);if("li"===x&&w.parent()[0].tagName.toLowerCase()!==y&&1===w.parent().children().length)return h(w.parent(),y);if(x.match(e)&&!w.hasClass("ta-bind")){if("ol"===x||"ul"===x)return h(w,y);var z=!1;return angular.forEach(w.children(),function(a){a.tagName.match(e)&&(z=!0)}),z?i(w.children(),w,y):i([angular.element("<div>"+t.innerHTML+"</div>")[0]],w,y)}if(x.match(e)){if(q=a.getOnlySelectedElements(),0===q.length)o=angular.element("<"+y+"><li>"+t.innerHTML+"</li></"+y+">"),w.html(""),w.append(o);else{if(1===q.length&&("ol"===q[0].tagName.toLowerCase()||"ul"===q[0].tagName.toLowerCase()))return q[0].tagName.toLowerCase()===y?d(angular.element(q[0]),g):h(angular.element(q[0]),y);p="";var A=[];for(n=0;n<q.length;n++)if(3!==q[n].nodeType){var B=angular.element(q[n]);if("li"===q[n].tagName.toLowerCase())continue;p+="ol"===q[n].tagName.toLowerCase()||"ul"===q[n].tagName.toLowerCase()?B[0].innerHTML:"span"!==q[n].tagName.toLowerCase()||"ol"!==q[n].childNodes[0].tagName.toLowerCase()&&"ul"!==q[n].childNodes[0].tagName.toLowerCase()?"<"+b("li")+">"+B[0].innerHTML+"</"+b("li")+">":B[0].childNodes[0].innerHTML,A.unshift(B)}o=angular.element("<"+y+">"+p+"</"+y+">"),A.pop().replaceWith(o),angular.forEach(A,function(a){a.remove()})}return void a.setSelectionToElementEnd(o[0])}}else{if("formatblock"===k.toLowerCase()){for(s=m.toLowerCase().replace(/[<>]/gi,""),"default"===s.trim()&&(s=g,m="<"+g+">"),o="li"===x?w.parent():w;!o[0].tagName||!o[0].tagName.match(e)&&!o.parent().attr("contenteditable");)o=o.parent(),x=(o[0].tagName||"").toLowerCase();if(x===s){q=o.children();var C=!1;for(n=0;n<q.length;n++)C=C||q[n].tagName.match(e);C?(o.after(q),r=o.next(),o.remove(),o=r):(u.append(o[0].childNodes),o.after(u),o.remove(),o=u)}else if(o.parent()[0].tagName.toLowerCase()!==s||o.parent().hasClass("ta-bind"))if(x.match(f))o.wrap(m);else{for(q=a.getOnlySelectedElements(),0===q.length&&(q=[o[0]]),n=0;n<q.length;n++)if(3===q[n].nodeType||!q[n].tagName.match(e))for(;3===q[n].nodeType||!q[n].tagName||!q[n].tagName.match(e);)q[n]=q[n].parentNode;if(angular.element(q[0]).hasClass("ta-bind"))o=angular.element(m),o[0].innerHTML=q[0].innerHTML,q[0].innerHTML=o[0].outerHTML;else if("blockquote"===s){for(p="",n=0;n<q.length;n++)p+=q[n].outerHTML;for(o=angular.element(m),o[0].innerHTML=p,q[0].parentNode.insertBefore(o[0],q[0]),n=q.length-1;n>=0;n--)q[n].parentNode&&q[n].parentNode.removeChild(q[n])}else for(n=0;n<q.length;n++)o=angular.element(m),o[0].innerHTML=q[n].innerHTML,q[n].parentNode.insertBefore(o[0],q[n]),q[n].parentNode.removeChild(q[n])}else{var D=o.parent(),E=D.contents();for(n=0;n<E.length;n++)D.parent().hasClass("ta-bind")&&3===E[n].nodeType&&(u=angular.element("<"+g+">"),u[0].innerHTML=E[n].outerHTML,E[n]=u[0]),D.parent()[0].insertBefore(E[n],D[0]);D.remove()}return void a.setSelectionToElementEnd(o[0])}if("createlink"===k.toLowerCase()){var F=a.getSelection();if(F.collapsed)return void a.insertHtml('<a href="'+m+'">'+m+"</a>",j)}else if("inserthtml"===k.toLowerCase())return void a.insertHtml(m,j)}}try{c[0].execCommand(k,l,m)}catch(v){}}}}]).service("taSelection",["$window","$document","taDOM",function(a,b,c){var d=b[0],f=a.rangy,h=function(a,b){return a.tagName&&a.tagName.match(/^br$/i)&&0===b&&!a.previousSibling?{element:a.parentNode,offset:0}:{element:a,offset:b}},i={getSelection:function(){var a=f.getSelection().getRangeAt(0),b=a.commonAncestorContainer,c={start:h(a.startContainer,a.startOffset),end:h(a.endContainer,a.endOffset),collapsed:a.collapsed};return b=3===b.nodeType?b.parentNode:b,c.container=b.parentNode===c.start.element||b.parentNode===c.end.element?b.parentNode:b,c},getOnlySelectedElements:function(){var a=f.getSelection().getRangeAt(0),b=a.commonAncestorContainer;return b=3===b.nodeType?b.parentNode:b,a.getNodes([1],function(a){return a.parentNode===b})},getSelectionElement:function(){return i.getSelection().container},setSelection:function(a,b,c){var d=f.createRange();d.setStart(a,b),d.setEnd(a,c),f.getSelection().setSingleRange(d)},setSelectionBeforeElement:function(a){var b=f.createRange();b.selectNode(a),b.collapse(!0),f.getSelection().setSingleRange(b)},setSelectionAfterElement:function(a){var b=f.createRange();b.selectNode(a),b.collapse(!1),f.getSelection().setSingleRange(b)},setSelectionToElementStart:function(a){var b=f.createRange();b.selectNodeContents(a),b.collapse(!0),f.getSelection().setSingleRange(b)},setSelectionToElementEnd:function(a){var b=f.createRange();b.selectNodeContents(a),b.collapse(!1),a.childNodes&&a.childNodes[a.childNodes.length-1]&&"br"===a.childNodes[a.childNodes.length-1].nodeName&&(b.startOffset=b.endOffset=b.startOffset-1),f.getSelection().setSingleRange(b)},insertHtml:function(a,b){var h,j,k,l,m,n,o,p=angular.element("<div>"+a+"</div>"),q=f.getSelection().getRangeAt(0),r=d.createDocumentFragment(),s=p[0].childNodes,t=!0;if(s.length>0){for(l=[],k=0;k<s.length;k++)"p"===s[k].nodeName.toLowerCase()&&""===s[k].innerHTML.trim()||3===s[k].nodeType&&""===s[k].nodeValue.trim()||(t=t&&!e.test(s[k].nodeName),l.push(s[k]));for(var u=0;u<l.length;u++)n=r.appendChild(l[u]);!t&&q.collapsed&&/^(|<br(|\/)>)$/i.test(q.startContainer.innerHTML)&&q.selectNode(q.startContainer)}else t=!0,n=r=d.createTextNode(a);if(t)q.deleteContents();else if(q.collapsed&&q.startContainer!==b)if(q.startContainer.innerHTML&&q.startContainer.innerHTML.match(/^<[^>]*>$/i))h=q.startContainer,1===q.startOffset?(q.setStartAfter(h),q.setEndAfter(h)):(q.setStartBefore(h),q.setEndBefore(h));else{if(3===q.startContainer.nodeType&&q.startContainer.parentNode!==b)for(h=q.startContainer.parentNode,j=h.cloneNode(),c.splitNodes(h.childNodes,h,j,q.startContainer,q.startOffset);!g.test(h.nodeName);){angular.element(h).after(j),h=h.parentNode;var v=j;j=h.cloneNode(),c.splitNodes(h.childNodes,h,j,v)}else h=q.startContainer,j=h.cloneNode(),c.splitNodes(h.childNodes,h,j,void 0,void 0,q.startOffset);if(angular.element(h).after(j),q.setStartAfter(h),q.setEndAfter(h),/^(|<br(|\/)>)$/i.test(h.innerHTML.trim())&&(q.setStartBefore(h),q.setEndBefore(h),angular.element(h).remove()),/^(|<br(|\/)>)$/i.test(j.innerHTML.trim())&&angular.element(j).remove(),"li"===h.nodeName.toLowerCase()){for(o=d.createDocumentFragment(),m=0;m<r.childNodes.length;m++)p=angular.element("<li>"),c.transferChildNodes(r.childNodes[m],p[0]),c.transferNodeAttributes(r.childNodes[m],p[0]),o.appendChild(p[0]);r=o,n&&(n=r.childNodes[r.childNodes.length-1],n=n.childNodes[n.childNodes.length-1])}}else q.deleteContents();q.insertNode(r),n&&i.setSelectionToElementEnd(n)}};return i}]).service("taDOM",function(){var a={getByAttribute:function(b,c){var d=[],e=b.children();return e.length&&angular.forEach(e,function(b){d=d.concat(a.getByAttribute(angular.element(b),c))}),void 0!==b.attr(c)&&d.push(b),d},transferChildNodes:function(a,b){for(b.innerHTML="";a.childNodes.length>0;)b.appendChild(a.childNodes[0]);return b},splitNodes:function(b,c,d,e,f,g){if(!e&&isNaN(g))throw new Error("taDOM.splitNodes requires a splitNode or splitIndex");for(var h=document.createDocumentFragment(),i=document.createDocumentFragment(),j=0;b.length>0&&(isNaN(g)||g!==j)&&b[0]!==e;)h.appendChild(b[0]),j++;for(!isNaN(f)&&f>=0&&b[0]&&(h.appendChild(document.createTextNode(b[0].nodeValue.substring(0,f))),b[0].nodeValue=b[0].nodeValue.substring(f));b.length>0;)i.appendChild(b[0]);a.transferChildNodes(h,c),a.transferChildNodes(i,d)},transferNodeAttributes:function(a,b){for(var c=0;c<a.attributes.length;c++)b.setAttribute(a.attributes[c].name,a.attributes[c].value);return b}};return a}),angular.module("textAngular.validators",[]).directive("taMaxText",function(){return{restrict:"A",require:"ngModel",link:function(a,b,c,d){function e(a){var b=angular.element("<div/>");b.html(a);var c=b.text().length;return f>=c?(d.$setValidity("taMaxText",!0),a):void d.$setValidity("taMaxText",!1)}var f=parseInt(a.$eval(c.taMaxText));if(isNaN(f))throw"Max text must be an integer";c.$observe("taMaxText",function(a){if(f=parseInt(a),isNaN(f))throw"Max text must be an integer";d.$dirty&&d.$setViewValue(d.$viewValue)}),d.$parsers.unshift(e)}}}).directive("taMinText",function(){return{restrict:"A",require:"ngModel",link:function(a,b,c,d){function e(a){var b=angular.element("<div/>");b.html(a);var c=b.text().length;return!c||c>=f?(d.$setValidity("taMinText",!0),a):void d.$setValidity("taMinText",!1)}var f=parseInt(a.$eval(c.taMinText));if(isNaN(f))throw"Min text must be an integer";c.$observe("taMinText",function(a){if(f=parseInt(a),isNaN(f))throw"Min text must be an integer";d.$dirty&&d.$setViewValue(d.$viewValue)}),d.$parsers.unshift(e)}}}),angular.module("textAngular.taBind",["textAngular.factories","textAngular.DOM"]).service("_taBlankTest",[function(){var a=/<(a|abbr|acronym|bdi|bdo|big|cite|code|del|dfn|img|ins|kbd|label|map|mark|q|ruby|rp|rt|s|samp|time|tt|var)[^>]*(>|$)/i;return function(b){return function(c){if(!c)return!0;var d,e=/(^[^<]|>)[^<]/i.exec(c);return e?d=e.index:(c=c.toString().replace(/="[^"]*"/i,"").replace(/="[^"]*"/i,"").replace(/="[^"]*"/i,"").replace(/="[^"]*"/i,""),d=c.indexOf(">")),c=c.trim().substring(d,d+100),/^[^<>]+$/i.test(c)?!1:0===c.length||c===b||/^>(\s|&nbsp;)*<\/[^>]+>$/gi.test(c)?!0:/>\s*[^\s<]/i.test(c)||a.test(c)?!1:!0}}}]).directive("taBind",["taSanitize","$timeout","$window","$document","taFixChrome","taBrowserTag","taSelection","taSelectableElements","taApplyCustomRenderers","taOptions","_taBlankTest","$parse","taDOM",function(a,b,e,f,h,j,l,m,n,o,q,r,s){return{require:"ngModel",link:function(j,t,u,v){var w,x,y,z,A=void 0!==t.attr("contenteditable")&&t.attr("contenteditable"),B=A||"textarea"===t[0].tagName.toLowerCase()||"input"===t[0].tagName.toLowerCase(),C=!1,D=!1,E=!1,F=u.taUnsafeSanitizer||o.disableSanitizer,G=/^(9|19|20|27|33|34|35|36|37|38|39|40|45|112|113|114|115|116|117|118|119|120|121|122|123|144|145)$/i,H=/^(8|13|32|46|59|61|107|109|186|187|188|189|190|191|192|219|220|221|222)$/i;void 0===u.taDefaultWrap&&(u.taDefaultWrap="p"),""===u.taDefaultWrap?(y="",z=void 0===c.ie?"<div><br></div>":c.ie>=11?"<p><br></p>":c.ie<=8?"<P>&nbsp;</P>":"<p>&nbsp;</p>"):(y=void 0===c.ie||c.ie>=11?"<"+u.taDefaultWrap+"><br></"+u.taDefaultWrap+">":c.ie<=8?"<"+u.taDefaultWrap.toUpperCase()+"></"+u.taDefaultWrap.toUpperCase()+">":"<"+u.taDefaultWrap+"></"+u.taDefaultWrap+">",z=void 0===c.ie||c.ie>=11?"<"+u.taDefaultWrap+"><br></"+u.taDefaultWrap+">":c.ie<=8?"<"+u.taDefaultWrap.toUpperCase()+">&nbsp;</"+u.taDefaultWrap.toUpperCase()+">":"<"+u.taDefaultWrap+">&nbsp;</"+u.taDefaultWrap+">");var I=q(z);u.taPaste&&(x=r(u.taPaste)),t.addClass("ta-bind");var J;j["$undoManager"+(u.id||"")]=v.$undoManager={_stack:[],_index:0,_max:1e3,push:function(a){return"undefined"==typeof a||null===a||"undefined"!=typeof this.current()&&null!==this.current()&&a===this.current()?a:(this._index<this._stack.length-1&&(this._stack=this._stack.slice(0,this._index+1)),this._stack.push(a),J&&b.cancel(J),this._stack.length>this._max&&this._stack.shift(),this._index=this._stack.length-1,a)},undo:function(){return this.setToIndex(this._index-1)},redo:function(){return this.setToIndex(this._index+1)},setToIndex:function(a){return 0>a||a>this._stack.length-1?void 0:(this._index=a,this.current())},current:function(){return this._stack[this._index]}};var K=j["$undoTaBind"+(u.id||"")]=function(){if(!C&&A){var a=v.$undoManager.undo();"undefined"!=typeof a&&null!==a&&(Y(a),N(a,!1),l.setSelectionToElementEnd(t[0].childNodes.length?t[0].childNodes[t[0].childNodes.length-1]:t[0]))}},L=j["$redoTaBind"+(u.id||"")]=function(){if(!C&&A){var a=v.$undoManager.redo();"undefined"!=typeof a&&null!==a&&(Y(a),N(a,!1),l.setSelectionToElementEnd(t[0].childNodes.length?t[0].childNodes[t[0].childNodes.length-1]:t[0]))}},M=function(){if(A)return t[0].innerHTML;if(B)return t.val();throw"textAngular Error: attempting to update non-editable taBind"},N=function(a,b){E=!0,("undefined"==typeof b||null===b)&&(b=!0&&A),("undefined"==typeof a||null===a)&&(a=M()),I(a)?(""!==v.$viewValue&&v.$setViewValue(""),b&&""!==v.$undoManager.current()&&v.$undoManager.push("")):(X(),v.$viewValue!==a&&(v.$setViewValue(a),b&&v.$undoManager.push(a)))};if(j["updateTaBind"+(u.id||"")]=function(){C||N()},B)if(j.events={},A){var O=!1,P=function(c){if(c&&c.trim().length){if(c.match(/class=["']*Mso(Normal|List)/i)){var d=c.match(/<!--StartFragment-->([\s\S]*?)<!--EndFragment-->/i);d=d?d[1]:c,d=d.replace(/<o:p>[\s\S]*?<\/o:p>/gi,"").replace(/class=(["']|)MsoNormal(["']|)/gi,"");var e=angular.element("<div>"+d+"</div>"),f=angular.element("<div></div>"),g={element:null,lastIndent:[],lastLi:null,isUl:!1};g.lastIndent.peek=function(){var a=this.length;return a>0?this[a-1]:void 0};for(var h=function(a){g.isUl=a,g.element=angular.element(a?"<ul>":"<ol>"),g.lastIndent=[],g.lastIndent.peek=function(){var a=this.length;return a>0?this[a-1]:void 0},g.lastLevelMatch=null},i=0;i<=e[0].childNodes.length;i++)if(e[0].childNodes[i]&&"#text"!==e[0].childNodes[i].nodeName&&"p"===e[0].childNodes[i].tagName.toLowerCase()){var k=angular.element(e[0].childNodes[i]),m=(k.attr("class")||"").match(/MsoList(Bullet|Number|Paragraph)(CxSp(First|Middle|Last)|)/i);if(m){if(k[0].childNodes.length<2||k[0].childNodes[1].childNodes.length<1)continue;var n="bullet"===m[1].toLowerCase()||"number"!==m[1].toLowerCase()&&!(/^[^0-9a-z<]*[0-9a-z]+[^0-9a-z<>]</i.test(k[0].childNodes[1].innerHTML)||/^[^0-9a-z<]*[0-9a-z]+[^0-9a-z<>]</i.test(k[0].childNodes[1].childNodes[0].innerHTML)),o=(k.attr("style")||"").match(/margin-left:([\-\.0-9]*)/i),p=parseFloat(o?o[1]:0),q=(k.attr("style")||"").match(/mso-list:l([0-9]+) level([0-9]+) lfo[0-9+]($|;)/i);if(q&&q[2]&&(p=parseInt(q[2])),q&&(!g.lastLevelMatch||q[1]!==g.lastLevelMatch[1])||!m[3]||"first"===m[3].toLowerCase()||null===g.lastIndent.peek()||g.isUl!==n&&g.lastIndent.peek()===p)h(n),f.append(g.element);else if(null!=g.lastIndent.peek()&&g.lastIndent.peek()<p)g.element=angular.element(n?"<ul>":"<ol>"),g.lastLi.append(g.element);else if(null!=g.lastIndent.peek()&&g.lastIndent.peek()>p){for(;null!=g.lastIndent.peek()&&g.lastIndent.peek()>p;)if("li"!==g.element.parent()[0].tagName.toLowerCase()){if(!/[uo]l/i.test(g.element.parent()[0].tagName.toLowerCase()))break;g.element=g.element.parent(),g.lastIndent.pop()}else g.element=g.element.parent();g.isUl="ul"===g.element[0].tagName.toLowerCase(),n!==g.isUl&&(h(n),f.append(g.element))}g.lastLevelMatch=q,p!==g.lastIndent.peek()&&g.lastIndent.push(p),g.lastLi=angular.element("<li>"),g.element.append(g.lastLi),g.lastLi.html(k.html().replace(/<!(--|)\[if !supportLists\](--|)>[\s\S]*?<!(--|)\[endif\](--|)>/gi,"")),k.remove()}else h(!1),f.append(k)}var r=function(a){a=angular.element(a);for(var b=a[0].childNodes.length-1;b>=0;b--)a.after(a[0].childNodes[b]);a.remove()};angular.forEach(f.find("span"),function(a){a.removeAttribute("lang"),a.attributes.length<=0&&r(a)}),angular.forEach(f.find("font"),r),c=f.html()}else{if(c=c.replace(/<(|\/)meta[^>]*?>/gi,""),c.match(/<[^>]*?(ta-bind)[^>]*?>/)){if(c.match(/<[^>]*?(text-angular)[^>]*?>/)){var u=angular.element("<div>"+c+"</div>");u.find("textarea").remove();for(var w=s.getByAttribute(u,"ta-bind"),y=0;y<w.length;y++){for(var z=w[y][0].parentNode.parentNode,A=0;A<w[y][0].childNodes.length;A++)z.parentNode.insertBefore(w[y][0].childNodes[A],z);z.parentNode.removeChild(z)}c=u.html().replace('<br class="Apple-interchange-newline">',"")}}else c.match(/^<span/)&&(c=c.replace(/<(|\/)span[^>]*?>/gi,""));c=c.replace(/<br class="Apple-interchange-newline"[^>]*?>/gi,"").replace(/<span class="Apple-converted-space">( |&nbsp;)<\/span>/gi,"&nbsp;")}c=a(c,"",F),x&&(c=x(j,{$html:c})||c),l.insertHtml(c,t[0]),b(function(){v.$setViewValue(M()),O=!1,t.removeClass("processing-paste")},0)}else O=!1,t.removeClass("processing-paste")};if(t.on("paste",j.events.paste=function(a,c){if(c&&angular.extend(a,c),C||O)return a.stopPropagation(),a.preventDefault(),!1;O=!0,t.addClass("processing-paste");var d,g=(a.originalEvent||a).clipboardData;if(g&&g.getData){for(var h="",i=0;i<g.types.length;i++)h+=" "+g.types[i];return/text\/html/i.test(h)?d=g.getData("text/html"):/text\/plain/i.test(h)&&(d=g.getData("text/plain")),P(d),a.stopPropagation(),a.preventDefault(),!1}var j=e.rangy.saveSelection(),k=angular.element('<div class="ta-hidden-input" contenteditable="true"></div>');f.find("body").append(k),k[0].focus(),b(function(){e.rangy.restoreSelection(j),P(k[0].innerHTML),k.remove(),t[0].focus()},0)}),t.on("cut",j.events.cut=function(a){C?a.preventDefault():b(function(){v.$setViewValue(M())},0)}),t.on("keydown",j.events.keydown=function(a,b){if(b&&angular.extend(a,b),!C)if(!a.altKey&&a.metaKey||a.ctrlKey)90!==a.keyCode||a.shiftKey?(90===a.keyCode&&a.shiftKey||89===a.keyCode&&!a.shiftKey)&&(L(),a.preventDefault()):(K(),a.preventDefault());else if(13===a.keyCode&&!a.shiftKey){var c=l.getSelectionElement();if(!c.tagName.match(g))return;var d=angular.element(y);if(/^<br(|\/)>$/i.test(c.innerHTML.trim())&&"blockquote"===c.parentNode.tagName.toLowerCase()&&!c.nextSibling){$selection=angular.element(c);var e=$selection.parent();e.after(d),$selection.remove(),0===e.children().length&&e.remove(),l.setSelectionToElementStart(d[0]),a.preventDefault()}else/^<[^>]+><br(|\/)><\/[^>]+>$/i.test(c.innerHTML.trim())&&"blockquote"===c.tagName.toLowerCase()&&($selection=angular.element(c),$selection.after(d),$selection.remove(),l.setSelectionToElementStart(d[0]),a.preventDefault())}}),t.on("keyup",j.events.keyup=function(a,c){if(c&&angular.extend(a,c),J&&b.cancel(J),!C&&!G.test(a.keyCode)){if(""!==y&&13===a.keyCode&&!a.shiftKey){for(var d=l.getSelectionElement();!d.tagName.match(g)&&d!==t[0];)d=d.parentNode;if(d.tagName.toLowerCase()!==u.taDefaultWrap&&"li"!==d.tagName.toLowerCase()&&(""===d.innerHTML.trim()||"<br>"===d.innerHTML.trim())){var f=angular.element(y);angular.element(d).replaceWith(f),l.setSelectionToElementStart(f[0])}}var h=M();if(""!==y&&""===h.trim())Y(y),l.setSelectionToElementStart(t.children()[0]);else if("<"!==h.substring(0,1)&&""!==u.taDefaultWrap){var i=e.rangy.saveSelection();h=M(),h="<"+u.taDefaultWrap+">"+h+"</"+u.taDefaultWrap+">",Y(h),e.rangy.restoreSelection(i)}var j=w!==a.keyCode&&H.test(a.keyCode);N(h,j),j||(J=b(function(){v.$undoManager.push(h)},250)),w=a.keyCode}}),t.on("blur",j.events.blur=function(){D=!1,C||N(),E=!0,v.$render()}),u.placeholder&&(c.ie>8||void 0===c.ie)){var Q;if(!u.id)throw"textAngular Error: An unique ID is required for placeholders to work";Q=i("#"+u.id+".placeholder-text:before",'content: "'+u.placeholder+'"'),j.$on("$destroy",function(){k(Q)})}t.on("focus",j.events.focus=function(){D=!0,t.removeClass("placeholder-text")}),t.on("mouseup",j.events.mouseup=function(){var a=l.getSelection();a.start.element===t[0]&&t.children().length&&l.setSelectionToElementStart(t.children()[0])}),t.on("mousedown",j.events.mousedown=function(a,b){b&&angular.extend(a,b),a.stopPropagation()})}else{t.on("change blur",j.events.change=j.events.blur=function(){C||v.$setViewValue(M())}),t.on("keydown",j.events.keydown=function(a,b){if(b&&angular.extend(a,b),9===a.keyCode){var c=this.selectionStart,d=this.selectionEnd,e=t.val();if(a.shiftKey){var f=e.lastIndexOf("\n",c),g=e.lastIndexOf("	",c);-1!==g&&g>=f&&(t.val(e.substring(0,g)+e.substring(g+1)),this.selectionStart=this.selectionEnd=c-1)}else t.val(e.substring(0,c)+"	"+e.substring(d)),this.selectionStart=this.selectionEnd=c+1;a.preventDefault()}});var R=function(a,b){for(var c="",d=0;b>d;d++)c+=a;return c},S=function(a,b){var c="",d=a.childNodes;b++,c+=R("	",b-1)+a.outerHTML.substring(0,a.outerHTML.indexOf("<li"));for(var e=0;e<d.length;e++)d[e].outerHTML&&(c+="ul"===d[e].nodeName.toLowerCase()||"ol"===d[e].nodeName.toLowerCase()?"\n"+S(d[e],b):"\n"+R("	",b)+d[e].outerHTML);return c+="\n"+R("	",b-1)+a.outerHTML.substring(a.outerHTML.lastIndexOf("<"))};v.$formatters.unshift(function(a){var b=angular.element("<div>"+a+"</div>")[0].childNodes;if(b.length>0){a="";for(var c=0;c<b.length;c++)b[c].outerHTML&&(a.length>0&&(a+="\n"),a+="ul"===b[c].nodeName.toLowerCase()||"ol"===b[c].nodeName.toLowerCase()?""+S(b[c],0):""+b[c].outerHTML)}return a})}var T=function(b){return v.$oldViewValue=a(h(b),v.$oldViewValue,F)},U=function(a){return u.required&&v.$setValidity("required",!I(a)),a};v.$parsers.push(T),v.$parsers.unshift(U),v.$formatters.push(T),v.$formatters.unshift(function(a){if(I(a))return a;var b=angular.element("<div>"+a+"</div>");return 0===b.children().length&&(a="<"+u.taDefaultWrap+">"+a+"</"+u.taDefaultWrap+">"),a}),v.$formatters.unshift(U),v.$formatters.unshift(function(a){return v.$undoManager.push(a||"")});var V=function(a){return j.$emit("ta-element-select",this),a.preventDefault(),!1},W=function(a,c){if(c&&angular.extend(a,c),!p&&!C){p=!0;var d;d=a.originalEvent?a.originalEvent.dataTransfer:a.dataTransfer,j.$emit("ta-drop-event",this,a,d),b(function(){p=!1,N()},100)}},X=j["reApplyOnSelectorHandlers"+(u.id||"")]=function(){C||angular.forEach(m,function(a){t.find(a).off("click",V).on("click",V)})},Y=function(a){t[0].innerHTML=a};v.$render=function(){var a=v.$viewValue||"";E||(A&&D&&(t.removeClass("placeholder-text"),t[0].blur(),b(function(){t[0].focus(),l.setSelectionToElementEnd(t.children()[t.children().length-1])},1)),A?(Y(u.placeholder?""===a?y:a:""===a?y:a),C?t.off("drop",W):(X(),t.on("drop",W))):"textarea"!==t[0].tagName.toLowerCase()&&"input"!==t[0].tagName.toLowerCase()?Y(n(a)):t.val(a)),A&&u.placeholder&&(""===a?D?t.removeClass("placeholder-text"):t.addClass("placeholder-text"):t.removeClass("placeholder-text")),E=!1},u.taReadonly&&(C=j.$eval(u.taReadonly),C?(t.addClass("ta-readonly"),("textarea"===t[0].tagName.toLowerCase()||"input"===t[0].tagName.toLowerCase())&&t.attr("disabled","disabled"),void 0!==t.attr("contenteditable")&&t.attr("contenteditable")&&t.removeAttr("contenteditable")):(t.removeClass("ta-readonly"),"textarea"===t[0].tagName.toLowerCase()||"input"===t[0].tagName.toLowerCase()?t.removeAttr("disabled"):A&&t.attr("contenteditable","true")),j.$watch(u.taReadonly,function(a,b){b!==a&&(a?(t.addClass("ta-readonly"),("textarea"===t[0].tagName.toLowerCase()||"input"===t[0].tagName.toLowerCase())&&t.attr("disabled","disabled"),void 0!==t.attr("contenteditable")&&t.attr("contenteditable")&&t.removeAttr("contenteditable"),angular.forEach(m,function(a){t.find(a).on("click",V)}),t.off("drop",W)):(t.removeClass("ta-readonly"),"textarea"===t[0].tagName.toLowerCase()||"input"===t[0].tagName.toLowerCase()?t.removeAttr("disabled"):A&&t.attr("contenteditable","true"),angular.forEach(m,function(a){t.find(a).off("click",V)}),t.on("drop",W)),C=a)})),A&&!C&&(angular.forEach(m,function(a){t.find(a).on("click",V)}),t.on("drop",W),t.on("blur",function(){c.webkit&&(d=!0)}))}}}]);var p=!1,q=angular.module("textAngular",["ngSanitize","textAngularSetup","textAngular.factories","textAngular.DOM","textAngular.validators","textAngular.taBind"]),r={};q.constant("taRegisterTool",b),q.value("taTools",r),q.config([function(){angular.forEach(r,function(a,b){delete r[b]})}]),q.run([function(){if(!window.rangy)throw"rangy-core.js and rangy-selectionsaverestore.js are required for textAngular to work correctly, rangy-core is not yet loaded.";if(window.rangy.init(),!window.rangy.saveSelection)throw"rangy-selectionsaverestore.js is required for textAngular to work correctly."}]),q.directive("textAngular",["$compile","$timeout","taOptions","taSelection","taExecCommand","textAngularManager","$window","$document","$animate","$log","$q","$parse",function(a,b,c,d,e,f,g,h,i,j,k,l){return{require:"?ngModel",scope:{},restrict:"EA",link:function(m,n,o,p){var q,r,s,t,u,v,w,x,y,z,A=o.serial?o.serial:Math.floor(1e16*Math.random());m._name=o.name?o.name:"textAngularEditor"+A;var B=function(a,c,d){b(function(){var b=function(){a.off(c,b),d.apply(this,arguments)};a.on(c,b)},100)};y=e(o.taDefaultWrap),angular.extend(m,angular.copy(c),{wrapSelection:function(a,b,c){"undo"===a.toLowerCase()?m["$undoTaBindtaTextElement"+A]():"redo"===a.toLowerCase()?m["$redoTaBindtaTextElement"+A]():(y(a,!1,b),c&&m["reApplyOnSelectorHandlerstaTextElement"+A](),m.displayElements.text[0].focus())},showHtml:m.$eval(o.taShowHtml)||!1}),o.taFocussedClass&&(m.classes.focussed=o.taFocussedClass),o.taTextEditorClass&&(m.classes.textEditor=o.taTextEditorClass),o.taHtmlEditorClass&&(m.classes.htmlEditor=o.taHtmlEditorClass),o.taTextEditorSetup&&(m.setup.textEditorSetup=m.$parent.$eval(o.taTextEditorSetup)),o.taHtmlEditorSetup&&(m.setup.htmlEditorSetup=m.$parent.$eval(o.taHtmlEditorSetup)),m.fileDropHandler=o.taFileDrop?m.$parent.$eval(o.taFileDrop):m.defaultFileDropHandler,w=n[0].innerHTML,n[0].innerHTML="",m.displayElements={forminput:angular.element("<input type='hidden' tabindex='-1' style='display: none;'>"),html:angular.element("<textarea></textarea>"),text:angular.element("<div></div>"),scrollWindow:angular.element("<div class='ta-scroll-window'></div>"),popover:angular.element('<div class="popover fade bottom" style="max-width: none; width: 305px;"></div>'),popoverArrow:angular.element('<div class="arrow"></div>'),popoverContainer:angular.element('<div class="popover-content"></div>'),resize:{overlay:angular.element('<div class="ta-resizer-handle-overlay"></div>'),background:angular.element('<div class="ta-resizer-handle-background"></div>'),anchors:[angular.element('<div class="ta-resizer-handle-corner ta-resizer-handle-corner-tl"></div>'),angular.element('<div class="ta-resizer-handle-corner ta-resizer-handle-corner-tr"></div>'),angular.element('<div class="ta-resizer-handle-corner ta-resizer-handle-corner-bl"></div>'),angular.element('<div class="ta-resizer-handle-corner ta-resizer-handle-corner-br"></div>')],info:angular.element('<div class="ta-resizer-handle-info"></div>')}},m.displayElements.popover.append(m.displayElements.popoverArrow),m.displayElements.popover.append(m.displayElements.popoverContainer),m.displayElements.scrollWindow.append(m.displayElements.popover),m.displayElements.popover.on("mousedown",function(a,b){return b&&angular.extend(a,b),a.preventDefault(),!1
}),m.showPopover=function(a){m.displayElements.popover.css("display","block"),m.reflowPopover(a),i.addClass(m.displayElements.popover,"in"),B(h.find("body"),"click keyup",function(){m.hidePopover()})},m.reflowPopover=function(a){m.displayElements.text[0].offsetHeight-51>a[0].offsetTop?(m.displayElements.popover.css("top",a[0].offsetTop+a[0].offsetHeight+"px"),m.displayElements.popover.removeClass("top").addClass("bottom")):(m.displayElements.popover.css("top",a[0].offsetTop-54+"px"),m.displayElements.popover.removeClass("bottom").addClass("top"));var b=m.displayElements.text[0].offsetWidth-m.displayElements.popover[0].offsetWidth,c=a[0].offsetLeft+a[0].offsetWidth/2-m.displayElements.popover[0].offsetWidth/2;m.displayElements.popover.css("left",Math.max(0,Math.min(b,c))+"px"),m.displayElements.popoverArrow.css("margin-left",Math.min(c,Math.max(0,c-b))-11+"px")},m.hidePopover=function(){var a=function(){m.displayElements.popover.css("display",""),m.displayElements.popoverContainer.attr("style",""),m.displayElements.popoverContainer.attr("class","popover-content")};k.when(i.removeClass(m.displayElements.popover,"in",a)).then(a)},m.displayElements.resize.overlay.append(m.displayElements.resize.background),angular.forEach(m.displayElements.resize.anchors,function(a){m.displayElements.resize.overlay.append(a)}),m.displayElements.resize.overlay.append(m.displayElements.resize.info),m.displayElements.scrollWindow.append(m.displayElements.resize.overlay),m.reflowResizeOverlay=function(a){a=angular.element(a)[0],m.displayElements.resize.overlay.css({display:"block",left:a.offsetLeft-5+"px",top:a.offsetTop-5+"px",width:a.offsetWidth+10+"px",height:a.offsetHeight+10+"px"}),m.displayElements.resize.info.text(a.offsetWidth+" x "+a.offsetHeight)},m.showResizeOverlay=function(a){var b=h.find("body");z=function(c){var d={width:parseInt(a.attr("width")),height:parseInt(a.attr("height")),x:c.clientX,y:c.clientY};(void 0===d.width||isNaN(d.width))&&(d.width=a[0].offsetWidth),(void 0===d.height||isNaN(d.height))&&(d.height=a[0].offsetHeight),m.hidePopover();var e=d.height/d.width,f=function(b){var c={x:Math.max(0,d.width+(b.clientX-d.x)),y:Math.max(0,d.height+(b.clientY-d.y))};if(b.shiftKey){var f=c.y/c.x;c.x=e>f?c.x:c.y/e,c.y=e>f?c.x*e:c.y}el=angular.element(a),el.attr("height",Math.max(0,c.y)),el.attr("width",Math.max(0,c.x)),m.reflowResizeOverlay(a)};b.on("mousemove",f),B(b,"mouseup",function(c){c.preventDefault(),c.stopPropagation(),b.off("mousemove",f),m.showPopover(a)}),c.stopPropagation(),c.preventDefault()},m.displayElements.resize.anchors[3].on("mousedown",z),m.reflowResizeOverlay(a),B(b,"click",function(){m.hideResizeOverlay()})},m.hideResizeOverlay=function(){m.displayElements.resize.anchors[3].off("mousedown",z),m.displayElements.resize.overlay.css("display","")},m.setup.htmlEditorSetup(m.displayElements.html),m.setup.textEditorSetup(m.displayElements.text),m.displayElements.html.attr({id:"taHtmlElement"+A,"ng-show":"showHtml","ta-bind":"ta-bind","ng-model":"html"}),m.displayElements.text.attr({id:"taTextElement"+A,contentEditable:"true","ta-bind":"ta-bind","ng-model":"html"}),m.displayElements.scrollWindow.attr({"ng-hide":"showHtml"}),o.taDefaultWrap&&m.displayElements.text.attr("ta-default-wrap",o.taDefaultWrap),o.taUnsafeSanitizer&&(m.displayElements.text.attr("ta-unsafe-sanitizer",o.taUnsafeSanitizer),m.displayElements.html.attr("ta-unsafe-sanitizer",o.taUnsafeSanitizer)),m.displayElements.scrollWindow.append(m.displayElements.text),n.append(m.displayElements.scrollWindow),n.append(m.displayElements.html),m.displayElements.forminput.attr("name",m._name),n.append(m.displayElements.forminput),o.tabindex&&(n.removeAttr("tabindex"),m.displayElements.text.attr("tabindex",o.tabindex),m.displayElements.html.attr("tabindex",o.tabindex)),o.placeholder&&(m.displayElements.text.attr("placeholder",o.placeholder),m.displayElements.html.attr("placeholder",o.placeholder)),o.taDisabled&&(m.displayElements.text.attr("ta-readonly","disabled"),m.displayElements.html.attr("ta-readonly","disabled"),m.disabled=m.$parent.$eval(o.taDisabled),m.$parent.$watch(o.taDisabled,function(a){m.disabled=a,m.disabled?n.addClass(m.classes.disabled):n.removeClass(m.classes.disabled)})),o.taPaste&&(m._pasteHandler=function(a){return l(o.taPaste)(m.$parent,{$html:a})},m.displayElements.text.attr("ta-paste","_pasteHandler($html)")),a(m.displayElements.scrollWindow)(m),a(m.displayElements.html)(m),m.updateTaBindtaTextElement=m["updateTaBindtaTextElement"+A],m.updateTaBindtaHtmlElement=m["updateTaBindtaHtmlElement"+A],n.addClass("ta-root"),m.displayElements.scrollWindow.addClass("ta-text ta-editor "+m.classes.textEditor),m.displayElements.html.addClass("ta-html ta-editor "+m.classes.htmlEditor),m._actionRunning=!1;var C=!1;if(m.startAction=function(){return m._actionRunning=!0,C=g.rangy.saveSelection(),function(){C&&g.rangy.restoreSelection(C)}},m.endAction=function(){m._actionRunning=!1,C&&g.rangy.removeMarkers(C),C=!1,m.updateSelectedStyles(),m.showHtml||m["updateTaBindtaTextElement"+A]()},u=function(){m.focussed=!0,n.addClass(m.classes.focussed),x.focus(),n.triggerHandler("focus")},m.displayElements.html.on("focus",u),m.displayElements.text.on("focus",u),v=function(a){return m._actionRunning||h[0].activeElement===m.displayElements.html[0]||h[0].activeElement===m.displayElements.text[0]||(n.removeClass(m.classes.focussed),x.unfocus(),b(function(){m._bUpdateSelectedStyles=!1,n.triggerHandler("blur"),m.focussed=!1},0)),a.preventDefault(),!1},m.displayElements.html.on("blur",v),m.displayElements.text.on("blur",v),m.displayElements.text.on("paste",function(a){n.triggerHandler("paste",a)}),m.queryFormatBlockState=function(a){return!m.showHtml&&a.toLowerCase()===h[0].queryCommandValue("formatBlock").toLowerCase()},m.queryCommandState=function(a){return m.showHtml?"":h[0].queryCommandState(a)},m.switchView=function(){m.showHtml=!m.showHtml,i.enabled(!1,m.displayElements.html),i.enabled(!1,m.displayElements.text),m.showHtml?b(function(){return i.enabled(!0,m.displayElements.html),i.enabled(!0,m.displayElements.text),m.displayElements.html[0].focus()},100):b(function(){return i.enabled(!0,m.displayElements.html),i.enabled(!0,m.displayElements.text),m.displayElements.text[0].focus()},100)},o.ngModel){var D=!0;p.$render=function(){if(D){D=!1;var a=m.$parent.$eval(o.ngModel);void 0!==a&&null!==a||!w||""===w||p.$setViewValue(w)}m.displayElements.forminput.val(p.$viewValue),m._elementSelectTriggered||(m.html=p.$viewValue||"")};var E=function(a){return o.required&&p.$setValidity("required",!(!a||""===a.trim())),a};p.$parsers.push(E),p.$formatters.push(E)}else m.displayElements.forminput.val(w),m.html=w;if(m.$watch("html",function(a,b){a!==b&&(o.ngModel&&p.$viewValue!==a&&p.$setViewValue(a),m.displayElements.forminput.val(a))}),o.taTargetToolbars)x=f.registerEditor(m._name,m,o.taTargetToolbars.split(","));else{var F=angular.element('<div text-angular-toolbar name="textAngularToolbar'+A+'">');o.taToolbar&&F.attr("ta-toolbar",o.taToolbar),o.taToolbarClass&&F.attr("ta-toolbar-class",o.taToolbarClass),o.taToolbarGroupClass&&F.attr("ta-toolbar-group-class",o.taToolbarGroupClass),o.taToolbarButtonClass&&F.attr("ta-toolbar-button-class",o.taToolbarButtonClass),o.taToolbarActiveButtonClass&&F.attr("ta-toolbar-active-button-class",o.taToolbarActiveButtonClass),o.taFocussedClass&&F.attr("ta-focussed-class",o.taFocussedClass),n.prepend(F),a(F)(m.$parent),x=f.registerEditor(m._name,m,["textAngularToolbar"+A])}m.$on("$destroy",function(){f.unregisterEditor(m._name)}),m.$on("ta-element-select",function(a,b){x.triggerElementSelect(a,b)&&m["reApplyOnSelectorHandlerstaTextElement"+A]()}),m.$on("ta-drop-event",function(a,c,d,e){m.displayElements.text[0].focus(),e&&e.files&&e.files.length>0?(angular.forEach(e.files,function(a){try{k.when(m.fileDropHandler(a,m.wrapSelection)||m.fileDropHandler!==m.defaultFileDropHandler&&k.when(m.defaultFileDropHandler(a,m.wrapSelection))).then(function(){m["updateTaBindtaTextElement"+A]()})}catch(b){j.error(b)}}),d.preventDefault(),d.stopPropagation()):b(function(){m["updateTaBindtaTextElement"+A]()},0)}),m._bUpdateSelectedStyles=!1,angular.element(window).on("blur",function(){m._bUpdateSelectedStyles=!1,m.focussed=!1}),m.updateSelectedStyles=function(){var a;void 0!==(a=d.getSelectionElement())&&a.parentNode!==m.displayElements.text[0]?x.updateSelectedStyles(angular.element(a)):x.updateSelectedStyles(),m._bUpdateSelectedStyles&&b(m.updateSelectedStyles,200)},q=function(){return m.focussed?void(m._bUpdateSelectedStyles||(m._bUpdateSelectedStyles=!0,m.$apply(function(){m.updateSelectedStyles()}))):void(m._bUpdateSelectedStyles=!1)},m.displayElements.html.on("keydown",q),m.displayElements.text.on("keydown",q),r=function(){m._bUpdateSelectedStyles=!1},m.displayElements.html.on("keyup",r),m.displayElements.text.on("keyup",r),s=function(a,b){b&&angular.extend(a,b),m.$apply(function(){return x.sendKeyCommand(a)?(m._bUpdateSelectedStyles||m.updateSelectedStyles(),a.preventDefault(),!1):void 0})},m.displayElements.html.on("keypress",s),m.displayElements.text.on("keypress",s),t=function(){m._bUpdateSelectedStyles=!1,m.$apply(function(){m.updateSelectedStyles()})},m.displayElements.html.on("mouseup",t),m.displayElements.text.on("mouseup",t)}}}]),q.service("textAngularManager",["taToolExecuteAction","taTools","taRegisterTool",function(a,b,c){var d={},e={};return{registerEditor:function(c,f,g){if(!c||""===c)throw"textAngular Error: An editor requires a name";if(!f)throw"textAngular Error: An editor requires a scope";if(e[c])throw'textAngular Error: An Editor with name "'+c+'" already exists';var h=[];return angular.forEach(g,function(a){d[a]&&h.push(d[a])}),e[c]={scope:f,toolbars:g,_registerToolbar:function(a){this.toolbars.indexOf(a.name)>=0&&h.push(a)},editorFunctions:{disable:function(){angular.forEach(h,function(a){a.disabled=!0})},enable:function(){angular.forEach(h,function(a){a.disabled=!1})},focus:function(){angular.forEach(h,function(a){a._parent=f,a.disabled=!1,a.focussed=!0,f.focussed=!0})},unfocus:function(){angular.forEach(h,function(a){a.disabled=!0,a.focussed=!1}),f.focussed=!1},updateSelectedStyles:function(a){angular.forEach(h,function(b){angular.forEach(b.tools,function(c){c.activeState&&(b._parent=f,c.active=c.activeState(a))})})},sendKeyCommand:function(c){var d=!1;return(c.ctrlKey||c.metaKey)&&angular.forEach(b,function(b,e){if(b.commandKeyCode&&b.commandKeyCode===c.which)for(var g=0;g<h.length;g++)if(void 0!==h[g].tools[e]){a.call(h[g].tools[e],f),d=!0;break}}),d},triggerElementSelect:function(a,c){var d=function(a,b){for(var c=!0,d=0;d<b.length;d++)c=c&&a.attr(b[d]);return c},e=[],g={},i=!1;c=angular.element(c);var j=!1;if(angular.forEach(b,function(a,b){a.onElementSelect&&a.onElementSelect.element&&a.onElementSelect.element.toLowerCase()===c[0].tagName.toLowerCase()&&(!a.onElementSelect.filter||a.onElementSelect.filter(c))&&(j=j||angular.isArray(a.onElementSelect.onlyWithAttrs)&&d(c,a.onElementSelect.onlyWithAttrs),(!a.onElementSelect.onlyWithAttrs||d(c,a.onElementSelect.onlyWithAttrs))&&(g[b]=a))}),j?(angular.forEach(g,function(a,b){a.onElementSelect.onlyWithAttrs&&d(c,a.onElementSelect.onlyWithAttrs)&&e.push({name:b,tool:a})}),e.sort(function(a,b){return b.tool.onElementSelect.onlyWithAttrs.length-a.tool.onElementSelect.onlyWithAttrs.length})):angular.forEach(g,function(a,b){e.push({name:b,tool:a})}),e.length>0)for(var k=0;k<e.length;k++){for(var l=e[k].tool,m=e[k].name,n=0;n<h.length;n++)if(void 0!==h[n].tools[m]){l.onElementSelect.action.call(h[n].tools[m],a,c,f),i=!0;break}if(i)break}return i}}},e[c].editorFunctions},retrieveEditor:function(a){return e[a]},unregisterEditor:function(a){delete e[a]},registerToolbar:function(a){if(!a)throw"textAngular Error: A toolbar requires a scope";if(!a.name||""===a.name)throw"textAngular Error: A toolbar requires a name";if(d[a.name])throw'textAngular Error: A toolbar with name "'+a.name+'" already exists';d[a.name]=a,angular.forEach(e,function(b){b._registerToolbar(a)})},retrieveToolbar:function(a){return d[a]},retrieveToolbarsViaEditor:function(a){var b=[],c=this;return angular.forEach(this.retrieveEditor(a).toolbars,function(a){b.push(c.retrieveToolbar(a))}),b},unregisterToolbar:function(a){delete d[a]},updateToolsDisplay:function(a){var b=this;angular.forEach(a,function(a,c){b.updateToolDisplay(c,a)})},resetToolsDisplay:function(){var a=this;angular.forEach(b,function(b,c){a.resetToolDisplay(c)})},updateToolDisplay:function(a,b){var c=this;angular.forEach(d,function(d,e){c.updateToolbarToolDisplay(e,a,b)})},resetToolDisplay:function(a){var b=this;angular.forEach(d,function(c,d){b.resetToolbarToolDisplay(d,a)})},updateToolbarToolDisplay:function(a,b,c){if(!d[a])throw'textAngular Error: No Toolbar with name "'+a+'" exists';d[a].updateToolDisplay(b,c)},resetToolbarToolDisplay:function(a,c){if(!d[a])throw'textAngular Error: No Toolbar with name "'+a+'" exists';d[a].updateToolDisplay(c,b[c],!0)},removeTool:function(a){delete b[a],angular.forEach(d,function(b){delete b.tools[a];for(var c=0;c<b.toolbar.length;c++){for(var d,e=0;e<b.toolbar[c].length;e++){if(b.toolbar[c][e]===a){d={group:c,index:e};break}if(void 0!==d)break}void 0!==d&&(b.toolbar[d.group].slice(d.index,1),b._$element.children().eq(d.group).children().eq(d.index).remove())}})},addTool:function(a,b,e,f){c(a,b),angular.forEach(d,function(c){c.addTool(a,b,e,f)})},addToolToToolbar:function(a,b,e,f,g){c(a,b),d[e].addTool(a,b,f,g)},refreshEditor:function(a){if(!e[a])throw'textAngular Error: No Editor with name "'+a+'" exists';e[a].scope.updateTaBindtaTextElement(),e[a].scope.$$phase||e[a].scope.$digest()}}}]),q.directive("textAngularToolbar",["$compile","textAngularManager","taOptions","taTools","taToolExecuteAction","$window",function(a,b,c,d,e,f){return{scope:{name:"@"},restrict:"EA",link:function(g,h,i){if(!g.name||""===g.name)throw"textAngular Error: A toolbar requires a name";angular.extend(g,angular.copy(c)),i.taToolbar&&(g.toolbar=g.$parent.$eval(i.taToolbar)),i.taToolbarClass&&(g.classes.toolbar=i.taToolbarClass),i.taToolbarGroupClass&&(g.classes.toolbarGroup=i.taToolbarGroupClass),i.taToolbarButtonClass&&(g.classes.toolbarButton=i.taToolbarButtonClass),i.taToolbarActiveButtonClass&&(g.classes.toolbarButtonActive=i.taToolbarActiveButtonClass),i.taFocussedClass&&(g.classes.focussed=i.taFocussedClass),g.disabled=!0,g.focussed=!1,g._$element=h,h[0].innerHTML="",h.addClass("ta-toolbar "+g.classes.toolbar),g.$watch("focussed",function(){g.focussed?h.addClass(g.classes.focussed):h.removeClass(g.classes.focussed)});var j=function(b,c){var d;if(d=angular.element(b&&b.display?b.display:"<button type='button'>"),d.addClass(b&&b["class"]?b["class"]:g.classes.toolbarButton),d.attr("name",c.name),d.attr("unselectable","on"),d.attr("ng-disabled","isDisabled()"),d.attr("tabindex","-1"),d.attr("ng-click","executeAction()"),d.attr("ng-class","displayActiveToolClass(active)"),b&&b.tooltiptext&&d.attr("title",b.tooltiptext),d.on("mousedown",function(a,b){return b&&angular.extend(a,b),a.preventDefault(),!1}),b&&!b.display&&!c._display&&(d[0].innerHTML="",b.buttontext&&(d[0].innerHTML=b.buttontext),b.iconclass)){var e=angular.element("<i>"),f=d[0].innerHTML;e.addClass(b.iconclass),d[0].innerHTML="",d.append(e),f&&""!==f&&d.append("&nbsp;"+f)}return c._lastToolDefinition=angular.copy(b),a(d)(c)};g.tools={},g._parent={disabled:!0,showHtml:!1,queryFormatBlockState:function(){return!1},queryCommandState:function(){return!1}};var k={$window:f,$editor:function(){return g._parent},isDisabled:function(){return"function"!=typeof this.$eval("disabled")&&this.$eval("disabled")||this.$eval("disabled()")||"html"!==this.name&&this.$editor().showHtml||this.$parent.disabled||this.$editor().disabled},displayActiveToolClass:function(a){return a?g.classes.toolbarButtonActive:""},executeAction:e};angular.forEach(g.toolbar,function(a){var b=angular.element("<div>");b.addClass(g.classes.toolbarGroup),angular.forEach(a,function(a){g.tools[a]=angular.extend(g.$new(!0),d[a],k,{name:a}),g.tools[a].$element=j(d[a],g.tools[a]),b.append(g.tools[a].$element)}),h.append(b)}),g.updateToolDisplay=function(a,b,c){var d=g.tools[a];if(d){if(d._lastToolDefinition&&!c&&(b=angular.extend({},d._lastToolDefinition,b)),null===b.buttontext&&null===b.iconclass&&null===b.display)throw'textAngular Error: Tool Definition for updating "'+a+'" does not have a valid display/iconclass/buttontext value';null===b.buttontext&&delete b.buttontext,null===b.iconclass&&delete b.iconclass,null===b.display&&delete b.display;var e=j(b,d);d.$element.replaceWith(e),d.$element=e}},g.addTool=function(a,b,c,e){g.tools[a]=angular.extend(g.$new(!0),d[a],k,{name:a}),g.tools[a].$element=j(d[a],g.tools[a]);var f;void 0===c&&(c=g.toolbar.length-1),f=angular.element(h.children()[c]),void 0===e?(f.append(g.tools[a].$element),g.toolbar[c][g.toolbar[c].length-1]=a):(f.children().eq(e).after(g.tools[a].$element),g.toolbar[c][e]=a)},b.registerToolbar(g),g.$on("$destroy",function(){b.unregisterToolbar(g.name)})}}}])}()}({},function(){return this}());
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/resources/assets/vendor/textAngular/dist/textAngular.min.js","/resources/assets/vendor/textAngular/dist")

},{"_process":7,"buffer":3}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9sYXJhdmVsLWVsaXhpci1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJyZXNvdXJjZXMvYXNzZXRzL2pzL2FkbWluYXBwLmpzIiwibm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcyIsIm5vZGVfbW9kdWxlcy9sYXJhdmVsLWVsaXhpci1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvbGFyYXZlbC1lbGl4aXItYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnVmZmVyL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvbGliL2I2NC5qcyIsIm5vZGVfbW9kdWxlcy9sYXJhdmVsLWVsaXhpci1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9idWZmZXIvbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJub2RlX21vZHVsZXMvbGFyYXZlbC1lbGl4aXItYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnVmZmVyL25vZGVfbW9kdWxlcy9pcy1hcnJheS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9sYXJhdmVsLWVsaXhpci1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJyZXNvdXJjZXMvYXNzZXRzL2pzL2FkbWluL2FuZ3VsYXIvYmFzaWNkZXRhaWxjb250cm9sbGVyLmpzIiwicmVzb3VyY2VzL2Fzc2V0cy9qcy9hZG1pbi9hbmd1bGFyL2Jpb2NvbnRyb2xsZXIuanMiLCJyZXNvdXJjZXMvYXNzZXRzL2pzL2FkbWluL2FuZ3VsYXIvY29uZmlnY29udHJvbGxlci5qcyIsInJlc291cmNlcy9hc3NldHMvanMvYWRtaW4vYW5ndWxhci9kaXJlY3RpdmVzL2FsZXJ0ZGlyZWN0aXZlLmpzIiwicmVzb3VyY2VzL2Fzc2V0cy9qcy9hZG1pbi9hbmd1bGFyL2RpcmVjdGl2ZXMvYmlvZ3JhcGhpZXMvYmlvZ3JhcGh5LmpzIiwicmVzb3VyY2VzL2Fzc2V0cy9qcy9hZG1pbi9hbmd1bGFyL2RpcmVjdGl2ZXMvY2xvc2Vjb250ZW50ZGlyZWN0aXZlLmpzIiwicmVzb3VyY2VzL2Fzc2V0cy9qcy9hZG1pbi9hbmd1bGFyL2RpcmVjdGl2ZXMvY29uZmlnbWVudS5qcyIsInJlc291cmNlcy9hc3NldHMvanMvYWRtaW4vYW5ndWxhci9kaXJlY3RpdmVzL2NvbmZpZ3VyYXRpb24vY2F0ZWdvcnkuanMiLCJyZXNvdXJjZXMvYXNzZXRzL2pzL2FkbWluL2FuZ3VsYXIvZGlyZWN0aXZlcy9jb250ZW50c2VsZWN0b3IuanMiLCJyZXNvdXJjZXMvYXNzZXRzL2pzL2FkbWluL2FuZ3VsYXIvZGlyZWN0aXZlcy9oYWxsb2RpcmVjdGl2ZS5qcyIsInJlc291cmNlcy9hc3NldHMvanMvYWRtaW4vYW5ndWxhci9kaXJlY3RpdmVzL2hvbWVwYWdlL2hvbWVjYWxscy5qcyIsInJlc291cmNlcy9hc3NldHMvanMvYWRtaW4vYW5ndWxhci9kaXJlY3RpdmVzL3BvcnRmb2xpby9wcm9qZWN0LmpzIiwicmVzb3VyY2VzL2Fzc2V0cy9qcy9hZG1pbi9hbmd1bGFyL2RpcmVjdGl2ZXMvcG9ydGZvbGlvL3Byb2plY3RnYWxsZXJ5LmpzIiwicmVzb3VyY2VzL2Fzc2V0cy9qcy9hZG1pbi9hbmd1bGFyL2RpcmVjdGl2ZXMvcG9ydGZvbGlvL3Byb2plY3RsaXN0LmpzIiwicmVzb3VyY2VzL2Fzc2V0cy9qcy9hZG1pbi9hbmd1bGFyL2RpcmVjdGl2ZXMvcG9ydGZvbGlvL3Byb2plY3R3aXphcmQuanMiLCJyZXNvdXJjZXMvYXNzZXRzL2pzL2FkbWluL2FuZ3VsYXIvZGlyZWN0aXZlcy9wcm9maWxlbWVudS5qcyIsInJlc291cmNlcy9hc3NldHMvanMvYWRtaW4vYW5ndWxhci9kaXJlY3RpdmVzL3Jlc3VtZS9lZHVjYXRpb24uanMiLCJyZXNvdXJjZXMvYXNzZXRzL2pzL2FkbWluL2FuZ3VsYXIvZGlyZWN0aXZlcy9yZXN1bWUvZXhwZXJpZW5jZS5qcyIsInJlc291cmNlcy9hc3NldHMvanMvYWRtaW4vYW5ndWxhci9kaXJlY3RpdmVzL3Jlc3VtZS9pbnRlcmVzdC5qcyIsInJlc291cmNlcy9hc3NldHMvanMvYWRtaW4vYW5ndWxhci9kaXJlY3RpdmVzL3Jlc3VtZS9sYW5ndWFnZS5qcyIsInJlc291cmNlcy9hc3NldHMvanMvYWRtaW4vYW5ndWxhci9kaXJlY3RpdmVzL3Jlc3VtZS9yZXN1bWVkaXJlY3RpdmUuanMiLCJyZXNvdXJjZXMvYXNzZXRzL2pzL2FkbWluL2FuZ3VsYXIvZGlyZWN0aXZlcy9yZXN1bWUvcmVzdW1lZWRpdGZvcm0uanMiLCJyZXNvdXJjZXMvYXNzZXRzL2pzL2FkbWluL2FuZ3VsYXIvZGlyZWN0aXZlcy9yZXN1bWUvcmVzdW1lZm9ybS5qcyIsInJlc291cmNlcy9hc3NldHMvanMvYWRtaW4vYW5ndWxhci9kaXJlY3RpdmVzL3Jlc3VtZS9yZXN1bWVsaXN0LmpzIiwicmVzb3VyY2VzL2Fzc2V0cy9qcy9hZG1pbi9hbmd1bGFyL2RpcmVjdGl2ZXMvcmVzdW1lL3Jlc3VtZXNlbGVjdG9yLmpzIiwicmVzb3VyY2VzL2Fzc2V0cy9qcy9hZG1pbi9hbmd1bGFyL2RpcmVjdGl2ZXMvcmVzdW1lL3NlY3Rpb25zLmpzIiwicmVzb3VyY2VzL2Fzc2V0cy9qcy9hZG1pbi9hbmd1bGFyL2RpcmVjdGl2ZXMvcmVzdW1lL3NraWxsLmpzIiwicmVzb3VyY2VzL2Fzc2V0cy9qcy9hZG1pbi9hbmd1bGFyL2RpcmVjdGl2ZXMvc2FsZWFibGViYXNpYy5qcyIsInJlc291cmNlcy9hc3NldHMvanMvYWRtaW4vYW5ndWxhci9kaXJlY3RpdmVzL3NhbGVhYmxlZGV0YWlscy5qcyIsInJlc291cmNlcy9hc3NldHMvanMvYWRtaW4vYW5ndWxhci9kaXJlY3RpdmVzL3NhbGVhYmxlZGV0YWlsc2xpc3QuanMiLCJyZXNvdXJjZXMvYXNzZXRzL2pzL2FkbWluL2FuZ3VsYXIvZGlyZWN0aXZlcy9zYWxlYWJsZXByaWNlc2xpc3QuanMiLCJyZXNvdXJjZXMvYXNzZXRzL2pzL2FkbWluL2FuZ3VsYXIvaG9tZWNvbnRyb2xsZXIuanMiLCJyZXNvdXJjZXMvYXNzZXRzL2pzL2FkbWluL2FuZ3VsYXIvcG9ydGZvbGlvY29udHJvbGxlci5qcyIsInJlc291cmNlcy9hc3NldHMvanMvYWRtaW4vYW5ndWxhci9yZXN1bWVjb250cm9sbGVyLmpzIiwicmVzb3VyY2VzL2Fzc2V0cy9qcy9hZG1pbi9hbmd1bGFyL3NhbGVhYmxlYWxsZGV0YWlsc2NvbnRyb2xsZXIuanMiLCJyZXNvdXJjZXMvYXNzZXRzL2pzL2FkbWluL2FuZ3VsYXIvc2FsZWFibGVjb250cm9sbGVyLmpzIiwicmVzb3VyY2VzL2Fzc2V0cy9qcy9hZG1pbi9hbmd1bGFyL3NhbGVhYmxlZGV0YWlsY29udHJvbGxlci5qcyIsInJlc291cmNlcy9hc3NldHMvanMvYWRtaW4vYW5ndWxhci9zYWxlYWJsZXByaWNlc2NvbnRyb2xsZXIuanMiLCJyZXNvdXJjZXMvYXNzZXRzL2pzL2FkbWluL2FuZ3VsYXIvc2VydmljZXMvYmlvZ3JhcGh5c2VydmljZS5qcyIsInJlc291cmNlcy9hc3NldHMvanMvYWRtaW4vYW5ndWxhci9zZXJ2aWNlcy9jYXRlZ29yeS5qcyIsInJlc291cmNlcy9hc3NldHMvanMvYWRtaW4vYW5ndWxhci9zZXJ2aWNlcy9jYXRlZ29yeWhlbHBlci5qcyIsInJlc291cmNlcy9hc3NldHMvanMvYWRtaW4vYW5ndWxhci9zZXJ2aWNlcy9lZHVjYXRpb24uanMiLCJyZXNvdXJjZXMvYXNzZXRzL2pzL2FkbWluL2FuZ3VsYXIvc2VydmljZXMvZXhwZXJpZW5jZS5qcyIsInJlc291cmNlcy9hc3NldHMvanMvYWRtaW4vYW5ndWxhci9zZXJ2aWNlcy9maWxlcHJvY2Vzc29yLmpzIiwicmVzb3VyY2VzL2Fzc2V0cy9qcy9hZG1pbi9hbmd1bGFyL3NlcnZpY2VzL2Zvcm1hdGZpbHRlcnNlcnZpY2UuanMiLCJyZXNvdXJjZXMvYXNzZXRzL2pzL2FkbWluL2FuZ3VsYXIvc2VydmljZXMvZ2FsbGVyeS5qcyIsInJlc291cmNlcy9hc3NldHMvanMvYWRtaW4vYW5ndWxhci9zZXJ2aWNlcy9oZWxwZXJzLmpzIiwicmVzb3VyY2VzL2Fzc2V0cy9qcy9hZG1pbi9hbmd1bGFyL3NlcnZpY2VzL2hvbWVjYWxsb3V0LmpzIiwicmVzb3VyY2VzL2Fzc2V0cy9qcy9hZG1pbi9hbmd1bGFyL3NlcnZpY2VzL2ludGVyZXN0LmpzIiwicmVzb3VyY2VzL2Fzc2V0cy9qcy9hZG1pbi9hbmd1bGFyL3NlcnZpY2VzL2xhbmd1YWdlLmpzIiwicmVzb3VyY2VzL2Fzc2V0cy9qcy9hZG1pbi9hbmd1bGFyL3NlcnZpY2VzL21lc3NhZ2VzZXJ2aWNlLmpzIiwicmVzb3VyY2VzL2Fzc2V0cy9qcy9hZG1pbi9hbmd1bGFyL3NlcnZpY2VzL25ld3Bhc3N3b3Jkc2VydmljZS5qcyIsInJlc291cmNlcy9hc3NldHMvanMvYWRtaW4vYW5ndWxhci9zZXJ2aWNlcy9wcm9maWxlc2VydmljZS5qcyIsInJlc291cmNlcy9hc3NldHMvanMvYWRtaW4vYW5ndWxhci9zZXJ2aWNlcy9wcm9qZWN0LmpzIiwicmVzb3VyY2VzL2Fzc2V0cy9qcy9hZG1pbi9hbmd1bGFyL3NlcnZpY2VzL3Jlc3VtZWhlbHBlci5qcyIsInJlc291cmNlcy9hc3NldHMvanMvYWRtaW4vYW5ndWxhci9zZXJ2aWNlcy9yZXN1bWVzZXJ2aWNlLmpzIiwicmVzb3VyY2VzL2Fzc2V0cy9qcy9hZG1pbi9hbmd1bGFyL3NlcnZpY2VzL3NhbGVhYmxlZGV0YWlscy5qcyIsInJlc291cmNlcy9hc3NldHMvanMvYWRtaW4vYW5ndWxhci9zZXJ2aWNlcy9zYWxlYWJsZXByaWNlLmpzIiwicmVzb3VyY2VzL2Fzc2V0cy9qcy9hZG1pbi9hbmd1bGFyL3NlcnZpY2VzL3NhbGVhYmxlc2VydmljZS5qcyIsInJlc291cmNlcy9hc3NldHMvanMvYWRtaW4vYW5ndWxhci9zZXJ2aWNlcy9za2lsbC5qcyIsInJlc291cmNlcy9hc3NldHMvanMvYWRtaW4vYW5ndWxhci9zZXJ2aWNlcy90aGVwYWNrZXIuanMiLCJyZXNvdXJjZXMvYXNzZXRzL2pzL2FkbWluL2FuZ3VsYXIvc2VydmljZXMvdXNlcmNvbnRlbnR0eXBlc2VydmljZS5qcyIsInJlc291cmNlcy9hc3NldHMvanMvYWRtaW4vYW5ndWxhci9zZXJ2aWNlcy91c2Vyc2VydmljZS5qcyIsInJlc291cmNlcy9hc3NldHMvanMvYWRtaW4vYW5ndWxhci91c2VyY29udHJvbGxlci5qcyIsInJlc291cmNlcy9hc3NldHMvanMvY29uZmlnL21lc3NhZ2VzLmpzIiwicmVzb3VyY2VzL2Fzc2V0cy92ZW5kb3IvYW5ndWxhci1tZXNzYWdlcy9hbmd1bGFyLW1lc3NhZ2VzLm1pbi5qcyIsInJlc291cmNlcy9hc3NldHMvdmVuZG9yL2FuZ3VsYXItcmVzdG1vZC9kaXN0L2FuZ3VsYXItcmVzdG1vZC1idW5kbGUuanMiLCJyZXNvdXJjZXMvYXNzZXRzL3ZlbmRvci9hbmd1bGFyLXJlc3Rtb2QvZGlzdC9zdHlsZXMvYW1zLm1pbi5qcyIsInJlc291cmNlcy9hc3NldHMvdmVuZG9yL2FuZ3VsYXIvYW5ndWxhci1pbmRleC5qcyIsInJlc291cmNlcy9hc3NldHMvdmVuZG9yL2FuZ3VsYXIvYW5ndWxhci5taW4uanMiLCJyZXNvdXJjZXMvYXNzZXRzL3ZlbmRvci9hbmd1bGFyX2FuaW1hdGUvYW5ndWxhci1hbmltYXRlLm1pbi5qcyIsInJlc291cmNlcy9hc3NldHMvdmVuZG9yL2FuZ3VsYXJqcy1maWxlLXVwbG9hZC9hbmd1bGFyLWZpbGUtdXBsb2FkLXNoaW0ubWluLmpzIiwicmVzb3VyY2VzL2Fzc2V0cy92ZW5kb3IvYW5ndWxhcmpzLWZpbGUtdXBsb2FkL2FuZ3VsYXItZmlsZS11cGxvYWQubWluLmpzIiwicmVzb3VyY2VzL2Fzc2V0cy92ZW5kb3IvbmctZmFiLWZvcm0vZGlzdC9uZy1mYWItZm9ybS5taW4uanMiLCJyZXNvdXJjZXMvYXNzZXRzL3ZlbmRvci90ZXh0QW5ndWxhci9kaXN0L3RleHRBbmd1bGFyLXJhbmd5Lm1pbi5qcyIsInJlc291cmNlcy9hc3NldHMvdmVuZG9yL3RleHRBbmd1bGFyL2Rpc3QvdGV4dEFuZ3VsYXItc2FuaXRpemUubWluLmpzIiwicmVzb3VyY2VzL2Fzc2V0cy92ZW5kb3IvdGV4dEFuZ3VsYXIvZGlzdC90ZXh0QW5ndWxhci5taW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDblBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDci9SQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDcHlDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQzVIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNwRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ3pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUMvREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDbkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDM0dBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ2pGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNySEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDM0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDOUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNqRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDbkhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDN01BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQzFGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUMxRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUN6SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDMUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUN6Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQzlEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUMxRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ2hIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ2pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQzNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUN6REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ3ZDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNyREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDdERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQzFrSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUMxUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ2hDQTtBQUNBOzs7OztBQ0RBO0FBQ0E7Ozs7O0FDREE7Ozs7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEpRdWVyeSA9IHJlcXVpcmUoJ2pxdWVyeScpO1xudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCcuLy4uL3ZlbmRvci9hbmd1bGFyL2FuZ3VsYXItaW5kZXguanMnKTtcbnZhciBhbmd1bGFyX3Jlc3Rtb2QgPSByZXF1aXJlKCcuLy4uL3ZlbmRvci9hbmd1bGFyLXJlc3Rtb2QvZGlzdC9hbmd1bGFyLXJlc3Rtb2QtYnVuZGxlLmpzJyk7XG52YXIgcmVzX3N0eWxlID0gcmVxdWlyZSgnLi8uLi92ZW5kb3IvYW5ndWxhci1yZXN0bW9kL2Rpc3Qvc3R5bGVzL2Ftcy5taW4uanMnKTtcbnZhciBzdGNfbWVzc2FnZXMgPSByZXF1aXJlKCcuL2NvbmZpZy9tZXNzYWdlcy5qcycpO1xuXG5cbnZhciBuZ0ZhYkZvcm0gPSByZXF1aXJlKCcuLy4uL3ZlbmRvci9uZy1mYWItZm9ybS9kaXN0L25nLWZhYi1mb3JtLm1pbi5qcycpO1xudmFyIG5nTWVzc2FnZXMgPSByZXF1aXJlKCcuLy4uL3ZlbmRvci9hbmd1bGFyLW1lc3NhZ2VzL2FuZ3VsYXItbWVzc2FnZXMubWluLmpzJyk7XG5cbnZhciB0ZXh0QW5ndWxhciA9IHJlcXVpcmUoJy4vLi4vdmVuZG9yL3RleHRBbmd1bGFyL2Rpc3QvdGV4dEFuZ3VsYXItcmFuZ3kubWluLmpzJyk7XG52YXIgc2FuaXRpemUgPSByZXF1aXJlKCcuLy4uL3ZlbmRvci90ZXh0QW5ndWxhci9kaXN0L3RleHRBbmd1bGFyLXNhbml0aXplLm1pbi5qcycpO1xudmFyIHJhbmd5ID0gcmVxdWlyZSgnLi8uLi92ZW5kb3IvdGV4dEFuZ3VsYXIvZGlzdC90ZXh0QW5ndWxhci5taW4uanMnKTtcblxudmFyIHVwbG9hZExpYnAxID0gcmVxdWlyZSgnLi4vdmVuZG9yL2FuZ3VsYXJqcy1maWxlLXVwbG9hZC9hbmd1bGFyLWZpbGUtdXBsb2FkLXNoaW0ubWluLmpzJyk7XG52YXIgdXBsb2FkTGlicDIgPSByZXF1aXJlKCcuLi92ZW5kb3IvYW5ndWxhcmpzLWZpbGUtdXBsb2FkL2FuZ3VsYXItZmlsZS11cGxvYWQubWluLmpzJyk7XG5cbnZhciBuZ2FuaW1hdGUgPSByZXF1aXJlKCcuLy4uL3ZlbmRvci9hbmd1bGFyX2FuaW1hdGUvYW5ndWxhci1hbmltYXRlLm1pbi5qcycpO1xuXG5cbnZhciBwcmZYeXpBcHAgPSBhbmd1bGFyLm1vZHVsZSgncHJmWHl6QXBwJyxbJ3Jlc3Rtb2QnLCduZ0ZhYkZvcm0nLCduZ01lc3NhZ2VzJyxcbiAgICAndGV4dEFuZ3VsYXInLCdhbmd1bGFyRmlsZVVwbG9hZCcsJ25nQW5pbWF0ZSddKTtcblxucHJmWHl6QXBwLmNvbmZpZyhbJ3Jlc3Rtb2RQcm92aWRlcicsJyRodHRwUHJvdmlkZXInLCduZ0ZhYkZvcm1Qcm92aWRlcicsZnVuY3Rpb24ocmVzdG1vZFByb3ZpZGVyLCAkaHR0cFByb3ZpZGVyLG5nRmFiRm9ybVByb3ZpZGVyKSB7XG4gICAgcmVzdG1vZFByb3ZpZGVyLnJlYmFzZSgnQU1TQXBpJyk7XG4gICAgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbltcIlgtUmVxdWVzdGVkLVdpdGhcIl0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG4gICAgcmVzdG1vZFByb3ZpZGVyLnJlYmFzZSgnRGVmYXVsdFBhY2tlcicpO1xuXG4gICAgbmdGYWJGb3JtUHJvdmlkZXIuZXh0ZW5kQ29uZmlnKHtcbiAgICAgICAgdmFsaWRhdGlvbnNUZW1wbGF0ZSA6ICcuLi8uLi9qcy9hZG1pbi9hbmd1bGFyL3RlbXBsYXRlcy9jdXN0b21WYWxpZGF0aW9uVGVtcGxhdGUuaHRtbCdcbiAgICAgICAgLyosc2V0Rm9ybURpcnR5T25TdWJtaXQ6IHRydWUqL1xuICAgIH0pO1xuXG4gICAgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMucHVzaChmdW5jdGlvbigkcSwkcm9vdFNjb3BlLCR0aW1lb3V0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAncmVxdWVzdCc6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgICAgICAgICRyb290U2NvcGUuc2hvd1N5c3RlbUFsZXJ0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zaG93U3Bpbm5lciA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICdyZXNwb25zZSc6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zaG93U3Bpbm5lciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAncmVxdWVzdEVycm9yJzpmdW5jdGlvbihyZWplY3Rpb24pe1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlamVjdGlvbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZWplY3Rpb24pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdyZXNwb25zZUVycm9yJzpmdW5jdGlvbihyZWplY3Rpb24pe1xuXG4gICAgICAgICAgICAgICAgdmFyIHN0YXR1cyA9IHJlamVjdGlvbi5zdGF0dXM7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChzdGF0dXMpe1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQwMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc2hvd1NwaW5uZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc2hvd1N5c3RlbUFsZXJ0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3lzdGVtQWxlcnQgPSBcIkhhIGNhZHVjYWRvIHR1IHNlc2nDs24uIERlYmVzIGluZ3Jlc2FyIG51ZXZhbWVudGUhXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSBcIi9hdXRoL2xvZ291dFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSw0MDAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDUwMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc2hvd1NwaW5uZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zaG93U3lzdGVtQWxlcnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sMzAwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnNob3dTeXN0ZW1BbGVydCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN5c3RlbUFsZXJ0ID0gXCJWYXlhISA6KCBIdWJvIHVuIHByb2JsZW1hIGVuIGxhIHJlc3B1ZXN0YSBkZWwgc2Vydmlkb3IuIDxicj5cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlBvciBmYXZvciBpbnRlbnRhIGxhIGFjY2nDs24gbnVldmFtZW50ZSBvIGNvbnRhY3RhIGFsIEFkbWluaXN0cmFkb3JcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQwNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc2hvd1NwaW5uZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zaG93U3lzdGVtQWxlcnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sMzAwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnNob3dTeXN0ZW1BbGVydCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN5c3RlbUFsZXJ0ID0gXCJWYXlhISA6KCBObyBzZSBlbmNvbnRyw7MgZWwgc2VydmljaW8gcXVlIHJlcXVpZXJlcy4gPGJyPlwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiUG9yIGZhdm9yIGludGVudGEgbGEgYWNjacOzbiBudWV2YW1lbnRlIG8gY29udGFjdGEgYWwgQWRtaW5pc3RyYWRvclwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIC8qY2FzZSA0MTM6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyRyb290U2NvcGUubWVzc2FnZVR5cGUgPSAnZGFuZ2VyJztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vJHJvb3RTY29wZS5maWxlVG9vTGFyZ2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8kcm9vdFNjb3BlLmZpbGVUb29MYXJnZU1lc3NhZ2UgPSBcIkVzdMOhIGludGVudGFuZG8gc3ViaXIgdW4gYXJjaGl2byBkZW1hc2lhZG8gcGVzYWRvLiBFbCBhcmNoaXZvIG5vIGRlYmUgc3VwZXJhciBsb3MgNU1CXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydChcIkVzdMOhIGludGVudGFuZG8gc3ViaXIgdW4gYXJjaGl2byBkZW1hc2lhZG8gcGVzYWRvLiBFbCBhcmNoaXZvIG5vIGRlYmUgc3VwZXJhciBsb3MgNU1CXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhazsqL1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0IDpcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc2hvd1NwaW5uZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zaG93U3lzdGVtQWxlcnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sMzAwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnNob3dTeXN0ZW1BbGVydCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN5c3RlbUFsZXJ0ID0gXCJTZSBkZXRlY3TDsyB1biBwcm9ibGVtYSBkZSBjb25leGnDs24uIDxicj5cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlBvciBmYXZvciBjb21wcnVlYmEgcXVlIGVzdMOhcyBjb25lY3RhZGEvbyBhIHVuYSByZWQuIFNpIHBlcnNpc3RlbiBsb3MgcHJvYmxlbWFzLCA8YnI+IHBvciBmYXZvciBjb250YWN0YSBhbCBBZG1pbmlzdHJhZG9yLlwiO1xuXG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZWplY3Rpb24pO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSk7XG5cbn1dKTtcblxudmFyIGhvbWVDb250cm9sbGVyID0gcmVxdWlyZSgnLi9hZG1pbi9hbmd1bGFyL2hvbWVjb250cm9sbGVyJyk7XG52YXIgYmlvQ29udHJvbGxlciA9IHJlcXVpcmUoJy4vYWRtaW4vYW5ndWxhci9iaW9jb250cm9sbGVyJyk7XG52YXIgdXNlckNvbnRyb2xsZXIgPSByZXF1aXJlKCcuL2FkbWluL2FuZ3VsYXIvdXNlcmNvbnRyb2xsZXInKTtcbnZhciBjb25maWdDb250cm9sbGVyID0gcmVxdWlyZSgnLi9hZG1pbi9hbmd1bGFyL2NvbmZpZ2NvbnRyb2xsZXInKTtcbnZhciBzYWxlYWJsZUNvbnRyb2xsZXIgPSByZXF1aXJlKCcuL2FkbWluL2FuZ3VsYXIvc2FsZWFibGVjb250cm9sbGVyJyk7XG52YXIgc2FsZWFibGVEZXRhaWxDb250cm9sbGVyID0gcmVxdWlyZSgnLi9hZG1pbi9hbmd1bGFyL3NhbGVhYmxlZGV0YWlsY29udHJvbGxlcicpO1xudmFyIHNhbGVhYmxlQmFzaWNDb250cm9sbGVyID0gcmVxdWlyZSgnLi9hZG1pbi9hbmd1bGFyL2Jhc2ljZGV0YWlsY29udHJvbGxlcicpO1xudmFyIHNhbGVhYmxlQWxsRGV0YWlsc0NvbnRyb2xsZXIgPSByZXF1aXJlKCcuL2FkbWluL2FuZ3VsYXIvc2FsZWFibGVhbGxkZXRhaWxzY29udHJvbGxlcicpO1xudmFyIHNhbGVhYmxlUHJpY2VDb250cm9sbGVyID0gcmVxdWlyZSgnLi9hZG1pbi9hbmd1bGFyL3NhbGVhYmxlcHJpY2VzY29udHJvbGxlcicpO1xuXG52YXIgcmVzdW1lQ29udHJvbGxlciA9IHJlcXVpcmUoJy4vYWRtaW4vYW5ndWxhci9yZXN1bWVjb250cm9sbGVyJyk7XG52YXIgcG9ydGZvbGlvQ29udHJvbGxlciA9IHJlcXVpcmUoJy4vYWRtaW4vYW5ndWxhci9wb3J0Zm9saW9jb250cm9sbGVyJyk7XG52YXIgbWVzc2FnZVNlcnZpY2UgPSByZXF1aXJlKCcuL2FkbWluL2FuZ3VsYXIvc2VydmljZXMvbWVzc2FnZXNlcnZpY2UnKTtcbnZhciB1c2VyU2VydmljZSA9IHJlcXVpcmUoJy4vYWRtaW4vYW5ndWxhci9zZXJ2aWNlcy91c2Vyc2VydmljZScpO1xudmFyIHVzZXJDb250ZW50VHlwZVNlcnZpY2UgPSByZXF1aXJlKCcuL2FkbWluL2FuZ3VsYXIvc2VydmljZXMvdXNlcmNvbnRlbnR0eXBlc2VydmljZScpO1xudmFyIHByb2ZpbGVTZXJ2aWNlID0gcmVxdWlyZSgnLi9hZG1pbi9hbmd1bGFyL3NlcnZpY2VzL3Byb2ZpbGVzZXJ2aWNlJyk7XG52YXIgc2FsZWFibGVTZXJ2aWNlID0gcmVxdWlyZSgnLi9hZG1pbi9hbmd1bGFyL3NlcnZpY2VzL3NhbGVhYmxlc2VydmljZScpO1xudmFyIGJpb1NlcnZpY2UgPSByZXF1aXJlKCcuL2FkbWluL2FuZ3VsYXIvc2VydmljZXMvYmlvZ3JhcGh5c2VydmljZScpO1xudmFyIHRoZVBhY2tlciA9IHJlcXVpcmUoJy4vYWRtaW4vYW5ndWxhci9zZXJ2aWNlcy90aGVwYWNrZXInKTtcbnZhciBzYWxlYWJsZURldGFpbFNlcnZpY2UgPSByZXF1aXJlKCcuL2FkbWluL2FuZ3VsYXIvc2VydmljZXMvc2FsZWFibGVkZXRhaWxzJyk7XG52YXIgc2FsZWFibGVQcmljZVNlcnZpY2UgPSByZXF1aXJlKCcuL2FkbWluL2FuZ3VsYXIvc2VydmljZXMvc2FsZWFibGVwcmljZScpO1xudmFyIG5ld1Bhc3N3b3JkID0gcmVxdWlyZSgnLi9hZG1pbi9hbmd1bGFyL3NlcnZpY2VzL25ld3Bhc3N3b3Jkc2VydmljZScpO1xudmFyIG51bWJlckZvcm1hdCA9IHJlcXVpcmUoJy4vYWRtaW4vYW5ndWxhci9zZXJ2aWNlcy9mb3JtYXRmaWx0ZXJzZXJ2aWNlJyk7XG52YXIgZmlsZVByb2Nlc3NvciA9IHJlcXVpcmUoJy4vYWRtaW4vYW5ndWxhci9zZXJ2aWNlcy9maWxlcHJvY2Vzc29yJyk7XG52YXIgcmVzdW1lU2VydmljZSA9IHJlcXVpcmUoJy4vYWRtaW4vYW5ndWxhci9zZXJ2aWNlcy9yZXN1bWVzZXJ2aWNlJyk7XG52YXIgcmVzdW1lSGVscGVyID0gcmVxdWlyZSgnLi9hZG1pbi9hbmd1bGFyL3NlcnZpY2VzL3Jlc3VtZWhlbHBlcicpO1xudmFyIGNhdGVnb3J5SGVscGVyID0gcmVxdWlyZSgnLi9hZG1pbi9hbmd1bGFyL3NlcnZpY2VzL2NhdGVnb3J5aGVscGVyJyk7XG52YXIgZXhwZXJpZW5jZVNlcnZpY2UgPSByZXF1aXJlKCcuL2FkbWluL2FuZ3VsYXIvc2VydmljZXMvZXhwZXJpZW5jZScpO1xudmFyIGhlbHBlcnNTZXJ2aWNlID0gcmVxdWlyZSgnLi9hZG1pbi9hbmd1bGFyL3NlcnZpY2VzL2hlbHBlcnMnKTtcbnZhciBlZHVjYXRpb25TZXJ2aWNlID0gcmVxdWlyZSgnLi9hZG1pbi9hbmd1bGFyL3NlcnZpY2VzL2VkdWNhdGlvbicpO1xudmFyIHNraWxsU2VydmljZSA9IHJlcXVpcmUoJy4vYWRtaW4vYW5ndWxhci9zZXJ2aWNlcy9za2lsbCcpO1xudmFyIGxhbmd1YWdlU2VydmljZSA9IHJlcXVpcmUoJy4vYWRtaW4vYW5ndWxhci9zZXJ2aWNlcy9sYW5ndWFnZScpO1xudmFyIGludGVyZXN0U2VydmljZSA9IHJlcXVpcmUoJy4vYWRtaW4vYW5ndWxhci9zZXJ2aWNlcy9pbnRlcmVzdCcpO1xudmFyIGNhdGVnb3J5U2VydmljZSA9IHJlcXVpcmUoJy4vYWRtaW4vYW5ndWxhci9zZXJ2aWNlcy9jYXRlZ29yeScpO1xudmFyIHByb2plY3RTZXJ2aWNlID0gcmVxdWlyZSgnLi9hZG1pbi9hbmd1bGFyL3NlcnZpY2VzL3Byb2plY3QnKTtcbnZhciBnYWxsZXJ5U2VydmljZSA9IHJlcXVpcmUoJy4vYWRtaW4vYW5ndWxhci9zZXJ2aWNlcy9nYWxsZXJ5Jyk7XG52YXIgaG9tZUNhbGxvdXRTZXJ2aWNlID0gcmVxdWlyZSgnLi9hZG1pbi9hbmd1bGFyL3NlcnZpY2VzL2hvbWVjYWxsb3V0Jyk7XG5cbnZhciBhbGVydERpcmVjdGl2ZSA9IHJlcXVpcmUoJy4vYWRtaW4vYW5ndWxhci9kaXJlY3RpdmVzL2FsZXJ0ZGlyZWN0aXZlJyk7XG52YXIgY2xvc2VDb250ZW50RGlyZWN0aXZlID0gcmVxdWlyZSgnLi9hZG1pbi9hbmd1bGFyL2RpcmVjdGl2ZXMvY2xvc2Vjb250ZW50ZGlyZWN0aXZlJyk7XG52YXIgY29udGVudFNlbGVjdG9yRGlyZWN0aXZlID0gcmVxdWlyZSgnLi9hZG1pbi9hbmd1bGFyL2RpcmVjdGl2ZXMvY29udGVudHNlbGVjdG9yJyk7XG52YXIgcHJvZGlsZU1lbnVEaXJlY3RpdmUgPSByZXF1aXJlKCcuL2FkbWluL2FuZ3VsYXIvZGlyZWN0aXZlcy9wcm9maWxlbWVudScpO1xudmFyIGNvbmZpZ01lbnVEaXJlY3RpdmUgPSByZXF1aXJlKCcuL2FkbWluL2FuZ3VsYXIvZGlyZWN0aXZlcy9jb25maWdtZW51Jyk7XG52YXIgY2F0ZWdvcnlEaXJlY3RpdmUgPSByZXF1aXJlKCcuL2FkbWluL2FuZ3VsYXIvZGlyZWN0aXZlcy9jb25maWd1cmF0aW9uL2NhdGVnb3J5Jyk7XG52YXIgcHJvamVjdExpc3REaXJlY3RpdmUgPSByZXF1aXJlKCcuL2FkbWluL2FuZ3VsYXIvZGlyZWN0aXZlcy9wb3J0Zm9saW8vcHJvamVjdGxpc3QnKTtcbnZhciBwcm9qZWN0V2l6YXJkRGlyZWN0aXZlID0gcmVxdWlyZSgnLi9hZG1pbi9hbmd1bGFyL2RpcmVjdGl2ZXMvcG9ydGZvbGlvL3Byb2plY3R3aXphcmQnKTtcbnZhciBwcm9qZWN0RGlyZWN0aXZlID0gcmVxdWlyZSgnLi9hZG1pbi9hbmd1bGFyL2RpcmVjdGl2ZXMvcG9ydGZvbGlvL3Byb2plY3QnKTtcbnZhciBwcm9qZWN0R2FsbGVyeURpcmVjdGl2ZSA9IHJlcXVpcmUoJy4vYWRtaW4vYW5ndWxhci9kaXJlY3RpdmVzL3BvcnRmb2xpby9wcm9qZWN0Z2FsbGVyeScpO1xudmFyIGhvbWVQYWdlRGlyZWN0aXZlID0gcmVxdWlyZSgnLi9hZG1pbi9hbmd1bGFyL2RpcmVjdGl2ZXMvaG9tZXBhZ2UvaG9tZWNhbGxzJyk7XG5cbnZhciByZXN1bWVTZWxlY3RvckRpcmVjdGl2ZSA9IHJlcXVpcmUoJy4vYWRtaW4vYW5ndWxhci9kaXJlY3RpdmVzL3Jlc3VtZS9yZXN1bWVzZWxlY3RvcicpO1xudmFyIHJlc3VtZURpcmVjdGl2ZSA9IHJlcXVpcmUoJy4vYWRtaW4vYW5ndWxhci9kaXJlY3RpdmVzL3Jlc3VtZS9yZXN1bWVkaXJlY3RpdmUnKTtcbnZhciByZXN1bWVFZGl0Rm9ybSA9IHJlcXVpcmUoJy4vYWRtaW4vYW5ndWxhci9kaXJlY3RpdmVzL3Jlc3VtZS9yZXN1bWVlZGl0Zm9ybScpO1xudmFyIHJlc3VtZUZvcm0gPSByZXF1aXJlKCcuL2FkbWluL2FuZ3VsYXIvZGlyZWN0aXZlcy9yZXN1bWUvcmVzdW1lZm9ybScpO1xudmFyIHJlc3VtZUV4cGVyaWVuY2UgPSByZXF1aXJlKCcuL2FkbWluL2FuZ3VsYXIvZGlyZWN0aXZlcy9yZXN1bWUvZXhwZXJpZW5jZScpO1xudmFyIHJlc3VtZVNlY3Rpb25zID0gcmVxdWlyZSgnLi9hZG1pbi9hbmd1bGFyL2RpcmVjdGl2ZXMvcmVzdW1lL3NlY3Rpb25zJyk7XG52YXIgcmVzdW1lRWR1Y2F0aW9uID0gcmVxdWlyZSgnLi9hZG1pbi9hbmd1bGFyL2RpcmVjdGl2ZXMvcmVzdW1lL2VkdWNhdGlvbicpO1xudmFyIHJlc3VtZVNraWxsID0gcmVxdWlyZSgnLi9hZG1pbi9hbmd1bGFyL2RpcmVjdGl2ZXMvcmVzdW1lL3NraWxsJyk7XG52YXIgcmVzdW1lTGFuZ3VhZ2UgPSByZXF1aXJlKCcuL2FkbWluL2FuZ3VsYXIvZGlyZWN0aXZlcy9yZXN1bWUvbGFuZ3VhZ2UnKTtcbnZhciByZXN1bWVJbnRlcmVzdCA9IHJlcXVpcmUoJy4vYWRtaW4vYW5ndWxhci9kaXJlY3RpdmVzL3Jlc3VtZS9pbnRlcmVzdCcpO1xudmFyIGJpb0RpcmVjdGl2ZSA9IHJlcXVpcmUoJy4vYWRtaW4vYW5ndWxhci9kaXJlY3RpdmVzL2Jpb2dyYXBoaWVzL2Jpb2dyYXBoeScpO1xudmFyIHJlc3VtZUxpc3QgPSByZXF1aXJlKCcuL2FkbWluL2FuZ3VsYXIvZGlyZWN0aXZlcy9yZXN1bWUvcmVzdW1lbGlzdCcpO1xuXG52YXIgc2FsZWFibGVEZXRhaWxzID0gcmVxdWlyZSgnLi9hZG1pbi9hbmd1bGFyL2RpcmVjdGl2ZXMvc2FsZWFibGVkZXRhaWxzJyk7XG52YXIgc2FsZWFibGVCYXNpYyA9IHJlcXVpcmUoJy4vYWRtaW4vYW5ndWxhci9kaXJlY3RpdmVzL3NhbGVhYmxlYmFzaWMnKTtcbnZhciBzYWxlYWJsZURldGFpbHNMaXN0ID0gcmVxdWlyZSgnLi9hZG1pbi9hbmd1bGFyL2RpcmVjdGl2ZXMvc2FsZWFibGVkZXRhaWxzbGlzdCcpO1xudmFyIHNhbGVhYmxlUHJpY2VzTGlzdCA9IHJlcXVpcmUoJy4vYWRtaW4vYW5ndWxhci9kaXJlY3RpdmVzL3NhbGVhYmxlcHJpY2VzbGlzdCcpO1xudmFyIGhhbGxvRWRpdG9yID0gcmVxdWlyZSgnLi9hZG1pbi9hbmd1bGFyL2RpcmVjdGl2ZXMvaGFsbG9kaXJlY3RpdmUnKTtcblxuXG5wcmZYeXpBcHAuZmFjdG9yeSgnTWVzc2FnZXMnLFtzdGNfbWVzc2FnZXNdKTtcbnByZlh5ekFwcC5mYWN0b3J5KCdNZXNzYWdlU2VydmljZScsWydNZXNzYWdlcycsJyR0aW1lb3V0JyxtZXNzYWdlU2VydmljZV0pO1xucHJmWHl6QXBwLmZhY3RvcnkoJ1VzZXJTZXJ2aWNlJyxbJ3Jlc3Rtb2QnLHVzZXJTZXJ2aWNlXSk7XG5wcmZYeXpBcHAuZmFjdG9yeSgnUHJvZmlsZVNlcnZpY2UnLFsncmVzdG1vZCcscHJvZmlsZVNlcnZpY2VdKTtcbnByZlh5ekFwcC5mYWN0b3J5KCdTYWxlYWJsZVNlcnZpY2UnLFsncmVzdG1vZCcsc2FsZWFibGVTZXJ2aWNlXSk7XG5wcmZYeXpBcHAuZmFjdG9yeSgnU2FsZWFibGVEZXRhaWxzU2VydmljZScsWydyZXN0bW9kJyxzYWxlYWJsZURldGFpbFNlcnZpY2VdKTtcbnByZlh5ekFwcC5mYWN0b3J5KCdTYWxlYWJsZVByaWNlU2VydmljZScsWydyZXN0bW9kJyxzYWxlYWJsZVByaWNlU2VydmljZV0pO1xucHJmWHl6QXBwLmZhY3RvcnkoJ1VzZXJDb250ZW50VHlwZScsWydyZXN0bW9kJyx1c2VyQ29udGVudFR5cGVTZXJ2aWNlXSk7XG5wcmZYeXpBcHAuZmFjdG9yeSgnQmlvZ3JhcGh5U2VydmljZScsWydyZXN0bW9kJyxiaW9TZXJ2aWNlXSk7XG5wcmZYeXpBcHAuZmFjdG9yeSgnVGhlUGFja2VyJyxbdGhlUGFja2VyXSk7XG5wcmZYeXpBcHAuZmFjdG9yeSgnTmV3UGFzc3dvcmQnLFsnJGh0dHAnLG5ld1Bhc3N3b3JkXSk7XG5wcmZYeXpBcHAuZmFjdG9yeSgnTnVtYmVyRm9ybWF0RmlsdGVyJyxbbnVtYmVyRm9ybWF0XSk7XG5wcmZYeXpBcHAuZmFjdG9yeSgnRmlsZVByb2Nlc3NvcicsWyckdXBsb2FkJywnJGh0dHAnLCdNZXNzYWdlU2VydmljZScsJyR0aW1lb3V0JyxmaWxlUHJvY2Vzc29yXSk7XG5wcmZYeXpBcHAuZmFjdG9yeSgnUmVzdW1lJyxbJ3Jlc3Rtb2QnLHJlc3VtZVNlcnZpY2VdKTtcbnByZlh5ekFwcC5mYWN0b3J5KCdFeHBlcmllbmNlJyxbJ3Jlc3Rtb2QnLGV4cGVyaWVuY2VTZXJ2aWNlXSk7XG5wcmZYeXpBcHAuZmFjdG9yeSgnUmVzdW1lSGVscGVyJyxbJyRodHRwJywnTWVzc2FnZVNlcnZpY2UnLHJlc3VtZUhlbHBlcl0pO1xucHJmWHl6QXBwLmZhY3RvcnkoJ0NhdGVnb3J5SGVscGVyJyxbJyRodHRwJyxjYXRlZ29yeUhlbHBlcl0pO1xucHJmWHl6QXBwLmZhY3RvcnkoJ0hlbHBlcicsW2hlbHBlcnNTZXJ2aWNlXSk7XG5wcmZYeXpBcHAuZmFjdG9yeSgnRWR1Y2F0aW9uJyxbJ3Jlc3Rtb2QnLGVkdWNhdGlvblNlcnZpY2VdKTtcbnByZlh5ekFwcC5mYWN0b3J5KCdTa2lsbCcsWydyZXN0bW9kJyxza2lsbFNlcnZpY2VdKTtcbnByZlh5ekFwcC5mYWN0b3J5KCdMYW5ndWFnZScsWydyZXN0bW9kJyxsYW5ndWFnZVNlcnZpY2VdKTtcbnByZlh5ekFwcC5mYWN0b3J5KCdJbnRlcmVzdCcsWydyZXN0bW9kJyxpbnRlcmVzdFNlcnZpY2VdKTtcbnByZlh5ekFwcC5mYWN0b3J5KCdDYXRlZ29yeScsWydyZXN0bW9kJyxjYXRlZ29yeVNlcnZpY2VdKTtcbnByZlh5ekFwcC5mYWN0b3J5KCdQcm9qZWN0JyxbJ3Jlc3Rtb2QnLHByb2plY3RTZXJ2aWNlXSk7XG5wcmZYeXpBcHAuZmFjdG9yeSgnR2FsbGVyeScsWydyZXN0bW9kJyxnYWxsZXJ5U2VydmljZV0pO1xucHJmWHl6QXBwLmZhY3RvcnkoJ0hvbWVjYWxsb3V0JyxbJ3Jlc3Rtb2QnLGhvbWVDYWxsb3V0U2VydmljZV0pO1xuXG5wcmZYeXpBcHAuZGlyZWN0aXZlKCdhbGVydCcsW2FsZXJ0RGlyZWN0aXZlXSk7XG5wcmZYeXpBcHAuZGlyZWN0aXZlKCdjbG9zZUNvbnRlbnQnLFtjbG9zZUNvbnRlbnREaXJlY3RpdmVdKTtcbnByZlh5ekFwcC5kaXJlY3RpdmUoJ2NvbnRlbnRTZWxlY3RvcicsWydNZXNzYWdlU2VydmljZScsJ1VzZXJDb250ZW50VHlwZScsY29udGVudFNlbGVjdG9yRGlyZWN0aXZlXSk7XG5wcmZYeXpBcHAuZGlyZWN0aXZlKCdwcm9maWxlTWVudScsW3Byb2RpbGVNZW51RGlyZWN0aXZlXSk7XG5wcmZYeXpBcHAuZGlyZWN0aXZlKCdjb25maWdNZW51JyxbY29uZmlnTWVudURpcmVjdGl2ZV0pO1xucHJmWHl6QXBwLmRpcmVjdGl2ZSgnc2FsZWFibGVEZXRhaWxzJyxbJyR0ZW1wbGF0ZUNhY2hlJywnJGNvbXBpbGUnLCckcm9vdFNjb3BlJyxzYWxlYWJsZURldGFpbHNdKTtcbnByZlh5ekFwcC5kaXJlY3RpdmUoJ3NhbGVhYmxlQmFzaWMnLFsnU2FsZWFibGVTZXJ2aWNlJyxzYWxlYWJsZUJhc2ljXSk7XG5wcmZYeXpBcHAuZGlyZWN0aXZlKCdzYWxlYWJsZURldGFpbHNMaXN0Jyxbc2FsZWFibGVEZXRhaWxzTGlzdF0pO1xucHJmWHl6QXBwLmRpcmVjdGl2ZSgnc2FsZWFibGVQcmljZXNMaXN0Jyxbc2FsZWFibGVQcmljZXNMaXN0XSk7XG5wcmZYeXpBcHAuZGlyZWN0aXZlKCdoYWxsbycsW2hhbGxvRWRpdG9yXSk7XG5wcmZYeXpBcHAuZGlyZWN0aXZlKCdyZXN1bWVTZWxlY3RvcicsWydNZXNzYWdlU2VydmljZScscmVzdW1lU2VsZWN0b3JEaXJlY3RpdmVdKTtcbnByZlh5ekFwcC5kaXJlY3RpdmUoJ3Jlc3VtZScsWydNZXNzYWdlU2VydmljZScsJ1Jlc3VtZScsJyR0aW1lb3V0JywnUmVzdW1lSGVscGVyJyxyZXN1bWVEaXJlY3RpdmVdKTtcbnByZlh5ekFwcC5kaXJlY3RpdmUoJ3Jlc3VtZUVkaXRGb3JtJyxbJ01lc3NhZ2VTZXJ2aWNlJywnUmVzdW1lJywnUmVzdW1lSGVscGVyJywnJHRpbWVvdXQnLHJlc3VtZUVkaXRGb3JtXSk7XG5wcmZYeXpBcHAuZGlyZWN0aXZlKCdyZXN1bWVGb3JtJyxbJ01lc3NhZ2VTZXJ2aWNlJywnUmVzdW1lJywnUmVzdW1lSGVscGVyJywnJHRpbWVvdXQnLHJlc3VtZUZvcm1dKTtcbnByZlh5ekFwcC5kaXJlY3RpdmUoJ3Jlc3VtZUV4cGVyaWVuY2UnLFsnTWVzc2FnZVNlcnZpY2UnLCdFeHBlcmllbmNlJywnJHRpbWVvdXQnLCdIZWxwZXInLHJlc3VtZUV4cGVyaWVuY2VdKTtcbnByZlh5ekFwcC5kaXJlY3RpdmUoJ3Jlc3VtZVNlY3Rpb25zJyxbJ1Jlc3VtZScscmVzdW1lU2VjdGlvbnNdKTtcbnByZlh5ekFwcC5kaXJlY3RpdmUoJ3Jlc3VtZUVkdWNhdGlvbicsWydNZXNzYWdlU2VydmljZScsJ0VkdWNhdGlvbicsJyR0aW1lb3V0JywnSGVscGVyJyxyZXN1bWVFZHVjYXRpb25dKTtcbnByZlh5ekFwcC5kaXJlY3RpdmUoJ3Jlc3VtZVNraWxsJyxbJ01lc3NhZ2VTZXJ2aWNlJywnU2tpbGwnLCckdGltZW91dCcsJ0hlbHBlcicscmVzdW1lU2tpbGxdKTtcbnByZlh5ekFwcC5kaXJlY3RpdmUoJ3Jlc3VtZUxhbmd1YWdlJyxbJ01lc3NhZ2VTZXJ2aWNlJywnTGFuZ3VhZ2UnLCckdGltZW91dCcsJ0hlbHBlcicscmVzdW1lTGFuZ3VhZ2VdKTtcbnByZlh5ekFwcC5kaXJlY3RpdmUoJ3Jlc3VtZUludGVyZXN0JyxbJ01lc3NhZ2VTZXJ2aWNlJywnSW50ZXJlc3QnLCckdGltZW91dCcsJ0hlbHBlcicscmVzdW1lSW50ZXJlc3RdKTtcbnByZlh5ekFwcC5kaXJlY3RpdmUoJ2Jpb2dyYXBoeScsWydNZXNzYWdlU2VydmljZScsJ0Jpb2dyYXBoeVNlcnZpY2UnLCckdGltZW91dCcsJ0hlbHBlcicsJyRodHRwJyxiaW9EaXJlY3RpdmVdKTtcbnByZlh5ekFwcC5kaXJlY3RpdmUoJ3Jlc3VtZUxpc3QnLFsnTWVzc2FnZVNlcnZpY2UnLCdSZXN1bWUnLCckdGltZW91dCcsJ0hlbHBlcicscmVzdW1lTGlzdF0pO1xucHJmWHl6QXBwLmRpcmVjdGl2ZSgnY2F0ZWdvcnlNYW5hZ2VyJyxbJ01lc3NhZ2VTZXJ2aWNlJywnQ2F0ZWdvcnknLCckdGltZW91dCcsJ0hlbHBlcicsY2F0ZWdvcnlEaXJlY3RpdmVdKTtcbnByZlh5ekFwcC5kaXJlY3RpdmUoJ3Byb2plY3RMaXN0JyxbJ01lc3NhZ2VTZXJ2aWNlJywnUHJvamVjdCcsJyR0aW1lb3V0JywnSGVscGVyJyxwcm9qZWN0TGlzdERpcmVjdGl2ZV0pO1xucHJmWHl6QXBwLmRpcmVjdGl2ZSgncHJvamVjdFdpemFyZCcsWydNZXNzYWdlU2VydmljZScsJ1Byb2plY3QnLCckdGltZW91dCcsJ0hlbHBlcicscHJvamVjdFdpemFyZERpcmVjdGl2ZV0pO1xucHJmWHl6QXBwLmRpcmVjdGl2ZSgncHJvamVjdCcsWydNZXNzYWdlU2VydmljZScsJ1Byb2plY3QnLCckdGltZW91dCcsJ0NhdGVnb3J5SGVscGVyJywnRmlsZVByb2Nlc3NvcicsJ0hlbHBlcicscHJvamVjdERpcmVjdGl2ZV0pO1xucHJmWHl6QXBwLmRpcmVjdGl2ZSgncHJvamVjdEdhbGxlcnknLFsnTWVzc2FnZVNlcnZpY2UnLCdQcm9qZWN0JywnJHRpbWVvdXQnLCdGaWxlUHJvY2Vzc29yJywnR2FsbGVyeScscHJvamVjdEdhbGxlcnlEaXJlY3RpdmVdKTtcbnByZlh5ekFwcC5kaXJlY3RpdmUoJ2hvbWVQYWdlJyxbJ01lc3NhZ2VTZXJ2aWNlJywnSG9tZWNhbGxvdXQnLCckdGltZW91dCcsJ0hlbHBlcicsJ0ZpbGVQcm9jZXNzb3InLCckaHR0cCcsaG9tZVBhZ2VEaXJlY3RpdmVdKTtcblxucHJmWHl6QXBwLmNvbnRyb2xsZXIoJ0hvbWVDdHJsJyxbJyRzY29wZScsJ1VzZXJTZXJ2aWNlJywnVXNlckNvbnRlbnRUeXBlJyxob21lQ29udHJvbGxlcl0pO1xucHJmWHl6QXBwLmNvbnRyb2xsZXIoJ0Jpb0N0cmwnLFsnJHNjb3BlJywnQmlvZ3JhcGh5U2VydmljZScsJ01lc3NhZ2VTZXJ2aWNlJyxiaW9Db250cm9sbGVyXSk7XG5wcmZYeXpBcHAuY29udHJvbGxlcignVXNlckN0cmwnLFsnJHNjb3BlJywnJHRpbWVvdXQnLCdVc2VyU2VydmljZScsJ1Byb2ZpbGVTZXJ2aWNlJywnTWVzc2FnZVNlcnZpY2UnLCdOZXdQYXNzd29yZCcsdXNlckNvbnRyb2xsZXJdKTtcbnByZlh5ekFwcC5jb250cm9sbGVyKCdDb25maWdDdHJsJyxbJyRzY29wZScsJyR0aW1lb3V0JywnTWVzc2FnZVNlcnZpY2UnLCdVc2VyQ29udGVudFR5cGUnLGNvbmZpZ0NvbnRyb2xsZXJdKTtcblxucHJmWHl6QXBwLmNvbnRyb2xsZXIoJ1NhbGVhYmxlQ3RybCcsWyckc2NvcGUnLCckcm9vdFNjb3BlJywnJHRpbWVvdXQnLCdTYWxlYWJsZVNlcnZpY2UnLCdNZXNzYWdlU2VydmljZScsJ1NhbGVhYmxlRGV0YWlsc1NlcnZpY2UnLHNhbGVhYmxlQ29udHJvbGxlcl0pO1xucHJmWHl6QXBwLmNvbnRyb2xsZXIoJ1NhbGVhYmxlRGV0YWlsQ3RybCcsWyckc2NvcGUnLCckcm9vdFNjb3BlJywnU2FsZWFibGVTZXJ2aWNlJywnTWVzc2FnZVNlcnZpY2UnLCckZWxlbWVudCcsJyRjb21waWxlJyxzYWxlYWJsZURldGFpbENvbnRyb2xsZXJdKTtcbnByZlh5ekFwcC5jb250cm9sbGVyKCdzYWxlYWJsZUJhc2ljQ3RybCcsWyckc2NvcGUnLCckcm9vdFNjb3BlJywnU2FsZWFibGVTZXJ2aWNlJywnTWVzc2FnZVNlcnZpY2UnLCdDYXRlZ29yeUhlbHBlcicsc2FsZWFibGVCYXNpY0NvbnRyb2xsZXJdKTtcbnByZlh5ekFwcC5jb250cm9sbGVyKCdzYWxlYWJsZUFsbERldGFpbHNDdHJsJyxbJyRzY29wZScsJyRyb290U2NvcGUnLCdTYWxlYWJsZURldGFpbHNTZXJ2aWNlJywnTWVzc2FnZVNlcnZpY2UnLCdGaWxlUHJvY2Vzc29yJyxzYWxlYWJsZUFsbERldGFpbHNDb250cm9sbGVyXSk7XG5wcmZYeXpBcHAuY29udHJvbGxlcignc2FsZWFibGVQcmljZUN0cmwnLFsnJHNjb3BlJywnJHJvb3RTY29wZScsJ1NhbGVhYmxlUHJpY2VTZXJ2aWNlJywnTWVzc2FnZVNlcnZpY2UnLHNhbGVhYmxlUHJpY2VDb250cm9sbGVyXSk7XG5wcmZYeXpBcHAuY29udHJvbGxlcigncmVzdW1lQ3RybCcsWyckc2NvcGUnLCckcm9vdFNjb3BlJywnUmVzdW1lSGVscGVyJywnTWVzc2FnZVNlcnZpY2UnLHJlc3VtZUNvbnRyb2xsZXJdKTtcbnByZlh5ekFwcC5jb250cm9sbGVyKCdQb3J0Zm9saW9DdHJsJyxbJyRzY29wZScsJyRyb290U2NvcGUnLHBvcnRmb2xpb0NvbnRyb2xsZXJdKTsiLCIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjIuMS4zXG4gKiBodHRwOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHA6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IDIwMDUsIDIwMTQgalF1ZXJ5IEZvdW5kYXRpb24sIEluYy4gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNC0xMi0xOFQxNToxMVpcbiAqL1xuXG4oZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0odHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDE4K1xuLy8gQ2FuJ3QgYmUgaW4gc3RyaWN0IG1vZGUsIHNldmVyYWwgbGlicyBpbmNsdWRpbmcgQVNQLk5FVCB0cmFjZVxuLy8gdGhlIHN0YWNrIHZpYSBhcmd1bWVudHMuY2FsbGVyLmNhbGxlZSBhbmQgRmlyZWZveCBkaWVzIGlmXG4vLyB5b3UgdHJ5IHRvIHRyYWNlIHRocm91Z2ggXCJ1c2Ugc3RyaWN0XCIgY2FsbCBjaGFpbnMuICgjMTMzMzUpXG4vL1xuXG52YXIgYXJyID0gW107XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7XG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG5cblxudmFyXG5cdC8vIFVzZSB0aGUgY29ycmVjdCBkb2N1bWVudCBhY2NvcmRpbmdseSB3aXRoIHdpbmRvdyBhcmd1bWVudCAoc2FuZGJveClcblx0ZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQsXG5cblx0dmVyc2lvbiA9IFwiMi4xLjNcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xXG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyxcblxuXHQvLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcblx0cm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFtcXGRhLXpdKS9naSxcblxuXHQvLyBVc2VkIGJ5IGpRdWVyeS5jYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5cdGZjYW1lbENhc2UgPSBmdW5jdGlvbiggYWxsLCBsZXR0ZXIgKSB7XG5cdFx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFN0YXJ0IHdpdGggYW4gZW1wdHkgc2VsZWN0b3Jcblx0c2VsZWN0b3I6IFwiXCIsXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXHRcdHJldHVybiBudW0gIT0gbnVsbCA/XG5cblx0XHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRcdCggbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXSApIDpcblxuXHRcdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdFx0c2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblx0XHRyZXQuY29udGV4dCA9IHRoaXMuY29udGV4dDtcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHQvLyAoWW91IGNhbiBzZWVkIHRoZSBhcmd1bWVudHMgd2l0aCBhbiBhcnJheSBvZiBhcmdzLCBidXQgdGhpcyBpc1xuXHQvLyBvbmx5IHVzZWQgaW50ZXJuYWxseS4pXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjaywgYXJncyApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrLCBhcmdzICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9KSk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1tqXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcihudWxsKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWzBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKHRhcmdldCkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAob3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdKSAhPSBudWxsICkge1xuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoY29weSkgfHwgKGNvcHlJc0FycmF5ID0galF1ZXJ5LmlzQXJyYXkoY29weSkpICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSApIHtcblx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNBcnJheShzcmMpID8gc3JjIDogW107XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3Qoc3JjKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCh7XG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzRnVuY3Rpb246IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS50eXBlKG9iaikgPT09IFwiZnVuY3Rpb25cIjtcblx0fSxcblxuXHRpc0FycmF5OiBBcnJheS5pc0FycmF5LFxuXG5cdGlzV2luZG93OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH0sXG5cblx0aXNOdW1lcmljOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChudWxsfHRydWV8ZmFsc2V8XCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0Ly8gYWRkaW5nIDEgY29ycmVjdHMgbG9zcyBvZiBwcmVjaXNpb24gZnJvbSBwYXJzZUZsb2F0ICgjMTUxMDApXG5cdFx0cmV0dXJuICFqUXVlcnkuaXNBcnJheSggb2JqICkgJiYgKG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICsgMSkgPj0gMDtcblx0fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdC8vIE5vdCBwbGFpbiBvYmplY3RzOlxuXHRcdC8vIC0gQW55IG9iamVjdCBvciB2YWx1ZSB3aG9zZSBpbnRlcm5hbCBbW0NsYXNzXV0gcHJvcGVydHkgaXMgbm90IFwiW29iamVjdCBPYmplY3RdXCJcblx0XHQvLyAtIERPTSBub2Rlc1xuXHRcdC8vIC0gd2luZG93XG5cdFx0aWYgKCBqUXVlcnkudHlwZSggb2JqICkgIT09IFwib2JqZWN0XCIgfHwgb2JqLm5vZGVUeXBlIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKCBvYmouY29uc3RydWN0b3IgJiZcblx0XHRcdFx0IWhhc093bi5jYWxsKCBvYmouY29uc3RydWN0b3IucHJvdG90eXBlLCBcImlzUHJvdG90eXBlT2ZcIiApICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZSBmdW5jdGlvbiBoYXNuJ3QgcmV0dXJuZWQgYWxyZWFkeSwgd2UncmUgY29uZmlkZW50IHRoYXRcblx0XHQvLyB8b2JqfCBpcyBhIHBsYWluIG9iamVjdCwgY3JlYXRlZCBieSB7fSBvciBjb25zdHJ1Y3RlZCB3aXRoIG5ldyBPYmplY3Rcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBuYW1lO1xuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHR0eXBlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0XHR9XG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjAsIGlPUzw2IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdFx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwob2JqKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdFx0dHlwZW9mIG9iajtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dFxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSApIHtcblx0XHR2YXIgc2NyaXB0LFxuXHRcdFx0aW5kaXJlY3QgPSBldmFsO1xuXG5cdFx0Y29kZSA9IGpRdWVyeS50cmltKCBjb2RlICk7XG5cblx0XHRpZiAoIGNvZGUgKSB7XG5cdFx0XHQvLyBJZiB0aGUgY29kZSBpbmNsdWRlcyBhIHZhbGlkLCBwcm9sb2d1ZSBwb3NpdGlvblxuXHRcdFx0Ly8gc3RyaWN0IG1vZGUgcHJhZ21hLCBleGVjdXRlIGNvZGUgYnkgaW5qZWN0aW5nIGFcblx0XHRcdC8vIHNjcmlwdCB0YWcgaW50byB0aGUgZG9jdW1lbnQuXG5cdFx0XHRpZiAoIGNvZGUuaW5kZXhPZihcInVzZSBzdHJpY3RcIikgPT09IDEgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG5cdFx0XHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBhdm9pZCB0aGUgRE9NIG5vZGUgY3JlYXRpb24sIGluc2VydGlvblxuXHRcdFx0Ly8gYW5kIHJlbW92YWwgYnkgdXNpbmcgYW4gaW5kaXJlY3QgZ2xvYmFsIGV2YWxcblx0XHRcdFx0aW5kaXJlY3QoIGNvZGUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuXHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdC8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3Milcblx0Y2FtZWxDYXNlOiBmdW5jdGlvbiggc3RyaW5nICkge1xuXHRcdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xuXHR9LFxuXG5cdG5vZGVOYW1lOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0fSxcblxuXHQvLyBhcmdzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrLCBhcmdzICkge1xuXHRcdHZhciB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aCxcblx0XHRcdGlzQXJyYXkgPSBpc0FycmF5bGlrZSggb2JqICk7XG5cblx0XHRpZiAoIGFyZ3MgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXkgKSB7XG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRcdHZhbHVlID0gY2FsbGJhY2suYXBwbHkoIG9ialsgaSBdLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjay5hcHBseSggb2JqWyBpIF0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBIHNwZWNpYWwsIGZhc3QsIGNhc2UgZm9yIHRoZSBtb3N0IGNvbW1vbiB1c2Ugb2YgZWFjaFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGlzQXJyYXkgKSB7XG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRcdHZhbHVlID0gY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICk7XG5cblx0XHRcdFx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKTtcblxuXHRcdFx0XHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMVxuXHR0cmltOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcdFwiXCIgOlxuXHRcdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5bGlrZSggT2JqZWN0KGFycikgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0aXNBcnJheSA9IGlzQXJyYXlsaWtlKCBlbGVtcyApLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG5cdC8vIGFyZ3VtZW50cy5cblx0cHJveHk6IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0XHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRcdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdFx0Y29udGV4dCA9IGZuO1xuXHRcdFx0Zm4gPSB0bXA7XG5cdFx0fVxuXG5cdFx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0XHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBTaW11bGF0ZWQgYmluZFxuXHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0XHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdFx0fTtcblxuXHRcdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRcdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdFx0cmV0dXJuIHByb3h5O1xuXHR9LFxuXG5cdG5vdzogRGF0ZS5ub3csXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0pO1xuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvclwiLnNwbGl0KFwiIFwiKSwgZnVuY3Rpb24oaSwgbmFtZSkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0pO1xuXG5mdW5jdGlvbiBpc0FycmF5bGlrZSggb2JqICkge1xuXHR2YXIgbGVuZ3RoID0gb2JqLmxlbmd0aCxcblx0XHR0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXG5cdGlmICggdHlwZSA9PT0gXCJmdW5jdGlvblwiIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBvYmoubm9kZVR5cGUgPT09IDEgJiYgbGVuZ3RoICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjIuMC1wcmVcbiAqIGh0dHA6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IDIwMDgsIDIwMTQgalF1ZXJ5IEZvdW5kYXRpb24sIEluYy4gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNC0xMi0xNlxuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gR2VuZXJhbC1wdXJwb3NlIGNvbnN0YW50c1xuXHRNQVhfTkVHQVRJVkUgPSAxIDw8IDMxLFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBXaGl0ZXNwYWNlIGNoYXJhY3RlcnMgaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zeW50YXgvI2NoYXJhY3RlcnNcblx0Y2hhcmFjdGVyRW5jb2RpbmcgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcXFx4MDAtXFxcXHhhMF0pK1wiLFxuXG5cdC8vIExvb3NlbHkgbW9kZWxlZCBvbiBDU1MgaWRlbnRpZmllciBjaGFyYWN0ZXJzXG5cdC8vIEFuIHVucXVvdGVkIHZhbHVlIHNob3VsZCBiZSBhIENTUyBpZGVudGlmaWVyIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdC8vIFByb3BlciBzeW50YXg6IGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxuXHRpZGVudGlmaWVyID0gY2hhcmFjdGVyRW5jb2RpbmcucmVwbGFjZSggXCJ3XCIsIFwidyNcIiApLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGNoYXJhY3RlckVuY29kaW5nICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgY2hhcmFjdGVyRW5jb2RpbmcgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cblx0cmF0dHJpYnV0ZVF1b3RlcyA9IG5ldyBSZWdFeHAoIFwiPVwiICsgd2hpdGVzcGFjZSArIFwiKihbXlxcXFxdJ1xcXCJdKj8pXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIiwgXCJnXCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGNoYXJhY3RlckVuY29kaW5nICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgY2hhcmFjdGVyRW5jb2RpbmcgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGNoYXJhY3RlckVuY29kaW5nLnJlcGxhY2UoIFwid1wiLCBcIncqXCIgKSArIFwiKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXHRyZXNjYXBlID0gLyd8XFxcXC9nLFxuXG5cdC8vIENTUyBlc2NhcGVzIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98KFwiICsgd2hpdGVzcGFjZSArIFwiKXwuKVwiLCBcImlnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlZCAtIDB4MTAwMDA7XG5cdFx0Ly8gTmFOIG1lYW5zIG5vbi1jb2RlcG9pbnRcblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI0XG5cdFx0Ly8gV29ya2Fyb3VuZCBlcnJvbmVvdXMgbnVtZXJpYyBpbnRlcnByZXRhdGlvbiBvZiArXCIweFwiXG5cdFx0cmV0dXJuIGhpZ2ggIT09IGhpZ2ggfHwgZXNjYXBlZFdoaXRlc3BhY2UgP1xuXHRcdFx0ZXNjYXBlZCA6XG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdC8vIEJNUCBjb2RlcG9pbnRcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdC8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKVxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbWF0Y2gsIGVsZW0sIG0sIG5vZGVUeXBlLFxuXHRcdC8vIFFTQSB2YXJzXG5cdFx0aSwgZ3JvdXBzLCBvbGQsIG5pZCwgbmV3Q29udGV4dCwgbmV3U2VsZWN0b3I7XG5cblx0aWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cblx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXHRub2RlVHlwZSA9IGNvbnRleHQubm9kZVR5cGU7XG5cblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHRpZiAoICFzZWVkICYmIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyB3aGVuIHBvc3NpYmxlIChlLmcuLCBub3QgdW5kZXIgRG9jdW1lbnRGcmFnbWVudClcblx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkpICkge1xuXHRcdFx0Ly8gU3BlZWQtdXA6IFNpenpsZShcIiNJRFwiKVxuXHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcblx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApO1xuXHRcdFx0XHRcdC8vIENoZWNrIHBhcmVudE5vZGUgdG8gY2F0Y2ggd2hlbiBCbGFja2JlcnJ5IDQuNiByZXR1cm5zXG5cdFx0XHRcdFx0Ly8gbm9kZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudCAoalF1ZXJ5ICM2OTYzKVxuXHRcdFx0XHRcdGlmICggZWxlbSAmJiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgSUUsIE9wZXJhLCBhbmQgV2Via2l0IHJldHVybiBpdGVtc1xuXHRcdFx0XHRcdFx0Ly8gYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIENvbnRleHQgaXMgbm90IGEgZG9jdW1lbnRcblx0XHRcdFx0XHRpZiAoIGNvbnRleHQub3duZXJEb2N1bWVudCAmJiAoZWxlbSA9IGNvbnRleHQub3duZXJEb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbSApKSAmJlxuXHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJiBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gU3BlZWQtdXA6IFNpenpsZShcIlRBR1wiKVxuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFNwZWVkLXVwOiBTaXp6bGUoXCIuQ0xBU1NcIilcblx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUVNBIHBhdGhcblx0XHRpZiAoIHN1cHBvcnQucXNhICYmICghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgKSB7XG5cdFx0XHRuaWQgPSBvbGQgPSBleHBhbmRvO1xuXHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cdFx0XHRuZXdTZWxlY3RvciA9IG5vZGVUeXBlICE9PSAxICYmIHNlbGVjdG9yO1xuXG5cdFx0XHQvLyBxU0Egd29ya3Mgc3RyYW5nZWx5IG9uIEVsZW1lbnQtcm9vdGVkIHF1ZXJpZXNcblx0XHRcdC8vIFdlIGNhbiB3b3JrIGFyb3VuZCB0aGlzIGJ5IHNwZWNpZnlpbmcgYW4gZXh0cmEgSUQgb24gdGhlIHJvb3Rcblx0XHRcdC8vIGFuZCB3b3JraW5nIHVwIGZyb20gdGhlcmUgKFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGUgdGVjaG5pcXVlKVxuXHRcdFx0Ly8gSUUgOCBkb2Vzbid0IHdvcmsgb24gb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRpZiAoIG5vZGVUeXBlID09PSAxICYmIGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApIHtcblx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cblx0XHRcdFx0aWYgKCAob2xkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoXCJpZFwiKSkgKSB7XG5cdFx0XHRcdFx0bmlkID0gb2xkLnJlcGxhY2UoIHJlc2NhcGUsIFwiXFxcXCQmXCIgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCBuaWQgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRuaWQgPSBcIltpZD0nXCIgKyBuaWQgKyBcIiddIFwiO1xuXG5cdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRncm91cHNbaV0gPSBuaWQgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dDtcblx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbihcIixcIik7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggbmV3U2VsZWN0b3IgKSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH0gY2F0Y2gocXNhRXJyb3IpIHtcblx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRpZiAoICFvbGQgKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZShcImlkXCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7RnVuY3Rpb24oc3RyaW5nLCBPYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUpO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGRpdiBhbmQgZXhwZWN0cyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGRpdiApO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZGl2LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRkaXYucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZGl2ICk7XG5cdFx0fVxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxuXHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0KCB+Yi5zb3VyY2VJbmRleCB8fCBNQVhfTkVHQVRJVkUgKSAtXG5cdFx0XHQoIH5hLnNvdXJjZUluZGV4IHx8IE1BWF9ORUdBVElWRSApO1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3Rcblx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBwYXJlbnQsXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIElmIG5vIGRvY3VtZW50IGFuZCBkb2N1bWVudEVsZW1lbnQgaXMgYXZhaWxhYmxlLCByZXR1cm5cblx0aWYgKCBkb2MgPT09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBTZXQgb3VyIGRvY3VtZW50XG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDtcblx0cGFyZW50ID0gZG9jLmRlZmF1bHRWaWV3O1xuXG5cdC8vIFN1cHBvcnQ6IElFPjhcblx0Ly8gSWYgaWZyYW1lIGRvY3VtZW50IGlzIGFzc2lnbmVkIHRvIFwiZG9jdW1lbnRcIiB2YXJpYWJsZSBhbmQgaWYgaWZyYW1lIGhhcyBiZWVuIHJlbG9hZGVkLFxuXHQvLyBJRSB3aWxsIHRocm93IFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIGFjY2Vzc2luZyBcImRvY3VtZW50XCIgdmFyaWFibGUsIHNlZSBqUXVlcnkgIzEzOTM2XG5cdC8vIElFNi04IGRvIG5vdCBzdXBwb3J0IHRoZSBkZWZhdWx0VmlldyBwcm9wZXJ0eSBzbyBwYXJlbnQgd2lsbCBiZSB1bmRlZmluZWRcblx0aWYgKCBwYXJlbnQgJiYgcGFyZW50ICE9PSBwYXJlbnQudG9wICkge1xuXHRcdC8vIElFMTEgZG9lcyBub3QgaGF2ZSBhdHRhY2hFdmVudCwgc28gYWxsIG11c3Qgc3VmZmVyXG5cdFx0aWYgKCBwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHBhcmVudC5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXHRcdH0gZWxzZSBpZiAoIHBhcmVudC5hdHRhY2hFdmVudCApIHtcblx0XHRcdHBhcmVudC5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0LyogU3VwcG9ydCB0ZXN0c1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2MgKTtcblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0ZGl2LmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZGl2LmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTtcblx0fSk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0ZGl2LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlQ29tbWVudChcIlwiKSApO1xuXHRcdHJldHVybiAhZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2MuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZGl2ICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jLmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2MuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIElEIGZpbmQgYW5kIGZpbHRlclxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0Ly8gQ2hlY2sgcGFyZW50Tm9kZSB0byBjYXRjaCB3aGVuIEJsYWNrYmVycnkgNC42IHJldHVybnNcblx0XHRcdFx0Ly8gbm9kZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudCAjNjk2M1xuXHRcdFx0XHRyZXR1cm4gbSAmJiBtLnBhcmVudE5vZGUgPyBbIG0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdC8vIFN1cHBvcnQ6IElFNi83XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdGRlbGV0ZSBFeHByLmZpbmRbXCJJRFwiXTtcblxuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2MucXVlcnlTZWxlY3RvckFsbCApKSApIHtcblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBkaXYgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXGZdJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBkaXYucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC4yKywgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjcrXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIi4jLitbK35dXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBkaXYucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRkaXYucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIik7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaChcIiwuKjpcIik7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikgKSkgKSB7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGRpdiwgXCJkaXZcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGRpdiwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9KTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBkb2VzIG5vdCBpbXBsZW1lbnQgaW5jbHVzaXZlIGRlc2NlbmRlbnRcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0KSk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGIgPSBiLnBhcmVudE5vZGUpICkge1xuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUpICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdGlmICggYSA9PT0gZG9jIHx8IGEub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHRcdGlmICggYiA9PT0gZG9jIHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblx0XHRcdHJldHVybiBhID09PSBkb2MgPyAtMSA6XG5cdFx0XHRcdGIgPT09IGRvYyA/IDEgOlxuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvYztcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcblx0ZXhwciA9IGV4cHIucmVwbGFjZSggcmF0dHJpYnV0ZVF1b3RlcywgXCI9JyQxJ11cIiApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZSkge31cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsyXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XG5cdFx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgZGlmZiwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gbm9kZVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgPyBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBwYXJlbnRbIGV4cGFuZG8gXSB8fCAocGFyZW50WyBleHBhbmRvIF0gPSB7fSk7XG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gb3V0ZXJDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVswXSA9PT0gZGlycnVucyAmJiBjYWNoZVsxXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IGNhY2hlWzBdID09PSBkaXJydW5zICYmIGNhY2hlWzJdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHVzZUNhY2hlICYmIChjYWNoZSA9IChlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KSlbIHR5cGUgXSkgJiYgY2FjaGVbMF0gPT09IGRpcnJ1bnMgKSB7XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBjYWNoZVsxXTtcblxuXHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKSBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6IG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJiArK2RpZmYgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHQobm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSkpWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBmYWxzZTtcblx0XHR9LFxuXG5cdFx0XCJkaXNhYmxlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQpIHx8IChub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQpO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9KSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSlcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zW1wibnRoXCJdID0gRXhwci5wc2V1ZG9zW1wiZXFcIl07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0pO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSkgJiYgKCFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGRpciA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgb2xkQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBkaXIgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG5cdFx0XHRcdFx0XHRpZiAoIChvbGRDYWNoZSA9IG91dGVyQ2FjaGVbIGRpciBdKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlWyBkaXIgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWzBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgIT09IGRvY3VtZW50ICYmIGNvbnRleHQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBLZWVwIGBpYCBhIHN0cmluZyBpZiB0aGVyZSBhcmUgbm8gZWxlbWVudHMgc28gYG1hdGNoZWRDb3VudGAgd2lsbCBiZSBcIjAwXCIgYmVsb3dcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gc2V0TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISh1bm1hdGNoZWRbaV0gfHwgc2V0TWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFtpXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdGlmICggIW1hdGNoICkge1xuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHR9XG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFtpXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZSggc2VsZWN0b3IsIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApICk7XG5cblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0fVxuXHRyZXR1cm4gY2FjaGVkO1xufTtcblxuLyoqXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIFNpenpsZSdzIGNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggU2l6emxlLmNvbXBpbGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuICovXG5zZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoIChzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG5vIHNlZWQgYW5kIG9ubHkgb25lIGdyb3VwXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gVGFrZSBhIHNob3J0Y3V0IGFuZCBzZXQgdGhlIGNvbnRleHQgaWYgdGhlIHJvb3Qgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRzdXBwb3J0LmdldEJ5SWQgJiYgY29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdFx0XHRFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHRyc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdjEgKSB7XG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZGl2MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSApICYgMTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdGRpdi5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGRpdi5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIikgPT09IFwiI1wiIDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdGRpdi5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGRpdi5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHJldHVybiBkaXYuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdHJldHVybiBkaXYuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgPT0gbnVsbDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcblx0XHR9XG5cdH0pO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59KSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcbmpRdWVyeS5leHByW1wiOlwiXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xuXG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cbnZhciByc2luZ2xlVGFnID0gKC9ePChcXHcrKVxccypcXC8/Pig/OjxcXC9cXDE+fCkkLyk7XG5cblxuXG52YXIgcmlzU2ltcGxlID0gL14uW146I1xcW1xcLixdKiQvO1xuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSk7XG5cblx0fVxuXG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9KTtcblxuXHR9XG5cblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyID09PSBcInN0cmluZ1wiICkge1xuXHRcdGlmICggcmlzU2ltcGxlLnRlc3QoIHF1YWxpZmllciApICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xuXHRcdH1cblxuXHRcdHF1YWxpZmllciA9IGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMgKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPj0gMCApICE9PSBub3Q7XG5cdH0pO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0cmV0dXJuIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxID9cblx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW10gOlxuXHRcdGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0XHR9KSk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KSApO1xuXHRcdH1cblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0Ly8gTmVlZGVkIGJlY2F1c2UgJCggc2VsZWN0b3IsIGNvbnRleHQgKSBiZWNvbWVzICQoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlKCByZXQgKSA6IHJldCApO1xuXHRcdHJldC5zZWxlY3RvciA9IHRoaXMuc2VsZWN0b3IgPyB0aGlzLnNlbGVjdG9yICsgXCIgXCIgKyBzZWxlY3RvciA6IHNlbGVjdG9yO1xuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3codGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUpICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0qKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWzBdID09PSBcIjxcIiAmJiBzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJiBzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmIChtYXRjaFsxXSB8fCAhY29udGV4dCkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbMV0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WzBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbMV0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbMV0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbMl0gKTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEJsYWNrYmVycnkgNC42XG5cdFx0XHRcdFx0Ly8gZ0VCSUQgcmV0dXJucyBub2RlcyBubyBsb25nZXIgaW4gdGhlIGRvY3VtZW50ICgjNjk2Mylcblx0XHRcdFx0XHRpZiAoIGVsZW0gJiYgZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHRcdHRoaXNbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRoaXMuY29udGV4dCA9IGRvY3VtZW50O1xuXHRcdFx0XHRcdHRoaXMuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdGpRdWVyeSApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXMuY29udGV4dCA9IHRoaXNbMF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHR5cGVvZiByb290alF1ZXJ5LnJlYWR5ICE9PSBcInVuZGVmaW5lZFwiID9cblx0XHRcdFx0cm9vdGpRdWVyeS5yZWFkeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3Iuc2VsZWN0b3IgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHRoaXMuc2VsZWN0b3IgPSBzZWxlY3Rvci5zZWxlY3Rvcjtcblx0XHRcdHRoaXMuY29udGV4dCA9IHNlbGVjdG9yLmNvbnRleHQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmV4dGVuZCh7XG5cdGRpcjogZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG1hdGNoZWQ7XG5cdH0sXG5cblx0c2libGluZzogZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRcdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZWQ7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbaV0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0cG9zID0gcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSB8fCB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvcnMsIGNvbnRleHQgfHwgdGhpcy5jb250ZXh0ICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0Zm9yICggY3VyID0gdGhpc1tpXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmIChwb3MgP1xuXHRcdFx0XHRcdHBvcy5pbmRleChjdXIpID4gLTEgOlxuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoY3VyLCBzZWxlY3RvcnMpKSApIHtcblxuXHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWUoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZShcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKHNlbGVjdG9yKVxuXHRcdCk7XG5cdH1cbn0pO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoY3VyID0gY3VyW2Rpcl0pICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBqUXVlcnkuc2libGluZyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LnNpYmxpbmcoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50IHx8IGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlKCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSk7XG52YXIgcm5vdHdoaXRlID0gKC9cXFMrL2cpO1xuXG5cblxuLy8gU3RyaW5nIHRvIE9iamVjdCBvcHRpb25zIGZvcm1hdCBjYWNoZVxudmFyIG9wdGlvbnNDYWNoZSA9IHt9O1xuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lcyBhbmQgc3RvcmUgaW4gY2FjaGVcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSBvcHRpb25zQ2FjaGVbIG9wdGlvbnMgXSA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0KCBvcHRpb25zQ2FjaGVbIG9wdGlvbnMgXSB8fCBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gTGFzdCBmaXJlIHZhbHVlIChmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzKVxuXHRcdG1lbW9yeSxcblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cdFx0Ly8gRmlyc3QgY2FsbGJhY2sgdG8gZmlyZSAodXNlZCBpbnRlcm5hbGx5IGJ5IGFkZCBhbmQgZmlyZVdpdGgpXG5cdFx0ZmlyaW5nU3RhcnQsXG5cdFx0Ly8gRW5kIG9mIHRoZSBsb29wIHdoZW4gZmlyaW5nXG5cdFx0ZmlyaW5nTGVuZ3RoLFxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IHJlbW92ZSBpZiBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXgsXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cdFx0Ly8gU3RhY2sgb2YgZmlyZSBjYWxscyBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHN0YWNrID0gIW9wdGlvbnMub25jZSAmJiBbXSxcblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0XHRcdG1lbW9yeSA9IG9wdGlvbnMubWVtb3J5ICYmIGRhdGE7XG5cdFx0XHRmaXJlZCA9IHRydWU7XG5cdFx0XHRmaXJpbmdJbmRleCA9IGZpcmluZ1N0YXJ0IHx8IDA7XG5cdFx0XHRmaXJpbmdTdGFydCA9IDA7XG5cdFx0XHRmaXJpbmdMZW5ndGggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IGxpc3QgJiYgZmlyaW5nSW5kZXggPCBmaXJpbmdMZW5ndGg7IGZpcmluZ0luZGV4KysgKSB7XG5cdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggZGF0YVsgMCBdLCBkYXRhWyAxIF0gKSA9PT0gZmFsc2UgJiYgb3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTsgLy8gVG8gcHJldmVudCBmdXJ0aGVyIGNhbGxzIHVzaW5nIGFkZFxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0aWYgKCBzdGFjayApIHtcblx0XHRcdFx0XHRpZiAoIHN0YWNrLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGZpcmUoIHN0YWNrLnNoaWZ0KCkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2VsZi5kaXNhYmxlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHQvLyBGaXJzdCwgd2Ugc2F2ZSB0aGUgY3VycmVudCBsZW5ndGhcblx0XHRcdFx0XHR2YXIgc3RhcnQgPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHQoZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH0pKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHQvLyBEbyB3ZSBuZWVkIHRvIGFkZCB0aGUgY2FsbGJhY2tzIHRvIHRoZVxuXHRcdFx0XHRcdC8vIGN1cnJlbnQgZmlyaW5nIGJhdGNoP1xuXHRcdFx0XHRcdGlmICggZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nTGVuZ3RoID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0Ly8gV2l0aCBtZW1vcnksIGlmIHdlJ3JlIG5vdCBmaXJpbmcgdGhlblxuXHRcdFx0XHRcdC8vIHdlIHNob3VsZCBjYWxsIHJpZ2h0IGF3YXlcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdTdGFydCA9IHN0YXJ0O1xuXHRcdFx0XHRcdFx0ZmlyZSggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdFx0aWYgKCBmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdMZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRmaXJpbmdMZW5ndGgtLTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/IGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOiAhISggbGlzdCAmJiBsaXN0Lmxlbmd0aCApO1xuXHRcdFx0fSxcblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHRmaXJpbmdMZW5ndGggPSAwO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBIYXZlIHRoZSBsaXN0IGRvIG5vdGhpbmcgYW55bW9yZVxuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxpc3QgPSBzdGFjayA9IG1lbW9yeSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gSXMgaXQgZGlzYWJsZWQ/XG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cdFx0XHQvLyBMb2NrIHRoZSBsaXN0IGluIGl0cyBjdXJyZW50IHN0YXRlXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c3RhY2sgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdGlmICggIW1lbW9yeSApIHtcblx0XHRcdFx0XHRzZWxmLmRpc2FibGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBJcyBpdCBsb2NrZWQ/XG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIXN0YWNrO1xuXHRcdFx0fSxcblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCBsaXN0ICYmICggIWZpcmVkIHx8IHN0YWNrICkgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRpZiAoIGZpcmluZyApIHtcblx0XHRcdFx0XHRcdHN0YWNrLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZmlyZSggYXJncyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxualF1ZXJ5LmV4dGVuZCh7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBsaXN0ZW5lciBsaXN0LCBmaW5hbCBzdGF0ZVxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLCBcInJlamVjdGVkXCIgXSxcblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoXCJtZW1vcnlcIikgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0galF1ZXJ5LmlzRnVuY3Rpb24oIGZuc1sgaSBdICkgJiYgZm5zWyBpIF07XG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkWyBkb25lIHwgZmFpbCB8IHByb2dyZXNzIF0gZm9yIGZvcndhcmRpbmcgYWN0aW9ucyB0byBuZXdEZWZlclxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbMV0gXShmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gcHJvbWlzZSA/IG5ld0RlZmVyLnByb21pc2UoKSA6IHRoaXMsIGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9KS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0cHJvbWlzZS5waXBlID0gcHJvbWlzZS50aGVuO1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgMyBdO1xuXG5cdFx0XHQvLyBwcm9taXNlWyBkb25lIHwgZmFpbCB8IHByb2dyZXNzIF0gPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbMV0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdC8vIHN0YXRlID0gWyByZXNvbHZlZCB8IHJlamVjdGVkIF1cblx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXG5cdFx0XHRcdC8vIFsgcmVqZWN0X2xpc3QgfCByZXNvbHZlX2xpc3QgXS5kaXNhYmxlOyBwcm9ncmVzc19saXN0LmxvY2tcblx0XHRcdFx0fSwgdHVwbGVzWyBpIF4gMSBdWyAyIF0uZGlzYWJsZSwgdHVwbGVzWyAyIF1bIDIgXS5sb2NrICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGRlZmVycmVkWyByZXNvbHZlIHwgcmVqZWN0IHwgbm90aWZ5IF1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVswXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVswXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gcHJvbWlzZSA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbMF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9KTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHN1Ym9yZGluYXRlIC8qICwgLi4uLCBzdWJvcmRpbmF0ZU4gKi8gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXHRcdFx0bGVuZ3RoID0gcmVzb2x2ZVZhbHVlcy5sZW5ndGgsXG5cblx0XHRcdC8vIHRoZSBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGxlbmd0aCAhPT0gMSB8fCAoIHN1Ym9yZGluYXRlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBzdWJvcmRpbmF0ZS5wcm9taXNlICkgKSA/IGxlbmd0aCA6IDAsXG5cblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWQuIElmIHJlc29sdmVWYWx1ZXMgY29uc2lzdCBvZiBvbmx5IGEgc2luZ2xlIERlZmVycmVkLCBqdXN0IHVzZSB0aGF0LlxuXHRcdFx0ZGVmZXJyZWQgPSByZW1haW5pbmcgPT09IDEgPyBzdWJvcmRpbmF0ZSA6IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBVcGRhdGUgZnVuY3Rpb24gZm9yIGJvdGggcmVzb2x2ZSBhbmQgcHJvZ3Jlc3MgdmFsdWVzXG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGksIGNvbnRleHRzLCB2YWx1ZXMgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0Y29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0dmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCB2YWx1ZXMgPT09IHByb2dyZXNzVmFsdWVzICkge1xuXHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggY29udGV4dHMsIHZhbHVlcyApO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY29udGV4dHMsIHZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH0sXG5cblx0XHRcdHByb2dyZXNzVmFsdWVzLCBwcm9ncmVzc0NvbnRleHRzLCByZXNvbHZlQ29udGV4dHM7XG5cblx0XHQvLyBBZGQgbGlzdGVuZXJzIHRvIERlZmVycmVkIHN1Ym9yZGluYXRlczsgdHJlYXQgb3RoZXJzIGFzIHJlc29sdmVkXG5cdFx0aWYgKCBsZW5ndGggPiAxICkge1xuXHRcdFx0cHJvZ3Jlc3NWYWx1ZXMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xuXHRcdFx0cHJvZ3Jlc3NDb250ZXh0cyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0ucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXS5wcm9taXNlKClcblx0XHRcdFx0XHRcdC5kb25lKCB1cGRhdGVGdW5jKCBpLCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKSApXG5cdFx0XHRcdFx0XHQuZmFpbCggZGVmZXJyZWQucmVqZWN0IClcblx0XHRcdFx0XHRcdC5wcm9ncmVzcyggdXBkYXRlRnVuYyggaSwgcHJvZ3Jlc3NDb250ZXh0cywgcHJvZ3Jlc3NWYWx1ZXMgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC0tcmVtYWluaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UncmUgbm90IHdhaXRpbmcgb24gYW55dGhpbmcsIHJlc29sdmUgdGhlIG1hc3RlclxuXHRcdGlmICggIXJlbWFpbmluZyApIHtcblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xuXHR9XG59KTtcblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3Q7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0Ly8gQWRkIHRoZSBjYWxsYmFja1xuXHRqUXVlcnkucmVhZHkucHJvbWlzZSgpLmRvbmUoIGZuICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKHtcblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSG9sZCAob3IgcmVsZWFzZSkgdGhlIHJlYWR5IGV2ZW50XG5cdGhvbGRSZWFkeTogZnVuY3Rpb24oIGhvbGQgKSB7XG5cdFx0aWYgKCBob2xkICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXG5cdFx0Ly8gVHJpZ2dlciBhbnkgYm91bmQgcmVhZHkgZXZlbnRzXG5cdFx0aWYgKCBqUXVlcnkuZm4udHJpZ2dlckhhbmRsZXIgKSB7XG5cdFx0XHRqUXVlcnkoIGRvY3VtZW50ICkudHJpZ2dlckhhbmRsZXIoIFwicmVhZHlcIiApO1xuXHRcdFx0alF1ZXJ5KCBkb2N1bWVudCApLm9mZiggXCJyZWFkeVwiICk7XG5cdFx0fVxuXHR9XG59KTtcblxuLyoqXG4gKiBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuICovXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQsIGZhbHNlICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkLCBmYWxzZSApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxualF1ZXJ5LnJlYWR5LnByb21pc2UgPSBmdW5jdGlvbiggb2JqICkge1xuXHRpZiAoICFyZWFkeUxpc3QgKSB7XG5cblx0XHRyZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxuXHRcdC8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuXHRcdC8vIFdlIG9uY2UgdHJpZWQgdG8gdXNlIHJlYWR5U3RhdGUgXCJpbnRlcmFjdGl2ZVwiIGhlcmUsIGJ1dCBpdCBjYXVzZWQgaXNzdWVzIGxpa2UgdGhlIG9uZVxuXHRcdC8vIGRpc2NvdmVyZWQgYnkgQ2hyaXNTIGhlcmU6IGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMjgyI2NvbW1lbnQ6MTVcblx0XHRpZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiApIHtcblx0XHRcdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHRcdFx0c2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkLCBmYWxzZSApO1xuXG5cdFx0XHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQsIGZhbHNlICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZWFkeUxpc3QucHJvbWlzZSggb2JqICk7XG59O1xuXG4vLyBLaWNrIG9mZiB0aGUgRE9NIHJlYWR5IGNoZWNrIGV2ZW4gaWYgdGhlIHVzZXIgZG9lcyBub3RcbmpRdWVyeS5yZWFkeS5wcm9taXNlKCk7XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0galF1ZXJ5LmFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIGpRdWVyeS50eXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0alF1ZXJ5LmFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbaV0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKCBlbGVtc1tpXSwga2V5LCByYXcgPyB2YWx1ZSA6IHZhbHVlLmNhbGwoIGVsZW1zW2ldLCBpLCBmbiggZWxlbXNbaV0sIGtleSApICkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY2hhaW5hYmxlID9cblx0XHRlbGVtcyA6XG5cblx0XHQvLyBHZXRzXG5cdFx0YnVsayA/XG5cdFx0XHRmbi5jYWxsKCBlbGVtcyApIDpcblx0XHRcdGxlbiA/IGZuKCBlbGVtc1swXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYW4gb2JqZWN0IGNhbiBoYXZlIGRhdGFcbiAqL1xualF1ZXJ5LmFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHQvKiBqc2hpbnQgLVcwMTggKi9cblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQsXG5cdC8vIE9sZCBXZWJLaXQgZG9lcyBub3QgaGF2ZSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMvZnJlZXplIG1ldGhvZCxcblx0Ly8gcmV0dXJuIG5ldyBlbXB0eSBvYmplY3QgaW5zdGVhZCB3aXRoIG5vIFtbc2V0XV0gYWNjZXNzb3Jcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLmNhY2hlID0ge30sIDAsIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHt9O1xuXHRcdH1cblx0fSk7XG5cblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5EYXRhLmFjY2VwdHMgPSBqUXVlcnkuYWNjZXB0RGF0YTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cdGtleTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0Ly8gQWx3YXlzIHJldHVybiB0aGUga2V5IGZvciBhIGZyb3plbiBvYmplY3QuXG5cdFx0aWYgKCAhRGF0YS5hY2NlcHRzKCBvd25lciApICkge1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGRlc2NyaXB0b3IgPSB7fSxcblx0XHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZSBrZXlcblx0XHRcdHVubG9jayA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXVubG9jayApIHtcblx0XHRcdHVubG9jayA9IERhdGEudWlkKys7XG5cblx0XHRcdC8vIFNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlLCBub24td3JpdGFibGUgcHJvcGVydHlcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRlc2NyaXB0b3JbIHRoaXMuZXhwYW5kbyBdID0geyB2YWx1ZTogdW5sb2NrIH07XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBvd25lciwgZGVzY3JpcHRvciApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDRcblx0XHRcdC8vIEZhbGxiYWNrIHRvIGEgbGVzcyBzZWN1cmUgZGVmaW5pdGlvblxuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdGRlc2NyaXB0b3JbIHRoaXMuZXhwYW5kbyBdID0gdW5sb2NrO1xuXHRcdFx0XHRqUXVlcnkuZXh0ZW5kKCBvd25lciwgZGVzY3JpcHRvciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0aWYgKCAhdGhpcy5jYWNoZVsgdW5sb2NrIF0gKSB7XG5cdFx0XHR0aGlzLmNhY2hlWyB1bmxvY2sgXSA9IHt9O1xuXHRcdH1cblxuXHRcdHJldHVybiB1bmxvY2s7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdC8vIFRoZXJlIG1heSBiZSBhbiB1bmxvY2sgYXNzaWduZWQgdG8gdGhpcyBub2RlLFxuXHRcdFx0Ly8gaWYgdGhlcmUgaXMgbm8gZW50cnkgZm9yIHRoaXMgXCJvd25lclwiLCBjcmVhdGUgb25lIGlubGluZVxuXHRcdFx0Ly8gYW5kIHNldCB0aGUgdW5sb2NrIGFzIHRob3VnaCBhbiBvd25lciBlbnRyeSBoYWQgYWx3YXlzIGV4aXN0ZWRcblx0XHRcdHVubG9jayA9IHRoaXMua2V5KCBvd25lciApLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlWyB1bmxvY2sgXTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGRhdGEgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gRnJlc2ggYXNzaWdubWVudHMgYnkgb2JqZWN0IGFyZSBzaGFsbG93IGNvcGllZFxuXHRcdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblx0XHRcdFx0alF1ZXJ5LmV4dGVuZCggdGhpcy5jYWNoZVsgdW5sb2NrIF0sIGRhdGEgKTtcblx0XHRcdC8vIE90aGVyd2lzZSwgY29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0XHRjYWNoZVsgcHJvcCBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHQvLyBFaXRoZXIgYSB2YWxpZCBjYWNoZSBpcyBmb3VuZCwgb3Igd2lsbCBiZSBjcmVhdGVkLlxuXHRcdC8vIE5ldyBjYWNoZXMgd2lsbCBiZSBjcmVhdGVkIGFuZCB0aGUgdW5sb2NrIHJldHVybmVkLFxuXHRcdC8vIGFsbG93aW5nIGRpcmVjdCBhY2Nlc3MgdG8gdGhlIG5ld2x5IGNyZWF0ZWRcblx0XHQvLyBlbXB0eSBkYXRhIG9iamVjdC4gQSB2YWxpZCBvd25lciBvYmplY3QgbXVzdCBiZSBwcm92aWRlZC5cblx0XHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlWyB0aGlzLmtleSggb3duZXIgKSBdO1xuXG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdGNhY2hlIDogY2FjaGVbIGtleSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgc3RvcmVkO1xuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCgoa2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIpICYmIHZhbHVlID09PSB1bmRlZmluZWQpICkge1xuXG5cdFx0XHRzdG9yZWQgPSB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXG5cdFx0XHRyZXR1cm4gc3RvcmVkICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRzdG9yZWQgOiB0aGlzLmdldCggb3duZXIsIGpRdWVyeS5jYW1lbENhc2Uoa2V5KSApO1xuXHRcdH1cblxuXHRcdC8vIFsqXVdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSwgbmFtZSwgY2FtZWwsXG5cdFx0XHR1bmxvY2sgPSB0aGlzLmtleSggb3duZXIgKSxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZVsgdW5sb2NrIF07XG5cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dGhpcy5jYWNoZVsgdW5sb2NrIF0gPSB7fTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSgga2V5ICkgKSB7XG5cdFx0XHRcdC8vIElmIFwibmFtZVwiIGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2hlbiBkYXRhIGlzIGluaXRpYWxseSBjcmVhdGVkLCB2aWEgKFwia2V5XCIsIFwidmFsXCIpIHNpZ25hdHVyZSxcblx0XHRcdFx0Ly8ga2V5cyB3aWxsIGJlIGNvbnZlcnRlZCB0byBjYW1lbENhc2UuXG5cdFx0XHRcdC8vIFNpbmNlIHRoZXJlIGlzIG5vIHdheSB0byB0ZWxsIF9ob3dfIGEga2V5IHdhcyBhZGRlZCwgcmVtb3ZlXG5cdFx0XHRcdC8vIGJvdGggcGxhaW4ga2V5IGFuZCBjYW1lbENhc2Uga2V5LiAjMTI3ODZcblx0XHRcdFx0Ly8gVGhpcyB3aWxsIG9ubHkgcGVuYWxpemUgdGhlIGFycmF5IGFyZ3VtZW50IHBhdGguXG5cdFx0XHRcdG5hbWUgPSBrZXkuY29uY2F0KCBrZXkubWFwKCBqUXVlcnkuY2FtZWxDYXNlICkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNhbWVsID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XG5cdFx0XHRcdC8vIFRyeSB0aGUgc3RyaW5nIGFzIGEga2V5IGJlZm9yZSBhbnkgbWFuaXB1bGF0aW9uXG5cdFx0XHRcdGlmICgga2V5IGluIGNhY2hlICkge1xuXHRcdFx0XHRcdG5hbWUgPSBbIGtleSwgY2FtZWwgXTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRuYW1lID0gY2FtZWw7XG5cdFx0XHRcdFx0bmFtZSA9IG5hbWUgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFx0WyBuYW1lIF0gOiAoIG5hbWUubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aSA9IG5hbWUubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsgbmFtZVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0cmV0dXJuICFqUXVlcnkuaXNFbXB0eU9iamVjdChcblx0XHRcdHRoaXMuY2FjaGVbIG93bmVyWyB0aGlzLmV4cGFuZG8gXSBdIHx8IHt9XG5cdFx0KTtcblx0fSxcblx0ZGlzY2FyZDogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdGlmICggb3duZXJbIHRoaXMuZXhwYW5kbyBdICkge1xuXHRcdFx0ZGVsZXRlIHRoaXMuY2FjaGVbIG93bmVyWyB0aGlzLmV4cGFuZG8gXSBdO1xuXHRcdH1cblx0fVxufTtcbnZhciBkYXRhX3ByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YV91c2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC8oW0EtWl0pL2c7XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kMVwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZGF0YSA9PT0gXCJ0cnVlXCIgPyB0cnVlIDpcblx0XHRcdFx0XHRkYXRhID09PSBcImZhbHNlXCIgPyBmYWxzZSA6XG5cdFx0XHRcdFx0ZGF0YSA9PT0gXCJudWxsXCIgPyBudWxsIDpcblx0XHRcdFx0XHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRcdFx0XHRcdCtkYXRhICsgXCJcIiA9PT0gZGF0YSA/ICtkYXRhIDpcblx0XHRcdFx0XHRyYnJhY2UudGVzdCggZGF0YSApID8galF1ZXJ5LnBhcnNlSlNPTiggZGF0YSApIDpcblx0XHRcdFx0XHRkYXRhO1xuXHRcdFx0fSBjYXRjaCggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YV91c2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFfdXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YV9wcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YV91c2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFfdXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhX3ByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YV9wcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhX3ByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YV91c2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YV9wcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFMTErXG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lLnNsaWNlKDUpICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFfcHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFfdXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGEsXG5cdFx0XHRcdGNhbWVsS2V5ID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyB3aXRoIHRoZSBrZXkgYXMtaXNcblx0XHRcdFx0ZGF0YSA9IGRhdGFfdXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gd2l0aCB0aGUga2V5IGNhbWVsaXplZFxuXHRcdFx0XHRkYXRhID0gZGF0YV91c2VyLmdldCggZWxlbSwgY2FtZWxLZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwgY2FtZWxLZXksIHVuZGVmaW5lZCApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdFx0Ly8gRmlyc3QsIGF0dGVtcHQgdG8gc3RvcmUgYSBjb3B5IG9yIHJlZmVyZW5jZSBvZiBhbnlcblx0XHRcdFx0Ly8gZGF0YSB0aGF0IG1pZ2h0J3ZlIGJlZW4gc3RvcmUgd2l0aCBhIGNhbWVsQ2FzZWQga2V5LlxuXHRcdFx0XHR2YXIgZGF0YSA9IGRhdGFfdXNlci5nZXQoIHRoaXMsIGNhbWVsS2V5ICk7XG5cblx0XHRcdFx0Ly8gRm9yIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGUgaW50ZXJvcCwgd2UgaGF2ZSB0b1xuXHRcdFx0XHQvLyBzdG9yZSBwcm9wZXJ0eSBuYW1lcyB3aXRoIGRhc2hlcyBpbiBhIGNhbWVsQ2FzZSBmb3JtLlxuXHRcdFx0XHQvLyBUaGlzIG1pZ2h0IG5vdCBhcHBseSB0byBhbGwgcHJvcGVydGllcy4uLipcblx0XHRcdFx0ZGF0YV91c2VyLnNldCggdGhpcywgY2FtZWxLZXksIHZhbHVlICk7XG5cblx0XHRcdFx0Ly8gKi4uLiBJbiB0aGUgY2FzZSBvZiBwcm9wZXJ0aWVzIHRoYXQgbWlnaHQgX2FjdHVhbGx5X1xuXHRcdFx0XHQvLyBoYXZlIGRhc2hlcywgd2UgbmVlZCB0byBhbHNvIHN0b3JlIGEgY29weSBvZiB0aGF0XG5cdFx0XHRcdC8vIHVuY2hhbmdlZCBwcm9wZXJ0eS5cblx0XHRcdFx0aWYgKCBrZXkuaW5kZXhPZihcIi1cIikgIT09IC0xICYmIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRkYXRhX3VzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFfdXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0pO1xuXHR9XG59KTtcblxuXG5qUXVlcnkuZXh0ZW5kKHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFfcHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBqUXVlcnkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YV9wcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheShkYXRhKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhX3ByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhX3ByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikuYWRkKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhX3ByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9KVxuXHRcdH0pO1xuXHR9XG59KTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWzBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbMF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9KTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFfcHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0pO1xudmFyIHBudW0gPSAoL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8pLnNvdXJjZTtcblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgaXNIaWRkZW4gPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cdFx0Ly8gaXNIaWRkZW4gbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCIgfHwgIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cdH07XG5cbnZhciByY2hlY2thYmxlVHlwZSA9ICgvXig/OmNoZWNrYm94fHJhZGlvKSQvaSk7XG5cblxuXG4oZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBTYWZhcmk8PTUuMVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogU2FmYXJpPD01LjEsIEFuZHJvaWQ8NC4yXG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUU8PTExK1xuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xufSkoKTtcbnZhciBzdHJ1bmRlZmluZWQgPSB0eXBlb2YgdW5kZWZpbmVkO1xuXG5cblxuc3VwcG9ydC5mb2N1c2luQnViYmxlcyA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51KXxjbGljay8sXG5cdHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KSQvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhX3ByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBEb24ndCBhdHRhY2ggZXZlbnRzIHRvIG5vRGF0YSBvciB0ZXh0L2NvbW1lbnQgbm9kZXMgKGJ1dCBhbGxvdyBwbGFpbiBvYmplY3RzKVxuXHRcdGlmICggIWVsZW1EYXRhICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggIShldmVudHMgPSBlbGVtRGF0YS5ldmVudHMpICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG5cdFx0fVxuXHRcdGlmICggIShldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBzdHJ1bmRlZmluZWQgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzW3RdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbMV07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbMl0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCh7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKFwiLlwiKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggIShoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fCBzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSwgZmFsc2UgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhX3ByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFfcHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzW3RdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbMV07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbMl0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWzJdICYmIG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oXCJcXFxcLig/Oi4qXFxcXC58KVwiKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHwgc3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGVsZXRlIGVsZW1EYXRhLmhhbmRsZTtcblx0XHRcdGRhdGFfcHJpdi5yZW1vdmUoIGVsZW0sIFwiZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KFwiLlwiKSA6IFtdO1xuXG5cdFx0Y3VyID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZihcIi5cIikgPj0gMCApIHtcblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KFwiLlwiKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKFwiOlwiKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKFwiLlwiKTtcblx0XHRldmVudC5uYW1lc3BhY2VfcmUgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoY3VyID0gZXZlbnRQYXRoW2krK10pICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhX3ByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiYgZGF0YV9wcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGpRdWVyeS5hY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoIXNwZWNpYWwuX2RlZmF1bHQgfHwgc3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlKSAmJlxuXHRcdFx0XHRqUXVlcnkuYWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHRldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICk7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblx0XHRcdGhhbmRsZXJzID0gKCBkYXRhX3ByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbMF0gPSBldmVudDtcblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoIChtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdKSAmJiAhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBUcmlnZ2VyZWQgZXZlbnQgbXVzdCBlaXRoZXIgMSkgaGF2ZSBubyBuYW1lc3BhY2UsIG9yIDIpIGhhdmUgbmFtZXNwYWNlKHMpXG5cdFx0XHRcdC8vIGEgc3Vic2V0IG9yIGVxdWFsIHRvIHRob3NlIGluIHRoZSBib3VuZCBldmVudCAoYm90aCBjYW4gaGF2ZSBubyBuYW1lc3BhY2UpLlxuXHRcdFx0XHRpZiAoICFldmVudC5uYW1lc3BhY2VfcmUgfHwgZXZlbnQubmFtZXNwYWNlX3JlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoIChqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30pLmhhbmRsZSB8fCBoYW5kbGVPYmouaGFuZGxlciApXG5cdFx0XHRcdFx0XHRcdC5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZXZlbnQucmVzdWx0ID0gcmV0KSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBtYXRjaGVzLCBzZWwsIGhhbmRsZU9iaixcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKCMxMzE4MClcblx0XHQvLyBBdm9pZCBub24tbGVmdC1jbGljayBidWJibGluZyBpbiBGaXJlZm94ICgjMzg2MSlcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiYgY3VyLm5vZGVUeXBlICYmICghZXZlbnQuYnV0dG9uIHx8IGV2ZW50LnR5cGUgIT09IFwiY2xpY2tcIikgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5kaXNhYmxlZCAhPT0gdHJ1ZSB8fCBldmVudC50eXBlICE9PSBcImNsaWNrXCIgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlcyA9IFtdO1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZXNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPj0gMCA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZXMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlcy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCh7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZXMgfSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKHsgZWxlbTogdGhpcywgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHQvLyBJbmNsdWRlcyBzb21lIGV2ZW50IHByb3BzIHNoYXJlZCBieSBLZXlFdmVudCBhbmQgTW91c2VFdmVudFxuXHRwcm9wczogXCJhbHRLZXkgYnViYmxlcyBjYW5jZWxhYmxlIGN0cmxLZXkgY3VycmVudFRhcmdldCBldmVudFBoYXNlIG1ldGFLZXkgcmVsYXRlZFRhcmdldCBzaGlmdEtleSB0YXJnZXQgdGltZVN0YW1wIHZpZXcgd2hpY2hcIi5zcGxpdChcIiBcIiksXG5cblx0Zml4SG9va3M6IHt9LFxuXG5cdGtleUhvb2tzOiB7XG5cdFx0cHJvcHM6IFwiY2hhciBjaGFyQ29kZSBrZXkga2V5Q29kZVwiLnNwbGl0KFwiIFwiKSxcblx0XHRmaWx0ZXI6IGZ1bmN0aW9uKCBldmVudCwgb3JpZ2luYWwgKSB7XG5cblx0XHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICkge1xuXHRcdFx0XHRldmVudC53aGljaCA9IG9yaWdpbmFsLmNoYXJDb2RlICE9IG51bGwgPyBvcmlnaW5hbC5jaGFyQ29kZSA6IG9yaWdpbmFsLmtleUNvZGU7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBldmVudDtcblx0XHR9XG5cdH0sXG5cblx0bW91c2VIb29rczoge1xuXHRcdHByb3BzOiBcImJ1dHRvbiBidXR0b25zIGNsaWVudFggY2xpZW50WSBvZmZzZXRYIG9mZnNldFkgcGFnZVggcGFnZVkgc2NyZWVuWCBzY3JlZW5ZIHRvRWxlbWVudFwiLnNwbGl0KFwiIFwiKSxcblx0XHRmaWx0ZXI6IGZ1bmN0aW9uKCBldmVudCwgb3JpZ2luYWwgKSB7XG5cdFx0XHR2YXIgZXZlbnREb2MsIGRvYywgYm9keSxcblx0XHRcdFx0YnV0dG9uID0gb3JpZ2luYWwuYnV0dG9uO1xuXG5cdFx0XHQvLyBDYWxjdWxhdGUgcGFnZVgvWSBpZiBtaXNzaW5nIGFuZCBjbGllbnRYL1kgYXZhaWxhYmxlXG5cdFx0XHRpZiAoIGV2ZW50LnBhZ2VYID09IG51bGwgJiYgb3JpZ2luYWwuY2xpZW50WCAhPSBudWxsICkge1xuXHRcdFx0XHRldmVudERvYyA9IGV2ZW50LnRhcmdldC5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50O1xuXHRcdFx0XHRkb2MgPSBldmVudERvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHRcdGJvZHkgPSBldmVudERvYy5ib2R5O1xuXG5cdFx0XHRcdGV2ZW50LnBhZ2VYID0gb3JpZ2luYWwuY2xpZW50WCArICggZG9jICYmIGRvYy5zY3JvbGxMZWZ0IHx8IGJvZHkgJiYgYm9keS5zY3JvbGxMZWZ0IHx8IDAgKSAtICggZG9jICYmIGRvYy5jbGllbnRMZWZ0IHx8IGJvZHkgJiYgYm9keS5jbGllbnRMZWZ0IHx8IDAgKTtcblx0XHRcdFx0ZXZlbnQucGFnZVkgPSBvcmlnaW5hbC5jbGllbnRZICsgKCBkb2MgJiYgZG9jLnNjcm9sbFRvcCAgfHwgYm9keSAmJiBib2R5LnNjcm9sbFRvcCAgfHwgMCApIC0gKCBkb2MgJiYgZG9jLmNsaWVudFRvcCAgfHwgYm9keSAmJiBib2R5LmNsaWVudFRvcCAgfHwgMCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0XHQvLyBOb3RlOiBidXR0b24gaXMgbm90IG5vcm1hbGl6ZWQsIHNvIGRvbid0IHVzZSBpdFxuXHRcdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGV2ZW50LndoaWNoID0gKCBidXR0b24gJiAxID8gMSA6ICggYnV0dG9uICYgMiA/IDMgOiAoIGJ1dHRvbiAmIDQgPyAyIDogMCApICkgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdH1cblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRpZiAoIGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdH1cblxuXHRcdC8vIENyZWF0ZSBhIHdyaXRhYmxlIGNvcHkgb2YgdGhlIGV2ZW50IG9iamVjdCBhbmQgbm9ybWFsaXplIHNvbWUgcHJvcGVydGllc1xuXHRcdHZhciBpLCBwcm9wLCBjb3B5LFxuXHRcdFx0dHlwZSA9IGV2ZW50LnR5cGUsXG5cdFx0XHRvcmlnaW5hbEV2ZW50ID0gZXZlbnQsXG5cdFx0XHRmaXhIb29rID0gdGhpcy5maXhIb29rc1sgdHlwZSBdO1xuXG5cdFx0aWYgKCAhZml4SG9vayApIHtcblx0XHRcdHRoaXMuZml4SG9va3NbIHR5cGUgXSA9IGZpeEhvb2sgPVxuXHRcdFx0XHRybW91c2VFdmVudC50ZXN0KCB0eXBlICkgPyB0aGlzLm1vdXNlSG9va3MgOlxuXHRcdFx0XHRya2V5RXZlbnQudGVzdCggdHlwZSApID8gdGhpcy5rZXlIb29rcyA6XG5cdFx0XHRcdHt9O1xuXHRcdH1cblx0XHRjb3B5ID0gZml4SG9vay5wcm9wcyA/IHRoaXMucHJvcHMuY29uY2F0KCBmaXhIb29rLnByb3BzICkgOiB0aGlzLnByb3BzO1xuXG5cdFx0ZXZlbnQgPSBuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cblx0XHRpID0gY29weS5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRwcm9wID0gY29weVsgaSBdO1xuXHRcdFx0ZXZlbnRbIHByb3AgXSA9IG9yaWdpbmFsRXZlbnRbIHByb3AgXTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBDb3Jkb3ZhIDIuNSAoV2ViS2l0KSAoIzEzMjU1KVxuXHRcdC8vIEFsbCBldmVudHMgc2hvdWxkIGhhdmUgYSB0YXJnZXQ7IENvcmRvdmEgZGV2aWNlcmVhZHkgZG9lc24ndFxuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGRvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA2LjArLCBDaHJvbWU8Mjhcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdGlmICggZXZlbnQudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZXZlbnQudGFyZ2V0LnBhcmVudE5vZGU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZpeEhvb2suZmlsdGVyID8gZml4SG9vay5maWx0ZXIoIGV2ZW50LCBvcmlnaW5hbEV2ZW50ICkgOiBldmVudDtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGZvY3VzOiB7XG5cdFx0XHQvLyBGaXJlIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgIT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5mb2N1cyApIHtcblx0XHRcdFx0XHR0aGlzLmZvY3VzKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3VzaW5cIlxuXHRcdH0sXG5cdFx0Ymx1cjoge1xuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmJsdXIgKSB7XG5cdFx0XHRcdFx0dGhpcy5ibHVyKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3Vzb3V0XCJcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cdFx0XHQvLyBGb3IgY2hlY2tib3gsIGZpcmUgbmF0aXZlIGV2ZW50IHNvIGNoZWNrZWQgc3RhdGUgd2lsbCBiZSByaWdodFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgJiYgdGhpcy5jbGljayAmJiBqUXVlcnkubm9kZU5hbWUoIHRoaXMsIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHRoaXMuY2xpY2soKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBkb24ndCBmaXJlIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZXZlbnQudGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCwgYnViYmxlICkge1xuXHRcdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZS5cblx0XHQvLyBGYWtlIG9yaWdpbmFsRXZlbnQgdG8gYXZvaWQgZG9ub3IncyBzdG9wUHJvcGFnYXRpb24sIGJ1dCBpZiB0aGVcblx0XHQvLyBzaW11bGF0ZWQgZXZlbnQgcHJldmVudHMgZGVmYXVsdCB0aGVuIHdlIGRvIHRoZSBzYW1lIG9uIHRoZSBkb25vci5cblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWUsXG5cdFx0XHRcdG9yaWdpbmFsRXZlbnQ6IHt9XG5cdFx0XHR9XG5cdFx0KTtcblx0XHRpZiAoIGJ1YmJsZSApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5jYWxsKCBlbGVtLCBlICk7XG5cdFx0fVxuXHRcdGlmICggZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSwgZmFsc2UgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEodGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgalF1ZXJ5Lm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmIGUucHJldmVudERlZmF1bHQgKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgZS5zdG9wUHJvcGFnYXRpb24gKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uICkge1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59O1xuXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncbi8vIFN1cHBvcnQ6IENocm9tZSAxNStcbmpRdWVyeS5lYWNoKHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAocmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59KTtcblxuLy8gU3VwcG9ydDogRmlyZWZveCwgQ2hyb21lLCBTYWZhcmlcbi8vIENyZWF0ZSBcImJ1YmJsaW5nXCIgZm9jdXMgYW5kIGJsdXIgZXZlbnRzXG5pZiAoICFzdXBwb3J0LmZvY3VzaW5CdWJibGVzICkge1xuXHRqUXVlcnkuZWFjaCh7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApLCB0cnVlICk7XG5cdFx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhX3ByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YV9wcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YV9wcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhX3ByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YV9wcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9KTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAvKklOVEVSTkFMKi8gb25lICkge1xuXHRcdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0XHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9uKCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXHRcdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRcdGZuID0gZGF0YTtcblx0XHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0XHRvcmlnRm4gPSBmbjtcblx0XHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdH07XG5cdFx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHRcdH0pO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgPyBoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOiBoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9KTtcblx0fSxcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9KTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1swXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0pO1xuXG5cbnZhclxuXHRyeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbXFx3Ol0rKVtePl0qKVxcLz4vZ2ksXG5cdHJ0YWdOYW1lID0gLzwoW1xcdzpdKykvLFxuXHRyaHRtbCA9IC88fCYjP1xcdys7Lyxcblx0cm5vSW5uZXJodG1sID0gLzwoPzpzY3JpcHR8c3R5bGV8bGluaykvaSxcblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cnNjcmlwdFR5cGUgPSAvXiR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pLFxuXHRyc2NyaXB0VHlwZU1hc2tlZCA9IC9edHJ1ZVxcLyguKikvLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2csXG5cblx0Ly8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcblx0d3JhcE1hcCA9IHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFOVxuXHRcdG9wdGlvbjogWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdLFxuXG5cdFx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRcdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdFx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHRcdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRcdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxuXHR9O1xuXG4vLyBTdXBwb3J0OiBJRTlcbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG4vLyBTdXBwb3J0OiAxLnggY29tcGF0aWJpbGl0eVxuLy8gTWFuaXB1bGF0aW5nIHRhYmxlcyByZXF1aXJlcyBhIHRib2R5XG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdHJldHVybiBqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0alF1ZXJ5Lm5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApID9cblxuXHRcdGVsZW0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0Ym9keVwiKVswXSB8fFxuXHRcdFx0ZWxlbS5hcHBlbmRDaGlsZCggZWxlbS5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0Ym9keVwiKSApIDpcblx0XHRlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpICE9PSBudWxsKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdHZhciBtYXRjaCA9IHJzY3JpcHRUeXBlTWFza2VkLmV4ZWMoIGVsZW0udHlwZSApO1xuXG5cdGlmICggbWF0Y2ggKSB7XG5cdFx0ZWxlbS50eXBlID0gbWF0Y2hbIDEgXTtcblx0fSBlbHNlIHtcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZShcInR5cGVcIik7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhX3ByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSwgXCJnbG9iYWxFdmFsXCIsICFyZWZFbGVtZW50cyB8fCBkYXRhX3ByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHBkYXRhQ3VyLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhX3ByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhX3ByaXYuYWNjZXNzKCBzcmMgKTtcblx0XHRwZGF0YUN1ciA9IGRhdGFfcHJpdi5zZXQoIGRlc3QsIHBkYXRhT2xkICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkZWxldGUgcGRhdGFDdXIuaGFuZGxlO1xuXHRcdFx0cGRhdGFDdXIuZXZlbnRzID0ge307XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFfdXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFfdXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhX3VzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXHR2YXIgcmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApIDpcblx0XHRcdGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCA/IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICkgOlxuXHRcdFx0W107XG5cblx0cmV0dXJuIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBqUXVlcnkubm9kZU5hbWUoIGNvbnRleHQsIHRhZyApID9cblx0XHRqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKSA6XG5cdFx0cmV0O1xufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKHtcblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGJ1aWxkRnJhZ21lbnQ6IGZ1bmN0aW9uKCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uICkge1xuXHRcdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgY29udGFpbnMsIGosXG5cdFx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdFx0bm9kZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdFx0aWYgKCBqUXVlcnkudHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFF0V2ViS2l0LCBQaGFudG9tSlNcblx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpICk7XG5cblx0XHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGVsZW0ucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBRdFdlYktpdCwgUGhhbnRvbUpTXG5cdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0XHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0XHRpID0gMDtcblx0XHR3aGlsZSAoIChlbGVtID0gbm9kZXNbIGkrKyBdKSApIHtcblxuXHRcdFx0Ly8gIzQwODcgLSBJZiBvcmlnaW4gYW5kIGRlc3RpbmF0aW9uIGVsZW1lbnRzIGFyZSB0aGUgc2FtZSwgYW5kIHRoaXMgaXNcblx0XHRcdC8vIHRoYXQgZWxlbWVudCwgZG8gbm90IGRvIGFueXRoaW5nXG5cdFx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgIT09IC0xICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Y29udGFpbnMgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0XHRpZiAoIGNvbnRhaW5zICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHRtcFsgaisrIF0pICkge1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmcmFnbWVudDtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSwga2V5LFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IChlbGVtID0gZWxlbXNbIGkgXSkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRrZXkgPSBlbGVtWyBkYXRhX3ByaXYuZXhwYW5kbyBdO1xuXG5cdFx0XHRcdGlmICgga2V5ICYmIChkYXRhID0gZGF0YV9wcml2LmNhY2hlWyBrZXkgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggZGF0YV9wcml2LmNhY2hlWyBrZXkgXSApIHtcblx0XHRcdFx0XHRcdC8vIERpc2NhcmQgYW55IHJlbWFpbmluZyBgcHJpdmF0ZWAgZGF0YVxuXHRcdFx0XHRcdFx0ZGVsZXRlIGRhdGFfcHJpdi5jYWNoZVsga2V5IF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHQvLyBEaXNjYXJkIGFueSByZW1haW5pbmcgYHVzZXJgIGRhdGFcblx0XHRcdGRlbGV0ZSBkYXRhX3VzZXIuY2FjaGVbIGVsZW1bIGRhdGFfdXNlci5leHBhbmRvIF0gXTtcblx0XHR9XG5cdH1cbn0pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IsIGtlZXBEYXRhIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0ZWxlbXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCB0aGlzICkgOiB0aGlzLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggIWtlZXBEYXRhICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSApICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRpZiAoIGtlZXBEYXRhICYmIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgKSB7XG5cdFx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKGVsZW0gPSB0aGlzW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0gdmFsdWUucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2goIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1sgMCBdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0dGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGFyZyA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblxuXHRcdFx0aWYgKCBhcmcgKSB7XG5cdFx0XHRcdGFyZy5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vIEZvcmNlIHJlbW92YWwgaWYgdGhlcmUgd2FzIG5vIG5ldyBjb250ZW50IChlLmcuLCBmcm9tIGVtcHR5IGFyZ3VtZW50cylcblx0XHRyZXR1cm4gYXJnICYmIChhcmcubGVuZ3RoIHx8IGFyZy5ub2RlVHlwZSkgPyB0aGlzIDogdGhpcy5yZW1vdmUoKTtcblx0fSxcblxuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5yZW1vdmUoIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0ZG9tTWFuaXA6IGZ1bmN0aW9uKCBhcmdzLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXG5cdFx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZXQgPSB0aGlzLFxuXHRcdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdFx0aWYgKCBpc0Z1bmN0aW9uIHx8XG5cdFx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdFx0dmFyIHNlbGYgPSBzZXQuZXEoIGluZGV4ICk7XG5cdFx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcblx0XHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLmRvbU1hbmlwKCBhcmdzLCBjYWxsYmFjayApO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKCBsICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBqUXVlcnkuYnVpbGRGcmFnbWVudCggYXJncywgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCB0aGlzICk7XG5cdFx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZmlyc3QgKSB7XG5cdFx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW0gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFF0V2ViS2l0XG5cdFx0XHRcdFx0XHRcdC8vIGpRdWVyeS5tZXJnZSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGNhbGxiYWNrLmNhbGwoIHRoaXNbIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHQhZGF0YV9wcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJiBqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICkgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59KTtcblxualF1ZXJ5LmVhY2goe1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBRdFdlYktpdFxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93c1xuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59KTtcblxuXG52YXIgaWZyYW1lLFxuXHRlbGVtZGlzcGxheSA9IHt9O1xuXG4vKipcbiAqIFJldHJpZXZlIHRoZSBhY3R1YWwgZGlzcGxheSBvZiBhIGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG5vZGVOYW1lIG9mIHRoZSBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gZG9jIERvY3VtZW50IG9iamVjdFxuICovXG4vLyBDYWxsZWQgb25seSBmcm9tIHdpdGhpbiBkZWZhdWx0RGlzcGxheVxuZnVuY3Rpb24gYWN0dWFsRGlzcGxheSggbmFtZSwgZG9jICkge1xuXHR2YXIgc3R5bGUsXG5cdFx0ZWxlbSA9IGpRdWVyeSggZG9jLmNyZWF0ZUVsZW1lbnQoIG5hbWUgKSApLmFwcGVuZFRvKCBkb2MuYm9keSApLFxuXG5cdFx0Ly8gZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUgbWlnaHQgYmUgcmVsaWFibHkgdXNlZCBvbmx5IG9uIGF0dGFjaGVkIGVsZW1lbnRcblx0XHRkaXNwbGF5ID0gd2luZG93LmdldERlZmF1bHRDb21wdXRlZFN0eWxlICYmICggc3R5bGUgPSB3aW5kb3cuZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUoIGVsZW1bIDAgXSApICkgP1xuXG5cdFx0XHQvLyBVc2Ugb2YgdGhpcyBtZXRob2QgaXMgYSB0ZW1wb3JhcnkgZml4IChtb3JlIGxpa2Ugb3B0aW1pemF0aW9uKSB1bnRpbCBzb21ldGhpbmcgYmV0dGVyIGNvbWVzIGFsb25nLFxuXHRcdFx0Ly8gc2luY2UgaXQgd2FzIHJlbW92ZWQgZnJvbSBzcGVjaWZpY2F0aW9uIGFuZCBzdXBwb3J0ZWQgb25seSBpbiBGRlxuXHRcdFx0c3R5bGUuZGlzcGxheSA6IGpRdWVyeS5jc3MoIGVsZW1bIDAgXSwgXCJkaXNwbGF5XCIgKTtcblxuXHQvLyBXZSBkb24ndCBoYXZlIGFueSBkYXRhIHN0b3JlZCBvbiB0aGUgZWxlbWVudCxcblx0Ly8gc28gdXNlIFwiZGV0YWNoXCIgbWV0aG9kIGFzIGZhc3Qgd2F5IHRvIGdldCByaWQgb2YgdGhlIGVsZW1lbnRcblx0ZWxlbS5kZXRhY2goKTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuLyoqXG4gKiBUcnkgdG8gZGV0ZXJtaW5lIHRoZSBkZWZhdWx0IGRpc3BsYXkgdmFsdWUgb2YgYW4gZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IG5vZGVOYW1lXG4gKi9cbmZ1bmN0aW9uIGRlZmF1bHREaXNwbGF5KCBub2RlTmFtZSApIHtcblx0dmFyIGRvYyA9IGRvY3VtZW50LFxuXHRcdGRpc3BsYXkgPSBlbGVtZGlzcGxheVsgbm9kZU5hbWUgXTtcblxuXHRpZiAoICFkaXNwbGF5ICkge1xuXHRcdGRpc3BsYXkgPSBhY3R1YWxEaXNwbGF5KCBub2RlTmFtZSwgZG9jICk7XG5cblx0XHQvLyBJZiB0aGUgc2ltcGxlIHdheSBmYWlscywgcmVhZCBmcm9tIGluc2lkZSBhbiBpZnJhbWVcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiIHx8ICFkaXNwbGF5ICkge1xuXG5cdFx0XHQvLyBVc2UgdGhlIGFscmVhZHktY3JlYXRlZCBpZnJhbWUgaWYgcG9zc2libGVcblx0XHRcdGlmcmFtZSA9IChpZnJhbWUgfHwgalF1ZXJ5KCBcIjxpZnJhbWUgZnJhbWVib3JkZXI9JzAnIHdpZHRoPScwJyBoZWlnaHQ9JzAnLz5cIiApKS5hcHBlbmRUbyggZG9jLmRvY3VtZW50RWxlbWVudCApO1xuXG5cdFx0XHQvLyBBbHdheXMgd3JpdGUgYSBuZXcgSFRNTCBza2VsZXRvbiBzbyBXZWJraXQgYW5kIEZpcmVmb3ggZG9uJ3QgY2hva2Ugb24gcmV1c2Vcblx0XHRcdGRvYyA9IGlmcmFtZVsgMCBdLmNvbnRlbnREb2N1bWVudDtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUVcblx0XHRcdGRvYy53cml0ZSgpO1xuXHRcdFx0ZG9jLmNsb3NlKCk7XG5cblx0XHRcdGRpc3BsYXkgPSBhY3R1YWxEaXNwbGF5KCBub2RlTmFtZSwgZG9jICk7XG5cdFx0XHRpZnJhbWUuZGV0YWNoKCk7XG5cdFx0fVxuXG5cdFx0Ly8gU3RvcmUgdGhlIGNvcnJlY3QgZGVmYXVsdCBkaXNwbGF5XG5cdFx0ZWxlbWRpc3BsYXlbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXHR9XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG52YXIgcm1hcmdpbiA9ICgvXm1hcmdpbi8pO1xuXG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHQvLyBTdXBwb3J0OiBJRTw9MTErLCBGaXJlZm94PD0zMCsgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdGlmICggZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3Lm9wZW5lciApIHtcblx0XHRcdHJldHVybiBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSwgbnVsbCApO1xuXHRcdH1cblxuXHRcdHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSwgbnVsbCApO1xuXHR9O1xuXG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBTdXBwb3J0OiBJRTlcblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBvbmx5IG5lZWRlZCBmb3IgLmNzcygnZmlsdGVyJykgKCMxMjUzNylcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblx0fVxuXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IGlPUyA8IDZcblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gaU9TIDwgNiAoYXQgbGVhc3QpIHJldHVybnMgcGVyY2VudGFnZSBmb3IgYSBsYXJnZXIgc2V0IG9mIHZhbHVlcywgYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVsc1xuXHRcdC8vIHRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzogaHR0cDovL2Rldi53My5vcmcvY3Nzd2cvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJtYXJnaW4udGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblx0XHQvLyBTdXBwb3J0OiBJRVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKHRoaXMuZ2V0ID0gaG9va0ZuKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbihmdW5jdGlvbigpIHtcblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLFxuXHRcdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjA7d2lkdGg6MDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHg7bWFyZ2luLXRvcDoxcHg7XCIgK1xuXHRcdFwicG9zaXRpb246YWJzb2x1dGVcIjtcblx0Y29udGFpbmVyLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVBpeGVsUG9zaXRpb25BbmRCb3hTaXppbmdSZWxpYWJsZSgpIHtcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI5LCBBbmRyb2lkIDIuM1xuXHRcdFx0Ly8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nXG5cdFx0XHRcIi13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94Oy1tb3otYm94LXNpemluZzpib3JkZXItYm94O1wiICtcblx0XHRcdFwiYm94LXNpemluZzpib3JkZXItYm94O2Rpc3BsYXk6YmxvY2s7bWFyZ2luLXRvcDoxJTt0b3A6MSU7XCIgK1xuXHRcdFx0XCJib3JkZXI6MXB4O3BhZGRpbmc6MXB4O3dpZHRoOjRweDtwb3NpdGlvbjphYnNvbHV0ZVwiO1xuXHRcdGRpdi5pbm5lckhUTUwgPSBcIlwiO1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiwgbnVsbCApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IGRpdlN0eWxlLndpZHRoID09PSBcIjRweFwiO1xuXG5cdFx0ZG9jRWxlbS5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBub2RlLmpzIGpzZG9tXG5cdC8vIERvbid0IGFzc3VtZSB0aGF0IGdldENvbXB1dGVkU3R5bGUgaXMgYSBwcm9wZXJ0eSBvZiB0aGUgZ2xvYmFsIG9iamVjdFxuXHRpZiAoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFRoaXMgdGVzdCBpcyBleGVjdXRlZCBvbmx5IG9uY2UgYnV0IHdlIHN0aWxsIGRvIG1lbW9pemluZ1xuXHRcdFx0XHQvLyBzaW5jZSB3ZSBjYW4gdXNlIHRoZSBib3hTaXppbmdSZWxpYWJsZSBwcmUtY29tcHV0aW5nLlxuXHRcdFx0XHQvLyBObyBuZWVkIHRvIGNoZWNrIGlmIHRoZSB0ZXN0IHdhcyBhbHJlYWR5IHBlcmZvcm1lZCwgdGhvdWdoLlxuXHRcdFx0XHRjb21wdXRlUGl4ZWxQb3NpdGlvbkFuZEJveFNpemluZ1JlbGlhYmxlKCk7XG5cdFx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdFx0fSxcblx0XHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBib3hTaXppbmdSZWxpYWJsZVZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRcdGNvbXB1dGVQaXhlbFBvc2l0aW9uQW5kQm94U2l6aW5nUmVsaWFibGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0XHR9LFxuXHRcdFx0cmVsaWFibGVNYXJnaW5SaWdodDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjNcblx0XHRcdFx0Ly8gQ2hlY2sgaWYgZGl2IHdpdGggZXhwbGljaXQgd2lkdGggYW5kIG5vIG1hcmdpbi1yaWdodCBpbmNvcnJlY3RseVxuXHRcdFx0XHQvLyBnZXRzIGNvbXB1dGVkIG1hcmdpbi1yaWdodCBiYXNlZCBvbiB3aWR0aCBvZiBjb250YWluZXIuICgjMzMzMylcblx0XHRcdFx0Ly8gV2ViS2l0IEJ1ZyAxMzM0MyAtIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyB3cm9uZyB2YWx1ZSBmb3IgbWFyZ2luLXJpZ2h0XG5cdFx0XHRcdC8vIFRoaXMgc3VwcG9ydCBmdW5jdGlvbiBpcyBvbmx5IGV4ZWN1dGVkIG9uY2Ugc28gbm8gbWVtb2l6aW5nIGlzIG5lZWRlZC5cblx0XHRcdFx0dmFyIHJldCxcblx0XHRcdFx0XHRtYXJnaW5EaXYgPSBkaXYuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIFJlc2V0IENTUzogYm94LXNpemluZzsgZGlzcGxheTsgbWFyZ2luOyBib3JkZXI7IHBhZGRpbmdcblx0XHRcdFx0bWFyZ2luRGl2LnN0eWxlLmNzc1RleHQgPSBkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyOSwgQW5kcm9pZCAyLjNcblx0XHRcdFx0XHQvLyBWZW5kb3ItcHJlZml4IGJveC1zaXppbmdcblx0XHRcdFx0XHRcIi13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDstbW96LWJveC1zaXppbmc6Y29udGVudC1ib3g7XCIgK1xuXHRcdFx0XHRcdFwiYm94LXNpemluZzpjb250ZW50LWJveDtkaXNwbGF5OmJsb2NrO21hcmdpbjowO2JvcmRlcjowO3BhZGRpbmc6MFwiO1xuXHRcdFx0XHRtYXJnaW5EaXYuc3R5bGUubWFyZ2luUmlnaHQgPSBtYXJnaW5EaXYuc3R5bGUud2lkdGggPSBcIjBcIjtcblx0XHRcdFx0ZGl2LnN0eWxlLndpZHRoID0gXCIxcHhcIjtcblx0XHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHRcdFx0cmV0ID0gIXBhcnNlRmxvYXQoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBtYXJnaW5EaXYsIG51bGwgKS5tYXJnaW5SaWdodCApO1xuXG5cdFx0XHRcdGRvY0VsZW0ucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXHRcdFx0XHRkaXYucmVtb3ZlQ2hpbGQoIG1hcmdpbkRpdiApO1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn0pKCk7XG5cblxuLy8gQSBtZXRob2QgZm9yIHF1aWNrbHkgc3dhcHBpbmcgaW4vb3V0IENTUyBwcm9wZXJ0aWVzIHRvIGdldCBjb3JyZWN0IGNhbGN1bGF0aW9ucy5cbmpRdWVyeS5zd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrLCBhcmdzICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suYXBwbHkoIGVsZW0sIGFyZ3MgfHwgW10gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxudmFyXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGUgZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cdHJudW1zcGxpdCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoLiopJFwiLCBcImlcIiApLFxuXHRycmVsTnVtID0gbmV3IFJlZ0V4cCggXCJeKFsrLV0pPShcIiArIHBudW0gKyBcIilcIiwgXCJpXCIgKSxcblxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fSxcblxuXHRjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJPXCIsIFwiTW96XCIsIFwibXNcIiBdO1xuXG4vLyBSZXR1cm4gYSBjc3MgcHJvcGVydHkgbWFwcGVkIHRvIGEgcG90ZW50aWFsbHkgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggc3R5bGUsIG5hbWUgKSB7XG5cblx0Ly8gU2hvcnRjdXQgZm9yIG5hbWVzIHRoYXQgYXJlIG5vdCB2ZW5kb3IgcHJlZml4ZWRcblx0aWYgKCBuYW1lIGluIHN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbMF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSksXG5cdFx0b3JpZ05hbWUgPSBuYW1lLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBzdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBvcmlnTmFtZTtcbn1cblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblx0dmFyIG1hdGNoZXMgPSBybnVtc3BsaXQuZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDEgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDIgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSwgaXNCb3JkZXJCb3gsIHN0eWxlcyApIHtcblx0dmFyIGkgPSBleHRyYSA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApID9cblx0XHQvLyBJZiB3ZSBhbHJlYWR5IGhhdmUgdGhlIHJpZ2h0IG1lYXN1cmVtZW50LCBhdm9pZCBhdWdtZW50YXRpb25cblx0XHQ0IDpcblx0XHQvLyBPdGhlcndpc2UgaW5pdGlhbGl6ZSBmb3IgaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCBwcm9wZXJ0aWVzXG5cdFx0bmFtZSA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cblx0XHR2YWwgPSAwO1xuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW4sIHNvIGFkZCBpdCBpZiB3ZSB3YW50IGl0XG5cdFx0aWYgKCBleHRyYSA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBleHRyYSArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzQm9yZGVyQm94ICkge1xuXHRcdFx0Ly8gYm9yZGVyLWJveCBpbmNsdWRlcyBwYWRkaW5nLCBzbyByZW1vdmUgaXQgaWYgd2Ugd2FudCBjb250ZW50XG5cdFx0XHRpZiAoIGV4dHJhID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBib3JkZXIgbm9yIG1hcmdpbiwgc28gcmVtb3ZlIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQsIHNvIGFkZCBwYWRkaW5nXG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQgbm9yIHBhZGRpbmcsIHNvIGFkZCBib3JkZXJcblx0XHRcdGlmICggZXh0cmEgIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIG9mZnNldCBwcm9wZXJ0eSwgd2hpY2ggaXMgZXF1aXZhbGVudCB0byB0aGUgYm9yZGVyLWJveCB2YWx1ZVxuXHR2YXIgdmFsdWVJc0JvcmRlckJveCA9IHRydWUsXG5cdFx0dmFsID0gbmFtZSA9PT0gXCJ3aWR0aFwiID8gZWxlbS5vZmZzZXRXaWR0aCA6IGVsZW0ub2Zmc2V0SGVpZ2h0LFxuXHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHQvLyBTb21lIG5vbi1odG1sIGVsZW1lbnRzIHJldHVybiB1bmRlZmluZWQgZm9yIG9mZnNldFdpZHRoLCBzbyBjaGVjayBmb3IgbnVsbC91bmRlZmluZWRcblx0Ly8gc3ZnIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjQ5Mjg1XG5cdC8vIE1hdGhNTCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTQ5MTY2OFxuXHRpZiAoIHZhbCA8PSAwIHx8IHZhbCA9PSBudWxsICkge1xuXHRcdC8vIEZhbGwgYmFjayB0byBjb21wdXRlZCB0aGVuIHVuY29tcHV0ZWQgY3NzIGlmIG5lY2Vzc2FyeVxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0aWYgKCB2YWwgPCAwIHx8IHZhbCA9PSBudWxsICkge1xuXHRcdFx0dmFsID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIENvbXB1dGVkIHVuaXQgaXMgbm90IHBpeGVscy4gU3RvcCBoZXJlIGFuZCByZXR1cm4uXG5cdFx0aWYgKCBybnVtbm9ucHgudGVzdCh2YWwpICkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cblx0XHQvLyBDaGVjayBmb3Igc3R5bGUgaW4gY2FzZSBhIGJyb3dzZXIgd2hpY2ggcmV0dXJucyB1bnJlbGlhYmxlIHZhbHVlc1xuXHRcdC8vIGZvciBnZXRDb21wdXRlZFN0eWxlIHNpbGVudGx5IGZhbGxzIGJhY2sgdG8gdGhlIHJlbGlhYmxlIGVsZW0uc3R5bGVcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3ggJiZcblx0XHRcdCggc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IHZhbCA9PT0gZWxlbS5zdHlsZVsgbmFtZSBdICk7XG5cblx0XHQvLyBOb3JtYWxpemUgXCJcIiwgYXV0bywgYW5kIHByZXBhcmUgZm9yIGV4dHJhXG5cdFx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblx0fVxuXG5cdC8vIFVzZSB0aGUgYWN0aXZlIGJveC1zaXppbmcgbW9kZWwgdG8gYWRkL3N1YnRyYWN0IGlycmVsZXZhbnQgc3R5bGVzXG5cdHJldHVybiAoIHZhbCArXG5cdFx0YXVnbWVudFdpZHRoT3JIZWlnaHQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0bmFtZSxcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXNcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sIGhpZGRlbixcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhX3ByaXYuZ2V0KCBlbGVtLCBcIm9sZGRpc3BsYXlcIiApO1xuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXHRcdFx0Ly8gUmVzZXQgdGhlIGlubGluZSBkaXNwbGF5IG9mIHRoaXMgZWxlbWVudCB0byBsZWFybiBpZiBpdCBpc1xuXHRcdFx0Ly8gYmVpbmcgaGlkZGVuIGJ5IGNhc2NhZGVkIHJ1bGVzIG9yIG5vdFxuXHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICYmIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZWxlbWVudHMgd2hpY2ggaGF2ZSBiZWVuIG92ZXJyaWRkZW4gd2l0aCBkaXNwbGF5OiBub25lXG5cdFx0XHQvLyBpbiBhIHN0eWxlc2hlZXQgdG8gd2hhdGV2ZXIgdGhlIGRlZmF1bHQgYnJvd3NlciBzdHlsZSBpc1xuXHRcdFx0Ly8gZm9yIHN1Y2ggYW4gZWxlbWVudFxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW4oIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YV9wcml2LmFjY2VzcyggZWxlbSwgXCJvbGRkaXNwbGF5XCIsIGRlZmF1bHREaXNwbGF5KGVsZW0ubm9kZU5hbWUpICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGhpZGRlbiA9IGlzSGlkZGVuKCBlbGVtICk7XG5cblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgfHwgIWhpZGRlbiApIHtcblx0XHRcdFx0ZGF0YV9wcml2LnNldCggZWxlbSwgXCJvbGRkaXNwbGF5XCIsIGhpZGRlbiA/IGRpc3BsYXkgOiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIG1vc3Qgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3Bcblx0Ly8gdG8gYXZvaWQgdGhlIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXHRcdGlmICggIXNob3cgfHwgZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBzaG93ID8gdmFsdWVzWyBpbmRleCBdIHx8IFwiXCIgOiBcIm5vbmVcIjtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5leHRlbmQoe1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge1xuXHRcdFwiZmxvYXRcIjogXCJjc3NGbG9hdFwiXG5cdH0sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0bmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fCAoIGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBzdHlsZSwgb3JpZ05hbWUgKSApO1xuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAocmV0ID0gcnJlbE51bS5leGVjKCB2YWx1ZSApKSApIHtcblx0XHRcdFx0dmFsdWUgPSAoIHJldFsxXSArIDEgKSAqIHJldFsyXSArIHBhcnNlRmxvYXQoIGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKSApO1xuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyLCBhZGQgJ3B4JyB0byB0aGUgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSApIHtcblx0XHRcdFx0dmFsdWUgKz0gXCJweFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKFwic2V0XCIgaW4gaG9va3MpIHx8ICh2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkpICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHwgKCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggZWxlbS5zdHlsZSwgb3JpZ05hbWUgKSApO1xuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBqUXVlcnkuaXNOdW1lcmljKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59KTtcblxualF1ZXJ5LmVhY2goWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmIGVsZW0ub2Zmc2V0V2lkdGggPT09IDAgP1xuXHRcdFx0XHRcdGpRdWVyeS5zd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgc3R5bGVzID0gZXh0cmEgJiYgZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBleHRyYSA/XG5cdFx0XHRcdGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0bmFtZSxcblx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHQpIDogMFxuXHRcdFx0KTtcblx0XHR9XG5cdH07XG59KTtcblxuLy8gU3VwcG9ydDogQW5kcm9pZCAyLjNcbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5SaWdodCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpblJpZ2h0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuc3dhcCggZWxlbSwgeyBcImRpc3BsYXlcIjogXCJpbmxpbmUtYmxvY2tcIiB9LFxuXHRcdFx0XHRjdXJDU1MsIFsgZWxlbSwgXCJtYXJnaW5SaWdodFwiIF0gKTtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KFwiIFwiKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggIXJtYXJnaW4udGVzdCggcHJlZml4ICkgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbiggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBcInN3aW5nXCI7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmXG5cdFx0XHRcdCghdHdlZW4uZWxlbS5zdHlsZSB8fCB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCkgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0uc3R5bGUgJiYgKCB0d2Vlbi5lbGVtLnN0eWxlWyBqUXVlcnkuY3NzUHJvcHNbIHR3ZWVuLnByb3AgXSBdICE9IG51bGwgfHwgalF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRTlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH1cbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIENvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCB0aW1lcklkLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cmZ4bnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKSxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC8sXG5cdGFuaW1hdGlvblByZWZpbHRlcnMgPSBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblx0dHdlZW5lcnMgPSB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKSxcblx0XHRcdFx0dGFyZ2V0ID0gdHdlZW4uY3VyKCksXG5cdFx0XHRcdHBhcnRzID0gcmZ4bnVtLmV4ZWMoIHZhbHVlICksXG5cdFx0XHRcdHVuaXQgPSBwYXJ0cyAmJiBwYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0XHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0XHRcdHN0YXJ0ID0gKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICt0YXJnZXQgKSAmJlxuXHRcdFx0XHRcdHJmeG51bS5leGVjKCBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCBwcm9wICkgKSxcblx0XHRcdFx0c2NhbGUgPSAxLFxuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMjA7XG5cblx0XHRcdGlmICggc3RhcnQgJiYgc3RhcnRbIDMgXSAhPT0gdW5pdCApIHtcblx0XHRcdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdFx0XHR1bml0ID0gdW5pdCB8fCBzdGFydFsgMyBdO1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHRcdFx0cGFydHMgPSBwYXJ0cyB8fCBbXTtcblxuXHRcdFx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdFx0XHRzdGFydCA9ICt0YXJnZXQgfHwgMTtcblxuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0Ly8gSWYgcHJldmlvdXMgaXRlcmF0aW9uIHplcm9lZCBvdXQsIGRvdWJsZSB1bnRpbCB3ZSBnZXQgKnNvbWV0aGluZyouXG5cdFx0XHRcdFx0Ly8gVXNlIHN0cmluZyBmb3IgZG91Ymxpbmcgc28gd2UgZG9uJ3QgYWNjaWRlbnRhbGx5IHNlZSBzY2FsZSBhcyB1bmNoYW5nZWQgYmVsb3dcblx0XHRcdFx0XHRzY2FsZSA9IHNjYWxlIHx8IFwiLjVcIjtcblxuXHRcdFx0XHRcdC8vIEFkanVzdCBhbmQgYXBwbHlcblx0XHRcdFx0XHRzdGFydCA9IHN0YXJ0IC8gc2NhbGU7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCBwcm9wLCBzdGFydCArIHVuaXQgKTtcblxuXHRcdFx0XHQvLyBVcGRhdGUgc2NhbGUsIHRvbGVyYXRpbmcgemVybyBvciBOYU4gZnJvbSB0d2Vlbi5jdXIoKSxcblx0XHRcdFx0Ly8gYnJlYWsgdGhlIGxvb3AgaWYgc2NhbGUgaXMgdW5jaGFuZ2VkIG9yIHBlcmZlY3QsIG9yIGlmIHdlJ3ZlIGp1c3QgaGFkIGVub3VnaFxuXHRcdFx0XHR9IHdoaWxlICggc2NhbGUgIT09IChzY2FsZSA9IHR3ZWVuLmN1cigpIC8gdGFyZ2V0KSAmJiBzY2FsZSAhPT0gMSAmJiAtLW1heEl0ZXJhdGlvbnMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVXBkYXRlIHR3ZWVuIHByb3BlcnRpZXNcblx0XHRcdGlmICggcGFydHMgKSB7XG5cdFx0XHRcdHN0YXJ0ID0gdHdlZW4uc3RhcnQgPSArc3RhcnQgfHwgK3RhcmdldCB8fCAwO1xuXHRcdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdFx0Ly8gSWYgYSArPS8tPSB0b2tlbiB3YXMgcHJvdmlkZWQsIHdlJ3JlIGRvaW5nIGEgcmVsYXRpdmUgYW5pbWF0aW9uXG5cdFx0XHRcdHR3ZWVuLmVuZCA9IHBhcnRzWyAxIF0gP1xuXHRcdFx0XHRcdHN0YXJ0ICsgKCBwYXJ0c1sgMSBdICsgMSApICogcGFydHNbIDIgXSA6XG5cdFx0XHRcdFx0K3BhcnRzWyAyIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fTtcblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0pO1xuXHRyZXR1cm4gKCBmeE5vdyA9IGpRdWVyeS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0IDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIHR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIHR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkpICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0LyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgdHdlZW4sIGhvb2tzLCBvbGRmaXJlLCBkaXNwbGF5LCBjaGVja0Rpc3BsYXksXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhX3ByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gSGFuZGxlIHF1ZXVlOiBmYWxzZSBwcm9taXNlc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cblxuXHQvLyBIZWlnaHQvd2lkdGggb3ZlcmZsb3cgcGFzc1xuXHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcImhlaWdodFwiIGluIHByb3BzIHx8IFwid2lkdGhcIiBpbiBwcm9wcyApICkge1xuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG5vdGhpbmcgc25lYWtzIG91dFxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUU5LTEwIGRvIG5vdFxuXHRcdC8vIGNoYW5nZSB0aGUgb3ZlcmZsb3cgYXR0cmlidXRlIHdoZW4gb3ZlcmZsb3dYIGFuZFxuXHRcdC8vIG92ZXJmbG93WSBhcmUgc2V0IHRvIHRoZSBzYW1lIHZhbHVlXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBTZXQgZGlzcGxheSBwcm9wZXJ0eSB0byBpbmxpbmUtYmxvY2sgZm9yIGhlaWdodC93aWR0aFxuXHRcdC8vIGFuaW1hdGlvbnMgb24gaW5saW5lIGVsZW1lbnRzIHRoYXQgYXJlIGhhdmluZyB3aWR0aC9oZWlnaHQgYW5pbWF0ZWRcblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblxuXHRcdC8vIFRlc3QgZGVmYXVsdCBkaXNwbGF5IGlmIGRpc3BsYXkgaXMgY3VycmVudGx5IFwibm9uZVwiXG5cdFx0Y2hlY2tEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgP1xuXHRcdFx0ZGF0YV9wcml2LmdldCggZWxlbSwgXCJvbGRkaXNwbGF5XCIgKSB8fCBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApIDogZGlzcGxheTtcblxuXHRcdGlmICggY2hlY2tEaXNwbGF5ID09PSBcImlubGluZVwiICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9KTtcblx0fVxuXG5cdC8vIHNob3cvaGlkZSBwYXNzXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMuZXhlYyggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgZGF0YVNob3cgbGVmdCBvdmVyIGZyb20gYSBzdG9wcGVkIGhpZGUgb3Igc2hvdyBhbmQgd2UgYXJlIGdvaW5nIHRvIHByb2NlZWQgd2l0aCBzaG93LCB3ZSBzaG91bGQgcHJldGVuZCB0byBiZSBoaWRkZW5cblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cblx0XHQvLyBBbnkgbm9uLWZ4IHZhbHVlIHN0b3BzIHVzIGZyb20gcmVzdG9yaW5nIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlXG5cdFx0fSBlbHNlIHtcblx0XHRcdGRpc3BsYXkgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGFTaG93ID0gZGF0YV9wcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwge30gKTtcblx0XHR9XG5cblx0XHQvLyBTdG9yZSBzdGF0ZSBpZiBpdHMgdG9nZ2xlIC0gZW5hYmxlcyAuc3RvcCgpLnRvZ2dsZSgpIHRvIFwicmV2ZXJzZVwiXG5cdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdH1cblx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdGpRdWVyeSggZWxlbSApLnNob3coKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YW5pbS5kb25lKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5oaWRlKCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0YW5pbS5kb25lKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHByb3A7XG5cblx0XHRcdGRhdGFfcHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHR0d2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXG5cdFx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0XHR0d2Vlbi5lbmQgPSB0d2Vlbi5zdGFydDtcblx0XHRcdFx0XHR0d2Vlbi5zdGFydCA9IHByb3AgPT09IFwid2lkdGhcIiB8fCBwcm9wID09PSBcImhlaWdodFwiID8gMSA6IDA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0Ly8gSWYgdGhpcyBpcyBhIG5vb3AgbGlrZSAuaGlkZSgpLmhpZGUoKSwgcmVzdG9yZSBhbiBvdmVyd3JpdHRlbiBkaXNwbGF5IHZhbHVlXG5cdH0gZWxzZSBpZiAoIChkaXNwbGF5ID09PSBcIm5vbmVcIiA/IGRlZmF1bHREaXNwbGF5KCBlbGVtLm5vZGVOYW1lICkgOiBkaXNwbGF5KSA9PT0gXCJpbmxpbmVcIiApIHtcblx0XHRzdHlsZS5kaXNwbGF5ID0gZGlzcGxheTtcblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gYW5pbWF0aW9uUHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0pLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdKTtcblxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHsgc3BlY2lhbEVhc2luZzoge30gfSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0pLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gYW5pbWF0aW9uUHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0pXG5cdCk7XG5cblx0Ly8gYXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0cmV0dXJuIGFuaW1hdGlvbi5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLnNwbGl0KFwiIFwiKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0dHdlZW5lcnNbIHByb3AgXSA9IHR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHR0d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdGFuaW1hdGlvblByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YW5pbWF0aW9uUHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFqUXVlcnkuaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4Lm9mZiA/IDAgOiB0eXBlb2Ygb3B0LmR1cmF0aW9uID09PSBcIm51bWJlclwiID8gb3B0LmR1cmF0aW9uIDpcblx0XHRvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyA/IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdIDogalF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YV9wcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICYmIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YV9wcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgKHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUpICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhX3ByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0pO1xuXHR9XG59KTtcblxualF1ZXJ5LmVhY2goWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59KTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goe1xuXHRzbGlkZURvd246IGdlbkZ4KFwic2hvd1wiKSxcblx0c2xpZGVVcDogZ2VuRngoXCJoaWRlXCIpLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoXCJ0b2dnbGVcIiksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0galF1ZXJ5Lm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXHRcdC8vIENoZWNrcyB0aGUgdGltZXIgaGFzIG5vdCBhbHJlYWR5IGJlZW4gcmVtb3ZlZFxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGlmICggdGltZXIoKSApIHtcblx0XHRqUXVlcnkuZnguc3RhcnQoKTtcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkudGltZXJzLnBvcCgpO1xuXHR9XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcblxualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggIXRpbWVySWQgKSB7XG5cdFx0dGltZXJJZCA9IHNldEludGVydmFsKCBqUXVlcnkuZngudGljaywgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdH1cbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGNsZWFySW50ZXJ2YWwoIHRpbWVySWQgKTtcblx0dGltZXJJZCA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRjbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9KTtcbn07XG5cblxuKGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IGlPUzw9NS4xLCBBbmRyb2lkPD00LjIrXG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRTw9MTErXG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw9Mi4zXG5cdC8vIE9wdGlvbnMgaW5zaWRlIGRpc2FibGVkIHNlbGVjdHMgYXJlIGluY29ycmVjdGx5IG1hcmtlZCBhcyBkaXNhYmxlZFxuXHRzZWxlY3QuZGlzYWJsZWQgPSB0cnVlO1xuXHRzdXBwb3J0Lm9wdERpc2FibGVkID0gIW9wdC5kaXNhYmxlZDtcblxuXHQvLyBTdXBwb3J0OiBJRTw9MTErXG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0pKCk7XG5cblxudmFyIG5vZGVIb29rLCBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0pO1xuXHR9XG59KTtcblxualF1ZXJ5LmV4dGVuZCh7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIGRvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IHN0cnVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgYXR0cmlidXRlcyBhcmUgbG93ZXJjYXNlXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0bmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IG5vZGVIb29rICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkpICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkpICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgP1xuXHRcdFx0XHR1bmRlZmluZWQgOlxuXHRcdFx0XHRyZXQ7XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSwgcHJvcE5hbWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoIChuYW1lID0gYXR0ck5hbWVzW2krK10pICkge1xuXHRcdFx0XHRwcm9wTmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblxuXHRcdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgZ2V0IHNwZWNpYWwgdHJlYXRtZW50ICgjMTA4NzApXG5cdFx0XHRcdGlmICggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdFx0Ly8gU2V0IGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdG8gZmFsc2Vcblx0XHRcdFx0XHRlbGVtWyBwcm9wTmFtZSBdID0gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZTtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIG5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIG5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0pO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZXh0ZW5kKHtcblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9LFxuXG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcywgbm90eG1sLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0bm90eG1sID0gblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApO1xuXG5cdFx0aWYgKCBub3R4bWwgKSB7XG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJldCA6XG5cdFx0XHRcdCggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkpICE9PSBudWxsID9cblx0XHRcdFx0cmV0IDpcblx0XHRcdFx0ZWxlbVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaGFzQXR0cmlidXRlKCBcInRhYmluZGV4XCIgKSB8fCByZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fCBlbGVtLmhyZWYgP1xuXHRcdFx0XHRcdGVsZW0udGFiSW5kZXggOlxuXHRcdFx0XHRcdC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSk7XG5cbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0pO1xuXG5cblxuXG52YXIgcmNsYXNzID0gL1tcXHRcXHJcXG5cXGZdL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0cHJvY2VlZCA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGg7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIHRoaXMuY2xhc3NOYW1lICkgKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmICggcHJvY2VlZCApIHtcblx0XHRcdC8vIFRoZSBkaXNqdW5jdGlvbiBoZXJlIGlzIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgcmVtb3ZlQ2xhc3MpXG5cdFx0XHRjbGFzc2VzID0gKCB2YWx1ZSB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIGVsZW0uY2xhc3NOYW1lID9cblx0XHRcdFx0XHQoIFwiIFwiICsgZWxlbS5jbGFzc05hbWUgKyBcIiBcIiApLnJlcGxhY2UoIHJjbGFzcywgXCIgXCIgKSA6XG5cdFx0XHRcdFx0XCIgXCJcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoIChjbGF6eiA9IGNsYXNzZXNbaisrXSkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIG9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IGpRdWVyeS50cmltKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGVsZW0uY2xhc3NOYW1lICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5jbGFzc05hbWUgPSBmaW5hbFZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRwcm9jZWVkID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMCB8fCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCB0aGlzLmNsYXNzTmFtZSApICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0aWYgKCBwcm9jZWVkICkge1xuXHRcdFx0Y2xhc3NlcyA9ICggdmFsdWUgfHwgXCJcIiApLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF07XG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBlbGVtLmNsYXNzTmFtZSA/XG5cdFx0XHRcdFx0KCBcIiBcIiArIGVsZW0uY2xhc3NOYW1lICsgXCIgXCIgKS5yZXBsYWNlKCByY2xhc3MsIFwiIFwiICkgOlxuXHRcdFx0XHRcdFwiXCJcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoIChjbGF6eiA9IGNsYXNzZXNbaisrXSkgKSB7XG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+PSAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHZhbHVlID8galF1ZXJ5LnRyaW0oIGN1ciApIDogXCJcIjtcblx0XHRcdFx0XHRpZiAoIGVsZW0uY2xhc3NOYW1lICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5jbGFzc05hbWUgPSBmaW5hbFZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoIHZhbHVlLmNhbGwodGhpcywgaSwgdGhpcy5jbGFzc05hbWUsIHN0YXRlVmFsKSwgc3RhdGVWYWwgKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdHZhciBjbGFzc05hbWUsXG5cdFx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRcdGNsYXNzTmFtZXMgPSB2YWx1ZS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XG5cblx0XHRcdFx0d2hpbGUgKCAoY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0pICkge1xuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBzdHJ1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGlmICggdGhpcy5jbGFzc05hbWUgKSB7XG5cdFx0XHRcdFx0Ly8gc3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFfcHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCB0aGlzLmNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHR0aGlzLmNsYXNzTmFtZSA9IHRoaXMuY2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/IFwiXCIgOiBkYXRhX3ByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCI7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0aWYgKCB0aGlzW2ldLm5vZGVUeXBlID09PSAxICYmIChcIiBcIiArIHRoaXNbaV0uY2xhc3NOYW1lICsgXCIgXCIpLnJlcGxhY2UocmNsYXNzLCBcIiBcIikuaW5kZXhPZiggY2xhc3NOYW1lICkgPj0gMCApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59KTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgaXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWzBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdFx0cmV0LnJlcGxhY2UocnJldHVybiwgXCJcIikgOlxuXHRcdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRcdHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgIShcInNldFwiIGluIGhvb2tzKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxufSk7XG5cbmpRdWVyeS5leHRlbmQoe1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUxMC0xMStcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0alF1ZXJ5LnRyaW0oIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiIHx8IGluZGV4IDwgMCxcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGgsXG5cdFx0XHRcdFx0aSA9IGluZGV4IDwgMCA/XG5cdFx0XHRcdFx0XHRtYXggOlxuXHRcdFx0XHRcdFx0b25lID8gaW5kZXggOiAwO1xuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gSUU2LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0KCBzdXBwb3J0Lm9wdERpc2FibGVkID8gIW9wdGlvbi5kaXNhYmxlZCA6IG9wdGlvbi5nZXRBdHRyaWJ1dGUoIFwiZGlzYWJsZWRcIiApID09PSBudWxsICkgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHwgIWpRdWVyeS5ub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIChvcHRpb24uc2VsZWN0ZWQgPSBqUXVlcnkuaW5BcnJheSggb3B0aW9uLnZhbHVlLCB2YWx1ZXMgKSA+PSAwKSApIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeShlbGVtKS52YWwoKSwgdmFsdWUgKSA+PSAwICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG5qUXVlcnkuZWFjaCggKFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IGxvYWQgcmVzaXplIHNjcm9sbCB1bmxvYWQgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGVycm9yIGNvbnRleHRtZW51XCIpLnNwbGl0KFwiIFwiKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59KTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fSxcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOiB0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fVxufSk7XG5cblxudmFyIG5vbmNlID0galF1ZXJ5Lm5vdygpO1xuXG52YXIgcnF1ZXJ5ID0gKC9cXD8vKTtcblxuXG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG4vLyBXb3JrYXJvdW5kIGZhaWx1cmUgdG8gc3RyaW5nLWNhc3QgbnVsbCBpbnB1dFxualF1ZXJ5LnBhcnNlSlNPTiA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSArIFwiXCIgKTtcbn07XG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWwsIHRtcDtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFOVxuXHR0cnkge1xuXHRcdHRtcCA9IG5ldyBET01QYXJzZXIoKTtcblx0XHR4bWwgPSB0bXAucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRydHMgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cdHJ1cmwgPSAvXihbXFx3ListXSs6KSg/OlxcL1xcLyg/OlteXFwvPyNdKkB8KShbXlxcLz8jOl0qKSg/OjooXFxkKyl8KXwpLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIERvY3VtZW50IGxvY2F0aW9uXG5cdGFqYXhMb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLFxuXG5cdC8vIFNlZ21lbnQgbG9jYXRpb24gaW50byBwYXJ0c1xuXHRhamF4TG9jUGFydHMgPSBydXJsLmV4ZWMoIGFqYXhMb2NhdGlvbi50b0xvd2VyQ2FzZSgpICkgfHwgW107XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoIChkYXRhVHlwZSA9IGRhdGFUeXBlc1tpKytdKSApIHtcblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVswXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdChzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10pLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJiAhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8IChkZWVwID0ge30pICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LVR5cGVcIik7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbMF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzWyBcInRocm93c1wiIF0gKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4geyBzdGF0ZTogXCJwYXJzZXJlcnJvclwiLCBlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnQgfTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoe1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGFqYXhMb2NhdGlvbixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGFqYXhMb2NQYXJ0c1sgMSBdICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAveG1sLyxcblx0XHRcdGh0bWw6IC9odG1sLyxcblx0XHRcdGpzb246IC9qc29uL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBqUXVlcnkucGFyc2VKU09OLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cdFx0XHQvLyBDcm9zcy1kb21haW4gZGV0ZWN0aW9uIHZhcnNcblx0XHRcdHBhcnRzLFxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJiAoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxcblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cdFx0XHQvLyBUaGUganFYSFIgc3RhdGVcblx0XHRcdHN0YXRlID0gMCxcblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbMV0udG9Mb3dlckNhc2UoKSBdID0gbWF0Y2hbIDIgXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGUgPT09IDIgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHR2YXIgbG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0aWYgKCAhc3RhdGUgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbG5hbWUgXSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIGxuYW1lIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCAhc3RhdGUgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggc3RhdGUgPCAyICkge1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICkuY29tcGxldGUgPSBjb21wbGV0ZURlZmVycmVkLmFkZDtcblx0XHRqcVhIUi5zdWNjZXNzID0ganFYSFIuZG9uZTtcblx0XHRqcVhIUi5lcnJvciA9IGpxWEhSLmZhaWw7XG5cblx0XHQvLyBSZW1vdmUgaGFzaCBjaGFyYWN0ZXIgKCM3NTMxOiBhbmQgc3RyaW5nIHByb21vdGlvbilcblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBhamF4TG9jYXRpb24gKSArIFwiXCIgKS5yZXBsYWNlKCByaGFzaCwgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBhamF4TG9jUGFydHNbIDEgXSArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9IGpRdWVyeS50cmltKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gd2UgaGF2ZSBhIHByb3RvY29sOmhvc3Q6cG9ydCBtaXNtYXRjaFxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0cGFydHMgPSBydXJsLmV4ZWMoIHMudXJsLnRvTG93ZXJDYXNlKCkgKTtcblx0XHRcdHMuY3Jvc3NEb21haW4gPSAhISggcGFydHMgJiZcblx0XHRcdFx0KCBwYXJ0c1sgMSBdICE9PSBhamF4TG9jUGFydHNbIDEgXSB8fCBwYXJ0c1sgMiBdICE9PSBhamF4TG9jUGFydHNbIDIgXSB8fFxuXHRcdFx0XHRcdCggcGFydHNbIDMgXSB8fCAoIHBhcnRzWyAxIF0gPT09IFwiaHR0cDpcIiA/IFwiODBcIiA6IFwiNDQzXCIgKSApICE9PVxuXHRcdFx0XHRcdFx0KCBhamF4TG9jUGFydHNbIDMgXSB8fCAoIGFqYXhMb2NQYXJ0c1sgMSBdID09PSBcImh0dHA6XCIgPyBcIjgwXCIgOiBcIjQ0M1wiICkgKSApXG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIHN0YXRlID09PSAyICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKFwiYWpheFN0YXJ0XCIpO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdGNhY2hlVVJMID0gcy51cmw7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gKCBzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhICk7XG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGFudGktY2FjaGUgaW4gdXJsIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0cy51cmwgPSBydHMudGVzdCggY2FjaGVVUkwgKSA/XG5cblx0XHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbHJlYWR5IGEgJ18nIHBhcmFtZXRlciwgc2V0IGl0cyB2YWx1ZVxuXHRcdFx0XHRcdGNhY2hlVVJMLnJlcGxhY2UoIHJ0cywgXCIkMV89XCIgKyBub25jZSsrICkgOlxuXG5cdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFkZCBvbmUgdG8gdGhlIGVuZFxuXHRcdFx0XHRcdGNhY2hlVVJMICsgKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArIG5vbmNlKys7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbMF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbMF0gXSArICggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmICggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgc3RhdGUgPT09IDIgKSApIHtcblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRmb3IgKCBpIGluIHsgc3VjY2VzczogMSwgZXJyb3I6IDEsIGNvbXBsZXRlOiAxIH0gKSB7XG5cdFx0XHRqcVhIUlsgaSBdKCBzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoXCJ0aW1lb3V0XCIpO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0c3RhdGUgPSAxO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHQvLyBQcm9wYWdhdGUgZXhjZXB0aW9uIGFzIGVycm9yIGlmIG5vdCBkb25lXG5cdFx0XHRcdGlmICggc3RhdGUgPCAyICkge1xuXHRcdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHRcdC8vIFNpbXBseSByZXRocm93IG90aGVyd2lzZVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBDYWxsZWQgb25jZVxuXHRcdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0ZSBpcyBcImRvbmVcIiBub3dcblx0XHRcdHN0YXRlID0gMjtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHRjbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlcihcIkxhc3QtTW9kaWZpZWRcIik7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlcihcImV0YWdcIik7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKFwiYWpheFN0b3BcIik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9KTtcblx0fTtcbn0pO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCh7XG5cdFx0dXJsOiB1cmwsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblx0XHRcInRocm93c1wiOiB0cnVlXG5cdH0pO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBodG1sLmNhbGwodGhpcywgaSkgKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0pLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwodGhpcywgaSkgKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaXNGdW5jdGlvbiA/IGh0bWwuY2FsbCh0aGlzLCBpKSA6IGh0bWwgKTtcblx0XHR9KTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnBhcmVudCgpLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFqUXVlcnkubm9kZU5hbWUoIHRoaXMsIFwiYm9keVwiICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHRcdH1cblx0XHR9KS5lbmQoKTtcblx0fVxufSk7XG5cblxualF1ZXJ5LmV4cHIuZmlsdGVycy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0Ly8gU3VwcG9ydDogT3BlcmEgPD0gMTIuMTJcblx0Ly8gT3BlcmEgcmVwb3J0cyBvZmZzZXRXaWR0aHMgYW5kIG9mZnNldEhlaWdodHMgbGVzcyB0aGFuIHplcm8gb24gc29tZSBlbGVtZW50c1xuXHRyZXR1cm4gZWxlbS5vZmZzZXRXaWR0aCA8PSAwICYmIGVsZW0ub2Zmc2V0SGVpZ2h0IDw9IDA7XG59O1xualF1ZXJ5LmV4cHIuZmlsdGVycy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIuZmlsdGVycy5oaWRkZW4oIGVsZW0gKTtcbn07XG5cblxuXG5cbnZhciByMjAgPSAvJTIwL2csXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggalF1ZXJ5LmlzQXJyYXkoIG9iaiApICkge1xuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiA/IGkgOiBcIlwiICkgKyBcIl1cIiwgdiwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgcmV0dXJuIGl0cyB2YWx1ZVxuXHRcdFx0dmFsdWUgPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSA/IHZhbHVlKCkgOiAoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlICk7XG5cdFx0fTtcblxuXHQvLyBTZXQgdHJhZGl0aW9uYWwgdG8gdHJ1ZSBmb3IgalF1ZXJ5IDw9IDEuMy4yIGJlaGF2aW9yLlxuXHRpZiAoIHRyYWRpdGlvbmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0dHJhZGl0aW9uYWwgPSBqUXVlcnkuYWpheFNldHRpbmdzICYmIGpRdWVyeS5hamF4U2V0dGluZ3MudHJhZGl0aW9uYWw7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIGpRdWVyeS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSk7XG5cblx0fSBlbHNlIHtcblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICkucmVwbGFjZSggcjIwLCBcIitcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9KVxuXHRcdC5maWx0ZXIoZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0pXG5cdFx0Lm1hcChmdW5jdGlvbiggaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0cmV0dXJuIHZhbCA9PSBudWxsID9cblx0XHRcdFx0bnVsbCA6XG5cdFx0XHRcdGpRdWVyeS5pc0FycmF5KCB2YWwgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0eyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0pLmdldCgpO1xuXHR9XG59KTtcblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCggZSApIHt9XG59O1xuXG52YXIgeGhySWQgPSAwLFxuXHR4aHJDYWxsYmFja3MgPSB7fSxcblx0eGhyU3VjY2Vzc1N0YXR1cyA9IHtcblx0XHQvLyBmaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuXHRcdDA6IDIwMCxcblx0XHQvLyBTdXBwb3J0OiBJRTlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuLy8gU3VwcG9ydDogSUU5XG4vLyBPcGVuIHJlcXVlc3RzIG11c3QgYmUgbWFudWFsbHkgYWJvcnRlZCBvbiB1bmxvYWQgKCM1MjgwKVxuLy8gU2VlIGh0dHBzOi8vc3VwcG9ydC5taWNyb3NvZnQuY29tL2tiLzI4NTY3NDYgZm9yIG1vcmUgaW5mb1xuaWYgKCB3aW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdHdpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCBmdW5jdGlvbigpIHtcblx0XHRmb3IgKCB2YXIga2V5IGluIHhockNhbGxiYWNrcyApIHtcblx0XHRcdHhockNhbGxiYWNrc1sga2V5IF0oKTtcblx0XHR9XG5cdH0pO1xufVxuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpLFxuXHRcdFx0XHRcdGlkID0gKyt4aHJJZDtcblxuXHRcdFx0XHR4aHIub3Blbiggb3B0aW9ucy50eXBlLCBvcHRpb25zLnVybCwgb3B0aW9ucy5hc3luYywgb3B0aW9ucy51c2VybmFtZSwgb3B0aW9ucy5wYXNzd29yZCApO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1tcIlgtUmVxdWVzdGVkLVdpdGhcIl0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1tcIlgtUmVxdWVzdGVkLVdpdGhcIl0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRkZWxldGUgeGhyQ2FsbGJhY2tzWyBpZCBdO1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IHhoci5vbmxvYWQgPSB4aHIub25lcnJvciA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFOVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gQWNjZXNzaW5nIGJpbmFyeS1kYXRhIHJlc3BvbnNlVGV4dCB0aHJvd3MgYW4gZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyAoIzExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgPT09IFwic3RyaW5nXCIgPyB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRleHQ6IHhoci5yZXNwb25zZVRleHRcblx0XHRcdFx0XHRcdFx0XHRcdH0gOiB1bmRlZmluZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHR4aHIub25lcnJvciA9IGNhbGxiYWNrKFwiZXJyb3JcIik7XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IHhockNhbGxiYWNrc1sgaWQgXSA9IGNhbGxiYWNrKFwiYWJvcnRcIik7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59KTtcblxuXG5cblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoe1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC8oPzpqYXZhfGVjbWEpc2NyaXB0L1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0pO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoXCI8c2NyaXB0PlwiKS5wcm9wKHtcblx0XHRcdFx0XHRhc3luYzogdHJ1ZSxcblx0XHRcdFx0XHRjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsXG5cdFx0XHRcdFx0c3JjOiBzLnVybFxuXHRcdFx0XHR9KS5vbihcblx0XHRcdFx0XHRcImxvYWQgZXJyb3JcIixcblx0XHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpO1xuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCh7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiYgISggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZihcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKSAmJiByanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0galF1ZXJ5LmlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1tcInNjcmlwdCBqc29uXCJdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gZm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyhmdW5jdGlvbigpIHtcblx0XHRcdC8vIFJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cdFx0XHRcdC8vIG1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gc2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBqUXVlcnkuaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9KTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59KTtcblxuXG5cblxuLy8gZGF0YTogc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCwgZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHR2YXIgcGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICksXG5cdFx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWzFdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGpRdWVyeS5idWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vLyBLZWVwIGEgY29weSBvZiB0aGUgb2xkIGxvYWQgbWV0aG9kXG52YXIgX2xvYWQgPSBqUXVlcnkuZm4ubG9hZDtcblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0aWYgKCB0eXBlb2YgdXJsICE9PSBcInN0cmluZ1wiICYmIF9sb2FkICkge1xuXHRcdHJldHVybiBfbG9hZC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdH1cblxuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKFwiIFwiKTtcblxuXHRpZiAoIG9mZiA+PSAwICkge1xuXHRcdHNlbGVjdG9yID0galF1ZXJ5LnRyaW0oIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCh7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gaWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZFxuXHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0pLmRvbmUoZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoXCI8ZGl2PlwiKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHR9KS5jb21wbGV0ZSggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGNhbGxiYWNrLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0fSk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5qUXVlcnkuZWFjaCggWyBcImFqYXhTdGFydFwiLCBcImFqYXhTdG9wXCIsIFwiYWpheENvbXBsZXRlXCIsIFwiYWpheEVycm9yXCIsIFwiYWpheFN1Y2Nlc3NcIiwgXCJhamF4U2VuZFwiIF0sIGZ1bmN0aW9uKCBpLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0pO1xuXG5cblxuXG5qUXVlcnkuZXhwci5maWx0ZXJzLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcChqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0pLmxlbmd0aDtcbn07XG5cblxuXG5cbnZhciBkb2NFbGVtID0gd2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuLyoqXG4gKiBHZXRzIGEgd2luZG93IGZyb20gYW4gZWxlbWVudFxuICovXG5mdW5jdGlvbiBnZXRXaW5kb3coIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSA/IGVsZW0gOiBlbGVtLm5vZGVUeXBlID09PSA5ICYmIGVsZW0uZGVmYXVsdFZpZXc7XG59XG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZihcImF1dG9cIikgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBjdXJPZmZzZXQgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHZhciBkb2NFbGVtLCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0Ym94ID0geyB0b3A6IDAsIGxlZnQ6IDAgfSxcblx0XHRcdGRvYyA9IGVsZW0gJiYgZWxlbS5vd25lckRvY3VtZW50O1xuXG5cdFx0aWYgKCAhZG9jICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0Ly8gTWFrZSBzdXJlIGl0J3Mgbm90IGEgZGlzY29ubmVjdGVkIERPTSBub2RlXG5cdFx0aWYgKCAhalF1ZXJ5LmNvbnRhaW5zKCBkb2NFbGVtLCBlbGVtICkgKSB7XG5cdFx0XHRyZXR1cm4gYm94O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IEJsYWNrQmVycnkgNSwgaU9TIDMgKG9yaWdpbmFsIGlQaG9uZSlcblx0XHQvLyBJZiB3ZSBkb24ndCBoYXZlIGdCQ1IsIGp1c3QgdXNlIDAsMCByYXRoZXIgdGhhbiBlcnJvclxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICE9PSBzdHJ1bmRlZmluZWQgKSB7XG5cdFx0XHRib3ggPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdH1cblx0XHR3aW4gPSBnZXRXaW5kb3coIGRvYyApO1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IGJveC50b3AgKyB3aW4ucGFnZVlPZmZzZXQgLSBkb2NFbGVtLmNsaWVudFRvcCxcblx0XHRcdGxlZnQ6IGJveC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRMZWZ0XG5cdFx0fTtcblx0fSxcblxuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gRml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHdpbmRvdyAocGFyZW50T2Zmc2V0ID0ge3RvcDowLCBsZWZ0OiAwfSwgYmVjYXVzZSBpdCBpcyBpdHMgb25seSBvZmZzZXQgcGFyZW50XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXHRcdFx0Ly8gQXNzdW1lIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyB0aGVyZSB3aGVuIGNvbXB1dGVkIHBvc2l0aW9uIGlzIGZpeGVkXG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIEdldCAqcmVhbCogb2Zmc2V0UGFyZW50XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCgpO1xuXG5cdFx0XHQvLyBHZXQgY29ycmVjdCBvZmZzZXRzXG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXHRcdFx0aWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJodG1sXCIgKSApIHtcblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0gb2Zmc2V0UGFyZW50Lm9mZnNldCgpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb2Zmc2V0UGFyZW50IGJvcmRlcnNcblx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQgfHwgZG9jRWxlbTtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCBvZmZzZXRQYXJlbnQsIFwiaHRtbFwiICkgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY0VsZW07XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cdFx0XHR2YXIgd2luID0gZ2V0V2luZG93KCBlbGVtICk7XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW5kb3cucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luZG93LnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoLCBudWxsICk7XG5cdH07XG59KTtcblxuLy8gU3VwcG9ydDogU2FmYXJpPDcrLCBDaHJvbWU8MzcrXG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0yMjkyODBcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIGksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59KTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LCBmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cdFx0XHRcdFx0Ly8gQXMgb2YgNS84LzIwMTIgdGhpcyB3aWxsIHlpZWxkIGluY29ycmVjdCByZXN1bHRzIGZvciBNb2JpbGUgU2FmYXJpLCBidXQgdGhlcmVcblx0XHRcdFx0XHQvLyBpc24ndCBhIHdob2xlIGxvdCB3ZSBjYW4gZG8uIFNlZSBwdWxsIHJlcXVlc3QgYXQgdGhpcyBVUkwgZm9yIGRpc2N1c3Npb246XG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC83NjRcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlLCBudWxsICk7XG5cdFx0fTtcblx0fSk7XG59KTtcblxuXG4vLyBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIGNvbnRhaW5lZCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldFxualF1ZXJ5LmZuLnNpemUgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXMubGVuZ3RoO1xufTtcblxualF1ZXJ5LmZuLmFuZFNlbGYgPSBqUXVlcnkuZm4uYWRkQmFjaztcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9KTtcbn1cblxuXG5cblxudmFyXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggdHlwZW9mIG5vR2xvYmFsID09PSBzdHJ1bmRlZmluZWQgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcblxufSkpO1xuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzLWFycmF5JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbnZhciBrTWF4TGVuZ3RoID0gMHgzZmZmZmZmZlxudmFyIHJvb3RQYXJlbnQgPSB7fVxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqIC0gSW1wbGVtZW50YXRpb24gbXVzdCBzdXBwb3J0IGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLlxuICogICBGaXJlZm94IDQtMjkgbGFja2VkIHN1cHBvcnQsIGZpeGVkIGluIEZpcmVmb3ggMzArLlxuICogICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC5cbiAqXG4gKiAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgIGluY29ycmVjdCBsZW5ndGggaW4gc29tZSBzaXR1YXRpb25zLlxuICpcbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5IHdpbGxcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IHdpbGwgd29yayBjb3JyZWN0bHkuXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gKGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYnVmID0gbmV3IEFycmF5QnVmZmVyKDApXG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KGJ1ZilcbiAgICBhcnIuZm9vID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfVxuICAgIHJldHVybiA0MiA9PT0gYXJyLmZvbygpICYmIC8vIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkXG4gICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gICAgICAgIG5ldyBVaW50OEFycmF5KDEpLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59KSgpXG5cbi8qKlxuICogQ2xhc3M6IEJ1ZmZlclxuICogPT09PT09PT09PT09PVxuICpcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgYXJlIGF1Z21lbnRlZFxuICogd2l0aCBmdW5jdGlvbiBwcm9wZXJ0aWVzIGZvciBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgQVBJIGZ1bmN0aW9ucy4gV2UgdXNlXG4gKiBgVWludDhBcnJheWAgc28gdGhhdCBzcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdCByZXR1cm5zXG4gKiBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBCeSBhdWdtZW50aW5nIHRoZSBpbnN0YW5jZXMsIHdlIGNhbiBhdm9pZCBtb2RpZnlpbmcgdGhlIGBVaW50OEFycmF5YFxuICogcHJvdG90eXBlLlxuICovXG5mdW5jdGlvbiBCdWZmZXIgKHN1YmplY3QsIGVuY29kaW5nLCBub1plcm8pIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpXG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoc3ViamVjdCwgZW5jb2RpbmcsIG5vWmVybylcblxuICB2YXIgdHlwZSA9IHR5cGVvZiBzdWJqZWN0XG5cbiAgLy8gRmluZCB0aGUgbGVuZ3RoXG4gIHZhciBsZW5ndGhcbiAgaWYgKHR5cGUgPT09ICdudW1iZXInKVxuICAgIGxlbmd0aCA9IHN1YmplY3QgPiAwID8gc3ViamVjdCA+Pj4gMCA6IDBcbiAgZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICBsZW5ndGggPSBCdWZmZXIuYnl0ZUxlbmd0aChzdWJqZWN0LCBlbmNvZGluZylcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0JyAmJiBzdWJqZWN0ICE9PSBudWxsKSB7IC8vIGFzc3VtZSBvYmplY3QgaXMgYXJyYXktbGlrZVxuICAgIGlmIChzdWJqZWN0LnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkoc3ViamVjdC5kYXRhKSlcbiAgICAgIHN1YmplY3QgPSBzdWJqZWN0LmRhdGFcbiAgICBsZW5ndGggPSArc3ViamVjdC5sZW5ndGggPiAwID8gTWF0aC5mbG9vcigrc3ViamVjdC5sZW5ndGgpIDogMFxuICB9IGVsc2VcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtdXN0IHN0YXJ0IHdpdGggbnVtYmVyLCBidWZmZXIsIGFycmF5IG9yIHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IGtNYXhMZW5ndGgpXG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aC50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcblxuICB2YXIgYnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFByZWZlcnJlZDogUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICBidWYgPSBCdWZmZXIuX2F1Z21lbnQobmV3IFVpbnQ4QXJyYXkobGVuZ3RoKSlcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIFRISVMgaW5zdGFuY2Ugb2YgQnVmZmVyIChjcmVhdGVkIGJ5IGBuZXdgKVxuICAgIGJ1ZiA9IHRoaXNcbiAgICBidWYubGVuZ3RoID0gbGVuZ3RoXG4gICAgYnVmLl9pc0J1ZmZlciA9IHRydWVcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiB0eXBlb2Ygc3ViamVjdC5ieXRlTGVuZ3RoID09PSAnbnVtYmVyJykge1xuICAgIC8vIFNwZWVkIG9wdGltaXphdGlvbiAtLSB1c2Ugc2V0IGlmIHdlJ3JlIGNvcHlpbmcgZnJvbSBhIHR5cGVkIGFycmF5XG4gICAgYnVmLl9zZXQoc3ViamVjdClcbiAgfSBlbHNlIGlmIChpc0FycmF5aXNoKHN1YmplY3QpKSB7XG4gICAgLy8gVHJlYXQgYXJyYXktaXNoIG9iamVjdHMgYXMgYSBieXRlIGFycmF5XG4gICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdWJqZWN0KSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxuICAgICAgICBidWZbaV0gPSBzdWJqZWN0LnJlYWRVSW50OChpKVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG4gICAgICAgIGJ1ZltpXSA9ICgoc3ViamVjdFtpXSAlIDI1NikgKyAyNTYpICUgMjU2XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgYnVmLndyaXRlKHN1YmplY3QsIDAsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhbm9aZXJvKSB7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBidWZbaV0gPSAwXG4gICAgfVxuICB9XG5cbiAgaWYgKGxlbmd0aCA+IDAgJiYgbGVuZ3RoIDw9IEJ1ZmZlci5wb29sU2l6ZSlcbiAgICBidWYucGFyZW50ID0gcm9vdFBhcmVudFxuXG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlcihzdWJqZWN0LCBlbmNvZGluZywgbm9aZXJvKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTbG93QnVmZmVyKSlcbiAgICByZXR1cm4gbmV3IFNsb3dCdWZmZXIoc3ViamVjdCwgZW5jb2RpbmcsIG5vWmVybylcblxuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcihzdWJqZWN0LCBlbmNvZGluZywgbm9aZXJvKVxuICBkZWxldGUgYnVmLnBhcmVudFxuICByZXR1cm4gYnVmXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSlcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJylcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuICYmIGFbaV0gPT09IGJbaV07IGkrKykge31cbiAgaWYgKGkgIT09IGxlbikge1xuICAgIHggPSBhW2ldXG4gICAgeSA9IGJbaV1cbiAgfVxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICdyYXcnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gKGxpc3QsIHRvdGFsTGVuZ3RoKSB7XG4gIGlmICghaXNBcnJheShsaXN0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVXNhZ2U6IEJ1ZmZlci5jb25jYXQobGlzdFssIGxlbmd0aF0pJylcblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcigwKVxuICB9IGVsc2UgaWYgKGxpc3QubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGxpc3RbMF1cbiAgfVxuXG4gIHZhciBpXG4gIGlmICh0b3RhbExlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdG90YWxMZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRvdGFsTGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIodG90YWxMZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldXG4gICAgaXRlbS5jb3B5KGJ1ZiwgcG9zKVxuICAgIHBvcyArPSBpdGVtLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZcbn1cblxuQnVmZmVyLmJ5dGVMZW5ndGggPSBmdW5jdGlvbiAoc3RyLCBlbmNvZGluZykge1xuICB2YXIgcmV0XG4gIHN0ciA9IHN0ciArICcnXG4gIHN3aXRjaCAoZW5jb2RpbmcgfHwgJ3V0ZjgnKSB7XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAncmF3JzpcbiAgICAgIHJldCA9IHN0ci5sZW5ndGhcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldCA9IHN0ci5sZW5ndGggKiAyXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2hleCc6XG4gICAgICByZXQgPSBzdHIubGVuZ3RoID4+PiAxXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIHJldCA9IHV0ZjhUb0J5dGVzKHN0cikubGVuZ3RoXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICByZXQgPSBiYXNlNjRUb0J5dGVzKHN0cikubGVuZ3RoXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXQgPSBzdHIubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG4vLyBwcmUtc2V0IGZvciB2YWx1ZXMgdGhhdCBtYXkgZXhpc3QgaW4gdGhlIGZ1dHVyZVxuQnVmZmVyLnByb3RvdHlwZS5sZW5ndGggPSB1bmRlZmluZWRcbkJ1ZmZlci5wcm90b3R5cGUucGFyZW50ID0gdW5kZWZpbmVkXG5cbi8vIHRvU3RyaW5nKGVuY29kaW5nLCBzdGFydD0wLCBlbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA9PT0gSW5maW5pdHkgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG4gIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmIChlbmQgPD0gc3RhcnQpIHJldHVybiAnJ1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGJpbmFyeVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSlcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KVxuICAgICAgc3RyICs9ICcgLi4uICdcbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKVxufVxuXG4vLyBgZ2V0YCB3aWxsIGJlIHJlbW92ZWQgaW4gTm9kZSAwLjEzK1xuQnVmZmVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gIGNvbnNvbGUubG9nKCcuZ2V0KCkgaXMgZGVwcmVjYXRlZC4gQWNjZXNzIHVzaW5nIGFycmF5IGluZGV4ZXMgaW5zdGVhZC4nKVxuICByZXR1cm4gdGhpcy5yZWFkVUludDgob2Zmc2V0KVxufVxuXG4vLyBgc2V0YCB3aWxsIGJlIHJlbW92ZWQgaW4gTm9kZSAwLjEzK1xuQnVmZmVyLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAodiwgb2Zmc2V0KSB7XG4gIGNvbnNvbGUubG9nKCcuc2V0KCkgaXMgZGVwcmVjYXRlZC4gQWNjZXNzIHVzaW5nIGFycmF5IGluZGV4ZXMgaW5zdGVhZC4nKVxuICByZXR1cm4gdGhpcy53cml0ZVVJbnQ4KHYsIG9mZnNldClcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYnl0ZSA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAoaXNOYU4oYnl0ZSkpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBieXRlXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIGNoYXJzV3JpdHRlbiA9IGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbiAgcmV0dXJuIGNoYXJzV3JpdHRlblxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIGNoYXJzV3JpdHRlbiA9IGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG4gIHJldHVybiBjaGFyc1dyaXR0ZW5cbn1cblxuZnVuY3Rpb24gYmluYXJ5V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIGNoYXJzV3JpdHRlbiA9IGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxuICByZXR1cm4gY2hhcnNXcml0dGVuXG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHZhciBjaGFyc1dyaXR0ZW4gPSBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgsIDIpXG4gIHJldHVybiBjaGFyc1dyaXR0ZW5cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBTdXBwb3J0IGJvdGggKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKVxuICAvLyBhbmQgdGhlIGxlZ2FjeSAoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpXG4gIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgaWYgKCFpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICB9IGVsc2UgeyAgLy8gbGVnYWN5XG4gICAgdmFyIHN3YXAgPSBlbmNvZGluZ1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgb2Zmc2V0ID0gbGVuZ3RoXG4gICAgbGVuZ3RoID0gc3dhcFxuICB9XG5cbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuXG4gIGlmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpXG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJyk7XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cbiAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcgfHwgJ3V0ZjgnKS50b0xvd2VyQ2FzZSgpXG5cbiAgdmFyIHJldFxuICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICAgIHJldCA9IGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIHJldCA9IHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgICByZXQgPSBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICByZXQgPSBiaW5hcnlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgcmV0ID0gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldCA9IHV0ZjE2bGVXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXMgPSAnJ1xuICB2YXIgdG1wID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgaWYgKGJ1ZltpXSA8PSAweDdGKSB7XG4gICAgICByZXMgKz0gZGVjb2RlVXRmOENoYXIodG1wKSArIFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICAgICAgdG1wID0gJydcbiAgICB9IGVsc2Uge1xuICAgICAgdG1wICs9ICclJyArIGJ1ZltpXS50b1N0cmluZygxNilcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzICsgZGVjb2RlVXRmOENoYXIodG1wKVxufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBiaW5hcnlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSArIDFdICogMjU2KVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW47XG4gICAgaWYgKHN0YXJ0IDwgMClcbiAgICAgIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKVxuICAgICAgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KVxuICAgIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSBCdWZmZXIuX2F1Z21lbnQodGhpcy5zdWJhcnJheShzdGFydCwgZW5kKSlcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZCwgdHJ1ZSlcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyBpKyspIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIGlmIChuZXdCdWYubGVuZ3RoKVxuICAgIG5ld0J1Zi5wYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzXG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMClcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aClcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpXG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICB2YXIgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpXG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bDtcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSlcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKVxuICAgIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpXG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKVxuICAgIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKVxuICAgIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignYnVmZmVyIG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCd2YWx1ZSBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdpbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSwgMClcblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpID4+PiAwICYgMHhGRlxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpLCAwKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpXG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgPj4+IDAgJiAweEZGXG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWVcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyBpKyspIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gdmFsdWVcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Ugb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSB2YWx1ZVxuICB9IGVsc2Ugb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSA8IGo7IGkrKykge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmZcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldF0gPSB2YWx1ZVxuICB9IGVsc2Ugb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gdmFsdWVcbiAgfSBlbHNlIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0ludCh0aGlzLFxuICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgIG9mZnNldCxcbiAgICAgICAgICAgICBieXRlTGVuZ3RoLFxuICAgICAgICAgICAgIE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSkgLSAxLFxuICAgICAgICAgICAgIC1NYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpKVxuICB9XG5cbiAgdmFyIGkgPSAwXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSB2YWx1ZSA8IDAgPyAxIDogMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpXG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSW50KHRoaXMsXG4gICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgb2Zmc2V0LFxuICAgICAgICAgICAgIGJ5dGVMZW5ndGgsXG4gICAgICAgICAgICAgTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKSAtIDEsXG4gICAgICAgICAgICAgLU1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSkpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSB2YWx1ZSA8IDAgPyAxIDogMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSlcbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gdmFsdWVcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Ugb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9IHZhbHVlXG4gIH0gZWxzZSBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9IHZhbHVlXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgfSBlbHNlIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSB2YWx1ZVxuICB9IGVsc2Ugb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3ZhbHVlIGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignaW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAodGFyZ2V0LCB0YXJnZXRfc3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHNvdXJjZSA9IHRoaXNcblxuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0X3N0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldF9zdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRfc3RhcnQpIHRhcmdldF9zdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCBzb3VyY2UubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldF9zdGFydCA8IDApXG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHNvdXJjZS5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKVxuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0X3N0YXJ0IDwgZW5kIC0gc3RhcnQpXG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldF9zdGFydCArIHN0YXJ0XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG5cbiAgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRfc3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRhcmdldC5fc2V0KHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSwgdGFyZ2V0X3N0YXJ0KVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBmaWxsKHZhbHVlLCBzdGFydD0wLCBlbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uICh2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXZhbHVlKSB2YWx1ZSA9IDBcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kKSBlbmQgPSB0aGlzLmxlbmd0aFxuXG4gIGlmIChlbmQgPCBzdGFydCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2VuZCA8IHN0YXJ0JylcblxuICAvLyBGaWxsIDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVyblxuICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVyblxuXG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDAgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdlbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICB0aGlzW2ldID0gdmFsdWVcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gdXRmOFRvQnl0ZXModmFsdWUudG9TdHJpbmcoKSlcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgdGhpc1tpXSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGBBcnJheUJ1ZmZlcmAgd2l0aCB0aGUgKmNvcGllZCogbWVtb3J5IG9mIHRoZSBidWZmZXIgaW5zdGFuY2UuXG4gKiBBZGRlZCBpbiBOb2RlIDAuMTIuIE9ubHkgYXZhaWxhYmxlIGluIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBBcnJheUJ1ZmZlci5cbiAqL1xuQnVmZmVyLnByb3RvdHlwZS50b0FycmF5QnVmZmVyID0gZnVuY3Rpb24gKCkge1xuICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgICByZXR1cm4gKG5ldyBCdWZmZXIodGhpcykpLmJ1ZmZlclxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYnVmID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5sZW5ndGgpXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYnVmLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGJ1ZltpXSA9IHRoaXNbaV1cbiAgICAgIH1cbiAgICAgIHJldHVybiBidWYuYnVmZmVyXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0J1ZmZlci50b0FycmF5QnVmZmVyIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyJylcbiAgfVxufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBCUCA9IEJ1ZmZlci5wcm90b3R5cGVcblxuLyoqXG4gKiBBdWdtZW50IGEgVWludDhBcnJheSAqaW5zdGFuY2UqIChub3QgdGhlIFVpbnQ4QXJyYXkgY2xhc3MhKSB3aXRoIEJ1ZmZlciBtZXRob2RzXG4gKi9cbkJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgYXJyLmNvbnN0cnVjdG9yID0gQnVmZmVyXG4gIGFyci5faXNCdWZmZXIgPSB0cnVlXG5cbiAgLy8gc2F2ZSByZWZlcmVuY2UgdG8gb3JpZ2luYWwgVWludDhBcnJheSBnZXQvc2V0IG1ldGhvZHMgYmVmb3JlIG92ZXJ3cml0aW5nXG4gIGFyci5fZ2V0ID0gYXJyLmdldFxuICBhcnIuX3NldCA9IGFyci5zZXRcblxuICAvLyBkZXByZWNhdGVkLCB3aWxsIGJlIHJlbW92ZWQgaW4gbm9kZSAwLjEzK1xuICBhcnIuZ2V0ID0gQlAuZ2V0XG4gIGFyci5zZXQgPSBCUC5zZXRcblxuICBhcnIud3JpdGUgPSBCUC53cml0ZVxuICBhcnIudG9TdHJpbmcgPSBCUC50b1N0cmluZ1xuICBhcnIudG9Mb2NhbGVTdHJpbmcgPSBCUC50b1N0cmluZ1xuICBhcnIudG9KU09OID0gQlAudG9KU09OXG4gIGFyci5lcXVhbHMgPSBCUC5lcXVhbHNcbiAgYXJyLmNvbXBhcmUgPSBCUC5jb21wYXJlXG4gIGFyci5jb3B5ID0gQlAuY29weVxuICBhcnIuc2xpY2UgPSBCUC5zbGljZVxuICBhcnIucmVhZFVJbnRMRSA9IEJQLnJlYWRVSW50TEVcbiAgYXJyLnJlYWRVSW50QkUgPSBCUC5yZWFkVUludEJFXG4gIGFyci5yZWFkVUludDggPSBCUC5yZWFkVUludDhcbiAgYXJyLnJlYWRVSW50MTZMRSA9IEJQLnJlYWRVSW50MTZMRVxuICBhcnIucmVhZFVJbnQxNkJFID0gQlAucmVhZFVJbnQxNkJFXG4gIGFyci5yZWFkVUludDMyTEUgPSBCUC5yZWFkVUludDMyTEVcbiAgYXJyLnJlYWRVSW50MzJCRSA9IEJQLnJlYWRVSW50MzJCRVxuICBhcnIucmVhZEludExFID0gQlAucmVhZEludExFXG4gIGFyci5yZWFkSW50QkUgPSBCUC5yZWFkSW50QkVcbiAgYXJyLnJlYWRJbnQ4ID0gQlAucmVhZEludDhcbiAgYXJyLnJlYWRJbnQxNkxFID0gQlAucmVhZEludDE2TEVcbiAgYXJyLnJlYWRJbnQxNkJFID0gQlAucmVhZEludDE2QkVcbiAgYXJyLnJlYWRJbnQzMkxFID0gQlAucmVhZEludDMyTEVcbiAgYXJyLnJlYWRJbnQzMkJFID0gQlAucmVhZEludDMyQkVcbiAgYXJyLnJlYWRGbG9hdExFID0gQlAucmVhZEZsb2F0TEVcbiAgYXJyLnJlYWRGbG9hdEJFID0gQlAucmVhZEZsb2F0QkVcbiAgYXJyLnJlYWREb3VibGVMRSA9IEJQLnJlYWREb3VibGVMRVxuICBhcnIucmVhZERvdWJsZUJFID0gQlAucmVhZERvdWJsZUJFXG4gIGFyci53cml0ZVVJbnQ4ID0gQlAud3JpdGVVSW50OFxuICBhcnIud3JpdGVVSW50TEUgPSBCUC53cml0ZVVJbnRMRVxuICBhcnIud3JpdGVVSW50QkUgPSBCUC53cml0ZVVJbnRCRVxuICBhcnIud3JpdGVVSW50MTZMRSA9IEJQLndyaXRlVUludDE2TEVcbiAgYXJyLndyaXRlVUludDE2QkUgPSBCUC53cml0ZVVJbnQxNkJFXG4gIGFyci53cml0ZVVJbnQzMkxFID0gQlAud3JpdGVVSW50MzJMRVxuICBhcnIud3JpdGVVSW50MzJCRSA9IEJQLndyaXRlVUludDMyQkVcbiAgYXJyLndyaXRlSW50TEUgPSBCUC53cml0ZUludExFXG4gIGFyci53cml0ZUludEJFID0gQlAud3JpdGVJbnRCRVxuICBhcnIud3JpdGVJbnQ4ID0gQlAud3JpdGVJbnQ4XG4gIGFyci53cml0ZUludDE2TEUgPSBCUC53cml0ZUludDE2TEVcbiAgYXJyLndyaXRlSW50MTZCRSA9IEJQLndyaXRlSW50MTZCRVxuICBhcnIud3JpdGVJbnQzMkxFID0gQlAud3JpdGVJbnQzMkxFXG4gIGFyci53cml0ZUludDMyQkUgPSBCUC53cml0ZUludDMyQkVcbiAgYXJyLndyaXRlRmxvYXRMRSA9IEJQLndyaXRlRmxvYXRMRVxuICBhcnIud3JpdGVGbG9hdEJFID0gQlAud3JpdGVGbG9hdEJFXG4gIGFyci53cml0ZURvdWJsZUxFID0gQlAud3JpdGVEb3VibGVMRVxuICBhcnIud3JpdGVEb3VibGVCRSA9IEJQLndyaXRlRG91YmxlQkVcbiAgYXJyLmZpbGwgPSBCUC5maWxsXG4gIGFyci5pbnNwZWN0ID0gQlAuaW5zcGVjdFxuICBhcnIudG9BcnJheUJ1ZmZlciA9IEJQLnRvQXJyYXlCdWZmZXJcblxuICByZXR1cm4gYXJyXG59XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLXpcXC1dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG59XG5cbmZ1bmN0aW9uIGlzQXJyYXlpc2ggKHN1YmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXkoc3ViamVjdCkgfHwgQnVmZmVyLmlzQnVmZmVyKHN1YmplY3QpIHx8XG4gICAgICBzdWJqZWN0ICYmIHR5cGVvZiBzdWJqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgdHlwZW9mIHN1YmplY3QubGVuZ3RoID09PSAnbnVtYmVyJ1xufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzKHN0cmluZywgdW5pdHMpIHtcbiAgdmFyIGNvZGVQb2ludCwgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgYnl0ZXMgPSBbXVxuICB2YXIgaSA9IDBcblxuICBmb3IgKDsgaTxsZW5ndGg7IGkrKykge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcblxuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmIChsZWFkU3Vycm9nYXRlKSB7XG5cbiAgICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBjb2RlUG9pbnQgPSBsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwIHwgMHgxMDAwMFxuICAgICAgICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgIGVsc2Uge1xuXG4gICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgIGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gICAgfVxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9XG4gICAgZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDIwMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG5cbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCwgdW5pdFNpemUpIHtcbiAgaWYgKHVuaXRTaXplKSBsZW5ndGggLT0gbGVuZ3RoICUgdW5pdFNpemU7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpXG4gICAgICBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGRlY29kZVV0ZjhDaGFyIChzdHIpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHN0cilcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoMHhGRkZEKSAvLyBVVEYgOCBpbnZhbGlkIGNoYXJcbiAgfVxufVxuIiwidmFyIGxvb2t1cCA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJztcblxuOyhmdW5jdGlvbiAoZXhwb3J0cykge1xuXHQndXNlIHN0cmljdCc7XG5cbiAgdmFyIEFyciA9ICh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcpXG4gICAgPyBVaW50OEFycmF5XG4gICAgOiBBcnJheVxuXG5cdHZhciBQTFVTICAgPSAnKycuY2hhckNvZGVBdCgwKVxuXHR2YXIgU0xBU0ggID0gJy8nLmNoYXJDb2RlQXQoMClcblx0dmFyIE5VTUJFUiA9ICcwJy5jaGFyQ29kZUF0KDApXG5cdHZhciBMT1dFUiAgPSAnYScuY2hhckNvZGVBdCgwKVxuXHR2YXIgVVBQRVIgID0gJ0EnLmNoYXJDb2RlQXQoMClcblx0dmFyIFBMVVNfVVJMX1NBRkUgPSAnLScuY2hhckNvZGVBdCgwKVxuXHR2YXIgU0xBU0hfVVJMX1NBRkUgPSAnXycuY2hhckNvZGVBdCgwKVxuXG5cdGZ1bmN0aW9uIGRlY29kZSAoZWx0KSB7XG5cdFx0dmFyIGNvZGUgPSBlbHQuY2hhckNvZGVBdCgwKVxuXHRcdGlmIChjb2RlID09PSBQTFVTIHx8XG5cdFx0ICAgIGNvZGUgPT09IFBMVVNfVVJMX1NBRkUpXG5cdFx0XHRyZXR1cm4gNjIgLy8gJysnXG5cdFx0aWYgKGNvZGUgPT09IFNMQVNIIHx8XG5cdFx0ICAgIGNvZGUgPT09IFNMQVNIX1VSTF9TQUZFKVxuXHRcdFx0cmV0dXJuIDYzIC8vICcvJ1xuXHRcdGlmIChjb2RlIDwgTlVNQkVSKVxuXHRcdFx0cmV0dXJuIC0xIC8vbm8gbWF0Y2hcblx0XHRpZiAoY29kZSA8IE5VTUJFUiArIDEwKVxuXHRcdFx0cmV0dXJuIGNvZGUgLSBOVU1CRVIgKyAyNiArIDI2XG5cdFx0aWYgKGNvZGUgPCBVUFBFUiArIDI2KVxuXHRcdFx0cmV0dXJuIGNvZGUgLSBVUFBFUlxuXHRcdGlmIChjb2RlIDwgTE9XRVIgKyAyNilcblx0XHRcdHJldHVybiBjb2RlIC0gTE9XRVIgKyAyNlxuXHR9XG5cblx0ZnVuY3Rpb24gYjY0VG9CeXRlQXJyYXkgKGI2NCkge1xuXHRcdHZhciBpLCBqLCBsLCB0bXAsIHBsYWNlSG9sZGVycywgYXJyXG5cblx0XHRpZiAoYjY0Lmxlbmd0aCAlIDQgPiAwKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuXHRcdH1cblxuXHRcdC8vIHRoZSBudW1iZXIgb2YgZXF1YWwgc2lnbnMgKHBsYWNlIGhvbGRlcnMpXG5cdFx0Ly8gaWYgdGhlcmUgYXJlIHR3byBwbGFjZWhvbGRlcnMsIHRoYW4gdGhlIHR3byBjaGFyYWN0ZXJzIGJlZm9yZSBpdFxuXHRcdC8vIHJlcHJlc2VudCBvbmUgYnl0ZVxuXHRcdC8vIGlmIHRoZXJlIGlzIG9ubHkgb25lLCB0aGVuIHRoZSB0aHJlZSBjaGFyYWN0ZXJzIGJlZm9yZSBpdCByZXByZXNlbnQgMiBieXRlc1xuXHRcdC8vIHRoaXMgaXMganVzdCBhIGNoZWFwIGhhY2sgdG8gbm90IGRvIGluZGV4T2YgdHdpY2Vcblx0XHR2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXHRcdHBsYWNlSG9sZGVycyA9ICc9JyA9PT0gYjY0LmNoYXJBdChsZW4gLSAyKSA/IDIgOiAnPScgPT09IGI2NC5jaGFyQXQobGVuIC0gMSkgPyAxIDogMFxuXG5cdFx0Ly8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5cdFx0YXJyID0gbmV3IEFycihiNjQubGVuZ3RoICogMyAvIDQgLSBwbGFjZUhvbGRlcnMpXG5cblx0XHQvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG5cdFx0bCA9IHBsYWNlSG9sZGVycyA+IDAgPyBiNjQubGVuZ3RoIC0gNCA6IGI2NC5sZW5ndGhcblxuXHRcdHZhciBMID0gMFxuXG5cdFx0ZnVuY3Rpb24gcHVzaCAodikge1xuXHRcdFx0YXJyW0wrK10gPSB2XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMCwgaiA9IDA7IGkgPCBsOyBpICs9IDQsIGogKz0gMykge1xuXHRcdFx0dG1wID0gKGRlY29kZShiNjQuY2hhckF0KGkpKSA8PCAxOCkgfCAoZGVjb2RlKGI2NC5jaGFyQXQoaSArIDEpKSA8PCAxMikgfCAoZGVjb2RlKGI2NC5jaGFyQXQoaSArIDIpKSA8PCA2KSB8IGRlY29kZShiNjQuY2hhckF0KGkgKyAzKSlcblx0XHRcdHB1c2goKHRtcCAmIDB4RkYwMDAwKSA+PiAxNilcblx0XHRcdHB1c2goKHRtcCAmIDB4RkYwMCkgPj4gOClcblx0XHRcdHB1c2godG1wICYgMHhGRilcblx0XHR9XG5cblx0XHRpZiAocGxhY2VIb2xkZXJzID09PSAyKSB7XG5cdFx0XHR0bXAgPSAoZGVjb2RlKGI2NC5jaGFyQXQoaSkpIDw8IDIpIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAxKSkgPj4gNClcblx0XHRcdHB1c2godG1wICYgMHhGRilcblx0XHR9IGVsc2UgaWYgKHBsYWNlSG9sZGVycyA9PT0gMSkge1xuXHRcdFx0dG1wID0gKGRlY29kZShiNjQuY2hhckF0KGkpKSA8PCAxMCkgfCAoZGVjb2RlKGI2NC5jaGFyQXQoaSArIDEpKSA8PCA0KSB8IChkZWNvZGUoYjY0LmNoYXJBdChpICsgMikpID4+IDIpXG5cdFx0XHRwdXNoKCh0bXAgPj4gOCkgJiAweEZGKVxuXHRcdFx0cHVzaCh0bXAgJiAweEZGKVxuXHRcdH1cblxuXHRcdHJldHVybiBhcnJcblx0fVxuXG5cdGZ1bmN0aW9uIHVpbnQ4VG9CYXNlNjQgKHVpbnQ4KSB7XG5cdFx0dmFyIGksXG5cdFx0XHRleHRyYUJ5dGVzID0gdWludDgubGVuZ3RoICUgMywgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcblx0XHRcdG91dHB1dCA9IFwiXCIsXG5cdFx0XHR0ZW1wLCBsZW5ndGhcblxuXHRcdGZ1bmN0aW9uIGVuY29kZSAobnVtKSB7XG5cdFx0XHRyZXR1cm4gbG9va3VwLmNoYXJBdChudW0pXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcblx0XHRcdHJldHVybiBlbmNvZGUobnVtID4+IDE4ICYgMHgzRikgKyBlbmNvZGUobnVtID4+IDEyICYgMHgzRikgKyBlbmNvZGUobnVtID4+IDYgJiAweDNGKSArIGVuY29kZShudW0gJiAweDNGKVxuXHRcdH1cblxuXHRcdC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcblx0XHRmb3IgKGkgPSAwLCBsZW5ndGggPSB1aW50OC5sZW5ndGggLSBleHRyYUJ5dGVzOyBpIDwgbGVuZ3RoOyBpICs9IDMpIHtcblx0XHRcdHRlbXAgPSAodWludDhbaV0gPDwgMTYpICsgKHVpbnQ4W2kgKyAxXSA8PCA4KSArICh1aW50OFtpICsgMl0pXG5cdFx0XHRvdXRwdXQgKz0gdHJpcGxldFRvQmFzZTY0KHRlbXApXG5cdFx0fVxuXG5cdFx0Ly8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuXHRcdHN3aXRjaCAoZXh0cmFCeXRlcykge1xuXHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHR0ZW1wID0gdWludDhbdWludDgubGVuZ3RoIC0gMV1cblx0XHRcdFx0b3V0cHV0ICs9IGVuY29kZSh0ZW1wID4+IDIpXG5cdFx0XHRcdG91dHB1dCArPSBlbmNvZGUoKHRlbXAgPDwgNCkgJiAweDNGKVxuXHRcdFx0XHRvdXRwdXQgKz0gJz09J1xuXHRcdFx0XHRicmVha1xuXHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHR0ZW1wID0gKHVpbnQ4W3VpbnQ4Lmxlbmd0aCAtIDJdIDw8IDgpICsgKHVpbnQ4W3VpbnQ4Lmxlbmd0aCAtIDFdKVxuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKHRlbXAgPj4gMTApXG5cdFx0XHRcdG91dHB1dCArPSBlbmNvZGUoKHRlbXAgPj4gNCkgJiAweDNGKVxuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKCh0ZW1wIDw8IDIpICYgMHgzRilcblx0XHRcdFx0b3V0cHV0ICs9ICc9J1xuXHRcdFx0XHRicmVha1xuXHRcdH1cblxuXHRcdHJldHVybiBvdXRwdXRcblx0fVxuXG5cdGV4cG9ydHMudG9CeXRlQXJyYXkgPSBiNjRUb0J5dGVBcnJheVxuXHRleHBvcnRzLmZyb21CeXRlQXJyYXkgPSB1aW50OFRvQmFzZTY0XG59KHR5cGVvZiBleHBvcnRzID09PSAndW5kZWZpbmVkJyA/ICh0aGlzLmJhc2U2NGpzID0ge30pIDogZXhwb3J0cykpXG4iLCJleHBvcnRzLnJlYWQgPSBmdW5jdGlvbihidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLFxuICAgICAgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMSxcbiAgICAgIGVNYXggPSAoMSA8PCBlTGVuKSAtIDEsXG4gICAgICBlQmlhcyA9IGVNYXggPj4gMSxcbiAgICAgIG5CaXRzID0gLTcsXG4gICAgICBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDAsXG4gICAgICBkID0gaXNMRSA/IC0xIDogMSxcbiAgICAgIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV07XG5cbiAgaSArPSBkO1xuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpO1xuICBzID4+PSAoLW5CaXRzKTtcbiAgbkJpdHMgKz0gZUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCk7XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSk7XG4gIGUgPj49ICgtbkJpdHMpO1xuICBuQml0cyArPSBtTGVuO1xuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KTtcblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KTtcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pO1xuICAgIGUgPSBlIC0gZUJpYXM7XG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbik7XG59O1xuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24oYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGMsXG4gICAgICBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxLFxuICAgICAgZU1heCA9ICgxIDw8IGVMZW4pIC0gMSxcbiAgICAgIGVCaWFzID0gZU1heCA+PiAxLFxuICAgICAgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApLFxuICAgICAgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpLFxuICAgICAgZCA9IGlzTEUgPyAxIDogLTEsXG4gICAgICBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwO1xuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpO1xuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKTtcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS07XG4gICAgICBjICo9IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrO1xuICAgICAgYyAvPSAyO1xuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogTWF0aC5wb3coMiwgbUxlbik7XG4gICAgICBlID0gZSArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcblxuICBlID0gKGUgPDwgbUxlbikgfCBtO1xuICBlTGVuICs9IG1MZW47XG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCk7XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4O1xufTtcbiIsIlxuLyoqXG4gKiBpc0FycmF5XG4gKi9cblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4vKipcbiAqIHRvU3RyaW5nXG4gKi9cblxudmFyIHN0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogV2hldGhlciBvciBub3QgdGhlIGdpdmVuIGB2YWxgXG4gKiBpcyBhbiBhcnJheS5cbiAqXG4gKiBleGFtcGxlOlxuICpcbiAqICAgICAgICBpc0FycmF5KFtdKTtcbiAqICAgICAgICAvLyA+IHRydWVcbiAqICAgICAgICBpc0FycmF5KGFyZ3VtZW50cyk7XG4gKiAgICAgICAgLy8gPiBmYWxzZVxuICogICAgICAgIGlzQXJyYXkoJycpO1xuICogICAgICAgIC8vID4gZmFsc2VcbiAqXG4gKiBAcGFyYW0ge21peGVkfSB2YWxcbiAqIEByZXR1cm4ge2Jvb2x9XG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5IHx8IGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuICEhIHZhbCAmJiAnW29iamVjdCBBcnJheV0nID09IHN0ci5jYWxsKHZhbCk7XG59O1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG5cbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuICAgIHZhciBjdXJyZW50UXVldWU7XG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHZhciBpID0gLTE7XG4gICAgICAgIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtpXSgpO1xuICAgICAgICB9XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbn1cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgcXVldWUucHVzaChmdW4pO1xuICAgIGlmICghZHJhaW5pbmcpIHtcbiAgICAgICAgc2V0VGltZW91dChkcmFpblF1ZXVlLCAwKTtcbiAgICB9XG59O1xuXG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxuLy8gVE9ETyhzaHR5bG1hbilcbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsInZhciBzYWxlYWJsZUJhc2ljQ3RybCA9IGZ1bmN0aW9uKCRzY29wZSwkcm9vdFNjb3BlLFNhbGVhYmxlU2VydmljZSxNZXNzYWdlU2VydmljZSxDYXRlZ29yeUhlbHBlcil7XG5cbiAgICAkcm9vdFNjb3BlLiRvbihcIm5ld0Jhc2ljRGV0YWlsXCIsZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgICBDYXRlZ29yeUhlbHBlci5jYXRlZ29yeUxpc3QoJy9zYWxjYXRsaXN0Jywkc2NvcGUpO1xuXG4gICAgICAgIC8vdmFyIG51bWJlck9mU2FsZWFibGVzID0gJHNjb3BlLiRwYXJlbnQuc2FsZWFibGVzLmxlbmd0aDtcbiAgICAgICAgdmFyIHNhbGVhYmxlID0gU2FsZWFibGVTZXJ2aWNlLiRidWlsZCgpO1xuICAgICAgICBzYWxlYWJsZS50eXBlID0wO1xuICAgICAgICBzYWxlYWJsZS5mZWF0dXJlZCA9IDA7XG5cbiAgICAgICAgLyppZihudW1iZXJPZlNhbGVhYmxlcz09MCl7XG5cbiAgICAgICAgfSovXG4gICAgICAgIC8vJHNjb3BlLnNhbGVhYmxlID0gYW5ndWxhci5jb3B5KCRzY29wZS5tYXN0ZXIpO1xuICAgICAgICAkc2NvcGUuc2FsZWFibGUgPSBzYWxlYWJsZTtcblxuXG5cbiAgICAgICAgJHNjb3BlLnVwZGF0ZVNhbGVhYmxlID0gZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgaWYoJHNjb3BlLnNhbGVhYmxlLmlzZmVhdHVyZWQpe1xuICAgICAgICAgICAgICAgICRzY29wZS5zYWxlYWJsZS5mZWF0dXJlZCA9IDE7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2FsZWFibGUuZmVhdHVyZWQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc29sZS5sb2coJHNjb3BlLnNhbGVhYmxlLmNhdGVnb3JpZXMpO1xuICAgICAgICAgICAgc2FsZWFibGUuJHNhdmUoKS4kdGhlbihmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICB2YXIgbWV0YSA9IGRhdGEuJG1ldGFkYXRhLm1ldGE7XG4gICAgICAgICAgICAgICAgTWVzc2FnZVNlcnZpY2Uuc2V0QWxlcnRNZXNzYWdlKCRzY29wZSxtZXRhKTtcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KFwic2FsZWFibGVDcmVhdGVkXCIsc2FsZWFibGUpO1xuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfSk7XG5cbiAgICAkcm9vdFNjb3BlLiRvbihcImVkaXRCYXNpY0RldGFpbFwiLGZ1bmN0aW9uKGV2ZW50LHNhbGVhYmxlKXtcbiAgICAgICAgQ2F0ZWdvcnlIZWxwZXIuY2F0ZWdvcnlMaXN0KCcvc2FsY2F0bGlzdCcsJHNjb3BlKTtcbiAgICAgICAgQ2F0ZWdvcnlIZWxwZXIuc2FsQ2F0ZWdvcnlMaXN0KCcvc2FsY2F0bGlzdHNlbGVjdGVkLycrc2FsZWFibGUuaWQsJHNjb3BlKTtcbiAgICAgICAgJHNjb3BlLnNhbGVhYmxlID0gc2FsZWFibGU7XG4gICAgICAgICRzY29wZS51cGRhdGVTYWxlYWJsZSA9IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgIGlmKCRzY29wZS5zYWxlYWJsZS5pc2ZlYXR1cmVkKXtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2FsZWFibGUuZmVhdHVyZWQgPSAxO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNhbGVhYmxlLmZlYXR1cmVkID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNhbGVhYmxlLiRzYXZlKCkuJHRoZW4oZnVuY3Rpb24oZGF0YSl7XG5cbiAgICAgICAgICAgICAgICB2YXIgbWV0YSA9IGRhdGEuJG1ldGFkYXRhLm1ldGE7XG4gICAgICAgICAgICAgICAgTWVzc2FnZVNlcnZpY2Uuc2V0QWxlcnRNZXNzYWdlKCRzY29wZSxtZXRhKTtcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KFwic2FsZWFibGVVcGRhdGVkXCIsc2FsZWFibGUpO1xuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfSk7XG5cblxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2FsZWFibGVCYXNpY0N0cmw7XG4iLCJcbnZhciBiaW9Db250cm9sbGVyID0gZnVuY3Rpb24oJHNjb3BlLEJpb2dyYXBoeVNlcnZpY2UsTWVzc2FnZVNlcnZpY2Upe1xuXG5cbiAgICB2YXIgZGF0YSA9IEJpb2dyYXBoeVNlcnZpY2UuJGZpbmQoMCk7XG5cbiAgICAkc2NvcGUucHJvZmlsZSA9IGRhdGEuJGZldGNoKCk7XG5cbiAgICAkc2NvcGUudXBkYXRlQmlvID0gZnVuY3Rpb24oKXtcbiAgICAgICAgZGF0YS4kc2F2ZSgpLiR0aGVuKGZ1bmN0aW9uKGRhdGEpe1xuXG4gICAgICAgICAgICB2YXIgbWV0YSA9IGRhdGEuJG1ldGFkYXRhLm1ldGE7XG5cbiAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsbWV0YSk7XG5cbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJpb0NvbnRyb2xsZXI7IiwidmFyIGNvbmZpZ0NvbnRyb2xsZXIgPSBmdW5jdGlvbigkc2NvcGUsJHRpbWVvdXQsTWVzc2FnZVNlcnZpY2UsVXNlckNvbnRlbnRUeXBlKXtcblxuICAgIHZhciBjb250ZW50dHlwZXMgPSBVc2VyQ29udGVudFR5cGUuJHNlYXJjaCgpLiR0aGVuKGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAkc2NvcGUudXNlcmNvbnRlbnR0eXBlcyA9IGRhdGE7XG4gICAgfSk7XG5cbiAgICAkc2NvcGUuZWRpdFVzZXJDb250ZW50ID0gZnVuY3Rpb24oY29udGVudCl7XG4gICAgICAgICRzY29wZS5jb250ZW50ID0gY29udGVudDtcbiAgICAgICAgJHNjb3BlLnNob3dFZGl0Q29udGVudEl0ZW0gPSB0cnVlO1xuICAgIH1cbiAgICAkc2NvcGUudXBkYXRlVXNlckNvbnRlbnQgPSBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgaXNIb21lID0gJHNjb3BlLmNvbnRlbnQuaXNob21lO1xuICAgICAgICB2YXIgYXNIb21lID0gZmFsc2U7XG4gICAgICAgICRzY29wZS5jb250ZW50LmFzaG9tZSA9IDA7XG4gICAgICAgIGlmKGlzSG9tZSl7XG4gICAgICAgICAgICAkc2NvcGUuY29udGVudC5hc2hvbWUgPSAxO1xuICAgICAgICB9XG4gICAgICAgICRzY29wZS5jb250ZW50LiRzYXZlKCkuJHRoZW4oZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAkc2NvcGUudXNlcmNvbnRlbnR0eXBlcy4kcmVmcmVzaCgpO1xuICAgICAgICAgICAgJHNjb3BlLnNob3dFZGl0Q29udGVudEl0ZW0gPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kbWV0YWRhdGEubWV0YTtcbiAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsbWV0YSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgICRzY29wZS5jaGFuZ2VTdGF0ZUNvbnRlbnQgPSBmdW5jdGlvbigkZXZlbnQsdXNlcmNvbnRlbnQpe1xuICAgICAgICB2YXIgY2hlY2tib3ggPSAkZXZlbnQudGFyZ2V0O1xuICAgICAgICB2YXIgYWN0aW9uID0gKGNoZWNrYm94LmNoZWNrZWQgPyB0cnVlOiBmYWxzZSk7XG5cbiAgICAgICAgdXNlcmNvbnRlbnQuYWN0aXZlID0gYWN0aW9uO1xuICAgICAgICB1c2VyY29udGVudC4kc2F2ZSgpLiR0aGVuKGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgJHNjb3BlLnVzZXJjb250ZW50dHlwZXMuJHJlZnJlc2goKTtcbiAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kbWV0YWRhdGEubWV0YTtcbiAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsbWV0YSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAkc2NvcGUuc2V0QXNIb21lID0gZnVuY3Rpb24oJGV2ZW50LHVzZXJjb250ZW50KXtcbiAgICAgICAgdmFyIGNoZWNrYm94ID0gJGV2ZW50LnRhcmdldDtcbiAgICAgICAgdmFyIGFjdGlvbiA9IChjaGVja2JveC5jaGVja2VkID8gdHJ1ZTogZmFsc2UpO1xuXG4gICAgICAgIHVzZXJjb250ZW50LmFzaG9tZSA9IGFjdGlvbjtcbiAgICAgICAgdXNlcmNvbnRlbnQuJHNhdmUoKS4kdGhlbihmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICRzY29wZS51c2VyY29udGVudHR5cGVzLiRyZWZyZXNoKCk7XG4gICAgICAgICAgICB2YXIgbWV0YSA9IGRhdGEuJG1ldGFkYXRhLm1ldGE7XG4gICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXRBbGVydE1lc3NhZ2UoJHNjb3BlLG1ldGEpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbn1cbm1vZHVsZS5leHBvcnRzID0gY29uZmlnQ29udHJvbGxlcjtcblxuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IG1hY2ludG9zaCBvbiAyLzMvMTUuXG4gKi9cbnZhciBhbGVydERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6XCIuLi8uLi9qcy9hZG1pbi9hbmd1bGFyL3RlbXBsYXRlcy9hbGVydC5odG1sXCIsXG4gICAgICAgIHJlc3RyaWN0OlwiRUFcIixcbiAgICAgICAgc2NvcGUgOiB7XG4gICAgICAgICAgICBtZXNzYWdlOlwiPW1zZ2VcIlxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbnRyb2xsZXI6ZnVuY3Rpb24oJHNjb3BlKXtcblxuICAgICAgICAgICAgJHNjb3BlLnNob3dBbGVydCA9IHRydWU7XG4gICAgICAgICAgICAkc2NvcGUuZGVzdHJveUFsZXJ0ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAkc2NvcGUuJHBhcmVudC5zaG93QWxlcnQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gYWxlcnREaXJlY3RpdmU7XG4iLCJ2YXIgYmlvRGlyZWN0aXZlID0gZnVuY3Rpb24oTWVzc2FnZVNlcnZpY2UsQmlvLCR0aW1lb3V0LEhlbHBlciwkaHR0cCl7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6XCIuLi8uLi9qcy9hZG1pbi9hbmd1bGFyL3RlbXBsYXRlcy9iaW9ncmFwaGllcy9iaW9ncmFwaGllcy5odG1sXCIsXG4gICAgICAgIHJlc3RyaWN0OlwiRUFcIixcbiAgICAgICAgc2NvcGU6e30sXG4gICAgICAgIGNvbnRyb2xsZXI6ZnVuY3Rpb24oJHNjb3BlLCRyb290U2NvcGUpIHtcbiAgICAgICAgICAgICRzY29wZS5jbG9zZUZvcm0gPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIEhlbHBlci5lbmFibGVGb3JtKCRzY29wZSxmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBIZWxwZXIuZW5hYmxlRm9ybSgkc2NvcGUsZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBiaW9zID0gQmlvLiRzZWFyY2goKS4kdGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYmlvcyA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmJpb3MubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXROb0l0ZW1zSW5mb01lc3NhZ2UoJHNjb3BlLCBcIiBiaW9ncmFmw61hc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIi4gUHVsc2EgZWwgYm90w7NuIE51ZXZhIHBhcmEgY3JlYXIgdW5hXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuXG5cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld0JpbyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgSGVscGVyLmVuYWJsZUZvcm0oJHNjb3BlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiaW8gPSBCaW8uJGJ1aWxkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYmlvID0gYmlvO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXBkYXRlQmlvID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmlvLiRzYXZlKCkuJHRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmJpb3MuJHJlZnJlc2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmJpb0Zvcm0uJHJlc2V0Rm9ybSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIZWxwZXIuZW5hYmxlRm9ybSgkc2NvcGUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1ldGEgPSBkYXRhLiRtZXRhZGF0YS5tZXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXRBbGVydE1lc3NhZ2UoJHNjb3BlLCBtZXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5lZGl0QmlvID0gZnVuY3Rpb24gKGJpbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgSGVscGVyLmVuYWJsZUZvcm0oJHNjb3BlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5iaW8gPSBiaW87XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS51cGRhdGVCaW8gPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaW8uJHNhdmUoKS4kdGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYmlvcy4kcmVmcmVzaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYmlvRm9ybS4kcmVzZXRGb3JtKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhlbHBlci5lbmFibGVGb3JtKCRzY29wZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWV0YSA9IGRhdGEuJG1ldGFkYXRhLm1ldGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsIG1ldGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vZGVsZXRlXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5yZW1vdmVCaW8gPSBmdW5jdGlvbiAoYmlvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYmlvID0gYmlvO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbmZpcm1hdGlvbiA9IE1lc3NhZ2VTZXJ2aWNlLnNldENvbmZpcm1EZWxldGVNZXNzYWdlKFwiIGJpb2dyYWbDrWFcIiwgXCIgXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpcm1hdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpby4kZGVzdHJveSgpLiR0aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmJpb3MuJHJlZnJlc2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWVzc2FnZVNlcnZpY2Uuc2V0QWxlcnRNZXNzYWdlKCRzY29wZSwgbWV0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLy9jaGFuZ2Ugc3RhdHVzXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jaGFuZ2VTdGF0dXMgPSBmdW5jdGlvbiAoJGV2ZW50LCBiaW8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGVja2JveCA9ICRldmVudC50YXJnZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0gKGNoZWNrYm94LmNoZWNrZWQgPyB0cnVlIDogZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBiaW8uc3RhdHVzID0gYWN0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmlvLiRzYXZlKCkuJHRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYmlvcy4kcmVmcmVzaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kbWV0YWRhdGEubWV0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXRBbGVydE1lc3NhZ2UoJHNjb3BlLCBtZXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZXREZWYgPSBmdW5jdGlvbiAoJGV2ZW50LCBiaW8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiYXF1aVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qdmFyIGNoZWNrYm94ID0gJGV2ZW50LnRhcmdldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSAoY2hlY2tib3guY2hlY2tlZCA/IHRydWUgOiBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJpby5zdGF0dXMgPSBhY3Rpb247Ki9cbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLnBvc3QoXCIvYmlvZ3JhcGh5L3NldERlZmF1bHQvXCIrYmlvLmlkKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5iaW9zLiRyZWZyZXNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1ldGEgPSBkYXRhLm1ldGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTWVzc2FnZVNlcnZpY2Uuc2V0QWxlcnRNZXNzYWdlKCRzY29wZSwgbWV0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuXG5cblxuXG5cbiAgICAgICAgfVxuICAgIH1cblxufVxubW9kdWxlLmV4cG9ydHMgPSBiaW9EaXJlY3RpdmU7XG4iLCJ2YXIgY2xvc2VDb250ZW50RGlyZWN0aXZlID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDonRUEnLFxuICAgICAgICB0ZW1wbGF0ZTonPGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwiZGVzdHJveVNlY3Rpb24oKVwiIGNsYXNzPVwicHVsbC1yaWdodCByZW1vdmUtYnV0dG9uXCIgZGF0YS1pY29uPVwiJiN4ZTcwZFwiID48L2E+JyxcblxuICAgICAgICBzY29wZTp7cmVtb3ZlOicmJ30sXG4gICAgICAgIGNvbnRyb2xsZXI6ZnVuY3Rpb24oJHNjb3BlKXtcbiAgICAgICAgICAgICRzY29wZS5kZXN0cm95U2VjdGlvbiA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb3NlQ29udGVudERpcmVjdGl2ZTtcbiIsInZhciBjb25maWdNZW51ID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDpcIkVBXCIsXG4gICAgICAgIHRlbXBsYXRlVXJsOlwiLi4vLi4vanMvYWRtaW4vYW5ndWxhci90ZW1wbGF0ZXMvY29uZmlnX21lbnUuaHRtbFwiXG4gICAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBjb25maWdNZW51OyIsInZhciBjYXRlZ29yeURpcmVjdGl2ZSA9IGZ1bmN0aW9uKE1lc3NhZ2VTZXJ2aWNlLENhdGVnb3J5LCR0aW1lb3V0LEhlbHBlcil7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6XCIuLi8uLi9qcy9hZG1pbi9hbmd1bGFyL3RlbXBsYXRlcy9jb25maWd1cmF0aW9uL2NhdGVnb3JpZXMuaHRtbFwiLFxuICAgICAgICByZXN0cmljdDpcIkVBXCIsXG4gICAgICAgIHNjb3BlOnt9LFxuICAgICAgICBjb250cm9sbGVyOmZ1bmN0aW9uKCRzY29wZSwkcm9vdFNjb3BlKSB7XG4gICAgICAgICAgICAkc2NvcGUuY2xvc2VGb3JtID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBIZWxwZXIuZW5hYmxlRm9ybSgkc2NvcGUsZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgSGVscGVyLmVuYWJsZUZvcm0oJHNjb3BlLGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhdGVnb3JpZXMgPSBDYXRlZ29yeS4kc2VhcmNoKCkuJHRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jYXRlZ29yaWVzID0gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuY2F0ZWdvcmllcy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldE5vSXRlbXNJbmZvTWVzc2FnZSgkc2NvcGUsIFwiIGNhdGVnb3LDrWFzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiLiBQdWxzYSBlbCBib3TDs24gTnVldmEgcGFyYSBjcmVhciB1bmFcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdDYXRlZ29yeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEhlbHBlci5lbmFibGVGb3JtKCRzY29wZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2F0ZWdvcnkgPSBDYXRlZ29yeS4kYnVpbGQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jYXRlZ29yeSA9IGNhdGVnb3J5O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXBkYXRlQ2F0ZWdvcnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnkuJHNhdmUoKS4kdGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2F0ZWdvcmllcy4kcmVmcmVzaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2F0ZWdvcnlGb3JtLiRyZXNldEZvcm0oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSGVscGVyLmVuYWJsZUZvcm0oJHNjb3BlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kbWV0YWRhdGEubWV0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWVzc2FnZVNlcnZpY2Uuc2V0QWxlcnRNZXNzYWdlKCRzY29wZSwgbWV0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZWRpdENhdGVnb3J5ID0gZnVuY3Rpb24gKGNhdGVnb3J5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBIZWxwZXIuZW5hYmxlRm9ybSgkc2NvcGUsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhdGVnb3J5ID0gY2F0ZWdvcnk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS51cGRhdGVDYXRlZ29yeSA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5LiRzYXZlKCkuJHRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhdGVnb3JpZXMuJHJlZnJlc2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhdGVnb3J5Rm9ybS4kcmVzZXRGb3JtKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhlbHBlci5lbmFibGVGb3JtKCRzY29wZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWV0YSA9IGRhdGEuJG1ldGFkYXRhLm1ldGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsIG1ldGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vZGVsZXRlXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5yZW1vdmVDYXRlZ29yeSA9IGZ1bmN0aW9uIChjYXRlZ29yeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhdGVnb3J5ID0gY2F0ZWdvcnk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29uZmlybWF0aW9uID0gTWVzc2FnZVNlcnZpY2Uuc2V0Q29uZmlybURlbGV0ZU1lc3NhZ2UoXCIgY2F0ZWdvcsOtYVwiLCBcIiBcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlybWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnkuJGRlc3Ryb3koKS4kdGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWV0YSA9IGRhdGEuJHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsIG1ldGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vY2hhbmdlIHN0YXR1c1xuICAgICAgICAgICAgICAgICAgICAvKiRzY29wZS5jaGFuZ2VTdGF0dXMgPSBmdW5jdGlvbiAoJGV2ZW50LCBjYXRlZ29yeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoZWNrYm94ID0gJGV2ZW50LnRhcmdldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSAoY2hlY2tib3guY2hlY2tlZCA/IHRydWUgOiBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5LnN0YXR1cyA9IGFjdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5LiRzYXZlKCkuJHRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2F0ZWdvcmllcy4kcmVmcmVzaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kbWV0YWRhdGEubWV0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXRBbGVydE1lc3NhZ2UoJHNjb3BlLCBtZXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9OyovXG5cbiAgICAgICAgfVxuICAgIH1cblxufVxubW9kdWxlLmV4cG9ydHMgPSBjYXRlZ29yeURpcmVjdGl2ZTtcbiIsInZhciBjb250ZW50U2VsZWN0b3IgPSBmdW5jdGlvbihNZXNzYWdlU2VydmljZSxVc2VyQ29udGVudFR5cGUpe1xuICAgIHJldHVybiB7XG4gICAgICAgIHRlbXBsYXRlVXJsOlwiLi4vLi4vanMvYWRtaW4vYW5ndWxhci90ZW1wbGF0ZXMvY29udGVudF9zZWxlY3Rvci5odG1sXCIsXG4gICAgICAgIHJlc3RyaWN0OlwiRUFcIixcbiAgICAgICAgc2NvcGU6e30sXG4gICAgICAgIHRyYW5zY2x1ZGU6dHJ1ZSxcbiAgICAgICAgY29udHJvbGxlcjpmdW5jdGlvbigkc2NvcGUsJHRpbWVvdXQpe1xuICAgICAgICAgICAgJHNjb3BlLmluZm9Db250ZW50U2VsZWN0b3IgPSBNZXNzYWdlU2VydmljZS5nZXQoJ2NvbnRlbnRzZWxlY3Rvcl9pbmZvJykubWVzc2FnZTtcbiAgICAgICAgICAgIHZhciBjb250ZW50dHlwZXMgPSBVc2VyQ29udGVudFR5cGUuJHNlYXJjaCgpLiR0aGVuKGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgICRzY29wZS51c2VyY29udGVudHR5cGVzID0gZGF0YTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkc2NvcGUudXBkYXRlQ29udGVudCA9IGZ1bmN0aW9uKCRldmVudCx1c2VyY29udGVudCl7XG5cbiAgICAgICAgICAgICAgICB2YXIgY2hlY2tib3ggPSAkZXZlbnQudGFyZ2V0O1xuICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSAoY2hlY2tib3guY2hlY2tlZCA/IHRydWU6IGZhbHNlKTtcblxuICAgICAgICAgICAgICAgIHVzZXJjb250ZW50LmFjdGl2ZSA9IGFjdGlvbjtcbiAgICAgICAgICAgICAgICB1c2VyY29udGVudC4kc2F2ZSgpLiR0aGVuKGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWV0YSA9IGRhdGEuJG1ldGFkYXRhLm1ldGE7XG4gICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsbWV0YSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnRTZWxlY3RvcjsiLCJ2YXIgaGFsbG8gPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgICAgICAgbGluazogZnVuY3Rpb24gKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgbmdNb2RlbEN0cmwpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCRlbGVtZW50KTtcbiAgICAgICAgICAgICQodGhpcykuaGFsbG8oe1xuICAgICAgICAgICAgICAgIHBsdWdpbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2hhbGxvZm9ybWF0Jzoge30sXG4gICAgICAgICAgICAgICAgICAgICdoYWxsb2Jsb2NrJzoge30sXG4gICAgICAgICAgICAgICAgICAgICdoYWxsb2p1c3RpZnknOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgJ2hhbGxvbGlzdHMnOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgJ2hhbGxvcmV1bmRvJzoge31cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udGVudHMgPSBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlO1xuICAgICAgICAgICAgICAgICQodGhpcykuaGFsbG8oJ3NldENvbnRlbnRzJywgY29udGVudHMpO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgfVxuICAgIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gaGFsbG8iLCJ2YXIgaG9tZUNhbGxzRGlyZWN0aXZlID0gZnVuY3Rpb24oTWVzc2FnZVNlcnZpY2UsSG9tZWNhbGxvdXQsJHRpbWVvdXQsSGVscGVyLEZpbGVQcm9jZXNzb3IsJGh0dHApe1xuICAgIHJldHVybiB7XG4gICAgICAgIHRlbXBsYXRlVXJsOlwiLi4vLi4vanMvYWRtaW4vYW5ndWxhci90ZW1wbGF0ZXMvaG9tZXBhZ2UvaG9tZWNhbGxzLmh0bWxcIixcbiAgICAgICAgcmVzdHJpY3Q6XCJFQVwiLFxuICAgICAgICBzY29wZTp7fSxcbiAgICAgICAgY29udHJvbGxlcjpmdW5jdGlvbigkc2NvcGUsJHJvb3RTY29wZSkge1xuXG4gICAgICAgICAgICAkc2NvcGUub25GaWxlU2VsZWN0ID0gZnVuY3Rpb24oJGZpbGVzKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmZpbGVzID0gJGZpbGVzO1xuXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgJHNjb3BlLmNsb3NlRm9ybSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgSGVscGVyLmVuYWJsZUZvcm0oJHNjb3BlLGZhbHNlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBIZWxwZXIuZW5hYmxlRm9ybSgkc2NvcGUsZmFsc2UpO1xuXG4gICAgICAgICAgICAkaHR0cC5nZXQoJy9hY3RpdmVjb250ZW50Jykuc3VjY2VzcyhmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICB2YXIgY29udGVudHMgPSBkYXRhLmNvbnRlbnRzO1xuICAgICAgICAgICAgICAgICRzY29wZS5jb250ZW50cyA9IGNvbnRlbnRzO1xuICAgICAgICAgICAgfSkuZXJyb3IoKTtcblxuXG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhbGxvdXRzID0gSG9tZWNhbGxvdXQuJHNlYXJjaCgpLiR0aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2FsbG91dHMgPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5jYWxsb3V0cy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldE5vSXRlbXNJbmZvTWVzc2FnZSgkc2NvcGUsIFwiIMOtdGVtc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIi4gUHVsc2EgZWwgYm90w7NuIE51ZXZvIHBhcmEgY3JlYXIgdW5vXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5jYWxsb3V0cy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5oaWRlSWZPbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdIb21lY2FsbG91dCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgSGVscGVyLmVuYWJsZUZvcm0oJHNjb3BlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYWxsb3V0ID0gSG9tZWNhbGxvdXQuJGJ1aWxkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2FsbG91dCA9IGNhbGxvdXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2FsbG91dC5idXR0b25saW5rID0gJ2hvbWUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVwZGF0ZUhvbWVjYWxsb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qY29uc29sZS5sb2coJHNjb3BlLmNhbGxvdXQpOyovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbG91dC4kc2F2ZSgpLiR0aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5oaWRlSWZPbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2FsbG91dHMuJHJlZnJlc2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhbGxvdXRGb3JtLiRyZXNldEZvcm0oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSGVscGVyLmVuYWJsZUZvcm0oJHNjb3BlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kbWV0YWRhdGEubWV0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWVzc2FnZVNlcnZpY2Uuc2V0QWxlcnRNZXNzYWdlKCRzY29wZSwgbWV0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHR5cGVvZiAkc2NvcGUuZmlsZXMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRzY29wZS5maWxlcy5sZW5ndGggPiAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlUHJvY2Vzc29yLnVwbG9hZCgkc2NvcGUsJy91cGxvYWRIb21lSW1hZ2UnLGRhdGEuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5maWxlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5lZGl0SG9tZWNhbGxvdXQgPSBmdW5jdGlvbiAoY2FsbG91dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgSGVscGVyLmVuYWJsZUZvcm0oJHNjb3BlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jYWxsb3V0ID0gY2FsbG91dDtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5maWxlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgRmlsZVByb2Nlc3Nvci5kb3dubG9hZCgkc2NvcGUsJy9ob21laW1hZ2UvJytjYWxsb3V0LmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS51cGRhdGVIb21lY2FsbG91dCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxvdXQuJHNhdmUoKS4kdGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2FsbG91dHMuJHJlZnJlc2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhbGxvdXRGb3JtLiRyZXNldEZvcm0oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSGVscGVyLmVuYWJsZUZvcm0oJHNjb3BlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kbWV0YWRhdGEubWV0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWVzc2FnZVNlcnZpY2Uuc2V0QWxlcnRNZXNzYWdlKCRzY29wZSwgbWV0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHR5cGVvZiAkc2NvcGUuZmlsZXMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRzY29wZS5maWxlcy5sZW5ndGggPiAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlUHJvY2Vzc29yLnVwbG9hZCgkc2NvcGUsJy91cGxvYWRIb21lSW1hZ2UnLGRhdGEuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5maWxlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvL2RlbGV0ZVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVtb3ZlSG9tZWNhbGxvdXQgPSBmdW5jdGlvbiAoY2FsbG91dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhbGxvdXQgPSBjYWxsb3V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbmZpcm1hdGlvbiA9IE1lc3NhZ2VTZXJ2aWNlLnNldENvbmZpcm1EZWxldGVNZXNzYWdlKFwiIMOtdGVtXCIsIFwiIFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25maXJtYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaGlkZUlmT25lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbG91dC4kZGVzdHJveSgpLiR0aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWVzc2FnZVNlcnZpY2Uuc2V0QWxlcnRNZXNzYWdlKCRzY29wZSwgbWV0YSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvL2NoYW5nZSBzdGF0dXNcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNoYW5nZVN0YXR1cyA9IGZ1bmN0aW9uICgkZXZlbnQsIGNhbGxvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGVja2JveCA9ICRldmVudC50YXJnZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0gKGNoZWNrYm94LmNoZWNrZWQgPyB0cnVlIDogZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsb3V0LnN0YXR1cyA9IGFjdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxvdXQuJHNhdmUoKS4kdGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jYWxsb3V0cy4kcmVmcmVzaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kbWV0YWRhdGEubWV0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXRBbGVydE1lc3NhZ2UoJHNjb3BlLCBtZXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG59O1xubW9kdWxlLmV4cG9ydHMgPSBob21lQ2FsbHNEaXJlY3RpdmU7XG4iLCJ2YXIgcHJvamVjdERpcmVjdGl2ZSA9IGZ1bmN0aW9uKE1lc3NhZ2VTZXJ2aWNlLFByb2plY3QsJHRpbWVvdXQsQ2F0ZWdvcnlIZWxwZXIsRmlsZVByb2Nlc3NvcixIZWxwZXIpe1xuICAgIHJldHVybiB7XG4gICAgICAgIHRlbXBsYXRlVXJsOlwiLi4vLi4vanMvYWRtaW4vYW5ndWxhci90ZW1wbGF0ZXMvcG9ydGZvbGlvL3Byb2plY3QuaHRtbFwiLFxuICAgICAgICByZXN0cmljdDpcIkVBXCIsXG4gICAgICAgIHNjb3BlOnt9LFxuICAgICAgICBjb250cm9sbGVyOmZ1bmN0aW9uKCRzY29wZSwkcm9vdFNjb3BlKSB7XG4gICAgICAgICAgICAkc2NvcGUub25GaWxlU2VsZWN0ID0gZnVuY3Rpb24oJGZpbGVzKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmZpbGVzID0gJGZpbGVzO1xuXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kb24oJ25ld1Byb2plY3QnLGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICBDYXRlZ29yeUhlbHBlci5jYXRlZ29yeUxpc3QoJy9wcm9qZWN0Y2F0bGlzdCcsJHNjb3BlKTtcbiAgICAgICAgICAgICAgICB2YXIgcHJvamVjdCA9IFByb2plY3QuJGJ1aWxkKCk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnByb2plY3QgPSBwcm9qZWN0O1xuXG4gICAgICAgICAgICAgICAgJHNjb3BlLnVwZGF0ZVByb2plY3QgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8kcm9vdFNjb3BlLiRicm9hZGNhc3QoJ2VkaXRQcm9qZWN0Jyxwcm9qZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdC4kc2F2ZSgpLiR0aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5wcm9qZWN0cy4kcmVmcmVzaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByb2plY3RGb3JtLiRyZXNldEZvcm0oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kbWV0YWRhdGEubWV0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsIG1ldGEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2YgJHNjb3BlLmZpbGVzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJHNjb3BlLmZpbGVzLmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlUHJvY2Vzc29yLnVwbG9hZCgkc2NvcGUsJy91cGxvYWRQcm9qZWN0RmVhdHVyZUltYWdlJyxkYXRhLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZpbGVzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdwcm9qZWN0Q3JlYXRlZCcscHJvamVjdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJHJvb3RTY29wZS4kb24oJ2VkaXRQcm9qZWN0JyxmdW5jdGlvbihldmVudCxkYXRhKXtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZmlsZXMgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgcHJvamVjdCA9IGRhdGE7XG4gICAgICAgICAgICAgICAgRmlsZVByb2Nlc3Nvci5kb3dubG9hZCgkc2NvcGUsJy9wcm9qZWN0aW1hZ2UvJytwcm9qZWN0LmlkKTtcbiAgICAgICAgICAgICAgICBDYXRlZ29yeUhlbHBlci5jYXRlZ29yeUxpc3QoJy9wcm9qZWN0Y2F0bGlzdCcsJHNjb3BlKTtcbiAgICAgICAgICAgICAgICBDYXRlZ29yeUhlbHBlci5wcm9qZWN0Q2F0ZWdvcnlMaXN0KCcvcHJvamVjdGNhdGxpc3RzZWxlY3RlZC8nK3Byb2plY3QuaWQsJHNjb3BlKTtcblxuXG4gICAgICAgICAgICAgICAgJHNjb3BlLnByb2plY3QgPSBwcm9qZWN0O1xuICAgICAgICAgICAgICAgICRzY29wZS51cGRhdGVQcm9qZWN0ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdC4kc2F2ZSgpLiR0aGVuKGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1ldGEgPSBkYXRhLiRtZXRhZGF0YS5tZXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgTWVzc2FnZVNlcnZpY2Uuc2V0QWxlcnRNZXNzYWdlKCRzY29wZSxtZXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdXBsb2FkIGZpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRzY29wZS5maWxlcy5sZW5ndGggPiAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlUHJvY2Vzc29yLnVwbG9hZCgkc2NvcGUsJy91cGxvYWRQcm9qZWN0RmVhdHVyZUltYWdlJyxkYXRhLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZmlsZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRvbignZWRpdFByb2plY3QnLGZ1bmN0aW9uKGV2dCxkYXRhKXtcbiAgICAgICAgICAgICAgICAkc2NvcGUucHJvamVjdCA9IGRhdGE7XG4gICAgICAgICAgICB9KTtcblxuXG5cblxuXG4gICAgICAgIH1cbiAgICB9XG5cbn1cbm1vZHVsZS5leHBvcnRzID0gcHJvamVjdERpcmVjdGl2ZTtcbiIsInZhciBwcm9qZWN0R2FsbGVyeURpcmVjdGl2ZSA9IGZ1bmN0aW9uKE1lc3NhZ2VTZXJ2aWNlLFByb2plY3QsJHRpbWVvdXQsRmlsZVByb2Nlc3NvcixHYWxsZXJ5KXtcbiAgICByZXR1cm4ge1xuICAgICAgICB0ZW1wbGF0ZVVybDpcIi4uLy4uL2pzL2FkbWluL2FuZ3VsYXIvdGVtcGxhdGVzL3BvcnRmb2xpby9wcm9qZWN0Z2FsbGVyeS5odG1sXCIsXG4gICAgICAgIHJlc3RyaWN0OlwiRUFcIixcbiAgICAgICAgc2NvcGU6e30sXG4gICAgICAgIGNvbnRyb2xsZXI6ZnVuY3Rpb24oJHNjb3BlLCRyb290U2NvcGUpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGxvYWRJbWFnZXMoZGF0YSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5wcm9qZWN0ID0gZGF0YTtcbiAgICAgICAgICAgICAgICB2YXIgaW1hZ2VzID0gR2FsbGVyeS4kc2VhcmNoKHtwcm9qZWN0X2lkOiAkc2NvcGUucHJvamVjdC5pZH0pLiR0aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pbWFnZXMgPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmltYWdlcy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgTWVzc2FnZVNlcnZpY2Uuc2V0Tm9JdGVtc0luZm9NZXNzYWdlKCRzY29wZSwgXCIgaW3DoWdlbmVzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIuIFB1bHNhIGVsIGJvdMOzbiAnQ2hvc2UgZmlsZXMnIHBhcmEgY2FyZ2FyIG51ZXZhcyBpbcOhZ2VuZXNcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICRzY29wZS5vbkZpbGVTZWxlY3QgPSBmdW5jdGlvbiAoJGZpbGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5maWxlcyA9ICRmaWxlcztcbiAgICAgICAgICAgICAgICAgICAgRmlsZVByb2Nlc3Nvci51cGxvYWQoJHNjb3BlLCAnL3VwbG9hZFByb2plY3RHYWxsZXJ5SW1hZ2UnLCBkYXRhLmlkKTtcblxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUucmVtb3ZlSW1hZ2UgPSBmdW5jdGlvbiAoaW1hZ2UpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgY29uZmlybWF0aW9uID0gTWVzc2FnZVNlcnZpY2Uuc2V0Q29uZmlybURlbGV0ZU1lc3NhZ2UoXCIgaW1hZ2VuXCIsIFwiIFwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpcm1hdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2UuJGRlc3Ryb3koKS4kdGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXRBbGVydE1lc3NhZ2UoJHNjb3BlLCBtZXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW1hZ2VzLiRyZWZyZXNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICRyb290U2NvcGUuJG9uKCdlZGl0UHJvamVjdCcsZnVuY3Rpb24oZXZ0LGRhdGEpe1xuICAgICAgICAgICAgICAgIGxvYWRJbWFnZXMoZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICRyb290U2NvcGUuJG9uKCdwcm9qZWN0Q3JlYXRlZCcsZnVuY3Rpb24oZXZ0LGRhdGEpe1xuICAgICAgICAgICAgICAgIGxvYWRJbWFnZXMoZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxufVxubW9kdWxlLmV4cG9ydHMgPSBwcm9qZWN0R2FsbGVyeURpcmVjdGl2ZTtcbiIsInZhciBwcm9qZWN0RGlyZWN0aXZlID0gZnVuY3Rpb24oTWVzc2FnZVNlcnZpY2UsUHJvamVjdCwkdGltZW91dCxIZWxwZXIpe1xuICAgIHJldHVybiB7XG4gICAgICAgIHRlbXBsYXRlVXJsOlwiLi4vLi4vanMvYWRtaW4vYW5ndWxhci90ZW1wbGF0ZXMvcG9ydGZvbGlvL3Byb2plY3RsaXN0Lmh0bWxcIixcbiAgICAgICAgcmVzdHJpY3Q6XCJFQVwiLFxuICAgICAgICBzY29wZTp7XG4gICAgICAgICAgICBvcGVuUHJvamVjdFdpemFyZDpcIiZvcGVucHJvamVjdHdpemFyZFwiXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRyb2xsZXI6ZnVuY3Rpb24oJHNjb3BlLCRyb290U2NvcGUpIHtcblxuICAgICAgICAgICAgdmFyIHByb2plY3RzID0gUHJvamVjdC4kc2VhcmNoKCkuJHRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUucHJvamVjdHMgPSBkYXRhO1xuXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5wcm9qZWN0cy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXROb0l0ZW1zSW5mb01lc3NhZ2UoJHNjb3BlLCBcIiBwcm95ZWN0b3NcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiLiBQdWxzYSBlbCBib3TDs24gTnVldm8gcGFyYSBjcmVhciB1bm9cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICRzY29wZS5uZXdQcm9qZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnbmV3UHJvamVjdCcpO1xuICAgICAgICAgICAgICAgICRzY29wZS5vcGVuUHJvamVjdFdpemFyZCgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJHNjb3BlLmVkaXRQcm9qZWN0ID0gZnVuY3Rpb24gKHByb2plY3QpIHtcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCdlZGl0UHJvamVjdCcscHJvamVjdCk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm9wZW5Qcm9qZWN0V2l6YXJkKCk7XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vZGVsZXRlXG4gICAgICAgICAgICAkc2NvcGUucmVtb3ZlUHJvamVjdCA9IGZ1bmN0aW9uIChwcm9qZWN0KSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnByb2plY3QgPSBwcm9qZWN0O1xuICAgICAgICAgICAgICAgIHZhciBjb25maXJtYXRpb24gPSBNZXNzYWdlU2VydmljZS5zZXRDb25maXJtRGVsZXRlTWVzc2FnZShcIiBwcm95ZWN0b1wiLCBcIiBcIik7XG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpcm1hdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0LiRkZXN0cm95KCkuJHRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsIG1ldGEpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvL2NoYW5nZSBzdGF0dXNcbiAgICAgICAgICAgICRzY29wZS5jaGFuZ2VTdGF0dXMgPSBmdW5jdGlvbiAoJGV2ZW50LCBwcm9qZWN0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoZWNrYm94ID0gJGV2ZW50LnRhcmdldDtcbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0gKGNoZWNrYm94LmNoZWNrZWQgPyB0cnVlIDogZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgcHJvamVjdC5zdGF0dXMgPSBhY3Rpb247XG4gICAgICAgICAgICAgICAgcHJvamVjdC4kc2F2ZSgpLiR0aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5wcm9qZWN0cy4kcmVmcmVzaCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWV0YSA9IGRhdGEuJG1ldGFkYXRhLm1ldGE7XG4gICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsIG1ldGEpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICB9XG5cblxuXG5cblxuXG4gICAgfVxuXG59XG5tb2R1bGUuZXhwb3J0cyA9IHByb2plY3REaXJlY3RpdmU7XG4iLCJ2YXIgcHJvamVjdFdpemFyZERpcmVjdGl2ZSA9IGZ1bmN0aW9uKE1lc3NhZ2VTZXJ2aWNlLFByb2plY3QsJHRpbWVvdXQsSGVscGVyKXtcbiAgICByZXR1cm4ge1xuICAgICAgICB0ZW1wbGF0ZVVybDpcIi4uLy4uL2pzL2FkbWluL2FuZ3VsYXIvdGVtcGxhdGVzL3BvcnRmb2xpby9wcm9qZWN0d2l6YXJkLmh0bWxcIixcbiAgICAgICAgcmVzdHJpY3Q6XCJFQVwiLFxuICAgICAgICBzY29wZTp7XG4gICAgICAgICAgICBvcGVuUHJvamVjdExpc3Q6JyZvcGVucHJvamVjdGxpc3QnXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRyb2xsZXI6ZnVuY3Rpb24oJHNjb3BlLCRyb290U2NvcGUpIHtcblxuXG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRvbigncHJvamVjdENyZWF0ZWQnLGZ1bmN0aW9uKGV2dCxkYXRhKXtcblxuICAgICAgICAgICAgICAgICRzY29wZS5wcm9qZWN0ID0gZGF0YTtcblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRvbignZWRpdFByb2plY3QnLGZ1bmN0aW9uKGV2dCxkYXRhKXtcbiAgICAgICAgICAgICAgICAkc2NvcGUucHJvamVjdCA9IGRhdGE7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkc2NvcGUuY2xvc2VXaXphcmQgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgJHNjb3BlLm9wZW5Qcm9qZWN0TGlzdCgpO1xuICAgICAgICAgICAgICAgbG9jYXRpb24uaHJlZiA9ICcvYWRtaW4vcHJvamVjdHMnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICB9XG5cbn1cbm1vZHVsZS5leHBvcnRzID0gcHJvamVjdFdpemFyZERpcmVjdGl2ZTtcbiIsInZhciBwcm9maWxlTWVudSA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdHJpY3Q6XCJFQVwiLFxuICAgICAgICB0ZW1wbGF0ZVVybDpcIi4uLy4uL2pzL2FkbWluL2FuZ3VsYXIvdGVtcGxhdGVzL3Byb2ZpbGVfbWVudS5odG1sXCJcbiAgICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHByb2ZpbGVNZW51OyIsInZhciBlZHVjYXRpb25EaXJlY3RpdmUgPSBmdW5jdGlvbihNZXNzYWdlU2VydmljZSxFZHVjYXRpb24sJHRpbWVvdXQsSGVscGVyKXtcbiAgICByZXR1cm4ge1xuICAgICAgICB0ZW1wbGF0ZVVybDpcIi4uLy4uL2pzL2FkbWluL2FuZ3VsYXIvdGVtcGxhdGVzL3Jlc3VtZS9lZHVjYXRpb24uaHRtbFwiLFxuICAgICAgICByZXN0cmljdDpcIkVBXCIsXG4gICAgICAgIHNjb3BlOnt9LFxuICAgICAgICBjb250cm9sbGVyOmZ1bmN0aW9uKCRzY29wZSwkcm9vdFNjb3BlKSB7XG4gICAgICAgICAgICAkc2NvcGUuY2xvc2VGb3JtID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBIZWxwZXIuZW5hYmxlRm9ybSgkc2NvcGUsZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgSGVscGVyLmVuYWJsZUZvcm0oJHNjb3BlLGZhbHNlKTtcbiAgICAgICAgICAgICRyb290U2NvcGUuJG9uKCdyZXN1bWVDaGFuZ2UnLGZ1bmN0aW9uKGV2ZW50LGFyZ3Mpe1xuICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBhcmdzLnJlc3VtZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdW1lSWQgPSBhcmdzLnJlc3VtZS5pZDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVkdWNhdGlvbnMgPSBFZHVjYXRpb24uJHNlYXJjaCh7cmVzdW1lX2lkOiByZXN1bWVJZH0pLiR0aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZWR1Y2F0aW9ucyA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmVkdWNhdGlvbnMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXROb0l0ZW1zSW5mb01lc3NhZ2UoJHNjb3BlLCBcIiBlc3R1ZGlvc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIi4gUHVsc2EgZWwgYm90w7NuIE51ZXZhIHBhcmEgY3JlYXIgdW5hXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3RWR1Y2F0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgSGVscGVyLmVuYWJsZUZvcm0oJHNjb3BlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlZHVjYXRpb24gPSBFZHVjYXRpb24uJGJ1aWxkKHtyZXN1bWVfaWQ6IHJlc3VtZUlkLCBpbml0ZGF0ZTogJycsIGVuZGRhdGU6ICcnfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZWR1Y2F0aW9uID0gZWR1Y2F0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1vbnRob3B0aW9ucyA9IEhlbHBlci5tb250aHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lZHVjYXRpb24uaW5pdG1vbnRoID0gSGVscGVyLm1vbnRocygpWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVkdWNhdGlvbi5lbmRtb250aCA9IEhlbHBlci5tb250aHMoKVswXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVwZGF0ZUVkdWNhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNDdXJyZW50ID0gJHNjb3BlLmVkdWNhdGlvbi5jdXJyZW50cGxhY2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVkdWNhdGlvbi5jdXJyZW50ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNDdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lZHVjYXRpb24uY3VycmVudCA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lZHVjYXRpb24uaW5pdGRhdGUgPSAkc2NvcGUuZWR1Y2F0aW9uLmluaXRtb250aCArIFwiLVwiICsgJHNjb3BlLmVkdWNhdGlvbi5pbml0eWVhcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZWR1Y2F0aW9uLmVuZGRhdGUgPSAkc2NvcGUuZWR1Y2F0aW9uLmVuZG1vbnRoICsgXCItXCIgKyAkc2NvcGUuZWR1Y2F0aW9uLmVuZHllYXI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZHVjYXRpb24uJHNhdmUoKS4kdGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZWR1Y2F0aW9ucy4kcmVmcmVzaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZWR1Y2F0aW9uRm9ybS4kcmVzZXRGb3JtKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhlbHBlci5lbmFibGVGb3JtKCRzY29wZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWV0YSA9IGRhdGEuJG1ldGFkYXRhLm1ldGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsIG1ldGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVkaXRFZHVjYXRpb24gPSBmdW5jdGlvbiAoZWR1Y2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBIZWxwZXIuZW5hYmxlRm9ybSgkc2NvcGUsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1vbnRob3B0aW9ucyA9IEhlbHBlci5tb250aHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbW9udGhJbmRleCA9IEhlbHBlci5tb250aHMoKS5pbmRleE9mKGVkdWNhdGlvbi5pbW9udGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVtb250aEluZGV4ID0gSGVscGVyLm1vbnRocygpLmluZGV4T2YoZWR1Y2F0aW9uLmVtb250aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZWR1Y2F0aW9uID0gZWR1Y2F0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVkdWNhdGlvbi5pbml0bW9udGggPSAkc2NvcGUubW9udGhvcHRpb25zW2ltb250aEluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lZHVjYXRpb24uZW5kbW9udGggPSAkc2NvcGUubW9udGhvcHRpb25zW2Vtb250aEluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lZHVjYXRpb24uaW5pdHllYXIgPSBlZHVjYXRpb24uaXllYXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZWR1Y2F0aW9uLmVuZHllYXIgPSBlZHVjYXRpb24uZXllYXI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS51cGRhdGVFZHVjYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzQ3VycmVudCA9ICRzY29wZS5lZHVjYXRpb24uY3VycmVudHBsYWNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lZHVjYXRpb24uY3VycmVudCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZWR1Y2F0aW9uLmN1cnJlbnQgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZWR1Y2F0aW9uLmluaXRkYXRlID0gJHNjb3BlLmVkdWNhdGlvbi5pbml0bW9udGggKyBcIi1cIiArICRzY29wZS5lZHVjYXRpb24uaW5pdHllYXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVkdWNhdGlvbi5lbmRkYXRlID0gJHNjb3BlLmVkdWNhdGlvbi5lbmRtb250aCArIFwiLVwiICsgJHNjb3BlLmVkdWNhdGlvbi5lbmR5ZWFyO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWR1Y2F0aW9uLiRzYXZlKCkuJHRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVkdWNhdGlvbnMuJHJlZnJlc2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVkdWNhdGlvbkZvcm0uJHJlc2V0Rm9ybSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIZWxwZXIuZW5hYmxlRm9ybSgkc2NvcGUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1ldGEgPSBkYXRhLiRtZXRhZGF0YS5tZXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXRBbGVydE1lc3NhZ2UoJHNjb3BlLCBtZXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvL2RlbGV0ZVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVtb3ZlRWR1Y2F0aW9uID0gZnVuY3Rpb24gKGVkdWNhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVkdWNhdGlvbiA9IGVkdWNhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb25maXJtYXRpb24gPSBNZXNzYWdlU2VydmljZS5zZXRDb25maXJtRGVsZXRlTWVzc2FnZShcIiBlc3R1ZGlvXCIsIFwiIFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25maXJtYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZHVjYXRpb24uJGRlc3Ryb3koKS4kdGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWV0YSA9IGRhdGEuJHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsIG1ldGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vY2hhbmdlIHN0YXR1c1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2hhbmdlU3RhdHVzID0gZnVuY3Rpb24gKCRldmVudCwgZWR1Y2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hlY2tib3ggPSAkZXZlbnQudGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGlvbiA9IChjaGVja2JveC5jaGVja2VkID8gdHJ1ZSA6IGZhbHNlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZWR1Y2F0aW9uLnN0YXR1cyA9IGFjdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVkdWNhdGlvbi4kc2F2ZSgpLiR0aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVkdWNhdGlvbnMuJHJlZnJlc2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWV0YSA9IGRhdGEuJG1ldGFkYXRhLm1ldGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTWVzc2FnZVNlcnZpY2Uuc2V0QWxlcnRNZXNzYWdlKCRzY29wZSwgbWV0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG5cblxuXG4gICAgICAgIH1cbiAgICB9XG5cbn1cbm1vZHVsZS5leHBvcnRzID0gZWR1Y2F0aW9uRGlyZWN0aXZlO1xuIiwidmFyIGV4cGVyaWVuY2VEaXJlY3RpdmUgPSBmdW5jdGlvbihNZXNzYWdlU2VydmljZSxFeHBlcmllbmNlLCR0aW1lb3V0LEhlbHBlcil7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6XCIuLi8uLi9qcy9hZG1pbi9hbmd1bGFyL3RlbXBsYXRlcy9yZXN1bWUvZXhwZXJpZW5jZS5odG1sXCIsXG4gICAgICAgIHJlc3RyaWN0OlwiRUFcIixcbiAgICAgICAgc2NvcGU6e30sXG5cbiAgICAgICAgY29udHJvbGxlcjpmdW5jdGlvbigkc2NvcGUsJHJvb3RTY29wZSl7XG4gICAgICAgICAgICAkc2NvcGUuY2xvc2VGb3JtID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBIZWxwZXIuZW5hYmxlRm9ybSgkc2NvcGUsZmFsc2UpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIEhlbHBlci5lbmFibGVGb3JtKCRzY29wZSxmYWxzZSk7XG5cblxuICAgICAgICAgICAgJHJvb3RTY29wZS4kb24oJ3Jlc3VtZUNoYW5nZScsZnVuY3Rpb24oZXZlbnQsYXJncyl7XG5cbiAgICAgICAgICAgICAgICAvKiRzY29wZS5zb3J0aW5nTG9nID0gW107XG4gICAgICAgICAgICAgICAgdmFyIHRtcExpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc29ydGFibGVPcmRlciA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IDY7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgIHRtcExpc3QucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnSXRlbSAnICsgaSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkc2NvcGUuc29ydGFibGVPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImFjdGl2YXRlXCIpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBiZWZvcmVTdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiYmVmb3JlU3RvcFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY2hhbmdlXCIpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJjcmVhdGVcIik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGRlYWN0aXZhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJkZWFjdGl2YXRlXCIpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvdXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJvdXRcIik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG92ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJvdmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICByZWNlaXZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmVjZWl2ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmVtb3ZlXCIpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzb3J0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic29ydFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJzdGFydFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbihlLCB1aSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2codGhpcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb2dFbnRyeSA9IHRtcExpc3QubWFwKGZ1bmN0aW9uKGkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkuam9pbignLCAnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zb3J0aW5nTG9nLnB1c2goJ1VwZGF0ZTogJyArIGxvZ0VudHJ5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCRzY29wZS5zb3J0aW5nTG9nKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24oZSwgdWkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRsaXN0PXVpLml0ZW0ucGFyZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygkbGlzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc29ydGFibGVPcmRlciA9ICRsaXN0LnNvcnRhYmxlKCd0b0FycmF5Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygkc2NvcGUuc29ydGFibGVPcmRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGNhbGxiYWNrIGhhcyB0aGUgY2hhbmdlZCBtb2RlbFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxvZ0VudHJ5ID0gdG1wTGlzdC5tYXAoZnVuY3Rpb24oaSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KS5qb2luKCcsICcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNvcnRpbmdMb2cucHVzaCgnU3RvcDogJyArIGxvZ0VudHJ5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCRzY29wZS5zb3J0aW5nTG9nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07Ki9cbiAgICAgICAgICAgICAgICAvKnZhciBleHAgPSBbXTtcbiAgICAgICAgICAgICAgICBleHAgID0gJHNjb3BlLmV4cGVyaWVuY2VzO1xuICAgICAgICAgICAgICAgICRzY29wZS5iYXIgPSBmdW5jdGlvbigkaXRlbSwgJHBhcnRGcm9tLCAkcGFydFRvLCAkaW5kZXhGcm9tLCAkaW5kZXhUbyl7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCRzY29wZS5leHBlcmllbmNlcyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCRpbmRleEZyb20pO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygkaW5kZXhUbyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCRwYXJ0RnJvbSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCRwYXJ0VG8pO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUuYmF6ID0gZnVuY3Rpb24oJGl0ZW0sICRwYXJ0LCAkaW5kZXgpe1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygkaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCRwYXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJGluZGV4KTtcblxuICAgICAgICAgICAgICAgIH07Ki9cblxuXG4gICAgICAgICAgICAgICAgaWYodHlwZW9mIGFyZ3MucmVzdW1lICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bWVJZCA9IGFyZ3MucmVzdW1lLmlkO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXhwZXJpZW5jZXMgPSBFeHBlcmllbmNlLiRzZWFyY2goe3Jlc3VtZV9pZDogcmVzdW1lSWR9KS4kdGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV4cGVyaWVuY2VzID0gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZXhwZXJpZW5jZXMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXROb0l0ZW1zSW5mb01lc3NhZ2UoJHNjb3BlLCBcIiBleHBlcmllbmNpYXNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIuIFB1bHNhIGVsIGJvdMOzbiBOdWV2YSBwYXJhIGNyZWFyIHVuYVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgLy9uZXdcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld0V4cGVyaWVuY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnYXFpbycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgSGVscGVyLmVuYWJsZUZvcm0oJHNjb3BlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleHBlcmllbmNlID0gRXhwZXJpZW5jZS4kYnVpbGQoe3Jlc3VtZV9pZDogcmVzdW1lSWQsIGluaXRkYXRlOiAnJywgZW5kZGF0ZTogJyd9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5leHBlcmllbmNlID0gZXhwZXJpZW5jZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tb250aG9wdGlvbnMgPSBIZWxwZXIubW9udGhzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXhwZXJpZW5jZS5pbml0bW9udGggPSBIZWxwZXIubW9udGhzKClbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXhwZXJpZW5jZS5lbmRtb250aCA9IEhlbHBlci5tb250aHMoKVswXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVwZGF0ZUV4cGVyaWVuY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzQ3VycmVudCA9ICRzY29wZS5leHBlcmllbmNlLmN1cnJlbnRwbGFjZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXhwZXJpZW5jZS5jdXJyZW50ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNDdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5leHBlcmllbmNlLmN1cnJlbnQgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXhwZXJpZW5jZS5pbml0ZGF0ZSA9ICRzY29wZS5leHBlcmllbmNlLmluaXRtb250aCArIFwiLVwiICsgJHNjb3BlLmV4cGVyaWVuY2UuaW5pdHllYXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV4cGVyaWVuY2UuZW5kZGF0ZSA9ICRzY29wZS5leHBlcmllbmNlLmVuZG1vbnRoICsgXCItXCIgKyAkc2NvcGUuZXhwZXJpZW5jZS5lbmR5ZWFyO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZXJpZW5jZS4kc2F2ZSgpLiR0aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5leHBlcmllbmNlcy4kcmVmcmVzaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXhwZXJpZW5jZUZvcm0uJHJlc2V0Rm9ybSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIZWxwZXIuZW5hYmxlRm9ybSgkc2NvcGUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1ldGEgPSBkYXRhLiRtZXRhZGF0YS5tZXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXRBbGVydE1lc3NhZ2UoJHNjb3BlLCBtZXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAvL2VkaXRcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVkaXRFeHBlcmllbmNlID0gZnVuY3Rpb24gKGV4cGVyaWVuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEhlbHBlci5lbmFibGVGb3JtKCRzY29wZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubW9udGhvcHRpb25zID0gSGVscGVyLm1vbnRocygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGltb250aEluZGV4ID0gSGVscGVyLm1vbnRocygpLmluZGV4T2YoZXhwZXJpZW5jZS5pbW9udGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVtb250aEluZGV4ID0gSGVscGVyLm1vbnRocygpLmluZGV4T2YoZXhwZXJpZW5jZS5lbW9udGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV4cGVyaWVuY2UgPSBleHBlcmllbmNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV4cGVyaWVuY2UuaW5pdG1vbnRoID0gJHNjb3BlLm1vbnRob3B0aW9uc1tpbW9udGhJbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXhwZXJpZW5jZS5lbmRtb250aCA9ICRzY29wZS5tb250aG9wdGlvbnNbZW1vbnRoSW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV4cGVyaWVuY2UuaW5pdHllYXIgPSBleHBlcmllbmNlLml5ZWFyO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV4cGVyaWVuY2UuZW5keWVhciA9IGV4cGVyaWVuY2UuZXllYXI7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVwZGF0ZUV4cGVyaWVuY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzQ3VycmVudCA9ICRzY29wZS5leHBlcmllbmNlLmN1cnJlbnRwbGFjZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXhwZXJpZW5jZS5jdXJyZW50ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNDdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5leHBlcmllbmNlLmN1cnJlbnQgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXhwZXJpZW5jZS5pbml0ZGF0ZSA9ICRzY29wZS5leHBlcmllbmNlLmluaXRtb250aCArIFwiLVwiICsgJHNjb3BlLmV4cGVyaWVuY2UuaW5pdHllYXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV4cGVyaWVuY2UuZW5kZGF0ZSA9ICRzY29wZS5leHBlcmllbmNlLmVuZG1vbnRoICsgXCItXCIgKyAkc2NvcGUuZXhwZXJpZW5jZS5lbmR5ZWFyO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZXJpZW5jZS4kc2F2ZSgpLiR0aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5leHBlcmllbmNlcy4kcmVmcmVzaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXhwZXJpZW5jZUZvcm0uJHJlc2V0Rm9ybSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIZWxwZXIuZW5hYmxlRm9ybSgkc2NvcGUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1ldGEgPSBkYXRhLiRtZXRhZGF0YS5tZXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXRBbGVydE1lc3NhZ2UoJHNjb3BlLCBtZXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvL2RlbGV0ZVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVtb3ZlRXhwZXJpZW5jZSA9IGZ1bmN0aW9uIChleHBlcmllbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXhwZXJpZW5jZSA9IGV4cGVyaWVuY2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29uZmlybWF0aW9uID0gTWVzc2FnZVNlcnZpY2Uuc2V0Q29uZmlybURlbGV0ZU1lc3NhZ2UoXCIgZXhwZXJpZW5jaWFcIiwgXCIgXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpcm1hdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVyaWVuY2UuJGRlc3Ryb3koKS4kdGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWV0YSA9IGRhdGEuJHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsIG1ldGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vY2hhbmdlIHN0YXR1c1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2hhbmdlU3RhdHVzID0gZnVuY3Rpb24gKCRldmVudCwgZXhwZXJpZW5jZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLypjb25zb2xlLmxvZyhleHBlcmllbmNlKTsqL1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoZWNrYm94ID0gJGV2ZW50LnRhcmdldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSAoY2hlY2tib3guY2hlY2tlZCA/IHRydWUgOiBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVyaWVuY2Uuc3RhdHVzID0gYWN0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZXJpZW5jZS4kc2F2ZSgpLiR0aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV4cGVyaWVuY2VzLiRyZWZyZXNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1ldGEgPSBkYXRhLiRtZXRhZGF0YS5tZXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsIG1ldGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG4gICAgfVxuXG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBlcmllbmNlRGlyZWN0aXZlO1xuIiwidmFyIGludGVyZXN0RGlyZWN0aXZlID0gZnVuY3Rpb24oTWVzc2FnZVNlcnZpY2UsSW50ZXJlc3QsJHRpbWVvdXQsSGVscGVyKXtcbiAgICByZXR1cm4ge1xuICAgICAgICB0ZW1wbGF0ZVVybDpcIi4uLy4uL2pzL2FkbWluL2FuZ3VsYXIvdGVtcGxhdGVzL3Jlc3VtZS9pbnRlcmVzdHMuaHRtbFwiLFxuICAgICAgICByZXN0cmljdDpcIkVBXCIsXG4gICAgICAgIHNjb3BlOnt9LFxuICAgICAgICBjb250cm9sbGVyOmZ1bmN0aW9uKCRzY29wZSwkcm9vdFNjb3BlKSB7XG4gICAgICAgICAgICAkc2NvcGUuY2xvc2VGb3JtID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBIZWxwZXIuZW5hYmxlRm9ybSgkc2NvcGUsZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgSGVscGVyLmVuYWJsZUZvcm0oJHNjb3BlLGZhbHNlKTtcbiAgICAgICAgICAgICRyb290U2NvcGUuJG9uKCdyZXN1bWVDaGFuZ2UnLGZ1bmN0aW9uKGV2ZW50LGFyZ3Mpe1xuICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBhcmdzLnJlc3VtZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdW1lSWQgPSBhcmdzLnJlc3VtZS5pZDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGludGVyZXN0cyA9IEludGVyZXN0LiRzZWFyY2goe3Jlc3VtZV9pZDogcmVzdW1lSWR9KS4kdGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmludGVyZXN0cyA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmludGVyZXN0cy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldE5vSXRlbXNJbmZvTWVzc2FnZSgkc2NvcGUsIFwiIGludGVyZXNlcyBwcm9mZXNpb25hbGVzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiLiBQdWxzYSBlbCBib3TDs24gTnVldm8gcGFyYSBjcmVhciB1bm9cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdJbnRlcmVzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEhlbHBlci5lbmFibGVGb3JtKCRzY29wZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW50ZXJlc3QgPSBJbnRlcmVzdC4kYnVpbGQoe3Jlc3VtZV9pZDogcmVzdW1lSWR9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbnRlcmVzdCA9IGludGVyZXN0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXBkYXRlSW50ZXJlc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJlc3QuJHNhdmUoKS4kdGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW50ZXJlc3RzLiRyZWZyZXNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbnRlcmVzdEZvcm0uJHJlc2V0Rm9ybSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIZWxwZXIuZW5hYmxlRm9ybSgkc2NvcGUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1ldGEgPSBkYXRhLiRtZXRhZGF0YS5tZXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXRBbGVydE1lc3NhZ2UoJHNjb3BlLCBtZXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5lZGl0SW50ZXJlc3QgPSBmdW5jdGlvbiAoaW50ZXJlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEhlbHBlci5lbmFibGVGb3JtKCRzY29wZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW50ZXJlc3QgPSBpbnRlcmVzdDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVwZGF0ZUludGVyZXN0ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJlc3QuJHNhdmUoKS4kdGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW50ZXJlc3RzLiRyZWZyZXNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbnRlcmVzdEZvcm0uJHJlc2V0Rm9ybSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIZWxwZXIuZW5hYmxlRm9ybSgkc2NvcGUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1ldGEgPSBkYXRhLiRtZXRhZGF0YS5tZXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXRBbGVydE1lc3NhZ2UoJHNjb3BlLCBtZXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvL2RlbGV0ZVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVtb3ZlSW50ZXJlc3QgPSBmdW5jdGlvbiAoaW50ZXJlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbnRlcmVzdCA9IGludGVyZXN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbmZpcm1hdGlvbiA9IE1lc3NhZ2VTZXJ2aWNlLnNldENvbmZpcm1EZWxldGVNZXNzYWdlKFwiIGlkaW9tYVwiLCBcIiBcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlybWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJlc3QuJGRlc3Ryb3koKS4kdGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWV0YSA9IGRhdGEuJHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsIG1ldGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vY2hhbmdlIHN0YXR1c1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2hhbmdlU3RhdHVzID0gZnVuY3Rpb24gKCRldmVudCwgaW50ZXJlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGVja2JveCA9ICRldmVudC50YXJnZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0gKGNoZWNrYm94LmNoZWNrZWQgPyB0cnVlIDogZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcmVzdC5zdGF0dXMgPSBhY3Rpb247XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcmVzdC4kc2F2ZSgpLiR0aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmludGVyZXN0cy4kcmVmcmVzaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kbWV0YWRhdGEubWV0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXRBbGVydE1lc3NhZ2UoJHNjb3BlLCBtZXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cblxuXG5cbiAgICAgICAgfVxuICAgIH1cblxufVxubW9kdWxlLmV4cG9ydHMgPSBpbnRlcmVzdERpcmVjdGl2ZTtcbiIsInZhciBsYW5ndWFnZURpcmVjdGl2ZSA9IGZ1bmN0aW9uKE1lc3NhZ2VTZXJ2aWNlLExhbmd1YWdlLCR0aW1lb3V0LEhlbHBlcil7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6XCIuLi8uLi9qcy9hZG1pbi9hbmd1bGFyL3RlbXBsYXRlcy9yZXN1bWUvbGFuZ3VhZ2VzLmh0bWxcIixcbiAgICAgICAgcmVzdHJpY3Q6XCJFQVwiLFxuICAgICAgICBzY29wZTp7fSxcbiAgICAgICAgY29udHJvbGxlcjpmdW5jdGlvbigkc2NvcGUsJHJvb3RTY29wZSkge1xuICAgICAgICAgICAgJHNjb3BlLmNsb3NlRm9ybSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgSGVscGVyLmVuYWJsZUZvcm0oJHNjb3BlLGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEhlbHBlci5lbmFibGVGb3JtKCRzY29wZSxmYWxzZSk7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRvbigncmVzdW1lQ2hhbmdlJyxmdW5jdGlvbihldmVudCxhcmdzKXtcbiAgICAgICAgICAgICAgICBpZih0eXBlb2YgYXJncy5yZXN1bWUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VtZUlkID0gYXJncy5yZXN1bWUuaWQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYW5ndWFnZXMgPSBMYW5ndWFnZS4kc2VhcmNoKHtyZXN1bWVfaWQ6IHJlc3VtZUlkfSkuJHRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5sYW5ndWFnZXMgPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5sYW5ndWFnZXMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXROb0l0ZW1zSW5mb01lc3NhZ2UoJHNjb3BlLCBcIiBpZGlvbWFzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiLiBQdWxzYSBlbCBib3TDs24gTnVldm8gcGFyYSBjcmVhciB1bm9cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdMYW5ndWFnZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEhlbHBlci5lbmFibGVGb3JtKCRzY29wZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZ3VhZ2UgPSBMYW5ndWFnZS4kYnVpbGQoe3Jlc3VtZV9pZDogcmVzdW1lSWR9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5sYW5ndWFnZSA9IGxhbmd1YWdlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXBkYXRlTGFuZ3VhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2UuJHNhdmUoKS4kdGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGFuZ3VhZ2VzLiRyZWZyZXNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5sYW5ndWFnZUZvcm0uJHJlc2V0Rm9ybSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIZWxwZXIuZW5hYmxlRm9ybSgkc2NvcGUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1ldGEgPSBkYXRhLiRtZXRhZGF0YS5tZXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXRBbGVydE1lc3NhZ2UoJHNjb3BlLCBtZXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5lZGl0TGFuZ3VhZ2UgPSBmdW5jdGlvbiAobGFuZ3VhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEhlbHBlci5lbmFibGVGb3JtKCRzY29wZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGFuZ3VhZ2UgPSBsYW5ndWFnZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVwZGF0ZUxhbmd1YWdlID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2UuJHNhdmUoKS4kdGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGFuZ3VhZ2VzLiRyZWZyZXNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5sYW5ndWFnZUZvcm0uJHJlc2V0Rm9ybSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIZWxwZXIuZW5hYmxlRm9ybSgkc2NvcGUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1ldGEgPSBkYXRhLiRtZXRhZGF0YS5tZXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXRBbGVydE1lc3NhZ2UoJHNjb3BlLCBtZXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvL2RlbGV0ZVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVtb3ZlTGFuZ3VhZ2UgPSBmdW5jdGlvbiAobGFuZ3VhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5sYW5ndWFnZSA9IGxhbmd1YWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbmZpcm1hdGlvbiA9IE1lc3NhZ2VTZXJ2aWNlLnNldENvbmZpcm1EZWxldGVNZXNzYWdlKFwiIGlkaW9tYVwiLCBcIiBcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlybWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2UuJGRlc3Ryb3koKS4kdGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWV0YSA9IGRhdGEuJHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsIG1ldGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vY2hhbmdlIHN0YXR1c1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2hhbmdlU3RhdHVzID0gZnVuY3Rpb24gKCRldmVudCwgbGFuZ3VhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGVja2JveCA9ICRldmVudC50YXJnZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0gKGNoZWNrYm94LmNoZWNrZWQgPyB0cnVlIDogZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZS5zdGF0dXMgPSBhY3Rpb247XG4gICAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZS4kc2F2ZSgpLiR0aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxhbmd1YWdlcy4kcmVmcmVzaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kbWV0YWRhdGEubWV0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXRBbGVydE1lc3NhZ2UoJHNjb3BlLCBtZXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cblxuXG5cbiAgICAgICAgfVxuICAgIH1cblxufVxubW9kdWxlLmV4cG9ydHMgPSBsYW5ndWFnZURpcmVjdGl2ZTtcbiIsInZhciByZXN1bWVEaXJlY3RpdmUgPSBmdW5jdGlvbihNZXNzYWdlU2VydmljZSxSZXN1bWUsJHRpbWVvdXQsUmVzdW1lSGVscGVyKXtcbiAgICByZXR1cm4ge1xuICAgICAgICB0ZW1wbGF0ZVVybDpcIi4uLy4uL2pzL2FkbWluL2FuZ3VsYXIvdGVtcGxhdGVzL3Jlc3VtZS9yZXN1bWUuaHRtbFwiLFxuICAgICAgICByZXN0cmljdDpcIkVBXCIsXG5cbiAgICAgICAgc2NvcGU6e1xuXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRyb2xsZXI6ZnVuY3Rpb24oJHNjb3BlLCRyb290U2NvcGUpe1xuXG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRvbignbm9SZXN1bWVGb3VuZCcsZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXROb0l0ZW1zSW5mb01lc3NhZ2UoJHNjb3BlLCBcIiByw6lzdW3DqXNcIixcbiAgICAgICAgICAgICAgICAgICAgXCIuIFB1bHNhIGVsIGJvdMOzbiBOdWV2byBwYXJhIGNyZWFyXCIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICRyb290U2NvcGUuJG9uKCdyZXN1bWVDaGFuZ2UnLGZ1bmN0aW9uKGV2ZW50LGFyZ3Mpe1xuXG4gICAgICAgICAgICAgICAgaWYodHlwZW9mIGFyZ3MucmVzdW1lICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgLy9iaW9ncmFwaGllcyBkcm9wZG93biBsaXN0XG4gICAgICAgICAgICAgICAgICAgIC8vUmVzdW1lSGVscGVyLmJpb0Ryb3BEb3duTGlzdCgnL2Jpb19kcm9wX2xpc3QnLCRzY29wZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coYXJncyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bWVzID0gUmVzdW1lLiRzZWFyY2goKS4kdGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlc3VtZXMgPSBkYXRhO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnJlc3VtZXMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXROb0l0ZW1zSW5mb01lc3NhZ2UoJHNjb3BlLCBcIiByw6lzdW3DqXNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIuIFB1bHNhIGVsIGJvdMOzbiBOdWV2byBwYXJhIGNyZWFyIHVub1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdW1lID0gUmVzdW1lLiRmaW5kKGFyZ3MucmVzdW1lLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlc3VtZSA9IHJlc3VtZTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVwZGF0ZVJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXN1bWUuJHNhdmUoKS4kdGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kbWV0YWRhdGEubWV0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXRBbGVydE1lc3NhZ2UoJHNjb3BlLCBtZXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd1Jlc3VtZUZvcm0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICRzY29wZS5uZXdSZXN1bWUgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICRzY29wZS5zaG93ZWRSZXN1bWVGb3JtID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KFwibmV3UmVzdW1lXCIpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJHNjb3BlLmRlbGV0ZVJlc3VtZSA9IGZ1bmN0aW9uKHJlc3VtZSl7XG4gICAgICAgICAgICAgICAgdmFyIGNvbmZpcm1hdGlvbiA9IE1lc3NhZ2VTZXJ2aWNlLnNldENvbmZpcm1EZWxldGVNZXNzYWdlKFwiIHLDqXN1bcOpXCIsXCIuIFRvZG9zIGxhcyBzZWNjaW9uZXMgZGVsIHLDqXN1bcOpIHNlcsOhbiBlbGltaW5hZGFzIHRhbWJpw6luLi4uXCIpO1xuICAgICAgICAgICAgICAgIGlmKGNvbmZpcm1hdGlvbikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bWUuJGRlc3Ryb3koKS4kdGhlbihmdW5jdGlvbiAoZGF0YSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWV0YSA9IGRhdGEuJHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXRBbGVydE1lc3NhZ2UoJHNjb3BlLCBtZXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5ocmVmID0gXCIvYWRtaW4vcmVzdW1lXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDIwMDApO1xuXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJHNjb3BlLnB1YmxpY2F0aW9uID0gZnVuY3Rpb24ocmVzdW1lLCB0b0JlUHVibGlzaGVkKXtcbiAgICAgICAgICAgICAgICBpZih0b0JlUHVibGlzaGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VtZS5hY3RpdmUgPSAxO1xuICAgICAgICAgICAgICAgICAgICAvL3B1Ymxpc2ggcmVzdW1lXG4gICAgICAgICAgICAgICAgICAgIFJlc3VtZUhlbHBlci5wdWJsaXNoUmVzdW1lKCRzY29wZSwkcm9vdFNjb3BlLFwiL3B1Ymxpc2hfcmVzdW1lL1wiK3Jlc3VtZS5pZClcbiAgICAgICAgICAgICAgICB9ICBlbHNle1xuICAgICAgICAgICAgICAgICAgICByZXN1bWUuYWN0aXZlID0gMDtcbiAgICAgICAgICAgICAgICAgICAgcmVzdW1lLiRzYXZlKCkuJHRoZW4oZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWV0YSA9IGRhdGEuJG1ldGFkYXRhLm1ldGE7XG4gICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXRBbGVydE1lc3NhZ2UoJHNjb3BlLG1ldGEpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJHNjb3BlLnNldERlZmF1bHQgPSBmdW5jdGlvbihyZXN1bWUsIGlzRGVmYXVsdCl7XG4gICAgICAgICAgICAgICAgaWYoaXNEZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VtZS5kZWZhdWx0ID0gMTtcbiAgICAgICAgICAgICAgICAgICAgLy9wdWJsaXNoIHJlc3VtZVxuICAgICAgICAgICAgICAgICAgICBSZXN1bWVIZWxwZXIucHVibGlzaFJlc3VtZSgkc2NvcGUsJHJvb3RTY29wZSxcIi9kZWZhdWx0X3Jlc3VtZS9cIityZXN1bWUuaWQpXG4gICAgICAgICAgICAgICAgfSAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgcmVzdW1lLmRlZmF1bHQgPSAwO1xuICAgICAgICAgICAgICAgICAgICByZXN1bWUuJHNhdmUoKS4kdGhlbihmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kbWV0YWRhdGEubWV0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsbWV0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkc2NvcGUuY2xvbmVSZXN1bWUgPSBmdW5jdGlvbihyZXN1bWUpe1xuICAgICAgICAgICAgICAgIFJlc3VtZUhlbHBlci5jbG9uZVJlc3VtZSgkc2NvcGUsJHJvb3RTY29wZSxcIi9jbG9uZV9yZXN1bWUvXCIrcmVzdW1lLmlkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJHNjb3BlLnNob3dSZXN1bWVFZGl0Rm9ybSA9IGZ1bmN0aW9uKHJlc3VtZSl7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dlZEVkaXRSZXN1bWVGb3JtID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KFwiZWRpdFJlc3VtZVwiLHJlc3VtZSk7XG4gICAgICAgICAgICB9XG5cblxuXG4gICAgICAgICAgICAkc2NvcGUuY2xvc2VBZnRlclVwZGF0ZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dlZEVkaXRSZXN1bWVGb3JtID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICRzY29wZS5jbG9zZUFmdGVyQ3JlYXRlID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd2VkUmVzdW1lRm9ybSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKiRzY29wZS4kd2F0Y2goJyR2aWV3Q29udGVudExvYWRlZCcsIGZ1bmN0aW9uKClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImxvYWRpbmdcIik7XG4gICAgICAgICAgICB9KTsqL1xuXG4gICAgICAgIH1cbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVzdW1lRGlyZWN0aXZlOyIsInZhciByZXN1bWVFZGl0RGlyZWN0aXZlID0gZnVuY3Rpb24oTWVzc2FnZVNlcnZpY2UsUmVzdW1lLFJlc3VtZUhlbHBlciwkdGltZW91dCl7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6XCIuLi8uLi9qcy9hZG1pbi9hbmd1bGFyL3RlbXBsYXRlcy9yZXN1bWUvcmVzdW1lZWRpdGZvcm0uaHRtbFwiLFxuICAgICAgICByZXN0cmljdDpcIkVBXCIsXG4gICAgICAgIHNjb3BlOntcblxuICAgICAgICAgICAgY2xvc2U6XCImY2xvc2VcIlxuICAgICAgICB9LFxuICAgICAgICBjb250cm9sbGVyOmZ1bmN0aW9uKCRzY29wZSwkcm9vdFNjb3BlKXtcblxuICAgICAgICAgICAgJHJvb3RTY29wZS4kb24oXCJlZGl0UmVzdW1lXCIsZnVuY3Rpb24oZXZlbnQscmVzdW1lKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9iaW9ncmFwaGllcyBkcm9wZG93biBsaXN0XG4gICAgICAgICAgICAgICAgUmVzdW1lSGVscGVyLmJpb0Ryb3BEb3duTGlzdCgnL2Jpb19kcm9wX2xpc3QnLCRzY29wZSk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlc3VtZSA9IHJlc3VtZTtcbiAgICAgICAgICAgICAgICB2YXIgYmlvSWQgPSByZXN1bWUuYmlvZ3JhcGh5SWQ7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlc3VtZS5iaW9ncmFwaHlfaWQgPSBiaW9JZC50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJHNjb3BlKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuY2xvc2VGb3JtID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vJHNjb3BlLnJlc3VtZS5iaW9ncmFwaHlJZCA9IDE7Ly8kc2NvcGUuYmlvc1skc2NvcGUucmVzdW1lLmJpb2dyYXBoeV9pZF07XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNhdmVSZXN1bWUgPSBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXN1bWUuJHNhdmUoKS4kdGhlbihmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kbWV0YWRhdGEubWV0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsbWV0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KFwidXBkYXRlUmVzdW1lTGlzdFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGVtaXQoXCJyZXN1bWVDaGFuZ2VcIixkYXRhLiRyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNsb3NlKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSw0MDAwKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8kc2NvcGUuJHBhcmVudC5zaG93ZWRFZGl0UmVzdW1lRm9ybSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuXG4gICAgICAgIH1cbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVzdW1lRWRpdERpcmVjdGl2ZTsiLCJ2YXIgcmVzdW1lQ3JlYXRpb25EaXJlY3RpdmUgPSBmdW5jdGlvbihNZXNzYWdlU2VydmljZSxSZXN1bWUsUmVzdW1lSGVscGVyLCR0aW1lb3V0KXtcbiAgICByZXR1cm4ge1xuICAgICAgICB0ZW1wbGF0ZVVybDpcIi4uLy4uL2pzL2FkbWluL2FuZ3VsYXIvdGVtcGxhdGVzL3Jlc3VtZS9yZXN1bWVmb3JtLmh0bWxcIixcbiAgICAgICAgcmVzdHJpY3Q6XCJFQVwiLFxuICAgICAgICBzY29wZTp7XG4gICAgICAgICAgICBjbG9zZTpcIiZjbG9zZVwiXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRyb2xsZXI6ZnVuY3Rpb24oJHNjb3BlLCRyb290U2NvcGUpe1xuICAgICAgICAgICAgJHNjb3BlLmNsb3NlRm9ybSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICRyb290U2NvcGUuJG9uKFwibmV3UmVzdW1lXCIsZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAvL2Jpb2dyYXBoaWVzIGRyb3Bkb3duIGxpc3RcbiAgICAgICAgICAgICAgICBSZXN1bWVIZWxwZXIuYmlvRHJvcERvd25MaXN0KCcvYmlvX2Ryb3BfbGlzdCcsJHNjb3BlKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdW1lID0gUmVzdW1lLiRidWlsZCgpO1xuICAgICAgICAgICAgICAgICRzY29wZS5yZXN1bWUgPSByZXN1bWU7XG5cblxuICAgICAgICAgICAgICAgICRzY29wZS5jcmVhdGVSZXN1bWUgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKHJlc3VtZSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VtZS4kc2F2ZSgpLiR0aGVuKGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1ldGEgPSBkYXRhLiRtZXRhZGF0YS5tZXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgTWVzc2FnZVNlcnZpY2Uuc2V0QWxlcnRNZXNzYWdlKCRzY29wZSxtZXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGVtaXQoXCJ1cGRhdGVSZXN1bWVMaXN0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kZW1pdChcInJlc3VtZUNoYW5nZVwiLGRhdGEuJHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2xvc2UoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8kc2NvcGUuJGRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sNDAwMCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTtcblxuXG4gICAgICAgIH1cbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVzdW1lQ3JlYXRpb25EaXJlY3RpdmU7IiwidmFyIHJlc3VtZUxpc3QgPSBmdW5jdGlvbihNZXNzYWdlU2VydmljZSxSZXN1bWUsJHRpbWVvdXQsSGVscGVyKXtcbiAgICByZXR1cm4ge1xuICAgICAgICB0ZW1wbGF0ZVVybDpcIi4uLy4uL2pzL2FkbWluL2FuZ3VsYXIvdGVtcGxhdGVzL3Jlc3VtZS9yZXN1bWVsaXN0Lmh0bWxcIixcbiAgICAgICAgcmVzdHJpY3Q6XCJFQVwiLFxuICAgICAgICBzY29wZTp7fSxcbiAgICAgICAgY29udHJvbGxlcjpmdW5jdGlvbigkc2NvcGUsJHJvb3RTY29wZSkge1xuICAgICAgICAgICAgJHNjb3BlLmNsb3NlRm9ybSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgSGVscGVyLmVuYWJsZUZvcm0oJHNjb3BlLGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEhlbHBlci5lbmFibGVGb3JtKCRzY29wZSxmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcmVzdW1lcyA9IFJlc3VtZS4kc2VhcmNoKCkuJHRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXN1bWVzID0gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUucmVzdW1lcy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldE5vSXRlbXNJbmZvTWVzc2FnZSgkc2NvcGUsIFwiIHLDqXN1bcOpc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIi4gUHVsc2EgZWwgYm90w7NuIE51ZXZvIHBhcmEgY3JlYXIgdW5vXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UmVzdW1lID0gZnVuY3Rpb24gKCkge1xuXG5cblxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5lZGl0UmVzdW1lID0gZnVuY3Rpb24gKGVkdWNhdGlvbikge1xuXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLy9kZWxldGVcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlbW92ZVJlc3VtZSA9IGZ1bmN0aW9uIChlZHVjYXRpb24pIHtcblxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vY2hhbmdlIHN0YXR1c1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2V0RGVmYXVsdCA9IGZ1bmN0aW9uICgkZXZlbnQsIHJlc3VtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoZWNrYm94ID0gJGV2ZW50LnRhcmdldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSAoY2hlY2tib3guY2hlY2tlZCA/IHRydWUgOiBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VtZS5kZWZhdWx0ID0gYWN0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdW1lLiRzYXZlKCkuJHRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVzdW1lcy4kcmVmcmVzaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kbWV0YWRhdGEubWV0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXRBbGVydE1lc3NhZ2UoJHNjb3BlLCBtZXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93RGV0YWlsID0gZnVuY3Rpb24ocmVzdW1lKXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdW1lOntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6cmVzdW1lLmlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGVtaXQoXCJyZXN1bWVDaGFuZ2VcIixkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICB9XG5cbn1cbm1vZHVsZS5leHBvcnRzID0gcmVzdW1lTGlzdDtcbiIsInZhciBjb250ZW50U2VsZWN0b3IgPSBmdW5jdGlvbihNZXNzYWdlU2VydmljZSl7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6XCIuLi8uLi9qcy9hZG1pbi9hbmd1bGFyL3RlbXBsYXRlcy9yZXN1bWUvcmVzdW1lX3NlbGVjdG9yLmh0bWxcIixcbiAgICAgICAgcmVzdHJpY3Q6XCJFQVwiLFxuICAgICAgICBzY29wZTp7fSxcbiAgICAgICAgdHJhbnNjbHVkZTp0cnVlLFxuICAgICAgICBjb250cm9sbGVyOmZ1bmN0aW9uKCRzY29wZSwkdGltZW91dCl7XG4gICAgICAgICAgICAkc2NvcGUuaW5mb1Jlc3VtZVNlbGVjdG9yID0gTWVzc2FnZVNlcnZpY2UuZ2V0KCdyZXN1bWVzZWxlY3Rvcl9pbmZvJykubWVzc2FnZTtcbiAgICAgICAgICAgIC8vVE9ETyBnZXQgc2VjdGlvbnMgYWNjb3JkaW5nIHRvIHVzZXIgcmVzdW1lXG5cbiAgICAgICAgICAgIHZhciBzZWN0aW9ucyA9IFtcbiAgICAgICAgICAgICAgICB7YWxpYXM6XCJFeHBlcmllbmNpYVwiLGxpbms6XCJleHBlcmllbmNlXCJ9LFxuICAgICAgICAgICAgICAgIHthbGlhczpcIkVzdHVkaW9zXCIsbGluazpcInN0dWR5XCJ9LFxuICAgICAgICAgICAgICAgIHthbGlhczpcIkhhYmlsaWRhZGVzIC8gQ29ub2NpbWllbnRvc1wiLGxpbms6XCJza2lsbHNcIn0sXG4gICAgICAgICAgICAgICAge2FsaWFzOlwiSWRpb21hc1wiLGxpbms6XCJsYW5ndWFnZXNcIn0sXG4gICAgICAgICAgICAgICAge2FsaWFzOlwiSW50ZXJlc2VzIFByb2Zlc2lvbmFsZXNcIixsaW5rOlwicGVyc29uYWxcIn1cbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICAkc2NvcGUuc2VjdGlvbnMgPSBzZWN0aW9ucztcblxuXG4gICAgICAgIH1cbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudFNlbGVjdG9yOyIsInZhciBzZWN0aW9uc0RpcmVjdGl2ZSA9IGZ1bmN0aW9uKFJlc3VtZSl7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6XCIuLi8uLi9qcy9hZG1pbi9hbmd1bGFyL3RlbXBsYXRlcy9yZXN1bWUvc2VjdGlvbnMuaHRtbFwiLFxuICAgICAgICByZXN0cmljdDpcIkVBXCIsXG4gICAgICAgIHNjb3BlOnt9LFxuXG4gICAgICAgIGNvbnRyb2xsZXI6ZnVuY3Rpb24oJHNjb3BlLCRyb290U2NvcGUpe1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kb24oJ3Jlc3VtZUNoYW5nZScsZnVuY3Rpb24oZXZlbnQsYXJncykge1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmdzLnJlc3VtZSAhPT0gXCJ1bmRlZmluZWRcIil7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bWUgPSBSZXN1bWUuJGZpbmQoYXJncy5yZXN1bWUuaWQpO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVzdW1lID0gcmVzdW1lLiRyZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdChcInJlc3VtZUNoYW5nZTJcIik7XG5cblxuXG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBsaW5rOmZ1bmN0aW9uKHNjb3BlLGVsZW1lbnQpe1xuICAgICAgICAgICAgLy8kKGVsZW1lbnQpLmVmZmVjdChcImhpZ2hsaWdodFwiLCB7fSwgMzAwMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbm1vZHVsZS5leHBvcnRzID0gc2VjdGlvbnNEaXJlY3RpdmU7XG4iLCJ2YXIgc2tpbGxEaXJlY3RpdmUgPSBmdW5jdGlvbihNZXNzYWdlU2VydmljZSxTa2lsbCwkdGltZW91dCxIZWxwZXIpe1xuICAgIHJldHVybiB7XG4gICAgICAgIHRlbXBsYXRlVXJsOlwiLi4vLi4vanMvYWRtaW4vYW5ndWxhci90ZW1wbGF0ZXMvcmVzdW1lL3NraWxscy5odG1sXCIsXG4gICAgICAgIHJlc3RyaWN0OlwiRUFcIixcbiAgICAgICAgc2NvcGU6e30sXG4gICAgICAgIGNvbnRyb2xsZXI6ZnVuY3Rpb24oJHNjb3BlLCRyb290U2NvcGUpIHtcbiAgICAgICAgICAgICRzY29wZS5jbG9zZUZvcm0gPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIEhlbHBlci5lbmFibGVGb3JtKCRzY29wZSxmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBIZWxwZXIuZW5hYmxlRm9ybSgkc2NvcGUsZmFsc2UpO1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kb24oJ3Jlc3VtZUNoYW5nZScsZnVuY3Rpb24oZXZlbnQsYXJncyl7XG4gICAgICAgICAgICAgICAgaWYodHlwZW9mIGFyZ3MucmVzdW1lICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bWVJZCA9IGFyZ3MucmVzdW1lLmlkO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2tpbGxzID0gU2tpbGwuJHNlYXJjaCh7cmVzdW1lX2lkOiByZXN1bWVJZH0pLiR0aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2tpbGxzID0gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuc2tpbGxzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTWVzc2FnZVNlcnZpY2Uuc2V0Tm9JdGVtc0luZm9NZXNzYWdlKCRzY29wZSwgXCIgaGFiaWxpZGFkZXNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIuIFB1bHNhIGVsIGJvdMOzbiBOdWV2YSBwYXJhIGNyZWFyIHVuYVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1NraWxsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgSGVscGVyLmVuYWJsZUZvcm0oJHNjb3BlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBza2lsbCA9IFNraWxsLiRidWlsZCh7cmVzdW1lX2lkOiByZXN1bWVJZH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNraWxsID0gc2tpbGw7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS51cGRhdGVTa2lsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lsbC4kc2F2ZSgpLiR0aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5za2lsbHMuJHJlZnJlc2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNraWxsRm9ybS4kcmVzZXRGb3JtKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhlbHBlci5lbmFibGVGb3JtKCRzY29wZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWV0YSA9IGRhdGEuJG1ldGFkYXRhLm1ldGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsIG1ldGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVkaXRTa2lsbCA9IGZ1bmN0aW9uIChza2lsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgSGVscGVyLmVuYWJsZUZvcm0oJHNjb3BlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5za2lsbCA9IHNraWxsO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXBkYXRlU2tpbGwgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lsbC4kc2F2ZSgpLiR0aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5za2lsbHMuJHJlZnJlc2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNraWxsRm9ybS4kcmVzZXRGb3JtKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhlbHBlci5lbmFibGVGb3JtKCRzY29wZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWV0YSA9IGRhdGEuJG1ldGFkYXRhLm1ldGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsIG1ldGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vZGVsZXRlXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5yZW1vdmVTa2lsbCA9IGZ1bmN0aW9uIChza2lsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNraWxsID0gc2tpbGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29uZmlybWF0aW9uID0gTWVzc2FnZVNlcnZpY2Uuc2V0Q29uZmlybURlbGV0ZU1lc3NhZ2UoXCIgaGFiaWxpZGFkXCIsIFwiIFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25maXJtYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lsbC4kZGVzdHJveSgpLiR0aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWVzc2FnZVNlcnZpY2Uuc2V0QWxlcnRNZXNzYWdlKCRzY29wZSwgbWV0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLy9jaGFuZ2Ugc3RhdHVzXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jaGFuZ2VTdGF0dXMgPSBmdW5jdGlvbiAoJGV2ZW50LCBza2lsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoZWNrYm94ID0gJGV2ZW50LnRhcmdldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSAoY2hlY2tib3guY2hlY2tlZCA/IHRydWUgOiBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNraWxsLnN0YXR1cyA9IGFjdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNraWxsLiRzYXZlKCkuJHRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2tpbGxzLiRyZWZyZXNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1ldGEgPSBkYXRhLiRtZXRhZGF0YS5tZXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsIG1ldGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuXG5cblxuICAgICAgICB9XG4gICAgfVxuXG59XG5tb2R1bGUuZXhwb3J0cyA9IHNraWxsRGlyZWN0aXZlO1xuIiwidmFyIHNhbGVhYmxlQmFzaWMgPSBmdW5jdGlvbihTYWxlYWJsZVNlcnZpY2Upe1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OlwiRUFcIixcbiAgICAgICAgdGVtcGxhdGVVcmw6XCIuLi8uLi9qcy9hZG1pbi9hbmd1bGFyL3RlbXBsYXRlcy9zYWxlYWJsZV9iYXNpYy5odG1sXCIsXG4gICAgICAgIHJlcGxhY2U6dHJ1ZSxcbiAgICAgICAgY29udHJvbGxlcjpcInNhbGVhYmxlQmFzaWNDdHJsXCIsXG4gICAgICAgIHNjb3BlOnt9XG5cbiAgICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNhbGVhYmxlQmFzaWM7IiwidmFyIHNhbGVhYmxlRGV0YWlscyA9IGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlLCRjb21waWxlLCRyb290U2NvcGUpe1xuICAgIHJldHVybiB7XG4gICAgICAgIHRyYW5zY2x1ZGU6ICdlbGVtZW50JyAgICAsXG4gICAgICAgIHJlc3RyaWN0OlwiRUFcIixcbiAgICAgICAgdGVtcGxhdGVVcmw6XCIuLi8uLi9qcy9hZG1pbi9hbmd1bGFyL3RlbXBsYXRlcy9zYWxlYWJsZV9kZXRhaWxzLmh0bWxcIixcbiAgICAgICAgcmVwbGFjZTp0cnVlLFxuXG4gICAgICAgIGNvbnRyb2xsZXI6XCJTYWxlYWJsZURldGFpbEN0cmxcIixcbiAgICAgICAgbGluazpmdW5jdGlvbihzY29wZSwkZWxlbWVudCwkYXR0cnMsJGN0cmwsdHJhbnNjbHVkZSl7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRvbihcIm5ld0Jhc2ljRGV0YWlsXCIsZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAkKCcjdGFic2YgYVtocmVmPVwiI3BpbGx0YWIxXCJdJykudGFiKCdzaG93Jyk7XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgIH1cbiAgICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNhbGVhYmxlRGV0YWlsczsiLCJ2YXIgc2FsZWFibGVCYXNpYyA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdHJpY3Q6XCJFQVwiLFxuICAgICAgICB0ZW1wbGF0ZVVybDpcIi4uLy4uL2pzL2FkbWluL2FuZ3VsYXIvdGVtcGxhdGVzL3NhbGVhYmxlX2RldGFpbHNfbGlzdC5odG1sXCIsXG4gICAgICAgIHJlcGxhY2U6dHJ1ZSxcbiAgICAgICAgc2NvcGU6e3NhbGVhYmxlOlwiPVwifSxcbiAgICAgICAgY29udHJvbGxlcjpcInNhbGVhYmxlQWxsRGV0YWlsc0N0cmxcIlxuXG4gICAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzYWxlYWJsZUJhc2ljOyIsInZhciBzYWxlYWJsZVByaWNlcyA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdHJpY3Q6XCJFQVwiLFxuICAgICAgICB0ZW1wbGF0ZVVybDpcIi4uLy4uL2pzL2FkbWluL2FuZ3VsYXIvdGVtcGxhdGVzL3NhbGVhYmxlX3ByaWNlc19saXN0Lmh0bWxcIixcbiAgICAgICAgcmVwbGFjZTp0cnVlLFxuICAgICAgICBzY29wZTp7c2FsZWFibGU6XCI9XCJ9LFxuICAgICAgICBjb250cm9sbGVyOlwic2FsZWFibGVQcmljZUN0cmxcIlxuXG4gICAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzYWxlYWJsZVByaWNlcyIsIlxudmFyIGhvbWVDb250cm9sbGVyID0gZnVuY3Rpb24oJHNjb3BlLFVzZXJTZXJ2aWNlLFVzZXJDb250ZW50VHlwZSl7XG4gICAgLy9jb25zb2xlLmxvZygkc2NvcGUpO1xuICAgICRzY29wZS5zaG93QWxlcnQgPSB0cnVlO1xuICAgICRzY29wZS5ub1Byb2ZpbGVNc2dlID0gJ0VzdGUgZXMgdHUgcHJpbWVyYSBzZXNpw7NuIGVuIGVzdGUgcGFuZWwgZGUgY29udHJvbC4gJytcbiAgICAnUG9yIGZhdm9yLCBhIGNvbnRpbnVhY2nDs24gY29tcGxldGEgdHVzIGRhdG9zIHBlcnNvbmFsZXMuJytcbiAgICAgICAgJ1NpIG5vIGRlc2VhcyBhY3R1YWxpemFyIHR1cyBkYXRvcywgcHVlZGVzIGhhY2VybG8gZW4gb3RybyBtb21lbnRvIGRlc2RlIFtQZXJmaWxdIHknK1xuICAgICdjb250aW51YXIgY29uIGxhcyBvdHJhcyBvcGNpb25lcyBkZSBlc3RlIHBhbmVsIGRlIGNvbnRyb2wuJztcblxuXG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob21lQ29udHJvbGxlcjsiLCJ2YXIgcG9ydGZvbGlvQ29udHJvbGxlciA9IGZ1bmN0aW9uKCRzY29wZSwkcm9vdFNjb3BlKXtcbiAgICAkc2NvcGUuc2hvd25Qcm9qZWN0TGlzdCA9IHRydWU7XG4gICAgJHNjb3BlLnNob3dQcm9qZWN0V2l6YXJkID0gZnVuY3Rpb24oKXtcbiAgICAgICAgJHNjb3BlLnNob3duUHJvamVjdExpc3QgPSBmYWxzZTtcbiAgICAgICAgJHNjb3BlLnNob3duUHJvamVjdFdpemFyZCA9IHRydWU7XG5cbiAgICB9XG5cbiAgICAkc2NvcGUuaGlkZVByb2plY3RXaXphcmQgPSBmdW5jdGlvbigpe1xuICAgICAgICAkc2NvcGUuc2hvd25Qcm9qZWN0TGlzdCA9IHRydWU7XG4gICAgICAgICRzY29wZS5zaG93blByb2plY3RXaXphcmQgPSBmYWxzZTtcbiAgICB9XG5cblxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gcG9ydGZvbGlvQ29udHJvbGxlcjtcbiIsInZhciByZXN1bWVDb250cm9sbGVyID0gZnVuY3Rpb24oJHNjb3BlLCRyb290U2NvcGUsUmVzdW1lSGVscGVyLE1lc3NhZ2VTZXJ2aWNlKXtcblxuICAgIFJlc3VtZUhlbHBlci5nZXRSZXN1bWVQdWIoJHNjb3BlLCRyb290U2NvcGUsJy9wdWJsaXNoZWRyZXN1bWUnKTtcbiAgICBSZXN1bWVIZWxwZXIuZHJvcERvd25MaXN0KCcvcmVzdW1lX2Ryb3BfbGlzdCcsJHNjb3BlKTtcbiAgICAkc2NvcGUucmVzdW1lID0gODk7XG5cbiAgICAkcm9vdFNjb3BlLiRvbihcInVwZGF0ZVJlc3VtZUxpc3RcIixmdW5jdGlvbigpe1xuICAgICAgICBSZXN1bWVIZWxwZXIuZHJvcERvd25MaXN0KCcvcmVzdW1lX2Ryb3BfbGlzdCcsJHNjb3BlKTtcbiAgICB9KTtcblxuICAgICRzY29wZS5nZXRSZXN1bWUgPSBmdW5jdGlvbihpZCl7XG4gICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgIHJlc3VtZTp7XG4gICAgICAgICAgICAgIGlkOmlkXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvL2NvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KFwicmVzdW1lQ2hhbmdlXCIsZGF0YSk7XG4gICAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVzdW1lQ29udHJvbGxlcjtcbiIsInZhciBzYWxlYWJsZUFsbERldGFpbHMgPSBmdW5jdGlvbigkc2NvcGUsJHJvb3RTY29wZSxTYWxlYWJsZURldGFpbHNTZXJ2aWNlLE1lc3NhZ2VTZXJ2aWNlLEZpbGVQcm9jZXNzb3Ipe1xuXG4gICAgJHNjb3BlLm9uRmlsZVNlbGVjdCA9IGZ1bmN0aW9uKCRmaWxlcykge1xuICAgICAgICAkc2NvcGUuZmlsZXMgPSAkZmlsZXM7XG5cbiAgICB9O1xuICAgICRzY29wZS5oYXNJY29uID0gZmFsc2U7XG4gICAgdmFyIHNhbGVhYmxlX2lkID0gJHNjb3BlLnNhbGVhYmxlLmlkO1xuICAgIHZhciBkZXRhaWxzID0gU2FsZWFibGVEZXRhaWxzU2VydmljZS4kc2VhcmNoKHtzYWxlYWJsZV9pZDpzYWxlYWJsZV9pZH0pLiR0aGVuKGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICB2YXIgaXRlbXNfbnVtYmVyID0gZGF0YS5sZW5ndGg7XG5cbiAgICAgICAgaWYoaXRlbXNfbnVtYmVyPT0wKXtcbiAgICAgICAgICAgIC8vdmFyIGxpbmtUb05ldyA9IFwiLiBDcmVhIHlhIHVubyBudWV2byFcIjtcbiAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldE5vSXRlbXNJbmZvTWVzc2FnZSgkc2NvcGUsXCJkZXRhbGxlc1wiLFwiIC5DcmVhIHVubyBudWV2byFcIik7XG4gICAgICAgIH1cbiAgICB9KS4kcmVzb2x2ZSgpO1xuICAgICRzY29wZS5zYWxlYWJsZS5kZXRhaWxzID0gZGV0YWlscztcblxuICAgIHZhciBkZXRhaWwgPSBTYWxlYWJsZURldGFpbHNTZXJ2aWNlLiRidWlsZCgpO1xuICAgIGRldGFpbC5zYWxlYWJsZV9pZCA9IHNhbGVhYmxlX2lkO1xuICAgIGRldGFpbC50eXBlID0gMDtcbiAgICAkc2NvcGUuZGV0YWlsID0gZGV0YWlsO1xuXG5cbiAgICAkc2NvcGUudXBkYXRlRGV0YWlsID0gZnVuY3Rpb24oKXtcbiAgICAgICAgZGV0YWlsLiRzYXZlKCkuJHRoZW4oZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICB2YXIgbWV0YSA9IGRhdGEuJG1ldGFkYXRhLm1ldGE7XG4gICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXRBbGVydE1lc3NhZ2UoJHNjb3BlLG1ldGEpO1xuICAgICAgICAgICAgZGV0YWlscy4kcmVmcmVzaCgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAkc2NvcGUuZWRpdERldGFpbD1mdW5jdGlvbihkZXRhaWwpe1xuICAgICAgICAkc2NvcGUuZmlsZXMgPSBbXTtcbiAgICAgICAgLy9kb3dubG9hZCBkZXRhaWwgaWNvbiB0byBsb2FkXG4gICAgICAgIEZpbGVQcm9jZXNzb3IuZG93bmxvYWQoJHNjb3BlLCcvc2FsZWFibGVkZXRhaWwvJytkZXRhaWwuaWQrJy9pY29uJyk7XG4gICAgICAgIC8vJHNjb3BlLmRlc2NyaXB0aXZlSWNvbiA9IFwiXCI7XG4gICAgICAgICRzY29wZS5zaG93RGV0YWlsRm9ybSA9IHRydWU7XG4gICAgICAgICRzY29wZS5kZXRhaWwgPSBkZXRhaWw7XG4gICAgICAgICRzY29wZS51cGRhdGVEZXRhaWwgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgZGV0YWlsLiRzYXZlKCkuJHRoZW4oZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgdmFyIG1ldGEgPSBkYXRhLiRtZXRhZGF0YS5tZXRhO1xuICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsbWV0YSk7XG4gICAgICAgICAgICAgICAgLy91cGxvYWQgZmlsZVxuICAgICAgICAgICAgICAgIGlmKCRzY29wZS5maWxlcy5sZW5ndGggPiAwKXtcbiAgICAgICAgICAgICAgICAgICAgRmlsZVByb2Nlc3Nvci51cGxvYWQoJHNjb3BlLCcvdXBsb2FkU2FsZWFibGVEZXRhaWxJY29uJyxkYXRhLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZpbGVzID0gW107XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgICRzY29wZS5uZXdEZXRhaWwgPSBmdW5jdGlvbigpe1xuICAgICAgICAkc2NvcGUuaGFzSWNvbiA9IGZhbHNlO1xuICAgICAgICAkc2NvcGUuc2hvd0RldGFpbEZvcm0gPSB0cnVlO1xuICAgICAgICAkc2NvcGUuZmlsZXMgPSBbXTtcbiAgICAgICAgY29uc29sZS5sb2coJHNjb3BlLmZpbGVzLmxlbmd0aCk7XG4gICAgICAgIC8vJHNjb3BlLnNhbGVhYmxlRGV0YWlsRm9ybS4kc2V0UHJpc3RpbmUoKTtcbiAgICAgICAgdmFyIGRldGFpbCA9IFNhbGVhYmxlRGV0YWlsc1NlcnZpY2UuJGJ1aWxkKCk7XG4gICAgICAgIGRldGFpbC5zYWxlYWJsZV9pZCA9IHNhbGVhYmxlX2lkO1xuICAgICAgICBkZXRhaWwudHlwZSA9IDA7XG4gICAgICAgICRzY29wZS5kZXRhaWwgPSBkZXRhaWw7XG5cbiAgICAgICAgJHNjb3BlLnVwZGF0ZURldGFpbCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBkZXRhaWwuJHNhdmUoKS4kdGhlbihmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICB2YXIgbWV0YSA9IGRhdGEuJG1ldGFkYXRhLm1ldGE7XG4gICAgICAgICAgICAgICAgTWVzc2FnZVNlcnZpY2Uuc2V0QWxlcnRNZXNzYWdlKCRzY29wZSxtZXRhKTtcbiAgICAgICAgICAgICAgICBkZXRhaWxzLiRyZWZyZXNoKCk7XG4gICAgICAgICAgICAgICAgaWYoJHNjb3BlLmZpbGVzLmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgICAgICAgICBGaWxlUHJvY2Vzc29yLnVwbG9hZCgkc2NvcGUsJy91cGxvYWRTYWxlYWJsZURldGFpbEljb24nLGRhdGEuaWQpO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZmlsZXMgPSBbXTtcbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAkc2NvcGUucmVtb3ZlRGV0YWlsID0gZnVuY3Rpb24oZGV0YWlsKXtcbiAgICAgICAgdmFyIGNvbmZpcm1hdGlvbiA9IE1lc3NhZ2VTZXJ2aWNlLnNldENvbmZpcm1EZWxldGVNZXNzYWdlKFwiZGV0YWxsZVwiLFwiIFwiKTtcbiAgICAgICAgaWYoY29uZmlybWF0aW9uKXtcbiAgICAgICAgICAgIGRldGFpbC4kZGVzdHJveSgpLiR0aGVuKGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXRBbGVydE1lc3NhZ2UoJHNjb3BlLG1ldGEpO1xuICAgICAgICAgICAgICAgIC8vJHNjb3BlLnNhbGVhYmxlRGV0YWlsRm9ybS4kc2V0UHJpc3RpbmUoKTtcblxuICAgICAgICAgICAgICAgIHZhciBkZXRhaWwgPSBTYWxlYWJsZURldGFpbHNTZXJ2aWNlLiRidWlsZCgpO1xuICAgICAgICAgICAgICAgIGRldGFpbC5zYWxlYWJsZV9pZCA9IHNhbGVhYmxlX2lkO1xuICAgICAgICAgICAgICAgIGRldGFpbC50eXBlID0gMDtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGV0YWlsID0gZGV0YWlsO1xuICAgICAgICAgICAgICAgICRzY29wZS51cGRhdGVEZXRhaWwgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBkZXRhaWwuJHNhdmUoKS4kdGhlbihmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kbWV0YWRhdGEubWV0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsbWV0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWxzLiRyZWZyZXNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyRyb290U2NvcGUuJGVtaXQoJ3NhbGVhYmxlVXBkYXRlZCcpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxuXG5cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNhbGVhYmxlQWxsRGV0YWlscztcbiIsInZhciBzYWxlYWJsZUNvbnRyb2xsZXIgPSBmdW5jdGlvbigkc2NvcGUsJHJvb3RTY29wZSwkdGltZW91dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTYWxlYWJsZVNlcnZpY2UsTWVzc2FnZVNlcnZpY2Upe1xuICAgICRzY29wZS5tYXN0ZXIgPSB7fTtcblxuICAgIHZhciBzYWxlYWJsZXMgPSBTYWxlYWJsZVNlcnZpY2UuJHNlYXJjaCgpLiR0aGVuKGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAvL2NvbnNvbGUubG9nKGRhdGEubGVuZ3RoKTtcbiAgICAgICAgdmFyIGl0ZW1zX251bWJlciA9IGRhdGEubGVuZ3RoO1xuICAgICAgICBpZihpdGVtc19udW1iZXI9PTApe1xuICAgICAgICAgICAgdmFyIGxpbmtUb05ldyA9IFwiLiBDcmVhIHlhIHVubyBudWV2byFcIjtcbiAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldE5vSXRlbXNJbmZvTWVzc2FnZSgkc2NvcGUsXCJzZXJ2aWNpb3MgbyBwcm9kdWN0b3NcIixsaW5rVG9OZXcpO1xuXG4gICAgICAgIH0vKmVsc2V7XG4gICAgICAgICAgICAkc2NvcGUuc2FsZWFibGVzID0gZGF0YTtcblxuICAgICAgICB9Ki9cbiAgICB9KTtcblxuICAgICRzY29wZS5zYWxlYWJsZXMgPSBzYWxlYWJsZXM7XG5cbiAgICAkc2NvcGUucmVtb3ZlU2FsZWFibGUgPSBmdW5jdGlvbihzYWxlYWJsZSl7XG4gICAgICAgIHZhciBjb25maXJtYXRpb24gPSBNZXNzYWdlU2VydmljZS5zZXRDb25maXJtRGVsZXRlTWVzc2FnZShcIiBzZXJ2aWNpbyBvIHByb2R1Y3RvXCIsXCIgU2UgZGVzdHJ1aXLDoW4gdGFtYmnDqW4gdG9kb3Mgc3VzIGRldGFsbGVzLlwiKTtcbiAgICAgICAgaWYoY29uZmlybWF0aW9uKXtcbiAgICAgICAgICAgIHNhbGVhYmxlLiRkZXN0cm95KCkuJHRoZW4oZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgdmFyIG1ldGEgPSBkYXRhLiRyZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsbWV0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vRGV0YWlsc1xuICAgIC8vbmV3OiBjcmVhdGUgYSBuZXcgZGV0YWlscyBcIndpemFyZFwiIGluc3RhbmNlXG4gICAgJHNjb3BlLm5ld0RldGFpbHMgPSBmdW5jdGlvbigpe1xuICAgICAgICAkc2NvcGUuc2hvd0RldGFpbHMgPSB0cnVlO1xuICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ25ld0RldGFpbHMnKTtcbiAgICB9XG4gICAgLy9lZGl0OiB3aXphcmQsIGVkaXQgZmFzaGlvblxuICAgICRzY29wZS5lZGl0RGV0YWlscyA9IGZ1bmN0aW9uKHNhbGVhYmxlKXtcbiAgICAgICAgJHNjb3BlLnNob3dEZXRhaWxzID0gdHJ1ZTtcbiAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdlZGl0RGV0YWlscycsc2FsZWFibGUpO1xuICAgIH1cblxuICAgIC8vY2xvc2Ugd2l6YXJkXG4gICAgJHNjb3BlLmNsb3NlV2l6YXJkID0gZnVuY3Rpb24oKXtcbiAgICAgICAgJHNjb3BlLnNob3dEZXRhaWxzID0gZmFsc2U7XG4gICAgICAgIGxvY2F0aW9uLmhyZWYgPSAnL2FkbWluL3NlcnZpY2VzJztcbiAgICB9XG5cblxufVxubW9kdWxlLmV4cG9ydHMgPSBzYWxlYWJsZUNvbnRyb2xsZXI7IiwidmFyIHNhbGVhYmxlRGV0YWlsQ3RybCA9IGZ1bmN0aW9uKCRzY29wZSwkcm9vdFNjb3BlLFNhbGVhYmxlU2VydmljZSxNZXNzYWdlU2VydmljZSwkZWxlbWVudCwkY29tcGlsZSl7XG5cbiAgICAkcm9vdFNjb3BlLiRvbignbmV3RGV0YWlscycsZnVuY3Rpb24oKXtcblxuICAgICAgICAkc2NvcGUuc2FsZWFibGUgPSB7fTtcbiAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCduZXdCYXNpY0RldGFpbCcpO1xuICAgIH0pO1xuXG4gICAgJHJvb3RTY29wZS4kb24oJ3NhbGVhYmxlQ3JlYXRlZCcsZnVuY3Rpb24oZXZlbnQsZGF0YSl7XG4gICAgICAgICRzY29wZS5zYWxlYWJsZXMuJHJlZnJlc2goKTtcbiAgICAgICAgJHNjb3BlLnNhbGVhYmxlID0gZGF0YTtcbiAgICB9KTtcbiAgICAkcm9vdFNjb3BlLiRvbignZWRpdERldGFpbHMnLGZ1bmN0aW9uKGV2ZW50LHNhbGVhYmxlKXtcbiAgICAgICAgJHNjb3BlLnNhbGVhYmxlID0gc2FsZWFibGU7XG4gICAgICAgICRzY29wZS5zYWxlYWJsZXMuJHJlZnJlc2goKTtcbiAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdlZGl0QmFzaWNEZXRhaWwnLHNhbGVhYmxlKTtcbiAgICB9KVxuXG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzYWxlYWJsZURldGFpbEN0cmw7XG4iLCJ2YXIgc2FsZWFibGVQcmljZXMgPSBmdW5jdGlvbigkc2NvcGUsJHJvb3RTY29wZSxTYWxlYWJsZVByaWNlU2VydmljZSxNZXNzYWdlU2VydmljZSl7XG5cbiAgICAvKnZhciByZXNldCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICRzY29wZS5zYWxlYWJsZVByaWNlRm9ybS4kc2V0UHJpc3RpbmUoKTtcbiAgICAgICAgJHNjb3BlLnByaWNlID0gYW5ndWxhci5jb3B5KHt9KTtcbiAgICB9Ki9cblxuICAgIHZhciBzYWxlYWJsZV9pZCA9ICRzY29wZS5zYWxlYWJsZS5pZDtcbiAgICB2YXIgcHJpY2VzID0gU2FsZWFibGVQcmljZVNlcnZpY2UuJHNlYXJjaCh7c2FsZWFibGVfaWQ6c2FsZWFibGVfaWR9KS4kdGhlbihmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgdmFyIGl0ZW1zX251bWJlciA9IGRhdGEubGVuZ3RoO1xuICAgICAgICBpZihpdGVtc19udW1iZXI9PTApe1xuICAgICAgICAgICAgLy92YXIgbGlua1RvTmV3ID0gXCIuIENyZWEgeWEgdW5vIG51ZXZvIVwiO1xuICAgICAgICAgICAgTWVzc2FnZVNlcnZpY2Uuc2V0Tm9JdGVtc0luZm9NZXNzYWdlKCRzY29wZSxcInByZWNpb3NcIixcIiAuQ3JlYSB1bm8gbnVldm8hXCIpO1xuICAgICAgICB9XG4gICAgfSkuJHJlc29sdmUoKTtcblxuICAgICRzY29wZS5zYWxlYWJsZS5wcmljZXMgPSBwcmljZXM7XG5cbiAgICB2YXIgcHJpY2UgPSBTYWxlYWJsZVByaWNlU2VydmljZS4kYnVpbGQoKTtcbiAgICBwcmljZS5zYWxlYWJsZV9pZCA9IHNhbGVhYmxlX2lkO1xuICAgICRzY29wZS5wcmljZSA9IHByaWNlO1xuXG4gICAgJHNjb3BlLnVwZGF0ZVByaWNlID0gZnVuY3Rpb24oKXtcbiAgICAgICAgcHJpY2UuJHNhdmUoKS4kdGhlbihmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kbWV0YWRhdGEubWV0YTtcbiAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsbWV0YSk7XG4gICAgICAgICAgICBwcmljZXMuJHJlZnJlc2goKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgJHNjb3BlLmVkaXRQcmljZT1mdW5jdGlvbihwcmljZSl7XG4gICAgICAgICRzY29wZS5zaG93UHJpY2VGb3JtID0gdHJ1ZTtcbiAgICAgICAgJHNjb3BlLnByaWNlID0gcHJpY2U7XG4gICAgICAgICRzY29wZS51cGRhdGVQcmljZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBwcmljZS4kc2F2ZSgpLiR0aGVuKGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kbWV0YWRhdGEubWV0YTtcbiAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXRBbGVydE1lc3NhZ2UoJHNjb3BlLG1ldGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAkc2NvcGUubmV3UHJpY2UgPSBmdW5jdGlvbigpe1xuICAgICAgICAkc2NvcGUuc2hvd1ByaWNlRm9ybSA9IHRydWU7XG4gICAgICAgIC8vJHNjb3BlLnNhbGVhYmxlUHJpY2VGb3JtLiRzZXRQcmlzdGluZSgpO1xuICAgICAgICB2YXIgcHJpY2UgPSBTYWxlYWJsZVByaWNlU2VydmljZS4kYnVpbGQoKTtcbiAgICAgICAgcHJpY2Uuc2FsZWFibGVfaWQgPSBzYWxlYWJsZV9pZDtcbiAgICAgICAgJHNjb3BlLnByaWNlID0gcHJpY2U7XG5cbiAgICAgICAgJHNjb3BlLnVwZGF0ZVByaWNlID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHByaWNlLiRzYXZlKCkuJHRoZW4oZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgdmFyIG1ldGEgPSBkYXRhLiRtZXRhZGF0YS5tZXRhO1xuICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsbWV0YSk7XG4gICAgICAgICAgICAgICAgcHJpY2VzLiRyZWZyZXNoKCk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dQcmljZUZvcm0gPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgJHNjb3BlLnJlbW92ZVByaWNlID0gZnVuY3Rpb24ocHJpY2Upe1xuICAgICAgICB2YXIgY29uZmlybWF0aW9uID0gTWVzc2FnZVNlcnZpY2Uuc2V0Q29uZmlybURlbGV0ZU1lc3NhZ2UoXCIgcHJlY2lvXCIsXCIgXCIpO1xuICAgICAgICBpZihjb25maXJtYXRpb24pe1xuICAgICAgICAgICAgcHJpY2UuJGRlc3Ryb3koKS4kdGhlbihmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICB2YXIgbWV0YSA9IGRhdGEuJHJlc3BvbnNlLmRhdGE7XG5cbiAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXRBbGVydE1lc3NhZ2UoJHNjb3BlLG1ldGEpO1xuICAgICAgICAgICAgICAgIC8vcyRzY29wZS5zYWxlYWJsZVByaWNlRm9ybS4kc2V0UHJpc3RpbmUoKTtcblxuICAgICAgICAgICAgICAgIHZhciBwcmljZSA9IFNhbGVhYmxlUHJpY2VTZXJ2aWNlLiRidWlsZCgpO1xuICAgICAgICAgICAgICAgIHByaWNlLnNhbGVhYmxlX2lkID0gc2FsZWFibGVfaWQ7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnByaWNlID0gcHJpY2U7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnVwZGF0ZVByaWNlID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgcHJpY2UuJHNhdmUoKS4kdGhlbihmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kbWV0YWRhdGEubWV0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsbWV0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmljZXMuJHJlZnJlc2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93UHJpY2VGb3JtID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG5cblxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2FsZWFibGVQcmljZXM7XG4iLCJcbnZhciBiaW9TZXJ2aWNlID0gZnVuY3Rpb24ocmVzdG1vZCl7XG4gICAgcmV0dXJuIHJlc3Rtb2QubW9kZWwoJy9iaW8nKS5taXgoJ0RlZmF1bHRQYWNrZXInLHtcbiAgICAgJGNvbmZpZzp7anNvbk1ldGE6ICcuJ31cblxuICAgICB9KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gYmlvU2VydmljZTsiLCJ2YXIgY2F0ZWdvcnlTZXJ2aWNlID0gZnVuY3Rpb24ocmVzdG1vZCl7XG4gICAgcmV0dXJuIHJlc3Rtb2QubW9kZWwoJy9jYXQnKS5taXgoJ0RlZmF1bHRQYWNrZXInLHtcbiAgICAgICAgJGNvbmZpZzp7anNvbk1ldGE6ICcuJ31cbiAgICB9KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gY2F0ZWdvcnlTZXJ2aWNlOyIsInZhciBjYXRlZ29yeUhlbHBlciA9IGZ1bmN0aW9uKCRodHRwKXtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGNhdGVnb3J5TGlzdDpmdW5jdGlvbihwYXRoLHNjb3BlKXtcbiAgICAgICAgICAgICRodHRwLmdldChwYXRoKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgIHNjb3BlLmNhdG9wdGlvbnMgPSBkYXRhLmNhdGVnb3JpZXM7XG4gICAgICAgICAgICB9KS5lcnJvcigpO1xuICAgICAgICB9LFxuICAgICAgICBzYWxDYXRlZ29yeUxpc3Q6ZnVuY3Rpb24ocGF0aCxzY29wZSl7XG4gICAgICAgICAgICAkaHR0cC5nZXQocGF0aCkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICB2YXIgY2F0cyA9IGRhdGEuY2F0ZWdvcmllcztcbiAgICAgICAgICAgICAgICBzY29wZS5zYWxlYWJsZS5jYXRlZ29yaWVzID0gY2F0cztcbiAgICAgICAgICAgIH0pLmVycm9yKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHByb2plY3RDYXRlZ29yeUxpc3Q6ZnVuY3Rpb24ocGF0aCxzY29wZSl7XG4gICAgICAgICRodHRwLmdldChwYXRoKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgdmFyIGNhdHMgPSBkYXRhLmNhdGVnb3JpZXM7XG4gICAgICAgICAgICBzY29wZS5wcm9qZWN0LmNhdGVnb3JpZXMgPSBjYXRzO1xuICAgICAgICB9KS5lcnJvcigpO1xuICAgIH1cblxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYXRlZ29yeUhlbHBlcjsiLCJ2YXIgZWR1Y2F0aW9uU2VydmljZSA9IGZ1bmN0aW9uKHJlc3Rtb2Qpe1xuICAgIHJldHVybiByZXN0bW9kLm1vZGVsKCcvZWR1Y2F0aW9uJykubWl4KCdEZWZhdWx0UGFja2VyJyx7XG4gICAgICAgICRjb25maWc6e2pzb25NZXRhOiAnLid9XG4gICAgfSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGVkdWNhdGlvblNlcnZpY2U7IiwidmFyIGV4cGVyaWVuY2VTZXJ2aWNlID0gZnVuY3Rpb24ocmVzdG1vZCl7XG4gICAgcmV0dXJuIHJlc3Rtb2QubW9kZWwoJy9leHBlcmllbmNlJykubWl4KCdEZWZhdWx0UGFja2VyJyx7XG4gICAgICAgICRjb25maWc6e2pzb25NZXRhOiAnLid9XG4gICAgfSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cGVyaWVuY2VTZXJ2aWNlOyIsInZhciBmaWxlUHJvY2Vzc29yID0gZnVuY3Rpb24oJHVwbG9hZCwkaHR0cCxNZXNzYWdlU2VydmljZSwkdGltZW91dCl7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdXBsb2FkOmZ1bmN0aW9uKHNjb3BlLHBhdGgsZGF0YSl7XG5cbiAgICAgICAgICAgICAgICB2YXIgZmlsZXMgPSBzY29wZS5maWxlc1swXTtcbiAgICAgICAgICAgICAgICBzY29wZS5maWxlZXJyb3JzID0gW107XG4gICAgICAgICAgICAgICAgdmFyIG51bWJlck9mRmlsZXMgPSBzY29wZS5maWxlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgaWYobnVtYmVyT2ZGaWxlcyA+IDEgJiYgbnVtYmVyT2ZGaWxlcyA8IDgpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsZXMgPSBzY29wZS5maWxlcztcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZihudW1iZXJPZkZpbGVzID4gNyl7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibm8gY2FyZ3VlIGFzaWlpaWlcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGZpbGVzKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjb3BlLmZpbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZSA9IHNjb3BlLmZpbGVzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy92YXIgZmlsZSA9IHNjb3BlLmZpbGVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUudXBsb2FkID0gJHVwbG9hZC51cGxvYWQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogcGF0aCwgLy91cGxvYWQucGhwIHNjcmlwdCwgbm9kZS5qcyByb3V0ZSwgb3Igc2VydmxldCB1cmxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywgLy9vciAnUFVUJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlOiBmaWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLnByb2dyZXNzKGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmdldFBlcmNlbnRhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludCgxMDAuMCAqIGV2dC5sb2FkZWQgLyBldnQudG90YWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmhhc0ljb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmRlc2NyaXB0aXZlSW1hZ2UgPSBkYXRhLmltZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5nZXRQZXJjZW50YWdlPWZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5pbWFnZXMuJHJlZnJlc2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLmVycm9yKGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldFNlcnZlclZhbGlkYXRpb25NZXNzYWdlKHNjb3BlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5maWxlZXJyb3JzLnB1c2goZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuZmlsZWVycm9ycy5zcGxpY2UoMCxzY29wZS5maWxlZXJyb3JzLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LDEwMDAwKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgfSxcbiAgICAgICAgZG93bmxvYWQ6ZnVuY3Rpb24oc2NvcGUscGF0aCl7XG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KHBhdGgpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLmRlc2NyaXB0aXZlSW1hZ2UgPSBkYXRhLmltZztcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG5cbiAgICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZpbGVQcm9jZXNzb3I7IiwidmFyIG51bWJlckZvcm1hdCA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKF92YWx1ZSkge1xuICAgICAgICB2YXIgbnVtYmVyRm9ybWF0dGVkID0gcGFyc2VGbG9hdChfdmFsdWUpO1xuICAgICAgICByZXR1cm4gbnVtYmVyRm9ybWF0dGVkO1xuICAgIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gbnVtYmVyRm9ybWF0O1xuIiwidmFyIGdhbGxlcnlTZXJ2aWNlID0gZnVuY3Rpb24ocmVzdG1vZCl7XG4gICAgcmV0dXJuIHJlc3Rtb2QubW9kZWwoJy9nYWxpbWFnZScpLm1peCgnRGVmYXVsdFBhY2tlcicse1xuICAgICAgICAkY29uZmlnOntqc29uTWV0YTogJy4nfVxuICAgIH0pO1xufVxubW9kdWxlLmV4cG9ydHMgPSBnYWxsZXJ5U2VydmljZTsiLCJ2YXIgaGVscGVyU2VydmljZSA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbW9udGhzOmZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB2YXIgbW9udGhzID0gW1wiZW5lcm9cIixcImZlYnJlcm9cIixcIm1hcnpvXCIsXCJhYnJpbFwiLFxuICAgICAgICAgICAgICAgIFwibWF5b1wiLFwianVuaW9cIixcImp1bGlvXCIsXCJhZ29zdG9cIixcbiAgICAgICAgICAgICAgICBcInNlcHRpZW1icmVcIixcIm9jdHVicmVcIixcIm5vdmllbWJyZVwiLFwiZGljaWVtYnJlXCJdO1xuICAgICAgICAgICAgcmV0dXJuIG1vbnRocztcbiAgICAgICAgfSxcbiAgICAgICAgZW5hYmxlRm9ybTpmdW5jdGlvbihzY29wZSxzdGF0dXMpe1xuICAgICAgICAgICAgaWYoc3RhdHVzKXtcbiAgICAgICAgICAgICAgICBzY29wZS5ncmlkU2hvd24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzY29wZS5mb3JtU2hvd24gPSB0cnVlO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgc2NvcGUuZ3JpZFNob3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBzY29wZS5mb3JtU2hvd24gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZ2V0Q2hlY2tCdXR0b25TdGF0dXM6ZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgICAgICAgdmFyIGNoZWNrYm94ID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICAgICAgdmFyIGFjdGlvbiA9IChjaGVja2JveC5jaGVja2VkID8gdHJ1ZTogZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICAgICAgfVxuICAgIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gaGVscGVyU2VydmljZTsiLCJ2YXIgSG9tZUNhbGxPdXRTZXJ2aWNlID0gZnVuY3Rpb24ocmVzdG1vZCl7XG4gICAgcmV0dXJuIHJlc3Rtb2QubW9kZWwoJy9ob21lY2FsbG91dCcpLm1peCgnRGVmYXVsdFBhY2tlcicse1xuICAgICAgICAkY29uZmlnOntqc29uTWV0YTogJy4nfVxuICAgIH0pO1xufTtcbm1vZHVsZS5leHBvcnRzID0gSG9tZUNhbGxPdXRTZXJ2aWNlOyIsInZhciBpbnRlcmVzdFNlcnZpY2UgPSBmdW5jdGlvbihyZXN0bW9kKXtcbiAgICByZXR1cm4gcmVzdG1vZC5tb2RlbCgnL2ludGVyZXN0JykubWl4KCdEZWZhdWx0UGFja2VyJyx7XG4gICAgICAgICRjb25maWc6e2pzb25NZXRhOiAnLid9XG4gICAgfSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGludGVyZXN0U2VydmljZTsiLCJ2YXIgbGFuZ3VhZ2VTZXJ2aWNlID0gZnVuY3Rpb24ocmVzdG1vZCl7XG4gICAgcmV0dXJuIHJlc3Rtb2QubW9kZWwoJy9sYW5ndWFnZScpLm1peCgnRGVmYXVsdFBhY2tlcicse1xuICAgICAgICAkY29uZmlnOntqc29uTWV0YTogJy4nfVxuICAgIH0pO1xufVxubW9kdWxlLmV4cG9ydHMgPSBsYW5ndWFnZVNlcnZpY2U7IiwidmFyIG1lc3NhZ2VTZXJ2aWNlID0gZnVuY3Rpb24oTWVzc2FnZXMsJHRpbWVvdXQpe1xuICAgIHJldHVybiB7XG4gICAgICAgIGdldDpmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIE1lc3NhZ2VzLmZpbHRlcihmdW5jdGlvbiggb2JqICkge1xuICAgICAgICAgICAgLy8gY29lcmNlIGJvdGggb2JqLmlkIGFuZCBpZCB0byBudW1iZXJzXG4gICAgICAgICAgICAvLyBmb3IgdmFsICYgdHlwZSBjb21wYXJpc29uXG4gICAgICAgICAgICAgICAgLy9yZXR1cm4gK29iai5uYW1lID09PSArbmFtZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqLm5hbWUgPT09IG5hbWU7XG4gICAgICAgICAgICB9KVsgMCBdO1xuICAgICAgICB9LFxuICAgICAgICBzZXRBbGVydE1lc3NhZ2U6ZnVuY3Rpb24oc2NvcGUsZGF0YSl7XG4gICAgICAgICAgICBzY29wZS5TaG93UmVzdWx0QWxlcnQgPSB0cnVlO1xuICAgICAgICAgICAgc2NvcGUucmVzdWx0ID0gZGF0YTtcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgc2NvcGUuU2hvd1Jlc3VsdEFsZXJ0ID0gZmFsc2U7XG4gICAgICAgICAgICB9LDQwMDApO1xuICAgICAgICB9LFxuICAgICAgICBzZXRTZXJ2ZXJWYWxpZGF0aW9uTWVzc2FnZTpmdW5jdGlvbihzY29wZSl7XG4gICAgICAgICAgICBzY29wZS5TaG93U2VydmVyRXJyb3JzID0gdHJ1ZTtcbiAgICAgICAgICAgIHNjb3BlLnJlc3VsdCA9IFwiTG9zIGRhdG9zIG5vIHNlIHB1ZGllcm9uIGd1YXJkYXJcIitcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIGRlYmlkbyBhIGxvcyBzaWd1aWVudGVzIGVycm9yZXMuIFBvciBmYXZvciBjb3Jyw61nZWxvcy5cIjtcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgc2NvcGUuU2hvd1NlcnZlckVycm9ycyA9IGZhbHNlO1xuICAgICAgICAgICAgfSw1MDAwKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0Tm9JdGVtc0luZm9NZXNzYWdlOmZ1bmN0aW9uKHNjb3BlLGRhdGF0eXBlLGFkZGl0aW9uYWwpe1xuICAgICAgICAgICAgc2NvcGUuc2hvd05vSXRlbXNBbGVydCA9IHRydWU7XG4gICAgICAgICAgICBzY29wZS5yZXN1bHQgPSBcIk5vIHNlIGhhbiBlbmNvbnRyYWRvIFwiK2RhdGF0eXBlK2FkZGl0aW9uYWw7XG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHNjb3BlLnNob3dOb0l0ZW1zQWxlcnQgPSBmYWxzZTtcbiAgICAgICAgICAgIH0sODAwMCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldENvbmZpcm1EZWxldGVNZXNzYWdlOmZ1bmN0aW9uKGl0ZW0sIGFkZGl0aW9uYWwpe1xuICAgICAgICAgICAgcmV0dXJuIGNvbmZpcm0oXCJSZWFsbWVudGUgZGVzZWFzIGVsaW1pbmFyIGVzdGUvYVwiK2l0ZW0rXCI/LiBcIithZGRpdGlvbmFsK1wiXCIpO1xuICAgICAgICB9XG5cbiAgICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBtZXNzYWdlU2VydmljZTtcbiIsInZhciBuZXdQYXNzd29yZCA9IGZ1bmN0aW9uKCRodHRwKXtcbiAgICAvLyRodHRwLnBvc3QoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB1cGRhdGVQYXNzd29yZDpmdW5jdGlvbih1c2VySWQsZGF0YSl7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FkbWluL25ld3Bhc3N3b3JkLycrdXNlcklkLCBkYXRhKTtcbiAgICAgICAgfVxuICAgIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXdQYXNzd29yZDsiLCJcbnZhciBwcm9maWxlU2VydmljZSA9IGZ1bmN0aW9uKHJlc3Rtb2Qpe1xuICAgIHJldHVybiByZXN0bW9kLm1vZGVsKCcvcHJvZmlsZScpLm1peCgnRGVmYXVsdFBhY2tlcicse1xuICAgICAgICAkY29uZmlnOntqc29uTWV0YTogJy4nfVxuICAgIH0pO1xufVxubW9kdWxlLmV4cG9ydHMgPSBwcm9maWxlU2VydmljZTtcbiIsInZhciBwcm9qZWN0U2VydmljZSA9IGZ1bmN0aW9uKHJlc3Rtb2Qpe1xuICAgIHJldHVybiByZXN0bW9kLm1vZGVsKCcvcHJvamVjdCcpLm1peCgnRGVmYXVsdFBhY2tlcicse1xuICAgICAgICAkY29uZmlnOntqc29uTWV0YTogJy4nfVxuICAgIH0pO1xufVxubW9kdWxlLmV4cG9ydHMgPSBwcm9qZWN0U2VydmljZTsiLCJ2YXIgcmVzdW1lSGVscGVyID0gZnVuY3Rpb24oJGh0dHAsTWVzc2FnZVNlcnZpY2Upe1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZHJvcERvd25MaXN0OmZ1bmN0aW9uKHBhdGgsc2NvcGUpe1xuICAgICAgICAgICAgJGh0dHAuZ2V0KHBhdGgpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgc2NvcGUucmVzdW1lcyA9IGRhdGEucmVzdW1lcztcbiAgICAgICAgICAgICAgICBzY29wZS5yZXN1bWUgPSBzY29wZS5yZXN1bWVzWzg5XTtcbiAgICAgICAgICAgIH0pLmVycm9yKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGJpb0Ryb3BEb3duTGlzdDpmdW5jdGlvbihwYXRoLHNjb3BlKXtcbiAgICAgICAgICAgICRodHRwLmdldChwYXRoKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgIHNjb3BlLmJpb3MgPSBkYXRhLmJpb3M7XG4gICAgICAgICAgICB9KS5lcnJvcigpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRSZXN1bWVQdWI6ZnVuY3Rpb24oc2NvcGUscm9vdFNjb3BlLHBhdGgpe1xuXG4gICAgICAgICAgICAkaHR0cC5nZXQocGF0aCkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKXtcblxuICAgICAgICAgICAgICAgIHZhciByZXN1bWUgPSBkYXRhLnJlc3VtZTtcblxuICAgICAgICAgICAgICAgIGlmKHJlc3VtZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByb290U2NvcGUuJGVtaXQoXCJub1Jlc3VtZUZvdW5kXCIpO1xuICAgICAgICAgICAgICAgIH1lbHNle1xuXG4gICAgICAgICAgICAgICAgICAgIHJvb3RTY29wZS4kZW1pdChcInJlc3VtZUNoYW5nZVwiLCBkYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9LFxuICAgICAgICBwdWJsaXNoUmVzdW1lOmZ1bmN0aW9uKHNjb3BlLHJvb3RTY29wZSxwYXRoKXtcbiAgICAgICAgICAgICRodHRwLnBvc3QocGF0aCkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICB2YXIgbWV0YSA9IGRhdGEubWV0YTtcbiAgICAgICAgICAgICAgICBNZXNzYWdlU2VydmljZS5zZXRBbGVydE1lc3NhZ2Uoc2NvcGUsbWV0YSk7XG4gICAgICAgICAgICB9KS5lcnJvcigpO1xuXG4gICAgICAgIH0sXG4gICAgICAgIGNsb25lUmVzdW1lOmZ1bmN0aW9uKHNjb3BlLHJvb3RTY29wZSxwYXRoKXtcbiAgICAgICAgICAgICRodHRwLnBvc3QocGF0aCkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICByb290U2NvcGUuJGVtaXQoXCJyZXN1bWVDaGFuZ2VcIixkYXRhKTtcbiAgICAgICAgICAgICAgICByb290U2NvcGUuJGVtaXQoXCJ1cGRhdGVSZXN1bWVMaXN0XCIsZGF0YSk7XG4gICAgICAgICAgICAgICAgdmFyIG1ldGEgPSBkYXRhLm1ldGE7XG4gICAgICAgICAgICAgICAgTWVzc2FnZVNlcnZpY2Uuc2V0QWxlcnRNZXNzYWdlKHNjb3BlLG1ldGEpO1xuXG4gICAgICAgICAgICB9KS5lcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIC8qdW5wdWJsaXNoUmVzdW1lOmZ1bmN0aW9uKHNjb3BlLHJvb3RTY29wZSxwYXRoKXtcbiAgICAgICAgICAgICRodHRwLnBvc3QocGF0aCkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInVucHVcIik7XG4gICAgICAgICAgICB9KS5lcnJvcigpO1xuICAgICAgICB9Ki9cbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVzdW1lSGVscGVyOyIsInZhciByZXN1bWVTZXJ2aWNlID0gZnVuY3Rpb24ocmVzdG1vZCl7XG4gICAgcmV0dXJuIHJlc3Rtb2QubW9kZWwoJy9yZXN1bWUnKS5taXgoJ0RlZmF1bHRQYWNrZXInLHtcbiAgICAgICAgJGNvbmZpZzp7anNvbk1ldGE6ICcuJ31cbiAgICB9KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gcmVzdW1lU2VydmljZTsiLCJ2YXIgc2VsZWFibGVEZXRhaWxzID0gZnVuY3Rpb24ocmVzdG1vZCl7XG4gICAgcmV0dXJuIHJlc3Rtb2QubW9kZWwoJy9zYWxlYWJsZWRldGFpbCcpLm1peCgnRGVmYXVsdFBhY2tlcicse1xuICAgICAgICAkY29uZmlnOntqc29uTWV0YTogJy4nfVxuICAgIH0pO1xufVxubW9kdWxlLmV4cG9ydHMgPSBzZWxlYWJsZURldGFpbHM7IiwidmFyIHNlbGVhYmxlUHJpY2UgPSBmdW5jdGlvbihyZXN0bW9kKXtcbiAgICByZXR1cm4gcmVzdG1vZC5tb2RlbCgnL3NhbGVhYmxlcHJpY2UnKS5taXgoJ0RlZmF1bHRQYWNrZXInLHtcbiAgICAgICAgJGNvbmZpZzp7anNvbk1ldGE6ICcuJ31cbiAgICB9KS5taXgoe1xuICAgICAgICBhbW1vdW50OiB7ZGVjb2RlOidOdW1iZXJGb3JtYXQnfSxcbiAgICAgICAgZGlzY291bnQ6e2RlY29kZTonTnVtYmVyRm9ybWF0J31cbiAgICB9KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gc2VsZWFibGVQcmljZTsiLCJ2YXIgc2VsZWFibGVTZXJ2aWNlID0gZnVuY3Rpb24ocmVzdG1vZCl7XG4gICAgcmV0dXJuIHJlc3Rtb2QubW9kZWwoJy9zYWxlYWJsZScpLm1peCgnRGVmYXVsdFBhY2tlcicse1xuICAgICAgICAkY29uZmlnOntqc29uTWV0YTogJy4nfVxuICAgIH0pO1xufVxubW9kdWxlLmV4cG9ydHMgPSBzZWxlYWJsZVNlcnZpY2U7IiwidmFyIHNraWxsU2VydmljZSA9IGZ1bmN0aW9uKHJlc3Rtb2Qpe1xuICAgIHJldHVybiByZXN0bW9kLm1vZGVsKCcvc2tpbGwnKS5taXgoJ0RlZmF1bHRQYWNrZXInLHtcbiAgICAgICAgJGNvbmZpZzp7anNvbk1ldGE6ICcuJ31cbiAgICB9KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gc2tpbGxTZXJ2aWNlOyIsInZhciB0aGVQYWNrZXIgPSAgZnVuY3Rpb24oKSB7XG5cbiAgICBmdW5jdGlvbiBNeVBhY2tlcihfbW9kZWwpIHtcbiAgICAgICAgLy90aGlzLm1ldGEgPSBfbW9kZWwuJGdldFByb3BlcnR5KCdqc29uTWV0YScsICdtZXRhJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKF9tb2RlbCk7XG4gICAgICAgIC8vIHlvdSBjYW4gc2V0IHNvbWUgbW9kZWwgc3BlY2lmaWMgYmVoYXZpb3VyIGhlcmUsIGxpa2UgdGhlIHByb3BlcnR5IGJlaW5nIGV4dHJhY3RlZC5cbiAgICB9XG5cbiAgICBNeVBhY2tlci5wcm90b3R5cGUgPSB7XG4gICAgICAgIHVuUGFjazogZnVuY3Rpb24oX3Jhd0RhdGEsIF9yZWNvcmQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKF9yYXdEYXRhKTtcbiAgICAgICAgICAgIF9yZWNvcmQuJG1ldGFkYXRhID0gX3Jhd0RhdGE7IC8vIHN0b3JlIG1ldGFkYXRhIGFzc29jaWF0ZWQgd2l0aCByZXF1ZXN0XG4gICAgICAgICAgICByZXR1cm4gX3Jhd0RhdGEubXlQcm9wOyAvLyBleHRyYWN0IHByb3BlcnR5IGZyb20gcmVxdWVzdCBkYXRhLlxuICAgICAgICB9LFxuICAgICAgICB1blBhY2tNYW55OiBmdW5jdGlvbihfcmF3RGF0YSwgX2NvbGxlY3Rpb24pIHtcblxuICAgICAgICAgICAgX2NvbGxlY3Rpb24uJG1ldGFkYXRhID0gX3Jhd0RhdGE7IC8vIHN0b3JlIG1ldGFkYXRhIGFzc29jaWF0ZWQgd2l0aCByZXF1ZXN0XG4gICAgICAgICAgICByZXR1cm4gX2NvbGxlY3Rpb24ubXlQcm9wOyAvLyBleHRyYWN0IHByb3BlcnR5IGZyb20gcmVxdWVzdCBkYXRhLlxuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBNeVBhY2tlcjtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHRoZVBhY2tlcjtcbiIsInZhciB1c2VyQ29udGVudFR5cGUgPSBmdW5jdGlvbihyZXN0bW9kKXtcbiAgICByZXR1cm4gcmVzdG1vZC5tb2RlbCgnL3VzZXJjb250ZW50dHlwZScpLm1peCgnRGVmYXVsdFBhY2tlcicse1xuICAgICAgICAkY29uZmlnOntqc29uTWV0YTogJy4nfVxuICAgIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVzZXJDb250ZW50VHlwZTtcblxuXG4iLCJcbnZhciB1c2VyU2VydmljZSA9IGZ1bmN0aW9uKHJlc3Rtb2Qpe1xuICAgIHJldHVybiByZXN0bW9kLm1vZGVsKCcvdXNlcicpLm1peCgnRGVmYXVsdFBhY2tlcicse1xuICAgICAgICAkY29uZmlnOntqc29uTWV0YTogJy4nfVxuICAgIH0pO1xufVxubW9kdWxlLmV4cG9ydHMgPSB1c2VyU2VydmljZTsiLCJ2YXIgdXNlckNvbnRyb2xsZXIgPSBmdW5jdGlvbigkc2NvcGUsJHRpbWVvdXQsVXNlclNlcnZpY2UsIFByb2ZpbGVTZXJ2aWNlLE1lc3NhZ2VTZXJ2aWNlLE5ld1Bhc3N3b3JkKXtcblxuICAgIHZhciB1c2VyID0gVXNlclNlcnZpY2UuJGZpbmQoMCk7XG4gICAgdmFyIHByb2ZpbGUgPSBQcm9maWxlU2VydmljZS4kZmluZCgwKTtcbiAgICAkc2NvcGUucHJvZmlsZSA9IHByb2ZpbGUuJGZldGNoKCk7XG4gICAgJHNjb3BlLnVzZXIgPSB1c2VyLiRmZXRjaCgpO1xuXG4gICAgJHNjb3BlLnVwZGF0ZVVzZXIgPSBmdW5jdGlvbigpe1xuXG4gICAgICAgIHVzZXIuJHNhdmUoKS4kdGhlbihmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kbWV0YWRhdGEubWV0YTtcbiAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsbWV0YSk7XG4gICAgICAgIH0sZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAkc2NvcGUuZXJyb3JzID0gZGF0YS4kcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldFNlcnZlclZhbGlkYXRpb25NZXNzYWdlKCRzY29wZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgICRzY29wZS51cGRhdGVQYXNzd29yZCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBjaGFuZ2VkUGFzc3dvcmQgPSB7XG4gICAgICAgICAgcGFzc3dvcmQ6JHNjb3BlLnBhc3N3b3JkXG4gICAgICAgIH07XG4gICAgICAgIHZhciBuZXdQYXNzd29yZCA9IE5ld1Bhc3N3b3JkLnVwZGF0ZVBhc3N3b3JkKHVzZXIuaWQsY2hhbmdlZFBhc3N3b3JkKTtcbiAgICAgICAgbmV3UGFzc3dvcmQuc3VjY2VzcyhmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS5tZXRhO1xuICAgICAgICAgICAgTWVzc2FnZVNlcnZpY2Uuc2V0QWxlcnRNZXNzYWdlKCRzY29wZSxtZXRhKTtcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnBhc3N3b3JkID0gXCJcIjtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd1Bhc3N3b3JkQ2hhbmdlID0gZmFsc2U7XG4gICAgICAgICAgICB9LDQwMDApO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgJHNjb3BlLnVwZGF0ZVBlcnNvbmFsSW5mbyA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHByb2ZpbGUuJHNhdmUoKS4kdGhlbihmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kbWV0YWRhdGEubWV0YTtcbiAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsbWV0YSk7XG4gICAgICAgIH0sZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAkc2NvcGUuZXJyb3JzID0gZGF0YS4kcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldFNlcnZlclZhbGlkYXRpb25NZXNzYWdlKCRzY29wZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAkc2NvcGUudXBkYXRlU29jaWFsSW5mbyA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHByb2ZpbGUuJHNhdmUoKS4kdGhlbihmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgIHZhciBtZXRhID0gZGF0YS4kbWV0YWRhdGEubWV0YTtcbiAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldEFsZXJ0TWVzc2FnZSgkc2NvcGUsbWV0YSk7XG4gICAgICAgIH0sZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAkc2NvcGUuZXJyb3JzID0gZGF0YS4kcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgIE1lc3NhZ2VTZXJ2aWNlLnNldFNlcnZlclZhbGlkYXRpb25NZXNzYWdlKCRzY29wZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVzZXJDb250cm9sbGVyO1xuIiwidmFyIHN0Y19tZXNzYWdlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gW1xuXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiY29kZVwiOiA3MDEsXG4gICAgICAgICAgICBcIm5hbWVcIjpcImNvbnRlbnRzZWxlY3Rvcl9pbmZvXCIsXG4gICAgICAgICAgICBcIm1lc3NhZ2VcIjogJ0FjdGl2YSBsYXMgb3BjaW9uZXMgcXVlIHF1aWVyZXMgcXVlIGFwYXJlemNhbiBlbiB0dSBzaXRpbyBXZWIuJytcbiAgICAgICAgICAgICdQb3IgZWplbXBsbywgc2kgbm8gZXMgdHUgb2JqZXRpdm8gbW9zdHJhciBTZXJ2aWNpb3MgYSB0dXMgdmlzaXRhbnRlcywgcHVlZGVzIGRlc2FjdGl2YXIgbGEgY2FzaWxsYSBcIlNlcnZpY2lvc1wiIHkgZXNlIGNvbnRlbmlkbyBubyBzZSBtb3N0cmFyw6EuJyxcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImluZm9cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcImNvZGVcIjogNzAyLFxuICAgICAgICAgICAgXCJuYW1lXCI6XCJyZXN1bWVzZWxlY3Rvcl9pbmZvXCIsXG4gICAgICAgICAgICBcIm1lc3NhZ2VcIjogJ1B1bHNhIGxhIG9wY2nDs24gcGFyYSBpciBhIGxhIHNlY2Npw7NuIGRlbCBSw6lzdW3DqSBpbmRpY2FkYScsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbmZvXCJcbiAgICAgICAgfSxcblxuICAgIF1cblxufTtcbm1vZHVsZS5leHBvcnRzID0gc3RjX21lc3NhZ2VzO1xuIiwiLypcbiBBbmd1bGFySlMgdjEuMy4xM1xuIChjKSAyMDEwLTIwMTQgR29vZ2xlLCBJbmMuIGh0dHA6Ly9hbmd1bGFyanMub3JnXG4gTGljZW5zZTogTUlUXG4qL1xuKGZ1bmN0aW9uKHIsZixzKXsndXNlIHN0cmljdCc7Zi5tb2R1bGUoXCJuZ01lc3NhZ2VzXCIsW10pLmRpcmVjdGl2ZShcIm5nTWVzc2FnZXNcIixbXCIkY29tcGlsZVwiLFwiJGFuaW1hdGVcIixcIiR0ZW1wbGF0ZVJlcXVlc3RcIixmdW5jdGlvbihxLGssbCl7cmV0dXJue3Jlc3RyaWN0OlwiQUVcIixjb250cm9sbGVyOmZ1bmN0aW9uKCl7dGhpcy4kcmVuZGVyTmdNZXNzYWdlQ2xhc3Nlcz1mLm5vb3A7dmFyIGI9W107dGhpcy5yZWdpc3Rlck1lc3NhZ2U9ZnVuY3Rpb24oZCxhKXtmb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKylpZihiW2NdLnR5cGU9PWEudHlwZSl7aWYoZCE9Yyl7dmFyIGc9YltkXTtiW2RdPWJbY107ZDxiLmxlbmd0aD9iW2NdPWc6Yi5zcGxpY2UoMCxjKX1yZXR1cm59Yi5zcGxpY2UoZCwwLGEpfTt0aGlzLnJlbmRlck1lc3NhZ2VzPWZ1bmN0aW9uKGQsYSl7ZD1kfHx7fTt2YXIgYztmLmZvckVhY2goYixmdW5jdGlvbihiKXt2YXIgZTtpZihlPSFjfHxhKWU9ZFtiLnR5cGVdLGU9bnVsbCE9PVxuZSYmITEhPT1lJiZlO2U/KGIuYXR0YWNoKCksYz0hMCk6Yi5kZXRhY2goKX0pO3RoaXMucmVuZGVyRWxlbWVudENsYXNzZXMoYyl9fSxyZXF1aXJlOlwibmdNZXNzYWdlc1wiLGxpbms6ZnVuY3Rpb24oYixkLGEsYyl7Yy5yZW5kZXJFbGVtZW50Q2xhc3Nlcz1mdW5jdGlvbihiKXtiP2suc2V0Q2xhc3MoZCxcIm5nLWFjdGl2ZVwiLFwibmctaW5hY3RpdmVcIik6ay5zZXRDbGFzcyhkLFwibmctaW5hY3RpdmVcIixcIm5nLWFjdGl2ZVwiKX07dmFyIGc9Zi5pc1N0cmluZyhhLm5nTWVzc2FnZXNNdWx0aXBsZSl8fGYuaXNTdHJpbmcoYS5tdWx0aXBsZSksZTtiLiR3YXRjaENvbGxlY3Rpb24oYS5uZ01lc3NhZ2VzfHxhW1wiZm9yXCJdLGZ1bmN0aW9uKGIpe2U9YjtjLnJlbmRlck1lc3NhZ2VzKGIsZyl9KTsoYT1hLm5nTWVzc2FnZXNJbmNsdWRlfHxhLmluY2x1ZGUpJiZsKGEpLnRoZW4oZnVuY3Rpb24oYSl7dmFyIGg7YT1mLmVsZW1lbnQoXCI8ZGl2Lz5cIikuaHRtbChhKTtmLmZvckVhY2goYS5jaGlsZHJlbigpLFxuZnVuY3Rpb24oYSl7YT1mLmVsZW1lbnQoYSk7aD9oLmFmdGVyKGEpOmQucHJlcGVuZChhKTtoPWE7cShhKShiKX0pO2MucmVuZGVyTWVzc2FnZXMoZSxnKX0pfX19XSkuZGlyZWN0aXZlKFwibmdNZXNzYWdlXCIsW1wiJGFuaW1hdGVcIixmdW5jdGlvbihmKXtyZXR1cm57cmVxdWlyZTpcIl5uZ01lc3NhZ2VzXCIsdHJhbnNjbHVkZTpcImVsZW1lbnRcIix0ZXJtaW5hbDohMCxyZXN0cmljdDpcIkFFXCIsbGluazpmdW5jdGlvbihrLGwsYixkLGEpe2Zvcih2YXIgYyxnLGU9bFswXSxuPWUucGFyZW50Tm9kZSxoPTAscD0wO2g8bi5jaGlsZE5vZGVzLmxlbmd0aDtoKyspe3ZhciBtPW4uY2hpbGROb2Rlc1toXTtpZig4PT1tLm5vZGVUeXBlJiYwPD1tLm5vZGVWYWx1ZS5pbmRleE9mKFwibmdNZXNzYWdlXCIpKXtpZihtPT09ZSl7Yz1wO2JyZWFrfXArK319ZC5yZWdpc3Rlck1lc3NhZ2UoYyx7dHlwZTpiLm5nTWVzc2FnZXx8Yi53aGVuLGF0dGFjaDpmdW5jdGlvbigpe2d8fGEoayxmdW5jdGlvbihhKXtmLmVudGVyKGEsXG5udWxsLGwpO2c9YX0pfSxkZXRhY2g6ZnVuY3Rpb24oYSl7ZyYmKGYubGVhdmUoZyksZz1udWxsKX19KX19fV0pfSkod2luZG93LHdpbmRvdy5hbmd1bGFyKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFuZ3VsYXItbWVzc2FnZXMubWluLmpzLm1hcFxuIiwiLyoqXG4gKiBBUEkgQm91bmQgTW9kZWxzIGZvciBBbmd1bGFySlNcbiAqIEB2ZXJzaW9uIHYxLjEuNyAtIDIwMTUtMDEtMDZcbiAqIEBsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyLXBsYXRhbnVzL3Jlc3Rtb2RcbiAqIEBhdXRob3IgSWduYWNpbyBCYWl4YXMgPGlnbmFjaW9AcGxhdGFuLnVzPlxuICogQGxpY2Vuc2UgTUlUIExpY2Vuc2UsIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUXG4gKi9cblxuKGZ1bmN0aW9uKGFuZ3VsYXIsIHVuZGVmaW5lZCkge1xuJ3VzZSBzdHJpY3QnO1xuLyoqXG4gKiBBbmd1bGFyIGluZmxlY3Rpb24gbGlicmFyeVxuICogQHZlcnNpb24gdjAuMi4wIC0gMjAxNC0wOC0yMlxuICogQGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL3BsYXRhbnVzL2FuZ3VsYXItaW5mbGVjdG9yXG4gKiBAYXV0aG9yIElnbmFjaW8gQmFpeGFzIDxpZ25hY2lvQHBsYXRhbi51cz5cbiAqIEBsaWNlbnNlIE1JVCBMaWNlbnNlLCBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxuICovXG5cbihmdW5jdGlvbihhbmd1bGFyLCB1bmRlZmluZWQpIHtcbmFuZ3VsYXIubW9kdWxlKCdwbGF0YW51cy5pbmZsZWN0b3InLCBbXSlcbiAgLyoqXG4gICAqIEBjbGFzcyBpbmZsZWN0b3JQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogVGhlIGluZmxlY3RvclByb3ZpZGVyIGV4cG9zZXMgaW5mbGVjdG9yIGNvbmZpZ3VyYXRpb24gb3B0aW9ucywgbWFpbmx5IHJlbGF0ZWQgdG8gbG9jYWxlcy5cbiAgICovXG4gIC5wcm92aWRlcignaW5mbGVjdG9yJywgW2Z1bmN0aW9uICgpIHtcblxuICAgIHZhciBhY3RpdmVMb2NhbGUgPSAnZW4nLCBsb2NhbGVNYXAgPSB7XG4gICAgICAvKipcbiAgICAgICAqIEVuZ2xpc2ggdHJhbnNmb3JtYXRpb24gcnVsZXMuXG4gICAgICAgKlxuICAgICAgICogVGFrZW4gZnJvbSBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2luZmxlY3Rpb24tanMvc291cmNlL2Jyb3dzZS90cnVuay9pbmZsZWN0aW9uLmpzXG4gICAgICAgKi9cbiAgICAgIGVuOiB7XG4gICAgICAgIHVuY291bnRhYmxlOiBbXG4gICAgICAgICAgJ211c2ljJywgJ2FydCcsICdsb3ZlJywgJ2hhcHBpbmVzcycsICdhZHZpY2UnLCAnZnVybml0dXJlJywgJ2x1Z2dhZ2UnLFxuICAgICAgICAgICdzdWdhcicsICdidXR0ZXInLCAnd2F0ZXInLCAnZWxlY3RyaWNpdHknLCAnZ2FzJywgJ3Bvd2VyJywgJ2N1cnJlbmN5JyxcbiAgICAgICAgICAnZXF1aXBtZW50JywgJ2luZm9ybWF0aW9uJywgJ3JpY2UnLCAnbW9uZXknLCAnc3BlY2llcycsICdzZXJpZXMnLFxuICAgICAgICAgICdmaXNoJywgJ3NoZWVwJywgJ21vb3NlJywgJ2RlZXInLCAnbmV3cydcbiAgICAgICAgXSxcblxuICAgICAgICBwbHVyYWw6IFtcbiAgICAgICAgICBbbmV3IFJlZ0V4cCgnKG0pYW4kJywgJ2dpJyksICAgICAgICAgICAgICAgICAnJDFlbiddLFxuICAgICAgICAgIFtuZXcgUmVnRXhwKCcocGUpcnNvbiQnLCAnZ2knKSwgICAgICAgICAgICAgICckMW9wbGUnXSxcbiAgICAgICAgICBbbmV3IFJlZ0V4cCgnKGNoaWxkKSQnLCAnZ2knKSwgICAgICAgICAgICAgICAnJDFyZW4nXSxcbiAgICAgICAgICBbbmV3IFJlZ0V4cCgnXihveCkkJywgJ2dpJyksICAgICAgICAgICAgICAgICAnJDFlbiddLFxuICAgICAgICAgIFtuZXcgUmVnRXhwKCcoYXh8dGVzdClpcyQnLCAnZ2knKSwgICAgICAgICAgICckMWVzJ10sXG4gICAgICAgICAgW25ldyBSZWdFeHAoJyhvY3RvcHx2aXIpdXMkJywgJ2dpJyksICAgICAgICAgJyQxaSddLFxuICAgICAgICAgIFtuZXcgUmVnRXhwKCcoYWxpYXN8c3RhdHVzKSQnLCAnZ2knKSwgICAgICAgICckMWVzJ10sXG4gICAgICAgICAgW25ldyBSZWdFeHAoJyhidSlzJCcsICdnaScpLCAgICAgICAgICAgICAgICAgJyQxc2VzJ10sXG4gICAgICAgICAgW25ldyBSZWdFeHAoJyhidWZmYWx8dG9tYXR8cG90YXQpbyQnLCAnZ2knKSwgJyQxb2VzJ10sXG4gICAgICAgICAgW25ldyBSZWdFeHAoJyhbdGldKXVtJCcsICdnaScpLCAgICAgICAgICAgICAgJyQxYSddLFxuICAgICAgICAgIFtuZXcgUmVnRXhwKCdzaXMkJywgJ2dpJyksICAgICAgICAgICAgICAgICAgICdzZXMnXSxcbiAgICAgICAgICBbbmV3IFJlZ0V4cCgnKD86KFteZl0pZmV8KFtscl0pZikkJywgJ2dpJyksICAnJDEkMnZlcyddLFxuICAgICAgICAgIFtuZXcgUmVnRXhwKCcoaGl2ZSkkJywgJ2dpJyksICAgICAgICAgICAgICAgICckMXMnXSxcbiAgICAgICAgICBbbmV3IFJlZ0V4cCgnKFteYWVpb3V5XXxxdSl5JCcsICdnaScpLCAgICAgICAnJDFpZXMnXSxcbiAgICAgICAgICBbbmV3IFJlZ0V4cCgnKHh8Y2h8c3N8c2gpJCcsICdnaScpLCAgICAgICAgICAnJDFlcyddLFxuICAgICAgICAgIFtuZXcgUmVnRXhwKCcobWF0cnx2ZXJ0fGluZClpeHxleCQnLCAnZ2knKSwgICckMWljZXMnXSxcbiAgICAgICAgICBbbmV3IFJlZ0V4cCgnKFttfGxdKW91c2UkJywgJ2dpJyksICAgICAgICAgICAnJDFpY2UnXSxcbiAgICAgICAgICBbbmV3IFJlZ0V4cCgnKHF1aXopJCcsICdnaScpLCAgICAgICAgICAgICAgICAnJDF6ZXMnXSxcbiAgICAgICAgICBbbmV3IFJlZ0V4cCgncyQnLCAnZ2knKSwgICAgICAgICAgICAgICAgICAgICAncyddLFxuICAgICAgICAgIFtuZXcgUmVnRXhwKCckJywgJ2dpJyksICAgICAgICAgICAgICAgICAgICAgICdzJ11cbiAgICAgICAgXSxcblxuICAgICAgICBzaW5ndWxhcjogW1xuICAgICAgICAgIFtuZXcgUmVnRXhwKCcobSllbiQnLCAnZ2knKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyQxYW4nXSxcbiAgICAgICAgICBbbmV3IFJlZ0V4cCgnKHBlKW9wbGUkJywgJ2dpJyksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICckMXJzb24nXSxcbiAgICAgICAgICBbbmV3IFJlZ0V4cCgnKGNoaWxkKXJlbiQnLCAnZ2knKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICckMSddLFxuICAgICAgICAgIFtuZXcgUmVnRXhwKCcoW3RpXSlhJCcsICdnaScpLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyQxdW0nXSxcbiAgICAgICAgICBbbmV3IFJlZ0V4cCgnKChhKW5hbHl8KGIpYXwoZClpYWdub3wocClhcmVudGhlfChwKXJvZ25vfChzKXlub3B8KHQpaGUpc2VzJCcsJ2dpJyksICckMSQyc2lzJ10sXG4gICAgICAgICAgW25ldyBSZWdFeHAoJyhoaXZlKXMkJywgJ2dpJyksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJDEnXSxcbiAgICAgICAgICBbbmV3IFJlZ0V4cCgnKHRpdmUpcyQnLCAnZ2knKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICckMSddLFxuICAgICAgICAgIFtuZXcgUmVnRXhwKCcoY3VydmUpcyQnLCAnZ2knKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyQxJ10sXG4gICAgICAgICAgW25ldyBSZWdFeHAoJyhbbHJdKXZlcyQnLCAnZ2knKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJDFmJ10sXG4gICAgICAgICAgW25ldyBSZWdFeHAoJyhbXmZvXSl2ZXMkJywgJ2dpJyksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJDFmZSddLFxuICAgICAgICAgIFtuZXcgUmVnRXhwKCcoW15hZWlvdXldfHF1KWllcyQnLCAnZ2knKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyQxeSddLFxuICAgICAgICAgIFtuZXcgUmVnRXhwKCcocyllcmllcyQnLCAnZ2knKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyQxZXJpZXMnXSxcbiAgICAgICAgICBbbmV3IFJlZ0V4cCgnKG0pb3ZpZXMkJywgJ2dpJyksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICckMW92aWUnXSxcbiAgICAgICAgICBbbmV3IFJlZ0V4cCgnKHh8Y2h8c3N8c2gpZXMkJywgJ2dpJyksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICckMSddLFxuICAgICAgICAgIFtuZXcgUmVnRXhwKCcoW218bF0paWNlJCcsICdnaScpLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyQxb3VzZSddLFxuICAgICAgICAgIFtuZXcgUmVnRXhwKCcoYnVzKWVzJCcsICdnaScpLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyQxJ10sXG4gICAgICAgICAgW25ldyBSZWdFeHAoJyhvKWVzJCcsICdnaScpLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJDEnXSxcbiAgICAgICAgICBbbmV3IFJlZ0V4cCgnKHNob2UpcyQnLCAnZ2knKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICckMSddLFxuICAgICAgICAgIFtuZXcgUmVnRXhwKCcoY3Jpc3xheHx0ZXN0KWVzJCcsICdnaScpLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyQxaXMnXSxcbiAgICAgICAgICBbbmV3IFJlZ0V4cCgnKG9jdG9wfHZpcilpJCcsICdnaScpLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICckMXVzJ10sXG4gICAgICAgICAgW25ldyBSZWdFeHAoJyhhbGlhc3xzdGF0dXMpZXMkJywgJ2dpJyksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJDEnXSxcbiAgICAgICAgICBbbmV3IFJlZ0V4cCgnXihveCllbicsICdnaScpLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICckMSddLFxuICAgICAgICAgIFtuZXcgUmVnRXhwKCcodmVydHxpbmQpaWNlcyQnLCAnZ2knKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyQxZXgnXSxcbiAgICAgICAgICBbbmV3IFJlZ0V4cCgnKG1hdHIpaWNlcyQnLCAnZ2knKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICckMWl4J10sXG4gICAgICAgICAgW25ldyBSZWdFeHAoJyhxdWl6KXplcyQnLCAnZ2knKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJDEnXSxcbiAgICAgICAgICBbbmV3IFJlZ0V4cCgncyQnLCAnZ2knKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcnXVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIGhlbHBlciBmdW5jdGlvbiB1c2VkIGJ5IHNpbmd1bGFyaXplIGFuZCBwbHVyYWxpemVcbiAgICBmdW5jdGlvbiBhcHBseVJ1bGVzKF9zdHJpbmcsIF9ydWxlU2V0LCBfc2tpcCkge1xuXG4gICAgICBpZihfc2tpcC5pbmRleE9mKF9zdHJpbmcudG9Mb3dlckNhc2UoKSkgPT09IC0xKSB7XG4gICAgICAgIHZhciBpID0gMCwgcnVsZTtcbiAgICAgICAgd2hpbGUocnVsZSA9IF9ydWxlU2V0W2krK10pIHtcbiAgICAgICAgICBpZihfc3RyaW5nLm1hdGNoKHJ1bGVbMF0pKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N0cmluZy5yZXBsYWNlKHJ1bGVbMF0sIHJ1bGVbMV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3N0cmluZztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuXG4gICAgICAvKipcbiAgICAgICAqIEBtZW1iZXJvZiBpbmZsZWN0b3JQcm92aWRlciNcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqXG4gICAgICAgKiBSZWdpc3RlcnMgYSBuZXcgbG9jYWxlLCBzZWUgdGhlIGRlZmF1bHQgZW5nbGlzaCBsb2NhbGUgaW1wbGVtZW50YXRpb24gZm9yIGluZm9ybWF0aW9uIGFib3V0IHRoZSByZXF1aXJlZCBzdHJ1Y3R1cmUuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IF9sb2NhbGUgTG9jYWxlIG5hbWVcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBfZGVmIExvY2FsZSBkZWZpbml0aW9uXG4gICAgICAgKi9cbiAgICAgIHJlZ2lzdGVyTG9jYWxlOiBmdW5jdGlvbihfbG9jYWxlLCBfZGVmKSB7XG4gICAgICAgIGxvY2FsZU1hcFtfbG9jYWxlXSA9IF9kZWY7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBtZW1iZXJvZiBpbmZsZWN0b3JQcm92aWRlciNcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqXG4gICAgICAgKiBTZXRzIHRoZSBkZWZhdWx0IGxvY2FsZSwgZGVmYXVsdHMgdG8gJ2VuJ1xuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBfbG9jYWxlIExvY2FsZSBuYW1lXG4gICAgICAgKi9cbiAgICAgIHNldExvY2FsZTogZnVuY3Rpb24oX2xvY2FsZSkge1xuICAgICAgICBhY3RpdmVMb2NhbGUgPSBfbG9jYWxlO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAY2xhc3MgaW5mbGVjdG9yXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKlxuICAgICAgICogVGhlIGluZmxlY3RvciBzZXJ2aWNlIHByb3ZpZGVzIGEgc2V0IG9mIHN0cmluZyB0cmFuc2Zvcm1hdGlvbiBtZXRob2RzLlxuICAgICAgICovXG4gICAgICAkZ2V0OiBbJyRsb2cnLCBmdW5jdGlvbigkbG9nKSB7XG5cbiAgICAgICAgZnVuY3Rpb24gbG9hZFJ1bGVzRm9yKF9sb2NhbGUpIHtcbiAgICAgICAgICBfbG9jYWxlID0gX2xvY2FsZSB8fCBhY3RpdmVMb2NhbGU7XG4gICAgICAgICAgdmFyIHJ1bGVzID0gbG9jYWxlTWFwW19sb2NhbGVdO1xuICAgICAgICAgIGlmKCFydWxlcykgJGxvZy53YXJuKCdJbnZhbGlkIGluZmxlY3RvciBsb2NhbGUgJyArIF9sb2NhbGUpO1xuICAgICAgICAgIHJldHVybiBydWxlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbWVtYmVyb2YgaW5mbGVjdG9yI1xuICAgICAgICAgICAqXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBUcmFuc2Zvcm0gYSBzdHJpbmcgdG8gY2FtZWxjYXNlLCByZW1vdmluZyBldmVyeSBzcGFjZSwgZGFzaCBhbmQgdW5kZXJzY29yZVxuICAgICAgICAgICAqXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IF9zdHJpbmcgU3RyaW5nIHRvIHRyYW5zZm9ybVxuICAgICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gX2NvbnN0YW50IElmIHNldCB0byBmYWxzZSwgZmlyc3QgbGV0dGVyIGlzIG5vdCB1cHBlcmNhc2VkLCBkZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB0cmFuc2Zvcm1lZCBzdHJpbmdcbiAgICAgICAgICAgKi9cbiAgICAgICAgICBjYW1lbGl6ZTogZnVuY3Rpb24oX3N0cmluZywgX2NvbnN0YW50KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIF9zdHJpbmcgIT09ICdzdHJpbmcnKSByZXR1cm4gX3N0cmluZztcbiAgICAgICAgICAgIHJldHVybiBfc3RyaW5nLnJlcGxhY2UoLyg/Ol5bLV9cXHNdKnxbLV9cXHNdKykoW0EtWlxcZF0pL2dpLCBmdW5jdGlvbiAobWF0Y2gsIF9maXJzdCwgX2luZGV4KSB7XG4gICAgICAgICAgICAgIHJldHVybiAoIV9jb25zdGFudCAmJiBfaW5kZXggPT09IDApID8gX2ZpcnN0IDogX2ZpcnN0LnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG1lbWJlcm9mIGluZmxlY3RvciNcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqXG4gICAgICAgICAgICogVHJhbnNmb3JtcyBhIGNhbWVsY2FzZSBzdHJpbmcgdG8gYSBzbmFrZWNhc2Ugc3RyaW5nXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gX3N0cmluZyBTdHJpbmcgdG8gdHJhbnNmb3JtXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IF9zZXAgU2VwYXJhdG9yLCBkZWZhdWx0cyB0byAnLSdcbiAgICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB0cmFuc2Zvcm1lZCBzdHJpbmdcbiAgICAgICAgICAgKi9cbiAgICAgICAgICBwYXJhbWV0ZXJpemU6IGZ1bmN0aW9uKF9zdHJpbmcsIF9zZXApIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgX3N0cmluZyAhPT0gJ3N0cmluZycpIHJldHVybiBfc3RyaW5nO1xuICAgICAgICAgICAgcmV0dXJuIF9zdHJpbmcucmVwbGFjZSgvKD86W0EtWl0rfFswLTldKykvZywgZnVuY3Rpb24gKF9tYXRjaCwgX2luZGV4KSB7XG4gICAgICAgICAgICAgIHJldHVybiBfaW5kZXggPT09IDAgPyBfbWF0Y2ggOiAoX3NlcCB8fCAnLScpICsgX21hdGNoO1xuICAgICAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG1lbWJlcm9mIGluZmxlY3RvciNcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqXG4gICAgICAgICAgICogVHJhbnNmb3JtcyBhIHN0cmluZyB0byBzbmFrZWNhc2UsIHJlcGxhY2VzIGV2ZXJ5IHNwYWNlLCBkYXNoIGFuZCB1bmRlcmNvcmUgYnkgdGhlIHByb3ZpZGVkIHNlcGFyYXRvci5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBfc3RyaW5nIFN0cmluZyB0byB0cmFuc2Zvcm1cbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gX3NlcCBTZXBhcmF0b3IsIGRlZmF1bHRzIHRvICctJ1xuICAgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHRyYW5zZm9ybWVkIHN0cmluZ1xuICAgICAgICAgICAqL1xuICAgICAgICAgIGRhc2hlcml6ZTogZnVuY3Rpb24oX3N0cmluZywgX3NlcCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdHJpbmcucmVwbGFjZSgvWy1fXFxzXSsvZywgX3NlcCB8fCAnLScpO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbWVtYmVyb2YgaW5mbGVjdG9yI1xuICAgICAgICAgICAqXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBUcmFuc2Zvcm1zIGEgc3RyaW5nIHRvIGl0cyBzaW5ndWxhciBmb3JtLlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IF9zdHJpbmcgU3RyaW5nIHRvIHRyYW5zZm9ybVxuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBfbG9jYWxlKSBMb2NhbGUgdG8gdXNlLCBkZWZhdWx0cyB0byB0aGUgZGVmYXVsdCBsb2NhbGVcbiAgICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB0cmFuc2Zvcm1lZCBzdHJpbmdcbiAgICAgICAgICAgKi9cbiAgICAgICAgICBzaW5ndWxhcml6ZTogZnVuY3Rpb24oX3N0cmluZywgX2xvY2FsZSkge1xuICAgICAgICAgICAgdmFyIHJ1bGVzID0gbG9hZFJ1bGVzRm9yKF9sb2NhbGUpO1xuICAgICAgICAgICAgcmV0dXJuIHJ1bGVzID8gYXBwbHlSdWxlcyhfc3RyaW5nLCBydWxlcy5zaW5ndWxhciwgcnVsZXMudW5jb3VudGFibGUpIDogX3N0cmluZztcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG1lbWJlcm9mIGluZmxlY3RvciNcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqXG4gICAgICAgICAgICogVHJhbnNmb3JtcyBhIHN0cmluZyB0byBpdHMgcGx1cmFsIGZvcm0uXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gX3N0cmluZyBTdHJpbmcgdG8gdHJhbnNmb3JtXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IF9sb2NhbGUpIExvY2FsZSB0byB1c2UsIGRlZmF1bHRzIHRvIHRoZSBkZWZhdWx0IGxvY2FsZVxuICAgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHRyYW5zZm9ybWVkIHN0cmluZ1xuICAgICAgICAgICAqL1xuICAgICAgICAgIHBsdXJhbGl6ZTogZnVuY3Rpb24oX3N0cmluZywgX2xvY2FsZSkge1xuICAgICAgICAgICAgdmFyIHJ1bGVzID0gbG9hZFJ1bGVzRm9yKF9sb2NhbGUpO1xuICAgICAgICAgICAgcmV0dXJuIHJ1bGVzID8gYXBwbHlSdWxlcyhfc3RyaW5nLCBydWxlcy5wbHVyYWwsIHJ1bGVzLnVuY291bnRhYmxlKSA6IF9zdHJpbmc7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICB9XVxuICAgIH07XG4gIH1dKTtcblxufSkoYW5ndWxhcik7XG4vLyBQcmVsb2FkIHNvbWUgYW5ndWxhciBzdHVmZlxudmFyIFJNTW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ3Jlc3Rtb2QnLCBbJ25nJywgJ3BsYXRhbnVzLmluZmxlY3RvciddKTtcblxuLyoqXG4gKiBAY2xhc3MgcmVzdG1vZFByb3ZpZGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVGhlIHJlc3Rtb2RQcm92aWRlciBleHBvc2VzIHJlc3Rtb2QgY29uZmlndXJhdGlvbiBtZXRob2RzXG4gKi9cblJNTW9kdWxlLnByb3ZpZGVyKCdyZXN0bW9kJywgW2Z1bmN0aW9uKCkge1xuXG4gIHZhciBCQVNFX0NIQUlOID0gWydSTUJ1aWxkZXJFeHQnLCAnUk1CdWlsZGVyUmVsYXRpb25zJywgJ1JNQnVpbGRlckNvbXB1dGVkJ107XG5cbiAgZnVuY3Rpb24gd3JhcEluSW52b2tlKF9taXhpbikge1xuICAgIHJldHVybiBmdW5jdGlvbihfaW5qZWN0b3IpIHtcbiAgICAgIF9pbmplY3Rvci5pbnZva2UoX21peGluLCB0aGlzLCB7ICRidWlsZGVyOiB0aGlzIH0pO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiByZXN0bW9kUHJvdmlkZXIjXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIEFkZHMgYmFzZSBtaXhpbnMgZm9yIGV2ZXJ5IGdlbmVyYXRlZCBtb2RlbC5cbiAgICAgKlxuICAgICAqICoqQVRURU5USU9OKiogTW9kZWwgbmFtZXMgc2hvdWxkIE5PVCBiZSBhZGRlZCB0byB0aGlzIGNoYWluLlxuICAgICAqXG4gICAgICogQWxsIG1peGlucyBhZGRlZCB0byB0aGUgY2hhaW4gYXJlIHByZXBlbmRlZCB0byBldmVyeSBnZW5lcmF0ZWQgbW9kZWwuXG4gICAgICpcbiAgICAgKiBVc2FnZTpcbiAgICAgKlxuICAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAgKiAkcHJvdmlkZXIucmViYXNlKCdDaGFuZ2VNb2RlbCcsICdMYXp5UmVsYXRpb25zJywgJ1Rocm90dGxlZE1vZGVsJylcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICByZWJhc2U6IGZ1bmN0aW9uKC8qIF9taXhfbmFtZXMgKi8pIHtcbiAgICAgIHZhciBtaXhpbiwgaSwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICBmb3IoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgbWl4aW4gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIGlmKGFuZ3VsYXIuaXNBcnJheShtaXhpbikgfHwgYW5ndWxhci5pc0Z1bmN0aW9uKG1peGluKSkge1xuICAgICAgICAgIG1peGluID0gd3JhcEluSW52b2tlKG1peGluKTtcbiAgICAgICAgfVxuICAgICAgICBCQVNFX0NIQUlOLnB1c2gobWl4aW4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBjbGFzcyByZXN0bW9kXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIFRoZSByZXN0bW9kIHNlcnZpY2UgcHJvdmlkZXMgZmFjdG9yeSBtZXRob2RzIGZvciB0aGUgZGlmZmVyZW50IHJlc3Rtb2QgY29uc3VtYWJsZXMuXG4gICAgICovXG4gICAgJGdldDogWydSTU1vZGVsRmFjdG9yeScsICckbG9nJywgZnVuY3Rpb24oYnVpbGRNb2RlbCwgJGxvZykge1xuXG4gICAgICB2YXIgYXJyYXlTbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuICAgICAgdmFyIHJlc3Rtb2QgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyT2YgcmVzdG1vZCNcbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoZSBtb2RlbCBmYWN0b3J5IGlzIHVzZWQgdG8gZ2VuZXJhdGUgbmV3IHJlc3Rtb2QgbW9kZWwgdHlwZXMuIEl0J3MgcmVjb21tZW5kZWQgdG8gcHV0IG1vZGVscyBpbnNpZGUgZmFjdG9yaWVzLFxuICAgICAgICAgKiB0aGlzIGlzIHVzZWZ1bGwgbGF0ZXIgd2hlbiBkZWZpbmluZyByZWxhdGlvbnMgYW5kIGluaGVyaXRhbmNlLCBzaW5jZSB0aGUgYW5ndWxhciAkaW5qZWN0b3IgaXMgdXNlZCBieVxuICAgICAgICAgKiB0aGVzZSBmZWF0dXJlcy4gSXQncyBhbHNvIHRoZSBhbmd1bGFyIHdheSBvZiBkb2luZyB0aGluZ3MuXG4gICAgICAgICAqXG4gICAgICAgICAqIEEgc2ltcGxlIG1vZGVsIGNhbiBiZSBidWlsdCBsaWtlIHRoaXM6XG4gICAgICAgICAqXG4gICAgICAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAgICAgICogYW5ndWxhci5tb2R1bGUoJ2Jpa2UtYXBwJykuZmFjdG9yeSgnQmlrZScsIGZ1bmN0aW9uKHJlc3Rtb2QpIHtcbiAgICAgICAgICogICByZXR1cm4gcmVzdG1vZC5tb2RlbCgnL2Jpa2VzJyk7XG4gICAgICAgICAqIH0pO1xuICAgICAgICAgKmBgYFxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGUgYF91cmxgIHBhcmFtZXRlciBpcyB0aGUgcmVzb3VyY2UgdXJsIHRoZSBnZW5lcmF0ZWQgbW9kZWwgd2lsbCBiZSBib3VuZCB0bywgaWYgYG51bGxgIGlzIGdpdmVuIHRoZW5cbiAgICAgICAgICogdGhlIG1vZGVsIGlzICpuZXN0ZWQqIGFuZCBjYW4gb25seSBiZSB1c2VkIGluIGFub3RoZXIgbW9kZWwgY29udGV4dC5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhlIG1vZGVsIGFsc28gYWNjZXB0cyBvbmUgb3IgbW9yZSBkZWZpbml0aW9uIHByb3ZpZGVycyBhcyBvbmUgb3IgbW9yZSBhcmd1bWVudHMgYWZ0ZXIgdGhlIF91cmwgcGFyYW1ldGVyLFxuICAgICAgICAgKiBwb3NpYmxlIGRlZmluaXRpb24gcHJvdmlkZXJzIGFyZTpcbiAgICAgICAgICpcbiAgICAgICAgICogKiBBIGRlZmluaXRpb24gb2JqZWN0IChtb3JlIG9uIHRoaXMgYXQgdGhlIHtAbGluayBCdWlsZGVyQXBpfSk6XG4gICAgICAgICAqXG4gICAgICAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAgICAgICogcmVzdG1vZC5tb2RlbCgnL2Jpa2VzJywge1xuICAgICAgICAgKiAgIHZpZXdlZDogeyBpbml0OiBmYWxzZSB9LFxuICAgICAgICAgKiAgIHBhcnRzOiB7IGhhc01hbnk6ICdQYXJ0JyB9LFxuICAgICAgICAgKiAgICd+YWZ0ZXJDcmVhdGUnOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICogICAgIGFsZXJ0KCdCaWtlIGNyZWF0ZWQhIScpO1xuICAgICAgICAgKiAgIH1cbiAgICAgICAgICogfSk7XG4gICAgICAgICAqYGBgXG4gICAgICAgICAqXG4gICAgICAgICAqICogQSBkZWZpbml0aW9uIGZ1bmN0aW9uIChtb3JlIG9uIHRoaXMgYXQgdGhlIHtAbGluayBCdWlsZGVyQXBpfSk6XG4gICAgICAgICAqXG4gICAgICAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAgICAgICogcmVzdG1vZC5tb2RlbCgnL2Jpa2VzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAqICAgdGhpcy5hdHRyRGVmYXVsdCgndmlld2VkJywgZmFsc2UpO1xuICAgICAgICAgKiAgIHRoaXMuYXR0ck1hc2soJ2lkJywgJ0NVJyk7XG4gICAgICAgICAqIH0pO1xuICAgICAgICAgKmBgYFxuICAgICAgICAgKlxuICAgICAgICAgKiAqIEEgbWl4aW4gKGdlbmVyYXRlZCB1c2luZyB0aGUgbWl4aW4gbWV0aG9kKSBvciBtb2RlbCBmYWN0b3J5IG5hbWU6XG4gICAgICAgICAqXG4gICAgICAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAgICAgICogcmVzdG1vZC5tb2RlbCgnL2Jpa2VzJywgJ0Jhc2VNb2RlbCcsICdQYWdlZE1vZGVsJyk7XG4gICAgICAgICAqYGBgXG4gICAgICAgICAqXG4gICAgICAgICAqICogQSBtaXhpbiAoZ2VuZXJhdGVkIHVzaW5nIHRoZSBtaXhpbiBtZXRob2QpIG9yIG1vZGVsIG9iamVjdDpcbiAgICAgICAgICpcbiAgICAgICAgICogYGBgamF2YXNjcmlwdFxuICAgICAgICAgKiByZXN0bW9kLm1vZGVsKCcvYmlrZXMnLCBCYXNlTW9kZWwsIFBhZ2VkTW9kZWwpO1xuICAgICAgICAgKiBgYGBcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IF91cmwgUmVzb3VyY2UgdXJsLlxuICAgICAgICAgKiBAcGFyYW0ge21peGVkfSBfbWl4IE9uZSBvciBtb3JlIG1peGlucywgZGVzY3JpcHRpb24gb2JqZWN0cyBvciBkZXNjcmlwdGlvbiBibG9ja3MuXG4gICAgICAgICAqIEByZXR1cm4ge1N0YXRpY0FwaX0gVGhlIG5ldyBtb2RlbC5cbiAgICAgICAgICovXG4gICAgICAgIG1vZGVsOiBmdW5jdGlvbihfYmFzZVVybC8qICwgX21peCAqLykge1xuICAgICAgICAgIHZhciBtb2RlbCA9IGJ1aWxkTW9kZWwoX2Jhc2VVcmwsIEJBU0VfQ0hBSU4pO1xuXG4gICAgICAgICAgaWYoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIG1vZGVsLm1peChhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgICAgICAgICAkbG9nLndhcm4oJ1Bhc3NpbmcgbWl4aW5zIGFuZCBkaWZpbml0aW9ucyBpbiB0aGUgbW9kZWwgbWV0aG9kIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiByZXN0bW9kIDEuMiwgdXNlIHJlc3Rtb2QubW9kZWwoKS5taXgoKSBpbnN0ZWFkLicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBtb2RlbDtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlck9mIHJlc3Rtb2QjXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGUgbWl4aW4gZmFjdG9yeSBpcyB1c2VkIHRvIHBhY2sgbW9kZWwgYmVoYXZpb3JzIHdpdGhvdXQgdGhlIG92ZXJsb2FkIG9mIGdlbmVyYXRpbmcgYSBuZXdcbiAgICAgICAgICogbW9kZWwuIFRoZSBtaXhpbiBjYW4gdGhlbiBiZSBwYXNzZWQgYXMgYXJndW1lbnQgdG8gYSBjYWxsIHRvIHtAbGluayByZXN0bW9kI21vZGVsI21vZGVsfVxuICAgICAgICAgKiB0byBleHRlbmQgdGhlIG1vZGVsIGNhcGFiaWxpdGllcy5cbiAgICAgICAgICpcbiAgICAgICAgICogQSBtaXhpbiBjYW4gYWxzbyBiZSBwYXNzZWQgdG8gdGhlIHtAbGluayByZXN0bW9kUHJvdmlkZXIjcmViYXNlfSBtZXRob2QgdG8gcHJvdmlkZVxuICAgICAgICAgKiBhIGJhc2UgYmVoYXZpb3IgZm9yIGFsbCBnZW5lcmF0ZWQgbW9kZWxzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge21peGVkfSBfbWl4IE9uZSBvciBtb3JlIG1peGlucywgZGVzY3JpcHRpb24gb2JqZWN0cyBvciBkZXNjcmlwdGlvbiBibG9ja3MuXG4gICAgICAgICAqIEByZXR1cm4ge29iamVjdH0gVGhlIG1peGluXG4gICAgICAgICAqL1xuICAgICAgICBtaXhpbjogZnVuY3Rpb24oLyogX21peCAqLykge1xuICAgICAgICAgIHJldHVybiB7ICRpc0Fic3RyYWN0OiB0cnVlLCAkJGNoYWluOiBhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKSB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyT2YgcmVzdG1vZCNcbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIFNob3JjdXQgbWV0aG9kIHVzZWQgdG8gY3JlYXRlIHNpbmdsZXRvbiByZXNvdXJjZXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIFNhbWUgYXMgY2FsbGluZyBgcmVzdG1vZC5tb2RlbChudWxsKS4kc2luZ2xlKF91cmwpYFxuICAgICAgICAgKlxuICAgICAgICAgKiBDaGVjayB0aGUge0BsaW5rIFN0YXRpY0FwaSMkc2luZ2xlfSBkb2N1bWVudGF0aW9uIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gX3VybCBSZXNvdXJjZSB1cmwsXG4gICAgICAgICAqIEBwYXJhbSB7bWl4ZWR9IF9taXggTWl4aW4gY2hhaW4uXG4gICAgICAgICAqIEByZXR1cm4ge1JlY29yZEFwaX0gTmV3IHJlc291cmNlIGluc3RhbmNlLlxuICAgICAgICAgKi9cbiAgICAgICAgc2luZ2xldG9uOiBmdW5jdGlvbihfdXJsLyosIF9taXggKi8pIHtcbiAgICAgICAgICByZXR1cm4gcmVzdG1vZC5tb2RlbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLnNpbmdsZShfdXJsKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHJlc3Rtb2Q7XG4gICAgfV1cbiAgfTtcbn1dKVxuLmZhY3RvcnkoJ21vZGVsJywgWydyZXN0bW9kJywgZnVuY3Rpb24ocmVzdG1vZCkge1xuICByZXR1cm4gcmVzdG1vZC5tb2RlbDtcbn1dKVxuLmZhY3RvcnkoJ21peGluJywgWydyZXN0bW9kJywgZnVuY3Rpb24ocmVzdG1vZCkge1xuICByZXR1cm4gcmVzdG1vZC5taXhpbjtcbn1dKTtcblxuUk1Nb2R1bGUuZmFjdG9yeSgnUk1Db2xsZWN0aW9uQXBpJywgWydSTVV0aWxzJywgZnVuY3Rpb24oVXRpbHMpIHtcblxuICB2YXIgZXh0ZW5kID0gYW5ndWxhci5leHRlbmQ7XG5cbiAgLyoqXG4gICAqIEBjbGFzcyBDb2xsZWN0aW9uQXBpXG4gICAqXG4gICAqIEBleHRlbmRzIFNjb3BlQXBpXG4gICAqIEBleHRlbmRzIENvbW1vbkFwaVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQSByZXN0bW9kIGNvbGxlY3Rpb24gaXMgYW4gZXh0ZW5kZWQgYXJyYXkgdHlwZSBib3VuZCBSRVNUIHJlc291cmNlIHJvdXRlLlxuICAgKlxuICAgKiBFdmVyeSB0aW1lIGEgbmV3IHJlc3Rtb2QgbW9kZWwgaXMgY3JlYXRlZCwgYW4gYXNzb2NpYXRlZCBjb2xsZWN0aW9uIHR5cGUgaXMgY3JlYXRlZCB0b28uXG4gICAqXG4gICAqIFRPRE86IHRhbGsgYWJvdXQgZmV0Y2gvcmVmcmVzaCBiZWhhdmlvdXIsIGxpZmVjeWNsZXMsIGNvbGxlY3Rpb24gc2NvcGVzLCBhZGRpbmcvcmVtb3ZpbmdcbiAgICpcbiAgICogRm9yIGAkZmV0Y2hgIG9uIGEgY29sbGVjdGlvbjpcbiAgICpcbiAgICogKiBiZWZvcmUtZmV0Y2gtbWFueVxuICAgKiAqIGJlZm9yZS1yZXF1ZXN0XG4gICAqICogYWZ0ZXItcmVxdWVzdFstZXJyb3JdXG4gICAqICogYWZ0ZXItZmVlZCAoY2FsbGVkIGZvciBldmVyeSByZWNvcmQgaWYgbm8gZXJyb3JzKVxuICAgKiAqIGFmdGVyLWZlZWQtbWFueSAob25seSBjYWxsZWQgaWYgbm8gZXJyb3JzKVxuICAgKiAqIGFmdGVyLWZldGNoLW1hbnlbLWVycm9yXVxuICAgKlxuICAgKiBAcHJvcGVydHkge2Jvb2xlYW59ICRpc0NvbGxlY3Rpb24gSGVscGVyIGZsYWcgdG8gc2VwYXJhdGUgY29sbGVjdGlvbnMgZnJvbSB0aGUgbWFpbiB0eXBlXG4gICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSAkc2NvcGUgVGhlIGNvbGxlY3Rpb24gc2NvcGUgKGhpZXJhcmNoaWNhbCBzY29wZSwgbm90IGFuZ3VsYXIgc2NvcGUpXG4gICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSAkcGFyYW1zIFRoZSBjb2xsZWN0aW9uIHF1ZXJ5IHBhcmFtZXRlcnNcbiAgICpcbiAgICovXG4gIHJldHVybiB7XG5cbiAgICAkaXNDb2xsZWN0aW9uOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIENvbGxlY3Rpb25BcGkjXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gQ2FsbGVkIGJ5IGNvbGxlY3Rpb24gY29uc3RydWN0b3Igb24gaW5pdGlhbGl6YXRpb24uXG4gICAgICpcbiAgICAgKiBOb3RlOiBJcyBiZXR0ZXIgdG8gYWRkIGEgaG9vayBvbiBhZnRlci1pbml0IHRoYW4gb3ZlcnJpZGluZyB0aGlzIG1ldGhvZC5cbiAgICAgKi9cbiAgICAkaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgICAvLyBhZnRlciBpbml0aWFsaXphdGlvbiBob29rXG4gICAgICB0aGlzLiRkaXNwYXRjaCgnYWZ0ZXItY29sbGVjdGlvbi1pbml0Jyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBDb2xsZWN0aW9uQXBpI1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEZlZWRzIHJhdyBjb2xsZWN0aW9uIGRhdGEgaW50byB0aGUgY29sbGVjdGlvbi5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGZvciB1c2UgaW4gY29sbGVjdGlvbnMgb25seS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7YXJyYXl9IF9yYXcgRGF0YSB0byBhZGRcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IF9tYXNrICdDUlUnIG1hc2tcbiAgICAgKiBAcmV0dXJuIHtDb2xsZWN0aW9uQXBpfSBzZWxmXG4gICAgICovXG4gICAgJGRlY29kZTogZnVuY3Rpb24oX3JhdywgX21hc2spIHtcblxuICAgICAgVXRpbHMuYXNzZXJ0KF9yYXcgJiYgYW5ndWxhci5pc0FycmF5KF9yYXcpLCAnQ29sbGVjdGlvbiAkZGVjb2RlIGV4cGVjdGVkIGFycmF5Jyk7XG5cbiAgICAgIGZvcih2YXIgaSA9IDAsIGwgPSBfcmF3Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB0aGlzLiRidWlsZFJhdyhfcmF3W2ldLCBfbWFzaykuJHJldmVhbCgpOyAvLyBidWlsZCBhbmQgZGlzY2xvc2UgZXZlcnkgaXRlbS5cbiAgICAgIH1cblxuICAgICAgdGhpcy4kZGlzcGF0Y2goJ2FmdGVyLWZlZWQtbWFueScsIFtfcmF3XSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIENvbGxlY3Rpb25BcGkjXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gRW5jb2RlcyBhcnJheSBkYXRhIGludG8gYSBpdHMgc2VyaWFsaXplZCB2ZXJzaW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSBfbWFzayAnQ1JVJyBtYXNrXG4gICAgICogQHJldHVybiB7Q29sbGVjdGlvbkFwaX0gc2VsZlxuICAgICAqL1xuICAgICRlbmNvZGU6IGZ1bmN0aW9uKF9tYXNrKSB7XG4gICAgICB2YXIgcmF3ID0gW107XG4gICAgICBmb3IodmFyIGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcmF3LnB1c2godGhpc1tpXS4kZW5jb2RlKF9tYXNrKSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuJGRpc3BhdGNoKCdiZWZvcmUtcmVuZGVyLW1hbnknLCBbcmF3XSk7XG4gICAgICByZXR1cm4gcmF3O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgQ29sbGVjdGlvbkFwaSNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBSZXNldHMgdGhlIGNvbGxlY3Rpb24ncyBjb250ZW50c1xuICAgICAqXG4gICAgICogQHJldHVybiB7Q29sbGVjdGlvbkFwaX0gc2VsZlxuICAgICAqL1xuICAgICRjbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kYWx3YXlzKGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmxlbmd0aCA9IDA7IC8vIHJlc2V0IHRoZSBjb2xsZWN0aW9uIGNvbnRlbnRzXG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIENvbGxlY3Rpb25BcGkjXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gQmVnaW4gYSBzZXJ2ZXIgcmVxdWVzdCB0byBwb3B1bGF0ZSBjb2xsZWN0aW9uLiBUaGlzIG1ldGhvZCBkb2VzIG5vdFxuICAgICAqIGNsZWFyIHRoZSBjb2xsZWN0aW9uIGNvbnRlbnRzIGJ5IGRlZmF1bHQsIHVzZSBgJHJlZnJlc2hgIHRvIHJlc2V0IGFuZCBmZXRjaC5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGZvciB1c2UgaW4gY29sbGVjdGlvbnMgb25seS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fGZ1bmN0aW9ufSBfcGFyYW1zIEFkZGl0aW9uYWwgcmVxdWVzdCBwYXJhbWV0ZXJzLCBub3Qgc3RvcmVkIGluIGNvbGxlY3Rpb24sXG4gICAgICogaWYgYSBmdW5jdGlvbiBpcyBnaXZlbiwgdGhlbiBpdCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSByZXF1ZXN0IG9iamVjdCB0byBhbGxvdyByZXF1ZXQgY3VzdG9taXphdGlvbi5cbiAgICAgKiBAcmV0dXJuIHtDb2xsZWN0aW9uQXBpfSBzZWxmXG4gICAgICovXG4gICAgJGZldGNoOiBmdW5jdGlvbihfcGFyYW1zKSB7XG4gICAgICByZXR1cm4gdGhpcy4kYWN0aW9uKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmVxdWVzdCA9IHsgbWV0aG9kOiAnR0VUJywgdXJsOiB0aGlzLiR1cmwoJ2ZldGNoTWFueScpLCBwYXJhbXM6IHRoaXMuJHBhcmFtcyB9O1xuXG4gICAgICAgIGlmKF9wYXJhbXMpIHtcbiAgICAgICAgICByZXF1ZXN0LnBhcmFtcyA9IHJlcXVlc3QucGFyYW1zID8gZXh0ZW5kKHJlcXVlc3QucGFyYW1zLCBfcGFyYW1zKSA6IF9wYXJhbXM7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUT0RPOiBjaGVjayB0aGF0IGNvbGxlY3Rpb24gaXMgYm91bmQuXG5cbiAgICAgICAgdGhpc1xuICAgICAgICAgIC4kZGlzcGF0Y2goJ2JlZm9yZS1mZXRjaC1tYW55JywgW3JlcXVlc3RdKVxuICAgICAgICAgIC4kc2VuZChyZXF1ZXN0LCBmdW5jdGlvbihfcmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgICAgLiR1bndyYXAoX3Jlc3BvbnNlLmRhdGEpXG4gICAgICAgICAgICAgIC4kZGlzcGF0Y2goJ2FmdGVyLWZldGNoLW1hbnknLCBbX3Jlc3BvbnNlXSk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oX3Jlc3BvbnNlKSB7XG4gICAgICAgICAgICB0aGlzLiRkaXNwYXRjaCgnYWZ0ZXItZmV0Y2gtbWFueS1lcnJvcicsIFtfcmVzcG9uc2VdKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgQ29sbGVjdGlvbkFwaSNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBBZGRzIGFuIGl0ZW0gdG8gdGhlIGJhY2sgb2YgdGhlIGNvbGxlY3Rpb24uIFRoaXMgbWV0aG9kIGRvZXMgbm90IGF0dGVtcHQgdG8gc2VuZCBjaGFuZ2VzXG4gICAgICogdG8gdGhlIHNlcnZlci4gVG8gY3JlYXRlIGEgbmV3IGl0ZW0gYW5kIGFkZCBpdCB1c2UgJGNyZWF0ZSBvciAkYnVpbGQuXG4gICAgICpcbiAgICAgKiBUcmlnZ2VycyBhZnRlci1hZGQgY2FsbGJhY2tzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWNvcmRBcGl9IF9vYmogSXRlbSB0byBiZSBhZGRlZFxuICAgICAqIEByZXR1cm4ge0NvbGxlY3Rpb25BcGl9IHNlbGZcbiAgICAgKi9cbiAgICAkYWRkOiBmdW5jdGlvbihfb2JqLCBfaWR4KSB7XG4gICAgICBVdGlscy5hc3NlcnQoX29iai4kdHlwZSAmJiBfb2JqLiR0eXBlID09PSB0aGlzLiR0eXBlLCAnQ29sbGVjdGlvbiAkYWRkIGV4cGVjdHMgcmVjb3JkIG9mIHRoZSBzYW1lICR0eXBlJyk7XG5cbiAgICAgIHJldHVybiB0aGlzLiRhY3Rpb24oZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmKF9vYmouJHBvc2l0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZihfaWR4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3BsaWNlKF9pZHgsIDAsIF9vYmopO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnB1c2goX29iaik7XG4gICAgICAgICAgfVxuICAgICAgICAgIF9vYmouJHBvc2l0aW9uID0gdHJ1ZTsgLy8gdXNlIHRydWUgZm9yIG5vdywga2VlcGluZyBwb3NpdGlvbiB1cGRhdGVkIGNhbiBiZSBleHBlbnNpdmVcbiAgICAgICAgICB0aGlzLiRkaXNwYXRjaCgnYWZ0ZXItYWRkJywgW19vYmpdKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBDb2xsZWN0aW9uQXBpI1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uICBSZW1vdmVzIGFuIGl0ZW0gZnJvbSB0aGUgY29sbGVjdGlvbi5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGRvZXMgbm90IHNlbmQgYSBERUxFVEUgcmVxdWVzdCB0byB0aGUgc2VydmVyLCBpdCBqdXN0IHJlbW92ZXMgdGhlXG4gICAgICogaXRlbSBsb2NhbGx5LiBUbyByZW1vdmUgYW4gaXRlbSBBTkQgc2VuZCBhIERFTEVURSB1c2UgdGhlIGl0ZW0ncyAkZGVzdHJveSBtZXRob2QuXG4gICAgICpcbiAgICAgKiBUcmlnZ2VycyBhZnRlci1yZW1vdmUgY2FsbGJhY2tzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWNvcmRBcGl9IF9vYmogSXRlbSB0byBiZSByZW1vdmVkXG4gICAgICogQHJldHVybiB7Q29sbGVjdGlvbkFwaX0gc2VsZlxuICAgICAqL1xuICAgICRyZW1vdmU6IGZ1bmN0aW9uKF9vYmopIHtcbiAgICAgIHJldHVybiB0aGlzLiRhY3Rpb24oZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpZHggPSB0aGlzLiRpbmRleE9mKF9vYmopO1xuICAgICAgICBpZihpZHggIT09IC0xKSB7XG4gICAgICAgICAgdGhpcy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgICBfb2JqLiRwb3NpdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB0aGlzLiRkaXNwYXRjaCgnYWZ0ZXItcmVtb3ZlJywgW19vYmpdKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBDb2xsZWN0aW9uQXBpI1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEZpbmRzIHRoZSBsb2NhdGlvbiBvZiBhbiBvYmplY3QgaW4gdGhlIGFycmF5LlxuICAgICAqXG4gICAgICogSWYgYSBmdW5jdGlvbiBpcyBwcm92aWRlZCB0aGVuIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgaXRlbSBmb3Igd2hpY2ggdGhlIGZ1bmN0aW9uIHJldHVybnMgdHJ1ZSBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVjb3JkQXBpfGZ1bmN0aW9ufSBfb2JqIE9iamVjdCB0byBmaW5kXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBPYmplY3QgaW5kZXggb3IgLTEgaWYgbm90IGZvdW5kXG4gICAgICovXG4gICAgJGluZGV4T2Y6IGZ1bmN0aW9uKF9vYmopIHtcbiAgICAgIHZhciBhY2NlcHQgPSB0eXBlb2YgX29iaiA9PT0gJ2Z1bmN0aW9uJyA/IF9vYmogOiBmYWxzZTtcbiAgICAgIGZvcih2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZihhY2NlcHQgPyBhY2NlcHQodGhpc1tpXSkgOiB0aGlzW2ldID09PSBfb2JqKSByZXR1cm4gaTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gIH07XG5cbn1dKTtcblJNTW9kdWxlLmZhY3RvcnkoJ1JNQ29tbW9uQXBpJywgWyckaHR0cCcsICdSTUZhc3RRJywgJyRsb2cnLCBmdW5jdGlvbigkaHR0cCwgJHEsICRsb2cpIHtcblxuICB2YXIgRU1QVFlfQVJSQVkgPSBbXTtcblxuICBmdW5jdGlvbiB3cmFwUHJvbWlzZShfY3R4LCBfZnVuKSB7XG4gICAgdmFyIGRzcCA9IF9jdHguJGRpc3BhdGNoZXIoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oX2xhc3QpIHtcbiAgICAgIC8vIHNhdmUgYW5kIHJlc2V0IHByb21pc2VcbiAgICAgIHZhciBvbGRQcm9taXNlID0gX2N0eC4kcHJvbWlzZTtcbiAgICAgIF9jdHguJHByb21pc2UgPSB1bmRlZmluZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBfY3R4LiRsYXN0ID0gX2xhc3Q7XG4gICAgICAgIHZhciByZXN1bHQgPSBkc3AgPyBfY3R4LiRkZWNvcmF0ZShkc3AsIF9mdW4sIFtfY3R4XSkgOiBfZnVuLmNhbGwoX2N0eCwgX2N0eCk7XG4gICAgICAgIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IF9jdHguJHByb21pc2UgOiByZXN1bHQ7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfY3R4LiRwcm9taXNlID0gb2xkUHJvbWlzZTsgLy8gcmVzdG9yZSBvbGQgcHJvbWlzZVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQGNsYXNzIENvbW1vbkFwaVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogUHJvdmlkZXMgYSBjb21tb24gZnJhbWV3b3JrIGZvciByZXN0bW9kIHJlc291cmNlcy5cbiAgICpcbiAgICogVGhpcyBBUEkgaXMgaW5jbHVkZWQgaW4ge0BsaW5rIFJlY29yZEFwaX0gYW5kIHtAbGluayBDb2xsZWN0aW9uQXBpfS5cbiAgICogbWFraW5nIGl0cyBtZXRob2RzIGF2YWlsYWJsZSBpbiBldmVyeSBzdHJ1Y3R1cmUgZ2VuZXJhdGVkIGJ5IHJlc3Rtb2QuXG4gICAqXG4gICAqIFRPRE86IERlc2NyaWJlIGhvb2sgbWVjaGFuaXNtLCBwcm9taXNlIG1lY2hhbmlzbSBhbmQgc2VuZCBsaWZlY3ljbGUuXG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7cHJvbWlzZX0gJHByb21pc2UgVGhlIGxhc3Qgb3BlcmF0aW9uIHByb21pc2UgKHVuZGVmaW5lZCBpZiBubyBwcm9taXNlIGhhcyBiZWVuIGNyZWF0ZWQgeWV0KVxuICAgKiBAcHJvcGVydHkge2FycmF5fSAkcGVuZGluZyBQZW5kaW5nIHJlcXVlc3RzIGFzc29jaWF0ZWQgdG8gdGhpcyByZXNvdXJjZSAodW5kZWZpbmVkIGlmIG5vIHJlcXVlc3QgaGFzIGJlZW4gaW5pdGlhdGVkKVxuICAgKiBAcHJvcGVydHkge29iamVjdH0gJCRjYiBTY29wZSBjYWxsIGJhY2tzICh1bmRlZmluZWQgaWYgbm8gY2FsbGJhY2tzIGhhdmUgYmVlbiBkZWZpbmVkLCBwcml2YXRlIGFwaSlcbiAgICogQHByb3BlcnR5IHtmdW5jdGlvbn0gJCRkc3AgVGhlIGN1cnJlbnQgZXZlbnQgZGlzcGF0Y2hlciAocHJpdmF0ZSBhcGkpXG4gICAqL1xuICB2YXIgQ29tbW9uQXBpID0ge1xuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIENvbW1vbkFwaSNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBHZXRzIHRoaXMgcmVzb3VyY2UgdXJsLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IF9mb3IgSW50ZW5kZWQgdXNhZ2UgZm9yIHRoZSB1cmwgKG9wdGlvbmFsKVxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHJlc291cmNlIHVybC5cbiAgICAgKi9cbiAgICAkdXJsOiBmdW5jdGlvbihfZm9yKSB7XG4gICAgICBpZihfZm9yKSB7XG4gICAgICAgIF9mb3IgPSAnJCcgKyBfZm9yICsgJ1VybEZvcic7XG4gICAgICAgIGlmKHRoaXMuJHNjb3BlW19mb3JdKSByZXR1cm4gdGhpcy4kc2NvcGVbX2Zvcl0odGhpcyk7XG4gICAgICB9IGVsc2UgaWYodGhpcy4kc2NvcGUuJGNhbm9uaWNhbFVybEZvcikge1xuICAgICAgICByZXR1cm4gdGhpcy4kc2NvcGUuJGNhbm9uaWNhbFVybEZvcih0aGlzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuJHNjb3BlLiR1cmxGb3IodGhpcyk7XG4gICAgfSxcblxuICAgIC8vIEhvb2tzIEFQSVxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIENvbW1vbkFwaSNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBFeGVjdXRlcyBhIGdpdmVuIGhvb2sgY2FsbGJhY2tzIHVzaW5nIHRoZSBjdXJyZW50IGRpc3BhdGNoZXIgY29udGV4dC5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGNhbiBiZSB1c2VkIHRvIHByb3ZpZGUgY3VzdG9tIG9iamVjdCBsaWZlY3ljbGUgaG9va3MuXG4gICAgICpcbiAgICAgKiBVc2FnZTpcbiAgICAgKlxuICAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAgKiB2YXIgbWl4aW4gPSByZXN0bW9kLm1peGluKHtcbiAgICAgKiAgIHRyaWdnZXJEdW1teTogZnVuY3Rpb24oX3BhcmFtKSB7XG4gICAgICogICAgIHRoaXMuJGRpc3BhdGNoKCdkdW1teS1ob29rJywgX3BhcmFtKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIC8vIFRoZW4gaG9vayBjYW4gYmUgdXNlZCBhdCBtb2RlbCBkZWZpbml0aW9uIHRvIHByb3ZpZGUgdHlwZS1sZXZlbCBjdXN0b21pemF0aW9uOlxuICAgICAqIHZhciBCaWtlICRyZXNtb2QubW9kZWwoJy9hcGkvYmlrZXMnLCBtaXhpbiwge1xuICAgICAqICAgJ35kdW1teS1ob29rJzogZnVuY3Rpb24oKSB7XG4gICAgICogICAgIGFsZXJ0KCdUaGlzIGlzIGNhbGxlZCBmb3IgZXZlcnkgYmlrZScpO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiAvLyBvciBhdCBpbnN0YW5jZSBsZXZlbDpcbiAgICAgKiB2YXIgbXlCaWtlID0gQmlrZS4kYnVpbGQoKTtcbiAgICAgKiBteUJpa2UuJG9uKCdkdW1teS1ob29rJywgZnVuY3Rpb24oKSB7XG4gICAgICogICBhbGVydCgnVGhpcyBpcyBjYWxsZWQgZm9yIG15QmlrZSBvbmx5Jyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiAvLyBvciBldmVudCBhdCBkZWNvcmF0ZWQgY29udGV4dCBsZXZlbFxuICAgICAqIG15QmlrZS4kZGVjb3JhdGUoe1xuICAgICAqICAgJ2R1bW15LWhvb2snOiBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgYWxlcnQoJ1RoaXMgaXMgY2FsbGVkIGZvciBteUJpa2Ugb25seSBpbnNpZGUgdGhlIGRlY29yYXRlZCBjb250ZXh0Jyk7XG4gICAgICogICB9XG4gICAgICogfSwgZnVjdGlvbigpIHtcbiAgICAgKiAgLy8gZGVjb3JhdGVkIGNvbnRleHRcbiAgICAgKiB9KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gX2hvb2sgSG9vayBuYW1lXG4gICAgICogQHBhcmFtICB7YXJyYXl9IF9hcmdzIEhvb2sgYXJndW1lbnRzXG4gICAgICogQHBhcmFtICB7b2JqZWN0fSBfY3R4IEhvb2sgZXhlY3V0aW9uIGNvbnRleHQgb3ZlcnJpZGVcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0NvbW1vbkFwaX0gc2VsZlxuICAgICAqL1xuICAgICRkaXNwYXRjaDogZnVuY3Rpb24oX2hvb2ssIF9hcmdzLCBfY3R4KSB7XG4gICAgICB2YXIgY2JzLCBpLCBjYiwgZHNwID0gdGhpcy4kJGRzcDtcblxuICAgICAgaWYoIV9jdHgpIF9jdHggPSB0aGlzO1xuXG4gICAgICAvLyBjb250ZXh0IGNhbGxiYWNrc1xuICAgICAgaWYoZHNwKSB7XG4gICAgICAgIHRoaXMuJCRkc3AgPSB1bmRlZmluZWQ7IC8vIGRpc2FibGUgZHNwIGZvciBob29rc1xuICAgICAgICBkc3AoX2hvb2ssIF9hcmdzLCBfY3R4KTtcbiAgICAgIH1cblxuICAgICAgLy8gaW5zdGFuY2UgY2FsbGJhY2tzXG4gICAgICBpZih0aGlzLiQkY2IgJiYgKGNicyA9IHRoaXMuJCRjYltfaG9va10pKSB7XG4gICAgICAgIGZvcihpID0gMDsgISEoY2IgPSBjYnNbaV0pOyBpKyspIHtcbiAgICAgICAgICBjYi5hcHBseShfY3R4LCBfYXJncyB8fCBFTVBUWV9BUlJBWSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gYnViYmxlIHVwIHRoZSBvYmplY3Qgc2NvcGUsIGJ1YmJsZSB0byB0eXBlIG9ubHkgaWYgdGhlcmUgaXNudCBhIHZpYWJsZSBwYXJlbnQgc2NvcGUuXG4gICAgICBpZih0aGlzLiRzY29wZSAmJiB0aGlzLiRzY29wZS4kZGlzcGF0Y2gpIHtcbiAgICAgICAgdGhpcy4kc2NvcGUuJGRpc3BhdGNoKF9ob29rLCBfYXJncywgX2N0eCk7XG4gICAgICB9IGVsc2UgaWYodGhpcy4kdHlwZSkge1xuICAgICAgICB0aGlzLiR0eXBlLiRkaXNwYXRjaChfaG9vaywgX2FyZ3MsIF9jdHgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLiQkZHNwID0gZHNwOyAvLyByZWVuYWJsZSBkc3AuXG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgQ29tbW9uQXBpI1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIFJlZ2lzdGVycyBhbiBpbnN0YW5jZSBob29rLlxuICAgICAqXG4gICAgICogQW4gaW5zdGFuY2UgaG9vayBpcyBjYWxsZWQgb25seSBmb3IgZXZlbnRzIGdlbmVyYXRlZCBieSB0aGUgY2FsbGluZyBvYmplY3QuXG4gICAgICpcbiAgICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgICogdmFyIGJpa2UgPSBNb2RlbC4kYnVpbGQoKSwgYmlrZTIgPSBNb2RlbC4kYnVpbGQoKTtcbiAgICAgKiBiaWtlLiRvbignYmVmb3JlLXNhdmUnLCBmdW5jdGlvbigpIHsgYWxlcnQoJ3NhdmVkIScpOyB9KTtcbiAgICAgKlxuICAgICAqIGJpa2UuJHNhdmUoKTsgLy8gJ3NhdmVkIScgYWxlcnQgaXMgc2hvd24gYWZ0ZXIgYmlrZSBpcyBzYXZlZFxuICAgICAqIGJpa2UyLiRzYXZlKCk7IC8vIG5vIGFsZXJ0IGlzIHNob3duIGFmdGVyIGJpa2UyIGlzIHNhdmVkXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gX2hvb2sgSG9vayBuYW1lXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gX2Z1biBDYWxsYmFja1xuICAgICAqIEByZXR1cm4ge0NvbW1vbkFwaX0gc2VsZlxuICAgICAqL1xuICAgICRvbjogZnVuY3Rpb24oX2hvb2ssIF9mdW4pIHtcbiAgICAgIHZhciBob29rcyA9ICh0aGlzLiQkY2IgfHwgKHRoaXMuJCRjYiA9IHt9KSlbX2hvb2tdIHx8ICh0aGlzLiQkY2JbX2hvb2tdID0gW10pO1xuICAgICAgaG9va3MucHVzaChfZnVuKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgQ29tbW9uQXBpI1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIFJlZ2lzdGVycyBob29rcyB0byBiZSB1c2VkIG9ubHkgaW5zaWRlIHRoZSBnaXZlbiBmdW5jdGlvbiAoZGVjb3JhdGVkIGNvbnRleHQpLlxuICAgICAqXG4gICAgICogYGBgamF2YXNjcmlwdFxuICAgICAqIC8vIHNwZWNpYWwgZmV0Y2ggbWV0aG9kIHRoYXQgc2VuZHMgYSBzcGVjaWFsIHRva2VuIGhlYWRlci5cbiAgICAgKiByZXN0bW9kLm1peGluKHtcbiAgICAgKiAgICRmZXRjaFdpdGhUb2tlbjogZnVuY3Rpb24oX3Rva2VuKSB7XG4gICAgICogICAgIHJldHVybiB0aGlzLiRkZWNvcmF0ZSh7XG4gICAgICogICAgICAgJ2JlZm9yZS1mZXRjaCc6IGZ1bmN0aW9uKF9yZXEpIHtcbiAgICAgKiAgICAgICAgIF9yZXEuaGVhZGVycyA9IF9yZXEuaGVhZGVycyB8fCB7fTtcbiAgICAgKiAgICAgICAgIF9yZXEuaGVhZGVyc1snVG9rZW4nXSA9IF90b2tlbjtcbiAgICAgKiAgICAgICB9XG4gICAgICogICAgICksIGZ1bmN0aW9uKCkge1xuICAgICAqICAgICAgIHJldHVybiB0aGlzLiRmZXRjaCgpO1xuICAgICAqICAgICB9KVxuICAgICAqICAgfVxuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R8ZnVuY3Rpb259IF9ob29rcyBIb29rIG1hcHBpbmcgb2JqZWN0IG9yIGhvb2sgZXhlY3V0aW9uIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBfZnVuIEZ1bmN0aW9uIHRvIGJlIGV4ZWN1dGVkIGluIHdpdGggZGVjb3JhdGVkIGNvbnRleHQsIHRoaXMgZnVuY3Rpb24gaXMgZXhlY3V0ZWQgaW4gdGhlIGNhbGxlZSBvYmplY3QgY29udGV4dC5cbiAgICAgKiBAcmV0dXJuIHtDb21tb25BcGl9IHNlbGZcbiAgICAgKi9cbiAgICAkZGVjb3JhdGU6IGZ1bmN0aW9uKF9ob29rcywgX2Z1biwgX2FyZ3MpIHtcblxuICAgICAgdmFyIG9sZERpc3BhdGNoZXIgPSB0aGlzLiQkZHNwO1xuXG4gICAgICAvLyBzZXQgbmV3IGRpc3BhdGNoZXJcbiAgICAgIHRoaXMuJCRkc3AgPSAodHlwZW9mIF9ob29rcyA9PT0gJ2Z1bmN0aW9uJyB8fCAhX2hvb2tzKSA/IF9ob29rcyA6IGZ1bmN0aW9uKF9ob29rLCBfYXJncywgX2N0eCkge1xuICAgICAgICBpZihvbGREaXNwYXRjaGVyKSBvbGREaXNwYXRjaGVyLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgIHZhciBleHRyYUNiID0gX2hvb2tzW19ob29rXTtcbiAgICAgICAgaWYoZXh0cmFDYikgZXh0cmFDYi5hcHBseShfY3R4LCBfYXJncyB8fCBFTVBUWV9BUlJBWSk7XG4gICAgICB9O1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gX2Z1bi5hcHBseSh0aGlzLCBfYXJncyk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICAvLyByZXNldCBkaXNwYXRjaGVyIHdpdGggb2xkIHZhbHVlXG4gICAgICAgIHRoaXMuJCRkc3AgPSBvbGREaXNwYXRjaGVyO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgQ29tbW9uQXBpI1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIFJldHJpZXZlcyB0aGUgY3VycmVudCBvYmplY3QncyBldmVudCBkaXNwYXRjaGVyIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgY2FuIGJlIHVzZWQgaW4gY29uanVjdGlvbiB3aXRoIGAkZGVjb3JhdGVgIHRvIHByb3ZpZGUgYSBjb25zaXN0ZW50IGhvb2sgY29udGV4dFxuICAgICAqIGR1cmluZyBhc3luYyBvcGVyYXRpb25zLiBUaGlzIGlzIGltcG9ydGFudCB3aGVuIGJ1aWxkaW5nIGV4dGVuc2lvbnMgdGhhdCB3YW50IHRvIHN1cHBvcnQgdGhlXG4gICAgICogY29udGV4dHVhbCBob29rIHN5c3RlbSBpbiBhc3luY2hyb25pYyBvcGVyYXRpb25zLlxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvb3V0IGNvbnRleHR1YWwgaG9va3MsIHNlZSB0aGUge0BsaW5rIENvbW1vbkFwaSNkZWNvcmF0ZX0gZG9jdW1lbnRhdGlvbi5cbiAgICAgKlxuICAgICAqIFVzYWdlOlxuICAgICAqXG4gICAgICogYGBgamF2YXNjcmlwdFxuICAgICAqIHJlc3Rtb2QubWl4aW4oe1xuICAgICAqICAgJHNhdmVBbmRUcmFjazogZnVuY3Rpb24oKSB7XG4gICAgICogICAgIHZhciBkc3AgPSB0aGlzLiRkaXNwYXRjaGVyKCksIC8vIGNhcHR1cmUgdGhlIGN1cnJlbnQgZGlzcGF0Y2hlciBmdW5jdGlvbi5cbiAgICAgKiAgICAgICAgIHNlbGYgPSB0aGlzO1xuICAgICAqICAgICB0aGlzLiRzYXZlKCkuJHRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICogICAgICAgdGhpcy4kc2VuZCh7IHBhdGg6ICcvdHJhY2VzJywgZGF0YTogJ2JsZScgfSwgZnVuY3Rpb24oKSB7XG4gICAgICogICAgICAgICB0aGlzLiRkZWNvcmF0ZShkc3AsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgICAgICAgICAvLyB0aGUgZXZlbnQgaXMgZGlzcGF0Y2hlZCB1c2luZyB0aGUgZGlzcGF0Y2hlciBmdW5jdGlvbiBhdmFpbGFibGUgd2hlbiAkc2F2ZUFuZFRyYWNrIHdhcyBjYWxsZWQuXG4gICAgICogICAgICAgICAgIHRoaXMuJGRpc3BhdGNoKCd0cmFjZS1zdG9yZWQnKTtcbiAgICAgKiAgICAgICAgIH0pO1xuICAgICAqICAgICAgIH0pO1xuICAgICAqICAgICB9KTtcbiAgICAgKiAgIH1cbiAgICAgKiB9KVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb259IERpc3BhdGNoZXIgZXZhbHVhdG9yXG4gICAgICovXG4gICAgJGRpc3BhdGNoZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJCRkc3A7XG4gICAgfSxcblxuICAgIC8vIFByb21pc2UgQVBJXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgQ29tbW9uQXBpI1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIFJldHVybnMgdGhpcyBvYmplY3QgbGFzdCBwcm9taXNlLlxuICAgICAqXG4gICAgICogSWYgcHJvbWlzZSBkb2VzIG5vdCBleGlzdCwgdGhlbiBhIG5ldyBvbmUgaXMgZ2VuZXJhdGVkIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIG9iamVjdCBpdHNlZi4gVGhlXG4gICAgICogbmV3IHByb21pc2UgaXMgbm90IHNldCBhcyB0aGUgY3VycmVudCBvYmplY3QgcHJvbWlzZSwgZm9yIHRoYXQgdXNlIGAkdGhlbmAuXG4gICAgICpcbiAgICAgKiBVc2FnZTpcbiAgICAgKlxuICAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAgKiBjb2wuJGZldGNoKCkuJGFzUHJvbWlzZSgpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHJldHVybiB7cHJvbWlzZX0gJHEgcHJvbWlzZVxuICAgICAqL1xuICAgICRhc1Byb21pc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHJldHVybiB0aGlzLiRwcm9taXNlID8gdGhpcy4kcHJvbWlzZS50aGVuKFxuICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIF90aGlzOyB9LFxuICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuICRxLnJlamVjdChfdGhpcyk7IH1cbiAgICAgICkgOiAkcS53aGVuKHRoaXMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgQ29tbW9uQXBpI1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIFByb21pc2UgY2hhaW5pbmcgbWV0aG9kLCBrZWVwcyB0aGUgbW9kZWwgaW5zdGFuY2UgYXMgdGhlIGNoYWluIGNvbnRleHQuXG4gICAgICpcbiAgICAgKiBDYWxscyBgJHEudGhlbmAgb24gdGhlIG1vZGVsJ3MgbGFzdCBwcm9taXNlLlxuICAgICAqXG4gICAgICogVXNhZ2U6XG4gICAgICpcbiAgICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgICogY29sLiRmZXRjaCgpLiR0aGVuKGZ1bmN0aW9uKCkgeyB9KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IF9zdWNjZXNzIHN1Y2Nlc3MgY2FsbGJhY2tcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBfZXJyb3IgZXJyb3IgY2FsbGJhY2tcbiAgICAgKiBAcmV0dXJuIHtDb21tb25BcGl9IHNlbGZcbiAgICAgKi9cbiAgICAkdGhlbjogZnVuY3Rpb24oX3N1Y2Nlc3MsIF9lcnJvcikge1xuXG4gICAgICBpZighdGhpcy4kcHJvbWlzZSkge1xuICAgICAgICB0aGlzLiRwcm9taXNlID0gJHEud2hlbih3cmFwUHJvbWlzZSh0aGlzLCBfc3VjY2VzcykodGhpcykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kcHJvbWlzZSA9IHRoaXMuJHByb21pc2UudGhlbihcbiAgICAgICAgICBfc3VjY2VzcyA/IHdyYXBQcm9taXNlKHRoaXMsIF9zdWNjZXNzKSA6IF9zdWNjZXNzLFxuICAgICAgICAgIF9lcnJvciA/IHdyYXBQcm9taXNlKHRoaXMsIF9lcnJvcikgOiBfZXJyb3JcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBDb21tb25BcGkjXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gUHJvbWlzZSBjaGFpbmluZyBtZXRob2QsIHNpbWlsYXIgdG8gdGhlbiBidXQgZXhlY3V0ZXMgc2FtZSBjYWxsYmFjayBpbiBzdWNjZXNzIG9yIGVycm9yLlxuICAgICAqXG4gICAgICogVXNhZ2U6XG4gICAgICpcbiAgICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgICogY29sLiRmZXRjaCgpLiRhbHdheXMoZnVuY3Rpb24oKSB7IH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gX2Z1biBzdWNjZXNzL2Vycm9yIGNhbGxiYWNrXG4gICAgICogQHJldHVybiB7Q29tbW9uQXBpfSBzZWxmXG4gICAgICovXG4gICAgJGFsd2F5czogZnVuY3Rpb24oX2Z1bikge1xuICAgICAgcmV0dXJuIHRoaXMuJHRoZW4oX2Z1biwgX2Z1bik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBDb21tb25BcGkjXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gUHJvbWlzZSBjaGFpbmluZywga2VlcHMgdGhlIG1vZGVsIGluc3RhbmNlIGFzIHRoZSBjaGFpbiBjb250ZXh0LlxuICAgICAqXG4gICAgICogQ2FsbHMgwrQkcS5maW5hbGx5wrQgb24gdGhlIGNvbGxlY3Rpb24ncyBsYXN0IHByb21pc2UsIHVwZGF0ZXMgbGFzdCBwcm9taXNlIHdpdGggZmluYWxseSByZXN1bHQuXG4gICAgICpcbiAgICAgKiBVc2FnZTpcbiAgICAgKlxuICAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAgKiBjb2wuJGZldGNoKCkuJGZpbmFsbHkoZnVuY3Rpb24oKSB7IH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gX2NiIGNhbGxiYWNrXG4gICAgICogQHJldHVybiB7Q29tbW9uQXBpfSBzZWxmXG4gICAgICovXG4gICAgJGZpbmFsbHk6IGZ1bmN0aW9uKF9jYikge1xuICAgICAgdGhpcy4kcHJvbWlzZSA9IHRoaXMuJHByb21pc2VbJ2ZpbmFsbHknXSh3cmFwUHJvbWlzZSh0aGlzLCBfY2IpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBDb21tdW5pY2F0aW9uIEFQSVxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIENvbW1vbkFwaSNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBMb3cgbGV2ZWwgY29tbXVuaWNhdGlvbiBtZXRob2QsIHdyYXBzIHRoZSAkaHR0cCBhcGkuXG4gICAgICpcbiAgICAgKiAqIFlvdSBjYW4gYWNjZXNzIGxhc3QgcmVxdWVzdCBwcm9taXNlIHVzaW5nIHRoZSBgJGFzUHJvbWlzZWAgbWV0aG9kLlxuICAgICAqICogUGVuZGluZyByZXF1ZXN0cyB3aWxsIGJlIGF2YWlsYWJsZSBhdCB0aGUgJHBlbmRpbmcgcHJvcGVydHkgKGFycmF5KS5cbiAgICAgKiAqIEN1cnJlbnQgcmVxdWVzdCBleGVjdXRpb24gc3RhdHVzIGNhbiBiZSBxdWVyaWVkIHVzaW5nIHRoZSAkc3RhdHVzIHByb3BlcnR5IChjdXJyZW50IHJlcXVlc3QsIG5vdCBsYXN0KS5cbiAgICAgKiAqIFRoZSAkc3RhdHVzIHByb3BlcnR5IHJlZmVycyB0byB0aGUgY3VycmVudCByZXF1ZXN0IGluc2lkZSAkc2VuZCBgX3N1Y2Nlc3NgIGFuZCBgX2Vycm9yYCBjYWxsYmFja3MuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gX29wdGlvbnMgJGh0dHAgb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IF9zdWNjZXNzIHN1Y2VzcyBjYWxsYmFjayAoc3luYylcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBfZXJyb3IgZXJyb3IgY2FsbGJhY2sgKHN5bmMpXG4gICAgICogQHJldHVybiB7Q29tbW9uQXBpfSBzZWxmXG4gICAgICovXG4gICAgJHNlbmQ6IGZ1bmN0aW9uKF9vcHRpb25zLCBfc3VjY2VzcywgX2Vycm9yKSB7XG5cbiAgICAgIC8vIG1ha2Ugc3VyZSBhIHN0eWxlIGJhc2Ugd2FzIHNlbGVjdGVkIGZvciB0aGUgbW9kZWxcbiAgICAgIGlmKCF0aGlzLiR0eXBlLmdldFByb3BlcnR5KCdzdHlsZScpKSB7XG4gICAgICAgICRsb2cud2FybignTm8gQVBJIHN0eWxlIGJhc2Ugd2FzIHNlbGVjdGVkLCBzZWUgdGhlIEFwaSBJbnRlZ3JhdGlvbiBGQVEgZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdGhpcyB3YXJuaW5nJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBhY3Rpb24gPSB0aGlzLiQkYWN0aW9uO1xuXG4gICAgICByZXR1cm4gdGhpcy4kYWx3YXlzKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHRoaXMuJHJlc3BvbnNlID0gbnVsbDtcbiAgICAgICAgdGhpcy4kc3RhdHVzID0gJ3BlbmRpbmcnO1xuICAgICAgICB0aGlzLiRkaXNwYXRjaCgnYmVmb3JlLXJlcXVlc3QnLCBbX29wdGlvbnNdKTtcblxuICAgICAgICByZXR1cm4gJGh0dHAoX29wdGlvbnMpLnRoZW4od3JhcFByb21pc2UodGhpcywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYoYWN0aW9uICYmIGFjdGlvbi5jYW5jZWxlZCkge1xuICAgICAgICAgICAgLy8gaWYgcmVxdWVzdCB3YXMgY2FuY2VsZWQgZHVyaW5nIHJlcXVlc3QsIGlnbm9yZSBwb3N0IHJlcXVlc3QgYWN0aW9ucy5cbiAgICAgICAgICAgIHRoaXMuJHN0YXR1cyA9ICAnY2FuY2VsZWQnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLiRzdGF0dXMgPSAnb2snO1xuICAgICAgICAgICAgdGhpcy4kcmVzcG9uc2UgPSB0aGlzLiRsYXN0O1xuICAgICAgICAgICAgdGhpcy4kZGlzcGF0Y2goJ2FmdGVyLXJlcXVlc3QnLCBbdGhpcy4kbGFzdF0pO1xuICAgICAgICAgICAgaWYoX3N1Y2Nlc3MpIF9zdWNjZXNzLmNhbGwodGhpcywgdGhpcy4kbGFzdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSwgd3JhcFByb21pc2UodGhpcywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYoYWN0aW9uICYmIGFjdGlvbi5jYW5jZWxlZCkge1xuICAgICAgICAgICAgLy8gaWYgcmVxdWVzdCB3YXMgY2FuY2VsZWQgZHVyaW5nIHJlcXVlc3QsIGlnbm9yZSBlcnJvciBoYW5kbGluZ1xuICAgICAgICAgICAgdGhpcy4kc3RhdHVzID0gJ2NhbmNlbGVkJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy4kc3RhdHVzID0gJ2Vycm9yJztcbiAgICAgICAgICAgIHRoaXMuJHJlc3BvbnNlID0gdGhpcy4kbGFzdDtcblxuICAgICAgICAgICAgLy8gSURFQTogQ29uc2lkZXIgZmx1c2hpbmcgcGVuZGluZyByZXF1ZXN0IGluIGNhc2Ugb2YgYW4gZXJyb3IuIEFsc28gY29udGludWUgaWdub3JpbmcgcmVxdWVzdHNcbiAgICAgICAgICAgIC8vIHVudGlsIHRoZSBlcnJvciBmbGFnIGlzIHJlc2V0IGJ5IHVzZXIuXG5cbiAgICAgICAgICAgIHRoaXMuJGRpc3BhdGNoKCdhZnRlci1yZXF1ZXN0LWVycm9yJywgW3RoaXMuJGxhc3RdKTtcbiAgICAgICAgICAgIGlmKF9lcnJvcikgX2Vycm9yLmNhbGwodGhpcywgdGhpcy4kbGFzdCk7XG4gICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KHRoaXMpOyAvLyBUT0RPOiB0aGlzIHdpbGwgc3RlcCBvdmVyIGFueSBwcm9taXNlIGdlbmVyYXRlZCBpbiBfZXJyb3IhIVxuICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8vIEFjdGlvbnMgQVBJXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgQ29tbW9uQXBpI1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIFJlZ2lzdGVycyBhIG5ldyBhY3Rpb24gdG8gYmUgZXhlY3V0ZWQgaW4gdGhlIHByb21pc2UgcXVldWUuXG4gICAgICpcbiAgICAgKiBSZWdpc3RlcmVkIHBlbmRpbmcgYWN0aW9ucyBjYW4gYmUgY2FuY2VsZWQgdXNpbmcgYCRjYW5jZWxgXG4gICAgICpcbiAgICAgKiBgJGNhbmNlbGAgd2lsbCBhbHNvIGNhbmNlbCBhbnkgb25nb2luZyBjYWxsIHRvIGAkc2VuZGAgKHdpbGwgbm90IGFib3J0IGl0IHlldCB0aG91Z2guLi4pXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtDb21tb25BcGl9IHNlbGZcbiAgICAgKi9cbiAgICAkYWN0aW9uOiBmdW5jdGlvbihfZnVuKSB7XG4gICAgICB2YXIgc3RhdHVzID0ge1xuICAgICAgICBjYW5jZWxlZDogZmFsc2VcbiAgICAgIH0sIHBlbmRpbmcgPSB0aGlzLiRwZW5kaW5nIHx8ICh0aGlzLiRwZW5kaW5nID0gW10pO1xuXG4gICAgICBwZW5kaW5nLnB1c2goc3RhdHVzKTtcblxuICAgICAgcmV0dXJuIHRoaXMuJGFsd2F5cyhmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG9sZEFjdGlvbiA9IHRoaXMuJCRhY3Rpb247XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYoIXN0YXR1cy5jYW5jZWxlZCkge1xuICAgICAgICAgICAgdGhpcy4kJGFjdGlvbiA9IHN0YXR1cztcbiAgICAgICAgICAgIHJldHVybiBfZnVuLmNhbGwodGhpcyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QodGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIC8vIHJlc3RvcmUgb2JqZWN0IHN0YXRlIGFuZCBwZW5kaW5nIGFjdGlvbnNcbiAgICAgICAgICB0aGlzLiQkYWN0aW9uID0gb2xkQWN0aW9uO1xuICAgICAgICB9XG4gICAgICB9KS4kZmluYWxseShmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gYWZ0ZXIgYWN0aW9uIGFuZCByZWxhdGVkIGFzeW5jIGNvZGUgZmluaXNoZXMsIHJlbW92ZSBzdGF0dXMgZnJvbSBwZW5kaW5nIGxpc3RcbiAgICAgICAgcGVuZGluZy5zcGxpY2UocGVuZGluZy5pbmRleE9mKHN0YXR1cyksIDEpO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBDb21tb25BcGkjXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gQ2FuY2VscyBhbGwgcGVuZGluZyBhY3Rpb25zIHJlZ2lzdGVyZWQgd2l0aCAkYWN0aW9uLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Q29tbW9uQXBpfSBzZWxmXG4gICAgICovXG4gICAgJGNhbmNlbDogZnVuY3Rpb24oKSB7XG4gICAgICAvLyBjYW5jZWwgZXZlcnkgcGVuZGluZyByZXF1ZXN0LlxuICAgICAgaWYodGhpcy4kcGVuZGluZykge1xuICAgICAgICBhbmd1bGFyLmZvckVhY2godGhpcy4kcGVuZGluZywgZnVuY3Rpb24oX3N0YXR1cykge1xuICAgICAgICAgIF9zdGF0dXMuY2FuY2VsZWQgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBDb21tb25BcGkjXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyB0cnVlIGlmIG9iamVjdCBoYXMgcXVldWVkIGFjdGlvbnNcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IE9iamVjdCByZXF1ZXN0IHBlbmRpbmcgc3RhdHVzLlxuICAgICAqL1xuICAgICRoYXNQZW5kaW5nQWN0aW9uczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcGVuZGluZ0NvdW50ID0gMDtcblxuICAgICAgaWYodGhpcy4kcGVuZGluZykge1xuICAgICAgICBhbmd1bGFyLmZvckVhY2godGhpcy4kcGVuZGluZywgZnVuY3Rpb24oX3N0YXR1cykge1xuICAgICAgICAgIGlmKCFfc3RhdHVzLmNhbmNlbGVkKSBwZW5kaW5nQ291bnQrKztcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwZW5kaW5nQ291bnQgPiAwO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gQ29tbW9uQXBpO1xuXG59XSk7XG5STU1vZHVsZS5mYWN0b3J5KCdSTUV4dGVuZGVkQXBpJywgWyckcScsICdSTVBhY2tlckNhY2hlJywgZnVuY3Rpb24oJHEsIHBhY2tlckNhY2hlKSB7XG5cbiAgLyoqXG4gICAqIEBjbGFzcyBFeHRlbmRlZEFwaVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogUHJvdmlkZXMgYSBjb21tb24gZnJhbWV3b3JrICoqb24gdG9wKiogb2YgdGhlIHtAbGluayBSZWNvcmRBcGl9IGFuZCB7QGxpbmsgQ29sbGVjdGlvbkFwaX0uXG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHJlc29sdmVkIFRoZSBjb2xsZWN0aW9uIHJlc29sdmUgc3RhdHVzLCBpcyB1bmRlZmluZWQgb24gaW50aWFsaXphdGlvblxuICAgKi9cbiAgcmV0dXJuIHtcblxuICAgIC8vIG92ZXJyaWRlIGRlY29kZSB0byBkZXRlY3QgcmVzb2x1dGlvbiBvZiByZXNvdXJjZVxuICAgICRkZWNvZGU6IGZ1bmN0aW9uKF9yYXcsIF9tYXNrKSB7XG4gICAgICBpZih0aGlzLiRyZXNvbHZlZCA9PT0gZmFsc2UgJiYgdGhpcy4kY2xlYXIpIHRoaXMuJGNsZWFyKCk7IC8vIGNsZWFyIGlmIG5vdCByZXNvbHZlZC5cbiAgICAgIHRoaXMuJHN1cGVyKF9yYXcsIF9tYXNrKTtcbiAgICAgIHRoaXMuJHJlc29sdmVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLy8gTWlzYyBjb21tb24gbWV0aG9kc1xuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIEV4dGVuZGVkQXBpI1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBVbnBhY2tzIGFuZCBkZWNvZGUgcmF3IGRhdGEgZnJvbSBhIHNlcnZlciBnZW5lcmF0ZWQgc3RydWN0dXJlLlxuICAgICAqXG4gICAgICogQVRURU5USU9OOiBkbyBub3Qgb3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gY2hhbmdlIHRoZSBvYmplY3Qgd3JhcHBpbmcgc3RyYXRlZ3ksXG4gICAgICogaW5zdGVhZCwgb3ZlcnJpZGUgdGhlIHN0YXRpYyB7QGxpbmsgTW9kZWwuJHVucGFja30gbWV0aG9kLlxuICAgICAqXG4gICAgICogQHBhcmFtICB7bWl4ZWR9IF9yYXcgUmF3IHNlcnZlciBkYXRhXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSBfbWFzayAnQ1JVJyBtYXNrXG4gICAgICogQHJldHVybiB7RXh0ZW5kZWRBcGl9IHRoaXNcbiAgICAgKi9cbiAgICAkdW53cmFwOiBmdW5jdGlvbihfcmF3LCBfbWFzaykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcGFja2VyQ2FjaGUucHJlcGFyZSgpO1xuICAgICAgICBfcmF3ID0gdGhpcy4kdHlwZS51bnBhY2sodGhpcywgX3Jhdyk7XG4gICAgICAgIHJldHVybiB0aGlzLiRkZWNvZGUoX3JhdywgX21hc2spO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgcGFja2VyQ2FjaGUuY2xlYXIoKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIEV4dGVuZGVkQXBpI1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBFbmNvZGUgYW5kIHBhY2tzIG9iamVjdCBpbnRvIGEgc2VydmVyIGNvbXBhdGlibGUgc3RydWN0dXJlIHRoYXQgY2FuIGJlIHVzZWQgZm9yIFBVVC9QT1NUIG9wZXJhdGlvbnMuXG4gICAgICpcbiAgICAgKiBBVFRFTlRJT046IGRvIG5vdCBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byBjaGFuZ2UgdGhlIG9iamVjdCB3cmFwcGluZyBzdHJhdGVneSxcbiAgICAgKiBpbnN0ZWFkLCBvdmVycmlkZSB0aGUgc3RhdGljIHtAbGluayBNb2RlbC4kcGFja30gbWV0aG9kLlxuICAgICAqXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSBfbWFzayAnQ1JVJyBtYXNrXG4gICAgICogQHJldHVybiB7c3RyaW5nfSByYXcgZGF0YVxuICAgICAqL1xuICAgICR3cmFwOiBmdW5jdGlvbihfbWFzaykge1xuICAgICAgdmFyIHJhdyA9IHRoaXMuJGVuY29kZShfbWFzayk7XG4gICAgICByYXcgPSB0aGlzLiR0eXBlLnBhY2sodGhpcywgcmF3KTtcbiAgICAgIHJldHVybiByYXc7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBFeHRlbmRlZEFwaSNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBSZXNldHMgdGhlIHJlc291cmNlJ3MgJHJlc29sdmVkIHN0YXR1cy5cbiAgICAgKlxuICAgICAqIEFmdGVyIGJlaW5nIHJlc2V0LCBjYWxscyB0byBgJHJlc29sdmVgIHdpbGwgZXhlY3V0ZSBhIG5ldyAkZmV0Y2guXG4gICAgICpcbiAgICAgKiBBbHNvLCBpZiByZXNldCwgcmVzb3VyY2Ugd2lsbCBiZSBjbGVhcmVkIG9uIG5ldyBkYXRhLlxuICAgICAqXG4gICAgICogQHJldHVybiB7RXh0ZW5kZWRBcGl9IHNlbGZcbiAgICAgKi9cbiAgICAkcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gY2FuY2VsIG91dHNpZGUgcHJvbWlzZSBjaGFpblxuICAgICAgLy8gVE9ETzogZmluZCBhIHdheSBvZiBvbmx5IGlnbm9yaW5nIHJlcXVlc3RzIHRoYXQgd2lsbCBsZWFkIHRvIHJlc29sdXRpb24sIG1heWJlIHVzaW5nIGFjdGlvbiBtZXRhZGF0YVxuICAgICAgcmV0dXJuIHRoaXMuJGNhbmNlbCgpLiRhY3Rpb24oZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuJHJlc29sdmVkID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIEV4dGVuZGVkQXBpI1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIFJlc29sdmVzIHRoZSByZXNvdXJjZSdzIGNvbnRlbnRzLlxuICAgICAqXG4gICAgICogSWYgYWxyZWFkeSByZXNvbHZlZCB0aGVuIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGEgcmVzb2x2ZWQgcHJvbWlzZSwgaWYgbm90IHRoZW5cbiAgICAgKiBpdCB3aWxsIGluaXRpYXRlIGEgYCRmZXRjaGAgb3BlcmF0aW9uIGFuZCByZXR1cm4gdGhlIG9wZXJhdGlvbiBwcm9taXNlLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2Qgd2lsbCB0cmlnZ2VyIGEgYGJlZm9yZS1yZXNvbHZlYCBldmVudCBiZWZvcmUgY2hlY2tpbmcgdGhlIHJlc29sdmUgc3RhdHVzLlxuICAgICAqXG4gICAgICogQHBhcmFtICB7b2JqZWN0fSBfcGFyYW1zIGAkZmV0Y2hgIHBhcmFtc1xuICAgICAqIEByZXR1cm4ge3Byb21pc2V9IFByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgcmVzb3VyY2UuXG4gICAgICovXG4gICAgJHJlc29sdmU6IGZ1bmN0aW9uKF9wYXJhbXMpIHtcbiAgICAgIHJldHVybiB0aGlzLiRhY3Rpb24oZnVuY3Rpb24oKSB7IC8vIGNoYWluIHJlc29sdXRpb24gaW4gcmVxdWVzdCBwcm9taXNlIGNoYWluXG4gICAgICAgIHRoaXMuJGRpc3BhdGNoKCdiZWZvcmUtcmVzb2x2ZScsIFtdKTtcbiAgICAgICAgaWYoIXRoaXMuJHJlc29sdmVkKSB0aGlzLiRmZXRjaChfcGFyYW1zKTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgRXh0ZW5kZWRBcGkjXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gUmVzZXRzIGFuZCBmZXRjaGVzIHRoZSByZXNvdXJjZSBjb250ZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge29iamVjdH0gX3BhcmFtcyBgJGZldGNoYCBwYXJhbXNcbiAgICAgKiBAcmV0dXJuIHtFeHRlbmRlZEFwaX0gc2VsZlxuICAgICAqL1xuICAgICRyZWZyZXNoOiBmdW5jdGlvbihfcGFyYW1zKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVzZXQoKS4kZmV0Y2goX3BhcmFtcyk7XG4gICAgfVxuICB9O1xuXG59XSk7XG5STU1vZHVsZS5mYWN0b3J5KCdSTUxpc3RBcGknLCBbZnVuY3Rpb24oKSB7XG5cbiAgLyoqXG4gICAqIEBjbGFzcyBMaXN0QXBpXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvbiBDb21tb24gbWV0aG9kcyBmb3IgTGlzdHMgYW5kIENvbGxlY3Rpb25zLlxuICAgKi9cbiAgcmV0dXJuIHtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBMaXN0QXBpI1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEdlbmVyYXRlcyBhIG5ldyBsaXN0IGZyb20gdGhpcyBvbmUuXG4gICAgICpcbiAgICAgKiBJZiBjYWxsZWQgd2l0aG91dCBhcmd1bWVudHMsIHRoZSBsaXN0IGlzIHBvcHVwYXRlZCB3aXRoIHRoZSBzYW1lIGNvbnRlbnRzIGFzIHRoaXMgbGlzdC5cbiAgICAgKlxuICAgICAqIElmIHRoZXJlIGlzIGEgcGVuZGluZyBhc3luYyBvcGVyYXRpb24gb24gdGhlIGhvc3QgY29sbGVjdGlvbi9saXN0LCB0aGVuIHRoaXMgbWV0aG9kIHdpbGxcbiAgICAgKiByZXR1cm4gYW4gZW1wdHkgbGlzdCBhbmQgZmlsbCBpdCB3aGVuIHRoZSBhc3luYyBvcGVyYXRpb24gZmluaXNoZXMuIElmIHlvdSBkb24ndCBuZWVkIHRoZSBhc3luYyBiZWhhdmlvclxuICAgICAqIHRoZW4gdXNlIGAkdHlwZS5saXN0YCBkaXJlY3RseSB0byBnZW5lcmF0ZSBhIG5ldyBsaXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gX2ZpbHRlciBBIGZpbHRlciBmdW5jdGlvbiB0aGF0IHNob3VsZCByZXR1cm4gdGhlIGxpc3QgY29udGVudHMgYXMgYW4gYXJyYXkuXG4gICAgICogQHJldHVybiB7TGlzdEFwaX0gbGlzdFxuICAgICAqL1xuICAgICRhc0xpc3Q6IGZ1bmN0aW9uKF9maWx0ZXIpIHtcbiAgICAgIHZhciBsaXN0ID0gdGhpcy4kdHlwZS5saXN0KCksXG4gICAgICAgICAgcHJvbWlzZSA9IHRoaXMuJGFzUHJvbWlzZSgpO1xuXG4gICAgICAvLyBzZXQgdGhlIGxpc3QgaW5pdGlhbCBwcm9taXNlIHRvIHRoZSByZXNvbHV0aW9uIG9mIHRoZSBwYXJlbnQgcHJvbWlzZS5cbiAgICAgIGxpc3QuJHByb21pc2UgPSBwcm9taXNlLnRoZW4oZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgbGlzdC5wdXNoLmFwcGx5KGxpc3QsIF9maWx0ZXIgPyBfZmlsdGVyKF90aGlzKSA6IF90aGlzKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG4gIH07XG5cbn1dKTtcblJNTW9kdWxlLmZhY3RvcnkoJ1JNUmVjb3JkQXBpJywgWydSTVV0aWxzJywgZnVuY3Rpb24oVXRpbHMpIHtcblxuICAvKipcbiAgICogQGNsYXNzIFJlbGF0aW9uU2NvcGVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFNwZWNpYWwgc2NvcGUgYSByZWNvcmQgcHJvdmlkZXMgdG8gcmVzb3VyY2VzIHJlbGF0ZWQgdmlhIGhhc01hbnkgb3IgaGFzT25lIHJlbGF0aW9uLlxuICAgKi9cbiAgdmFyIFJlbGF0aW9uU2NvcGUgPSBmdW5jdGlvbihfc2NvcGUsIF90YXJnZXQsIF9wYXJ0aWFsKSB7XG4gICAgdGhpcy4kc2NvcGUgPSBfc2NvcGU7XG4gICAgdGhpcy4kdGFyZ2V0ID0gX3RhcmdldDtcbiAgICB0aGlzLiRwYXJ0aWFsID0gVXRpbHMuY2xlYW5VcmwoX3BhcnRpYWwpO1xuICB9O1xuXG4gIFJlbGF0aW9uU2NvcGUucHJvdG90eXBlID0ge1xuXG4gICAgJG5lc3RlZFVybDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gVXRpbHMuam9pblVybCh0aGlzLiRzY29wZS4kdXJsKCksIHRoaXMuJHBhcnRpYWwpO1xuICAgIH0sXG5cbiAgICAvLyB1cmwgaXMgbmVzdGVkIGZvciBjb2xsZWN0aW9ucyBhbmQgbmVzdGVkIHJlY29yZHNcbiAgICAkdXJsRm9yOiBmdW5jdGlvbihfcmVzb3VyY2UpIHtcbiAgICAgIGlmKF9yZXNvdXJjZS4kaXNDb2xsZWN0aW9uIHx8IHRoaXMuJHRhcmdldC5pc05lc3RlZCgpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRuZXN0ZWRVcmwoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLiR0YXJnZXQuJHVybEZvcihfcmVzb3VyY2UpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBhIHJlY29yZCdzIGZldGNoIHVybCBpcyBhbHdheXMgbmVzdGVkXG4gICAgJGZldGNoVXJsRm9yOiBmdW5jdGlvbigvKiBfcmVzb3VyY2UgKi8pIHtcbiAgICAgIHJldHVybiB0aGlzLiRuZXN0ZWRVcmwoKTtcbiAgICB9LFxuXG4gICAgLy8gY3JlYXRlIGlzIG5vdCBwb3NpYmxlIGluIG5lc3RlZCBtZW1iZXJzXG4gICAgJGNyZWF0ZVVybEZvcjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBjbGFzcyBSZWNvcmRBcGlcbiAgICogQGV4dGVuZHMgQ29tbW9uQXBpXG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSAkc2NvcGUgVGhlIHJlY29yZCdzIHNjb3BlIChzZWUge0BsaW5rIFNjb3BlQXBpfSlcbiAgICogQHByb3BlcnR5IHttaXhlZH0gJHBrIFRoZSByZWNvcmQncyBwcmltYXJ5IGtleVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogUHJvdmlkZXMgcmVjb3JkIHN5bmNocm9uaXphdGlvbiBhbmQgbWFuaXB1bGF0aW9uIG1ldGhvZHMuIFRoaXMgaXMgdGhlIGJhc2UgQVBJIGZvciBldmVyeSByZXN0bW9kIHJlY29yZC5cbiAgICpcbiAgICogVE9ETzogVGFsayBhYm91dCB0aGUgb2JqZWN0IGxpZmVjeWNsZS5cbiAgICpcbiAgICogIyMjIE9iamVjdCBsaWZlY3ljbGUgaG9va3NcbiAgICpcbiAgICogRm9yIGAkZmV0Y2hgOlxuICAgKlxuICAgKiAqIGJlZm9yZS1mZXRjaFxuICAgKiAqIGJlZm9yZS1yZXF1ZXN0XG4gICAqICogYWZ0ZXItcmVxdWVzdFstZXJyb3JdXG4gICAqICogYWZ0ZXItZmVlZCAob25seSBjYWxsZWQgaWYgbm8gZXJyb3JzKVxuICAgKiAqIGFmdGVyLWZldGNoWy1lcnJvcl1cbiAgICpcbiAgICogRm9yIGAkc2F2ZWAgd2hlbiBjcmVhdGluZzpcbiAgICpcbiAgICogKiBiZWZvcmUtcmVuZGVyXG4gICAqICogYmVmb3JlLXNhdmVcbiAgICogKiBiZWZvcmUtY3JlYXRlXG4gICAqICogYmVmb3JlLXJlcXVlc3RcbiAgICogKiBhZnRlci1yZXF1ZXN0Wy1lcnJvcl1cbiAgICogKiBhZnRlci1mZWVkIChvbmx5IGNhbGxlZCBpZiBubyBlcnJvcnMpXG4gICAqICogYWZ0ZXItY3JlYXRlWy1lcnJvcl1cbiAgICogKiBhZnRlci1zYXZlWy1lcnJvcl1cbiAgICpcbiAgICogRm9yIGAkc2F2ZWAgd2hlbiB1cGRhdGluZzpcbiAgICpcbiAgICogKiBiZWZvcmUtcmVuZGVyXG4gICAqICogYmVmb3JlLXNhdmVcbiAgICogKiBiZWZvcmUtdXBkYXRlXG4gICAqICogYmVmb3JlLXJlcXVlc3RcbiAgICogKiBhZnRlci1yZXF1ZXN0Wy1lcnJvcl1cbiAgICogKiBhZnRlci1mZWVkIChvbmx5IGNhbGxlZCBpZiBubyBlcnJvcnMpXG4gICAqICogYWZ0ZXItdXBkYXRlWy1lcnJvcl1cbiAgICogKiBhZnRlci1zYXZlWy1lcnJvcl1cbiAgICpcbiAgICogRm9yIGAkZGVzdHJveWA6XG4gICAqXG4gICAqICogYmVmb3JlLWRlc3Ryb3lcbiAgICogKiBiZWZvcmUtcmVxdWVzdFxuICAgKiAqIGFmdGVyLXJlcXVlc3RbLWVycm9yXVxuICAgKiAqIGFmdGVyLWRlc3Ryb3lbLWVycm9yXVxuICAgKlxuICAgKiBAcHJvcGVydHkge21peGVkfSAkcGsgVGhlIHJlY29yZCBwcmltYXJ5IGtleVxuICAgKiBAcHJvcGVydHkge29iamVjdH0gJHNjb3BlIFRoZSBjb2xsZWN0aW9uIHNjb3BlIChoaWVyYXJjaGljYWwgc2NvcGUsIG5vdCBhbmd1bGFyIHNjb3BlKVxuICAgKi9cblx0cmV0dXJuIHtcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBSZWNvcmRBcGkjXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gQ2FsbGVkIGJ5IHJlY29yZCBjb25zdHJ1Y3RvciBvbiBpbml0aWFsaXphdGlvbi5cbiAgICAgKlxuICAgICAqIE5vdGU6IElzIGJldHRlciB0byBhZGQgYSBob29rIHRvIGFmdGVyLWluaXQgdGhhbiBvdmVycmlkaW5nIHRoaXMgbWV0aG9kLlxuICAgICAqL1xuICAgICRpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGFwcGx5IGRlZmF1bHRzXG4gICAgICB0aGlzLiRzdXBlcigpO1xuXG4gICAgICAvLyBhZnRlciBpbml0aWFsaXphdGlvbiBob29rXG4gICAgICAvLyBUT0RPOiBwdXQgdGhpcyBvbiAkbmV3IHNvIGl0IGNhbiB1c2Ugc3RhY2tlZCBEU1A/XG4gICAgICB0aGlzLiRkaXNwYXRjaCgnYWZ0ZXItaW5pdCcpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgUmVjb3JkQXBpI1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIENhbGxlZCB0aGUgcmVzb3VyY2UncyBzY29wZSAkdXJsRm9yIG1ldGhvZCB0byBidWlsZCB0aGUgdXJsIGZvciB0aGUgcmVjb3JkIHVzaW5nIHRoZSBwcm9wZXIgc2NvcGUuXG4gICAgICpcbiAgICAgKiBCeSBkZWZhdWx0IHRoZSByZXNvdXJjZSBwYXJ0aWFsIHVybCBpcyBqdXN0IGl0cyBgJHBrYCBwcm9wZXJ0eS4gVGhpcyBjYW4gYmUgb3ZlcnJpZGVuIHRvIHByb3ZpZGUgb3RoZXIgcm91dGluZyBhcHByb2FjaGVzLlxuICAgICAqXG4gICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgcmVzb3VyY2UgcGFydGlhbCB1cmxcbiAgICAgKi9cbiAgICAkYnVpbGRVcmw6IGZ1bmN0aW9uKF9zY29wZSkge1xuICAgICAgcmV0dXJuICh0aGlzLiRwayA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuJHBrID09PSBudWxsKSA/IG51bGwgOiBVdGlscy5qb2luVXJsKF9zY29wZS4kdXJsKCksIHRoaXMuJHBrICsgJycpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgUmVjb3JkQXBpI1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIERlZmF1bHQgaXRlbSBjaGlsZCBzY29wZSBmYWN0b3J5LlxuICAgICAqXG4gICAgICogQnkgZGVmYXVsdCwgbm8gY3JlYXRlIHVybCBpcyBwcm92aWRlZCBhbmQgdGhlIHVwZGF0ZS9kZXN0cm95IHVybCBwcm92aWRlcnNcbiAgICAgKiBhdHRlbXB0IHRvIGZpcnN0IHVzZSB0aGUgdW5zY29wZWQgcmVzb3VyY2UgdXJsLlxuICAgICAqXG4gICAgICogLy8gVE9ETzogY3JlYXRlIHNwZWNpYWwgYXBpIHRvIGhvbGQgc2NvcGUgKHNvIGl0IGlzIG5vdCBuZWNlc3NhcnkgdG8gcmVjcmVhdGUgdGhlIHdob2xlIG9iamVjdCBldmVyeSB0aW1lLilcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bWl4ZWR9IF9mb3IgU2NvcGUgdGFyZ2V0IHR5cGUsIGFjY2VwdHMgYW55IG1vZGVsIGNsYXNzLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBfcGFydGlhbCBQYXJ0aWFsIHJvdXRlLlxuICAgICAqIEByZXR1cm4ge1JlbGF0aW9uU2NvcGV9IE5ldyBzY29wZS5cbiAgICAgKi9cbiAgICAkYnVpbGRTY29wZTogZnVuY3Rpb24oX2ZvciwgX3BhcnRpYWwpIHtcbiAgICAgIGlmKF9mb3IuJGJ1aWxkT3duU2NvcGUpIHtcbiAgICAgICAgLy8gVE9ET1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWxhdGlvblNjb3BlKHRoaXMsIF9mb3IsIF9wYXJ0aWFsKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIFJlY29yZEFwaSNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBJdGVyYXRlcyBvdmVyIHRoZSBvYmplY3Qgbm9uLXByaXZhdGUgcHJvcGVydGllc1xuICAgICAqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gX2Z1biBGdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoXG4gICAgICogQHJldHVybiB7UmVjb3JkQXBpfSBzZWxmXG4gICAgICovXG4gICAgJGVhY2g6IGZ1bmN0aW9uKF9mdW4sIF9jdHgpIHtcbiAgICAgIGZvcih2YXIga2V5IGluIHRoaXMpIHtcbiAgICAgICAgaWYodGhpcy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIGtleVswXSAhPT0gJyQnKSB7XG4gICAgICAgICAgX2Z1bi5jYWxsKF9jdHggfHwgdGhpc1trZXldLCB0aGlzW2tleV0sIGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBSZWNvcmRBcGkjXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gRmVlZCByYXcgZGF0YSB0byB0aGlzIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IF9yYXcgUmF3IGRhdGEgdG8gYmUgZmVkXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IF9tYXNrICdDUlUnIG1hc2tcbiAgICAgKiBAcmV0dXJuIHtSZWNvcmRBcGl9IHRoaXNcbiAgICAgKi9cbiAgICAkZGVjb2RlOiBmdW5jdGlvbihfcmF3LCBfbWFzaykge1xuICAgICAgLy8gSURFQTogbGV0IHVzZXIgb3ZlcnJpZGUgc2VyaWFsaXplclxuICAgICAgdGhpcy4kdHlwZS5kZWNvZGUodGhpcywgX3JhdywgX21hc2sgfHwgVXRpbHMuUkVBRF9NQVNLKTtcbiAgICAgIGlmKHRoaXMuJHBrID09PSB1bmRlZmluZWQgfHwgdGhpcy4kcGsgPT09IG51bGwpIHRoaXMuJHBrID0gdGhpcy4kdHlwZS5pbmZlcktleShfcmF3KTsgLy8gVE9ETzogd2FybiBpZiBrZXkgY2hhbmdlc1xuICAgICAgdGhpcy4kZGlzcGF0Y2goJ2FmdGVyLWZlZWQnLCBbX3Jhd10pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBSZWNvcmRBcGkjXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gR2VuZXJhdGUgZGF0YSB0byBiZSBzZW50IHRvIHRoZSBzZXJ2ZXIgd2hlbiBjcmVhdGluZy91cGRhdGluZyB0aGUgcmVzb3VyY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gX21hc2sgJ0NSVScgbWFza1xuICAgICAqIEByZXR1cm4ge3N0cmluZ30gcmF3IGRhdGFcbiAgICAgKi9cbiAgICAkZW5jb2RlOiBmdW5jdGlvbihfbWFzaykge1xuICAgICAgdmFyIHJhdyA9IHRoaXMuJHR5cGUuZW5jb2RlKHRoaXMsIF9tYXNrIHx8IFV0aWxzLkNSRUFURV9NQVNLKTtcbiAgICAgIHRoaXMuJGRpc3BhdGNoKCdiZWZvcmUtcmVuZGVyJywgW3Jhd10pO1xuICAgICAgcmV0dXJuIHJhdztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIFJlY29yZEFwaSNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBCZWdpbiBhIHNlcnZlciByZXF1ZXN0IGZvciB1cGRhdGVkIHJlc291cmNlIGRhdGEuXG4gICAgICpcbiAgICAgKiBUaGUgcmVxdWVzdCdzIHByb21pc2UgY2FuIGJlIGFjY2Vzc2VkIHVzaW5nIHRoZSBgJGFzUHJvbWlzZWAgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IF9wYXJhbXMgT3B0aW9uYWwgbGlzdCBvZiBwYXJhbXMgdG8gYmUgcGFzc2VkIHRvIG9iamVjdCByZXF1ZXN0LlxuICAgICAqIEByZXR1cm4ge1JlY29yZEFwaX0gdGhpc1xuICAgICAqL1xuICAgICRmZXRjaDogZnVuY3Rpb24oX3BhcmFtcykge1xuICAgICAgcmV0dXJuIHRoaXMuJGFjdGlvbihmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHVybCA9IHRoaXMuJHVybCgnZmV0Y2gnKTtcbiAgICAgICAgVXRpbHMuYXNzZXJ0KCEhdXJsLCAnQ2FudCAkZmV0Y2ggaWYgcmVzb3VyY2UgaXMgbm90IGJvdW5kJyk7XG5cbiAgICAgICAgdmFyIHJlcXVlc3QgPSB7IG1ldGhvZDogJ0dFVCcsIHVybDogdXJsLCBwYXJhbXM6IF9wYXJhbXMgfTtcblxuICAgICAgICB0aGlzLiRkaXNwYXRjaCgnYmVmb3JlLWZldGNoJywgW3JlcXVlc3RdKTtcbiAgICAgICAgdGhpcy4kc2VuZChyZXF1ZXN0LCBmdW5jdGlvbihfcmVzcG9uc2UpIHtcbiAgICAgICAgICB0aGlzLiR1bndyYXAoX3Jlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgIHRoaXMuJGRpc3BhdGNoKCdhZnRlci1mZXRjaCcsIFtfcmVzcG9uc2VdKTtcbiAgICAgICAgfSwgZnVuY3Rpb24oX3Jlc3BvbnNlKSB7XG4gICAgICAgICAgdGhpcy4kZGlzcGF0Y2goJ2FmdGVyLWZldGNoLWVycm9yJywgW19yZXNwb25zZV0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgUmVjb3JkQXBpI1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIENvcHlpZXMgYW5vdGhlciBvYmplY3QncyBub24tcHJpdmF0ZSBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgcnVucyBpbnNpZGUgdGhlIHByb21pc2UgY2hhaW4sIHNvIGNhbGxpbmdcbiAgICAgKlxuICAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAgKiBCaWtlLiRmaW5kKDEpLiRleHRlbmQoeyBzaXplOiBcIkxcIiB9KS4kc2F2ZSgpO1xuICAgICAqIGBgYFxuICAgICAqIFdpbGwgZmlyc3QgZmV0Y2ggdGhlIGJpa2UgZGF0YSBhbmQgYWZ0ZXIgaXQgaXMgbG9hZGVkIHRoZSBuZXcgc2l6ZSB3aWxsIGJlIGFwcGxpZWQgYW5kIHRoZW4gdGhlXG4gICAgICogdXBkYXRlZCBtb2RlbCBzYXZlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBfb3RoZXIgT2JqZWN0IHRvIG1lcmdlLlxuICAgICAqIEByZXR1cm4ge1JlY29yZEFwaX0gc2VsZlxuICAgICAqL1xuICAgICRleHRlbmQ6IGZ1bmN0aW9uKF9vdGhlcikge1xuICAgICAgcmV0dXJuIHRoaXMuJGFjdGlvbihmdW5jdGlvbigpIHtcbiAgICAgICAgZm9yKHZhciB0bXAgaW4gX290aGVyKSB7XG4gICAgICAgICAgaWYgKF9vdGhlci5oYXNPd25Qcm9wZXJ0eSh0bXApICYmIHRtcFswXSAhPT0gJyQnKSB7XG4gICAgICAgICAgICB0aGlzW3RtcF0gPSBfb3RoZXJbdG1wXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgUmVjb3JkQXBpI1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIFNob3J0Y3V0IG1ldGhvZCB1c2VkIHRvIGV4dGVuZCBhbmQgc2F2ZSBhIG1vZGVsLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2Qgd2lsbCBub3QgZm9yY2UgYSBQVVQsIGlmIG9iamVjdCBpcyBuZXcgYCR1cGRhdGVgIHdpbGwgYXR0ZW1wdCB0byBQT1NULlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IF9vdGhlciBEYXRhIHRvIGNoYW5nZVxuICAgICAqIEByZXR1cm4ge1JlY29yZEFwaX0gc2VsZlxuICAgICAqL1xuICAgICR1cGRhdGU6IGZ1bmN0aW9uKF9vdGhlcikge1xuICAgICAgcmV0dXJuIHRoaXMuJGV4dGVuZChfb3RoZXIpLiRzYXZlKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBSZWNvcmRBcGkjXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gQmVnaW4gYSBzZXJ2ZXIgcmVxdWVzdCB0byBjcmVhdGUvdXBkYXRlL3BhdGNoIHJlc291cmNlLlxuICAgICAqXG4gICAgICogQSBwYXRjaCBpcyBvbmx5IGV4ZWN1dGVkIGlmIG1vZGVsIGlzIGlkZW50aWZpZWQgYW5kIGEgcGF0Y2ggcHJvcGVydHkgbGlzdCBpcyBnaXZlbi4gSXQgaXMgcG9zaWJsZSB0b1xuICAgICAqIGNoYW5nZSB0aGUgbWV0aG9kIHVzZWQgZm9yIFBBVENIIG9wZXJhdGlvbnMgYnkgc2V0dGluZyB0aGUgYHBhdGNoTWV0aG9kYCBjb25maWd1cmF0aW9uLlxuICAgICAqXG4gICAgICogSWYgcmVzb3VyY2UgaXMgbmV3IGFuZCBpdCBiZWxvbmdzIHRvIGEgY29sbGVjdGlvbiBhbmQgaXQgaGFzbnQgYmVlbiByZXZlYWxlZCwgdGhlbiBpdCB3aWxsIGJlIHJldmVhbGVkLlxuICAgICAqXG4gICAgICogVGhlIHJlcXVlc3QncyBwcm9taXNlIGNhbiBiZSBhY2Nlc3NlZCB1c2luZyB0aGUgYCRhc1Byb21pc2VgIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7YXJyYXl9IF9wYXRjaCBPcHRpb25hbCBsaXN0IG9mIHByb3BlcnRpZXMgdG8gc2VuZCBpbiB1cGRhdGUgb3BlcmF0aW9uLlxuICAgICAqIEByZXR1cm4ge1JlY29yZEFwaX0gdGhpc1xuICAgICAqL1xuICAgICRzYXZlOiBmdW5jdGlvbihfcGF0Y2gpIHtcbiAgICAgIHJldHVybiB0aGlzLiRhY3Rpb24oZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB1cmwgPSB0aGlzLiR1cmwoJ3VwZGF0ZScpLCByZXF1ZXN0O1xuXG4gICAgICAgIGlmKHVybCkge1xuXG4gICAgICAgICAgLy8gSWYgYm91bmQsIHVwZGF0ZVxuICAgICAgICAgIGlmKF9wYXRjaCkge1xuICAgICAgICAgICAgcmVxdWVzdCA9IHtcbiAgICAgICAgICAgICAgbWV0aG9kOiB0aGlzLiR0eXBlLmdldFByb3BlcnR5KCdwYXRjaE1ldGhvZCcsICdQQVRDSCcpLCAvLyBhbGxvdyB1c2VyIHRvIG92ZXJyaWRlIHBhdGNoIG1ldGhvZFxuICAgICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgICAgLy8gVXNlIHNwZWNpYWwgbWFzayBmb3IgcGF0Y2hlcywgbWFzayBldmVyeXRoaW5nIHRoYXQgaXMgbm90IGluIHRoZSBwYXRjaCBsaXN0LlxuICAgICAgICAgICAgICBkYXRhOiB0aGlzLiR3cmFwKGZ1bmN0aW9uKF9uYW1lKSB7XG4gICAgICAgICAgICAgICAgX25hbWUgPSBfbmFtZS5yZXBsYWNlKCdbXScsICcnKTtcbiAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwLCBsID0gX3BhdGNoLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgaWYoX25hbWUgPT09IF9wYXRjaFtpXSB8fFxuICAgICAgICAgICAgICAgICAgICBfbmFtZS5pbmRleE9mKF9wYXRjaFtpXSArICcuJykgPT09IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgX3BhdGNoW2ldLmluZGV4T2YoX25hbWUgKyAnLicpID09PSAwXG4gICAgICAgICAgICAgICAgICApIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXF1ZXN0ID0geyBtZXRob2Q6ICdQVVQnLCB1cmw6IHVybCwgZGF0YTogdGhpcy4kd3JhcChVdGlscy5VUERBVEVfTUFTSykgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzXG4gICAgICAgICAgICAuJGRpc3BhdGNoKCdiZWZvcmUtdXBkYXRlJywgW3JlcXVlc3QsICEhX3BhdGNoXSlcbiAgICAgICAgICAgIC4kZGlzcGF0Y2goJ2JlZm9yZS1zYXZlJywgW3JlcXVlc3RdKVxuICAgICAgICAgICAgLiRzZW5kKHJlcXVlc3QsIGZ1bmN0aW9uKF9yZXNwb25zZSkge1xuICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICAgICAgLiR1bndyYXAoX3Jlc3BvbnNlLmRhdGEpXG4gICAgICAgICAgICAgICAgLiRkaXNwYXRjaCgnYWZ0ZXItdXBkYXRlJywgW19yZXNwb25zZSwgISFfcGF0Y2hdKVxuICAgICAgICAgICAgICAgIC4kZGlzcGF0Y2goJ2FmdGVyLXNhdmUnLCBbX3Jlc3BvbnNlXSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbihfcmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICAgICAgIC4kZGlzcGF0Y2goJ2FmdGVyLXVwZGF0ZS1lcnJvcicsIFtfcmVzcG9uc2UsICEhX3BhdGNoXSlcbiAgICAgICAgICAgICAgICAuJGRpc3BhdGNoKCdhZnRlci1zYXZlLWVycm9yJywgW19yZXNwb25zZV0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gSWYgbm90IGJvdW5kIGNyZWF0ZS5cbiAgICAgICAgICB1cmwgPSB0aGlzLiR1cmwoJ2NyZWF0ZScpIHx8IHRoaXMuJHNjb3BlLiR1cmwoKTtcbiAgICAgICAgICBVdGlscy5hc3NlcnQoISF1cmwsICdDYW50ICRjcmVhdGUgaWYgcGFyZW50IHNjb3BlIGlzIG5vdCBib3VuZCcpO1xuXG4gICAgICAgICAgcmVxdWVzdCA9IHsgbWV0aG9kOiAnUE9TVCcsIHVybDogdXJsLCBkYXRhOiB0aGlzLiR3cmFwKFV0aWxzLkNSRUFURV9NQVNLKSB9O1xuICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgIC4kZGlzcGF0Y2goJ2JlZm9yZS1zYXZlJywgW3JlcXVlc3RdKVxuICAgICAgICAgICAgLiRkaXNwYXRjaCgnYmVmb3JlLWNyZWF0ZScsIFtyZXF1ZXN0XSlcbiAgICAgICAgICAgIC4kc2VuZChyZXF1ZXN0LCBmdW5jdGlvbihfcmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgdGhpcy4kdW53cmFwKF9yZXNwb25zZS5kYXRhKTtcblxuICAgICAgICAgICAgICAvLyByZXZlYWwgaXRlbSAoaWYgbm90IHlldCBwb3NpdGlvbmVkKVxuICAgICAgICAgICAgICBpZih0aGlzLiRzY29wZS4kaXNDb2xsZWN0aW9uICYmIHRoaXMuJHBvc2l0aW9uID09PSB1bmRlZmluZWQgJiYgIXRoaXMuJHByZXZlbnRSZXZlYWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRzY29wZS4kYWRkKHRoaXMsIHRoaXMuJHJldmVhbEF0KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgICAgICAuJGRpc3BhdGNoKCdhZnRlci1jcmVhdGUnLCBbX3Jlc3BvbnNlXSlcbiAgICAgICAgICAgICAgICAuJGRpc3BhdGNoKCdhZnRlci1zYXZlJywgW19yZXNwb25zZV0pO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24oX3Jlc3BvbnNlKSB7XG4gICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgICAgICAuJGRpc3BhdGNoKCdhZnRlci1jcmVhdGUtZXJyb3InLCBbX3Jlc3BvbnNlXSlcbiAgICAgICAgICAgICAgICAuJGRpc3BhdGNoKCdhZnRlci1zYXZlLWVycm9yJywgW19yZXNwb25zZV0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgUmVjb3JkQXBpI1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEJlZ2luIGEgc2VydmVyIHJlcXVlc3QgdG8gZGVzdHJveSB0aGUgcmVzb3VyY2UuXG4gICAgICpcbiAgICAgKiBUaGUgcmVxdWVzdCdzIHByb21pc2UgY2FuIGJlIGFjY2Vzc2VkIHVzaW5nIHRoZSBgJGFzUHJvbWlzZWAgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHJldHVybiB7UmVjb3JkQXBpfSB0aGlzXG4gICAgICovXG4gICAgJGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJGFjdGlvbihmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHVybCA9IHRoaXMuJHVybCgnZGVzdHJveScpO1xuICAgICAgICBpZih1cmwpXG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgcmVxdWVzdCA9IHsgbWV0aG9kOiAnREVMRVRFJywgdXJsOiB1cmwgfTtcblxuICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgIC4kZGlzcGF0Y2goJ2JlZm9yZS1kZXN0cm95JywgW3JlcXVlc3RdKVxuICAgICAgICAgICAgLiRzZW5kKHJlcXVlc3QsIGZ1bmN0aW9uKF9yZXNwb25zZSkge1xuXG4gICAgICAgICAgICAgIC8vIHJlbW92ZSBmcm9tIHNjb3BlXG4gICAgICAgICAgICAgIGlmKHRoaXMuJHNjb3BlLiRyZW1vdmUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRzY29wZS4kcmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdGhpcy4kZGlzcGF0Y2goJ2FmdGVyLWRlc3Ryb3knLCBbX3Jlc3BvbnNlXSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbihfcmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgdGhpcy4kZGlzcGF0Y2goJ2FmdGVyLWRlc3Ryb3ktZXJyb3InLCBbX3Jlc3BvbnNlXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAvLyBJZiBub3QgeWV0IGJvdW5kLCBqdXN0IHJlbW92ZSBmcm9tIHBhcmVudFxuICAgICAgICAgIGlmKHRoaXMuJHNjb3BlLiRyZW1vdmUpIHRoaXMuJHNjb3BlLiRyZW1vdmUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvLyBDb2xsZWN0aW9uIHJlbGF0ZWQgbWV0aG9kcy5cblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBSZWNvcmRBcGkjXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gQ2hhbmdlcyB0aGUgbG9jYXRpb24gb2YgdGhlIG9iamVjdCBpbiB0aGUgYm91bmQgY29sbGVjdGlvbi5cbiAgICAgKlxuICAgICAqIElmIG9iamVjdCBoYXNuJ3QgYmVlbiByZXZlYWxlZCwgdGhlbiB0aGlzIG1ldGhvZCB3aWxsIGNoYW5nZSB0aGUgaW5kZXggd2hlcmUgb2JqZWN0IHdpbGwgYmUgcmV2ZWFsZWQgYXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtpbnRlZ2VyfSBfdG8gTmV3IG9iamVjdCBwb3NpdGlvbiAoaW5kZXgpXG4gICAgICogQHJldHVybiB7UmVjb3JkQXBpfSB0aGlzXG4gICAgICovXG4gICAgJG1vdmVUbzogZnVuY3Rpb24oX3RvKSB7XG4gICAgICBpZih0aGlzLiRwb3NpdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIFRPRE86IG1vdmUgaXRlbSB0byBnaXZlbiBpbmRleC5cbiAgICAgICAgLy8gVE9ETzogY2FsbGJhY2tcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJHJldmVhbEF0ID0gX3RvO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBSZWNvcmRBcGkjXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gUmV2ZWFsIGluIGNvbGxlY3Rpb25cbiAgICAgKlxuICAgICAqIElmIGluc3RhbmNlIGlzIGJvdW5kIHRvIGEgY29sbGVjdGlvbiBhbmQgaXQgaGFzbnQgYmVlbiByZXZlYWxlZCAoYmVjYXVzZSBpdCdzIG5ldyBhbmQgaGFzbid0IGJlZW4gc2F2ZWQpLFxuICAgICAqIHRoZW4gY2FsbGluZyB0aGlzIG1ldGhvZCB3aXRob3V0IHBhcmFtZXRlcnMgd2lsbCBmb3JjZSB0aGUgb2JqZWN0IHRvIGJlIGFkZGVkIHRvIHRoZSBjb2xsZWN0aW9uLlxuICAgICAqXG4gICAgICogSWYgdGhpcyBtZXRob2QgaXMgY2FsbGVkIHdpdGggKipfc2hvdyoqIHNldCB0byBgZmFsc2VgLCB0aGVuIHRoZSBvYmplY3Qgd29udCBiZSByZXZlYWxlZCBieSBhIHNhdmUgb3BlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtICB7Ym9vbGVhbn0gX3Nob3cgV2hldGhlciB0byByZXZlYWwgaW5tZWRpYXRlbGx5IG9yIHByZXZlbnQgYXV0b21hdGljIHJldmVhbC5cbiAgICAgKiBAcmV0dXJuIHtSZWNvcmRBcGl9IHRoaXNcbiAgICAgKi9cbiAgICAkcmV2ZWFsOiBmdW5jdGlvbihfc2hvdykge1xuICAgICAgaWYoX3Nob3cgPT09IHVuZGVmaW5lZCB8fCBfc2hvdykge1xuICAgICAgICB0aGlzLiRzY29wZS4kYWRkKHRoaXMsIHRoaXMuJHJldmVhbEF0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJHByZXZlbnRSZXZlYWwgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xuXG59XSk7XG5STU1vZHVsZS5mYWN0b3J5KCdSTVNjb3BlQXBpJywgWydSTVV0aWxzJywgZnVuY3Rpb24oVXRpbHMpIHtcblxuICAvKipcbiAgICogQGNsYXNzIFNjb3BlQXBpXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvbiBDb21tb24gYmVoYXZpb3VyIGZvciByZWNvcmQgc2NvcGVzLlxuICAgKlxuICAgKiBSZWNvcmQgc2NvcGVzIGFyZSBzdGFydGluZyBwb2ludHMgZm9yIHJlY29yZCBvcGVyYXRpb25zIChsaWtlIGJhc2UgdHlwZSBvciBhIGNvbGxlY3Rpb24pXG4gICAqXG4gICAqIFRPRE86IFRhbGsgYWJvdXQgcmVjb3JkIGJ1aWxkaW5nIGhlcmVcbiAgICovXG4gIHJldHVybiB7XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgU2NvcGVBcGkjXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gcHJvdmlkZXMgdXJscyBmb3Igc2NvcGUncyByZXNvdXJjZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge21peGVkfSBfcmVzb3VyY2UgVGhlIHRhcmdldCByZXNvdXJjZS5cbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd8bnVsbH0gVGhlIHVybCBvciBuaWxsIGlmIHJlc291cmNlIGRvZXMgbm90IG1lZXQgdGhlIHVybCByZXF1aXJlbWVudHMuXG4gICAgICovXG4gICAgJHVybEZvcjogZnVuY3Rpb24oX3Jlc291cmNlKSB7XG4gICAgICAvLyBmb3JjZSBpdGVtIHVuc2NvcGluZyBpZiBtb2RlbCBpcyBub3QgbmVzdGVkIChtYXliZSBtYWtlIHRoaXMgb3B0aW9uYWwpXG4gICAgICB2YXIgc2NvcGUgPSB0aGlzLiR0eXBlLmlzTmVzdGVkKCkgPyB0aGlzIDogdGhpcy4kdHlwZTtcbiAgICAgIHJldHVybiB0eXBlb2YgX3Jlc291cmNlLiRidWlsZFVybCA9PT0gJ2Z1bmN0aW9uJyA/IF9yZXNvdXJjZS4kYnVpbGRVcmwoc2NvcGUpIDogc2NvcGUuJHVybCgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgU2NvcGVBcGkjXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gQnVpbGRzIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgbW9kZWwsIGJvdW5kIHRvIHRoaXMgaW5zdGFuY2Ugc2NvcGUsIHNldHMgaXRzIHByaW1hcnkga2V5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHttaXhlZH0gX3BrIG9iamVjdCBwcml2YXRlIGtleVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBfc2NvcGUgc2NvcGUgb3ZlcnJpZGUgKG9wdGlvbmFsKVxuICAgICAqIEByZXR1cm4ge1JlY29yZEFwaX0gTmV3IG1vZGVsIGluc3RhbmNlXG4gICAgICovXG4gICAgJG5ldzogZnVuY3Rpb24oX3BrLCBfc2NvcGUpIHtcbiAgICAgIHJldHVybiB0aGlzLiRzdXBlcihfcGssIF9zY29wZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBTY29wZUFwaSNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBCdWlsZHMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhpcyBtb2RlbCwgZG9lcyBub3QgYXNzaWduIGEgcGsgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQVRURU5USU9OOiBpdGVtIHdpbGwgbm90IHNob3cgaW4gY29sbGVjdGlvbiB1bnRpbCBgJHNhdmVgIGlzIGNhbGxlZC4gVG8gcmV2ZWFsIGl0ZW0gYmVmb3JlIHRoYW4gY2FsbCBgJHJldmVhbGAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9IF9pbml0IEluaXRpYWwgdmFsdWVzXG4gICAgICogQHJldHVybiB7UmVjb3JkQXBpfSBzaW5nbGUgcmVjb3JkXG4gICAgICovXG4gICAgJGJ1aWxkOiBmdW5jdGlvbihfaW5pdCkge1xuICAgICAgcmV0dXJuIHRoaXMuJG5ldygpLiRleHRlbmQoX2luaXQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgU2NvcGVBcGkjXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gQnVpbGRzIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgbW9kZWwgdXNpbmcgdW5kZWNvZGVkIGRhdGEuXG4gICAgICpcbiAgICAgKiBBVFRFTlRJT046IGRvZXMgbm90IGF1dG9tYXRpY2FsbHkgcmV2ZWFsIGl0ZW0gaW4gY29sbGVjdGlvbiwgY2hhaW4gYSBjYWxsIHRvICRyZXZlYWwgdG8gZG8gc28uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9IF9yYXcgVW5kZWNvZGVkIGRhdGFcbiAgICAgKiBAcmV0dXJuIHtSZWNvcmRBcGl9IHNpbmdsZSByZWNvcmRcbiAgICAgKi9cbiAgICAkYnVpbGRSYXc6IGZ1bmN0aW9uKF9yYXcsIF9tYXNrKSB7XG4gICAgICB2YXIgb2JqID0gdGhpcy4kbmV3KHRoaXMuJHR5cGUuaW5mZXJLZXkoX3JhdykpO1xuICAgICAgb2JqLiRkZWNvZGUoX3JhdywgX21hc2spO1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIFNjb3BlQXBpI1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEF0dGVtcHRzIHRvIHJlc29sdmUgYSByZXNvdXJjZSB1c2luZyBwcm92aWRlZCBwcml2YXRlIGtleS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bWl4ZWR9IF9wayBQcml2YXRlIGtleVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBfcGFyYW1zIEFkZGl0aW9uYWwgcXVlcnkgcGFyYW1ldGVyc1xuICAgICAqIEByZXR1cm4ge1JlY29yZEFwaX0gc2luZ2xlIHJlY29yZFxuICAgICAqL1xuICAgICRmaW5kOiBmdW5jdGlvbihfcGssIF9wYXJhbXMpIHtcbiAgICAgIHJldHVybiB0aGlzLiRuZXcoX3BrKS4kcmVzb2x2ZShfcGFyYW1zKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIFNjb3BlQXBpI1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEJ1aWxkcyBhbmQgc2F2ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhpcyBtb2RlbFxuICAgICAqXG4gICAgICogQHBhcmFtICB7b2JqZWN0fSBfYXR0ciBEYXRhIHRvIGJlIHNhdmVkXG4gICAgICogQHJldHVybiB7UmVjb3JkQXBpfSBzaW5nbGUgcmVjb3JkXG4gICAgICovXG4gICAgJGNyZWF0ZTogZnVuY3Rpb24oX2F0dHIpIHtcbiAgICAgIHJldHVybiB0aGlzLiRidWlsZChfYXR0cikuJHNhdmUoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIFNjb3BlQXBpI1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEJ1aWxkcyBhIG5ldyBjb2xsZWN0aW9uIGJvdW5kIHRvIHRoaXMgc2NvcGUuXG4gICAgICpcbiAgICAgKiBJZiBzY29wZSBpcyBhbm90aGVyIGNvbGxlY3Rpb24gdGhlbiBpdCB3aWxsIGluaGVyaXQgaXRzIHBhcmFtZXRlcnNcbiAgICAgKlxuICAgICAqIENvbGxlY3Rpb25zIGFyZSBib3VuZCB0byBhbiBhcGkgcmVzb3VyY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9IF9wYXJhbXMgIEFkZGl0aW9uYWwgcXVlcnkgc3RyaW5nIHBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9IF9zY29wZSAgU2NvcGUgb3ZlcnJpZGUgKG9wdGlvbmFsKVxuICAgICAqIEByZXR1cm4ge0NvbGxlY3Rpb25BcGl9IE1vZGVsIENvbGxlY3Rpb25cbiAgICAgKi9cbiAgICAkY29sbGVjdGlvbjogZnVuY3Rpb24oX3BhcmFtcywgX3Njb3BlKSB7XG4gICAgICByZXR1cm4gdGhpcy4kc3VwZXIoX3BhcmFtcywgX3Njb3BlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIFNjb3BlQXBpI1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEdlbmVyYXRlcyBhIG5ldyBjb2xsZWN0aW9uIGJvdW5kIHRvIHRoaXMgY29udGV4dCBhbmQgdXJsIGFuZCBjYWxscyAkZmV0Y2ggb24gaXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gX3BhcmFtcyBDb2xsZWN0aW9uIHBhcmFtZXRlcnNcbiAgICAgKiBAcmV0dXJuIHtDb2xsZWN0aW9uQXBpfSByZWNvcmQgY29sbGVjdGlvblxuICAgICAqL1xuICAgICRzZWFyY2g6IGZ1bmN0aW9uKF9wYXJhbXMpIHtcbiAgICAgIHJldHVybiB0aGlzLiRjb2xsZWN0aW9uKF9wYXJhbXMpLiRmZXRjaCgpO1xuICAgIH1cbiAgfTtcblxufV0pO1xuUk1Nb2R1bGUuZmFjdG9yeSgnUk1CdWlsZGVyJywgWyckaW5qZWN0b3InLCAnaW5mbGVjdG9yJywgJyRsb2cnLCAnUk1VdGlscycsIGZ1bmN0aW9uKCRpbmplY3RvciwgaW5mbGVjdG9yLCAkbG9nLCBVdGlscykge1xuXG4gIC8vIFRPRE86IGFkZCB1cmxQcmVmaXggb3B0aW9uXG5cbiAgdmFyIGZvckVhY2ggPSBhbmd1bGFyLmZvckVhY2gsXG4gICAgICBpc09iamVjdCA9IGFuZ3VsYXIuaXNPYmplY3QsXG4gICAgICBpc0FycmF5ID0gYW5ndWxhci5pc0FycmF5LFxuICAgICAgaXNGdW5jdGlvbiA9IGFuZ3VsYXIuaXNGdW5jdGlvbixcbiAgICAgIGV4dGVuZCA9IGFuZ3VsYXIuZXh0ZW5kLFxuICAgICAgVkFSX1JHWCA9IC9eW0EtWl0rW0EtWl8wLTldKiQvO1xuXG4gIC8qKlxuICAgKiBAY2xhc3MgQnVpbGRlckFwaVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogUHJvdmlkZXMgdGhlIERTTCBmb3IgbW9kZWwgZ2VuZXJhdGlvbiwgaXQgc3VwcG9ydHMgdG8gbW9kZXMgb2YgbW9kZWwgZGVmaW5pdGlvbnM6XG4gICAqXG4gICAqICMjIERlZmluaXRpb24gb2JqZWN0XG4gICAqXG4gICAqIFRoaXMgaXMgdGhlIHByZWZlcnJlZCB3YXkgb2YgZGVzY3JpYmluZyBhIG1vZGVsIGJlaGF2aW9yLlxuICAgKlxuICAgKiBBIG1vZGVsIGRlc2NyaXB0aW9uIG9iamVjdCBsb29rcyBsaWtlIHRoaXM6XG4gICAqXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogcmVzdG1vZC5tb2RlbCh7XG4gICAqXG4gICAqICAgLy8gTU9ERUwgQ09ORklHVVJBVElPTlxuICAgKlxuICAgKiAgICRjb25maWc6IHtcbiAgICogICAgIG5hbWU6ICdyZXNvdXJjZScsXG4gICAqICAgICBwcmltYXJ5S2V5OiAnX2lkJ1xuICAgKiAgIH0sXG4gICAqXG4gICAqICAgLy8gQVRUUklCVVRFIE1PRElGSUVSUyBBTkQgUkVMQVRJT05TXG4gICAqXG4gICAqICAgcHJvcFdpdGhEZWZhdWx0OiB7IGluaXQ6IDIwIH0sXG4gICAqICAgcHJvcFdpdGhEZWNvZGVyOiB7IGRlY29kZTogJ2RhdGUnLCBjaGFpbjogdHJ1ZSB9LFxuICAgKiAgIGhhc01hbnlSZWxhdGlvbjogeyBoYXNNYW55OiAnT3RoZXInIH0sXG4gICAqICAgaGFzT25lUmVsYXRpb246IHsgaGFzT25lOiAnT3RoZXInIH0sXG4gICAqXG4gICAqICAgLy8gSE9PS1NcbiAgICpcbiAgICogICAkaG9va3M6IHtcbiAgICogICAgICdhZnRlci1jcmVhdGUnOiBmdW5jdGlvbigpIHtcbiAgICogICAgIH1cbiAgICogICB9LFxuICAgKlxuICAgKiAgIC8vIE1FVEhPRFNcbiAgICpcbiAgICogICAkZXh0ZW5kOiB7XG4gICAqICAgICBSZWNvcmQ6IHtcbiAgICogICAgICAgaW5zdGFuY2VNZXRob2Q6IGZ1bmN0aW9uKCkge1xuICAgKiAgICAgICB9XG4gICAqICAgICB9LFxuICAgKiAgICAgTW9kZWw6IHtcbiAgICogICAgICAgc2NvcGVNZXRob2Q6IGZ1bmN0aW9uKCkge1xuICAgKiAgICAgICB9XG4gICAqICAgICB9XG4gICAqICAgfVxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIFNwZWNpYWwgbW9kZWwgY29uZmlndXJhdGlvbiB2YXJpYWJsZXMgY2FuIGJlIHNldCBieSB1c2luZyBhIGAkY29uZmlnYCBibG9jazpcbiAgICpcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiByZXN0bW9kLm1vZGVsKHtcbiAgICpcbiAgICogICAkY29uZmlnOiB7XG4gICAqICAgICBuYW1lOiAncmVzb3VyY2UnLFxuICAgKiAgICAgcHJpbWFyeUtleTogJ19pZCdcbiAgICogICB9XG4gICAqXG4gICAqICB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIFdpdGggdGhlIGV4Y2VwdGlvbiBvZiBtb2RlbCBjb25maWd1cmF0aW9uIHZhcmlhYmxlcyBhbmQgcHJvcGVydGllcyBzdGFydGluZyB3aXRoIGEgc3BlY2lhbCBjaGFyYWN0ZXIgKCoqQCoqIG9yICoqfioqKSxcbiAgICogZWFjaCBwcm9wZXJ0eSBpbiB0aGUgZGVmaW5pdGlvbiBvYmplY3QgYXNpZ25zIGEgYmVoYXZpb3IgdG8gdGhlIHNhbWUgbmFtZWQgcHJvcGVydHkgaW4gYSBtb2RlbCdzIHJlY29yZC5cbiAgICpcbiAgICogVG8gbW9kaWZ5IGEgcHJvcGVydHkgYmVoYXZpb3IgYXNzaWduIGFuIG9iamVjdCB3aXRoIHRoZSBkZXNpcmVkIG1vZGlmaWVycyB0byBhXG4gICAqIGRlZmluaXRpb24gcHJvcGVydHkgd2l0aCB0aGUgc2FtZSBuYW1lLiBCdWlsdGluIG1vZGlmaWVycyBhcmU6XG4gICAqXG4gICAqIFRoZSBmb2xsb3dpbmcgYnVpbHQgaW4gcHJvcGVydHkgbW9kaWZpZXJzIGFyZSBwcm92aWRlZCAoc2VlIGVhY2ggbWFwcGVkLW1ldGhvZCBkb2NzIGZvciB1c2FnZSBpbmZvcm1hdGlvbik6XG4gICAqXG4gICAqICogYGluaXRgIHNldHMgYW4gYXR0cmlidXRlIGRlZmF1bHQgdmFsdWUsIHNlZSB7QGxpbmsgQnVpbGRlckFwaSNhdHRyRGVmYXVsdH1cbiAgICogKiBgbWFza2AgYW5kIGBpZ25vcmVgIHNldHMgYW4gYXR0cmlidXRlIG1hc2ssIHNlZSB7QGxpbmsgQnVpbGRlckFwaSNhdHRyTWFza31cbiAgICogKiBgbWFwYCBzZXRzIGFuIGV4cGxpY2l0IHNlcnZlciBhdHRyaWJ1dGUgbWFwcGluZywgc2VlIHtAbGluayBCdWlsZGVyQXBpI2F0dHJNYXB9XG4gICAqICogYGRlY29kZWAgc2V0cyBob3cgYW4gYXR0cmlidXRlIGlzIGRlY29kZWQgYWZ0ZXIgYmVpbmcgZmV0Y2gsIG1hcHMgdG8ge0BsaW5rIEJ1aWxkZXJBcGkjYXR0ckRlY29kZXJ9XG4gICAqICogYGVuY29kZWAgc2V0cyBob3cgYW4gYXR0cmlidXRlIGlzIGVuY29kZWQgYmVmb3JlIGJlaW5nIHNlbnQsIG1hcHMgdG8ge0BsaW5rIEJ1aWxkZXJBcGkjYXR0ckVuY29kZXJ9XG4gICAqICogYHZvbGF0aWxlYCBzZXRzIHRoZSBhdHRyaWJ1dGUgdm9sYXRpbGl0eSwgbWFwcyB0byB7QGxpbmsgQnVpbGRlckFwaSNhdHRyVm9sYXRpbGV9XG4gICAqXG4gICAqICoqRm9yIHJlbGF0aW9ucyBtb2RpZmllcnMgdGFrZSBhIGxvb2sgYXQge0BsaW5rIFJlbGF0aW9uQnVpbGRlckFwaX0qKlxuICAgKlxuICAgKiAqKkZvciBvdGhlciBleHRlbmRlZCBidW5kbGVkIG1ldGhvZHMgY2hlY2sgb3V0IHRoZSB7QGxpbmsgRXh0ZW5kZWRCdWlsZGVyQXBpfSoqXG4gICAqXG4gICAqIElmIG90aGVyIGtpbmQgb2YgdmFsdWUgKGRpZmZlcmVudCBmcm9tIG9iamVjdCBvciBmdW5jdGlvbikgaXMgcGFzc2VkIHRvIGEgZGVmaW5pdGlvbiBwcm9wZXJ0eSxcbiAgICogdGhlbiBpdCBpcyBjb25zaWRlcmVkIHRvIGJlIGEgZGVmYXVsdCB2YWx1ZS4gKHNhbWUgYXMgY2FsbGluZyB7QGxpbmsgQnVpbGRlckFwaSNkZWZpbmV9IGF0IGEgZGVmaW5pdGlvbiBmdW5jdGlvbilcbiAgICpcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiB2YXIgTW9kZWwgPSByZXN0bW9kLm1vZGVsKCcvJywge1xuICAgKiAgIGltMjA6IDIwIC8vIHNhbWUgYXMgeyBpbml0OiAyMCB9XG4gICAqIH0pXG4gICAqXG4gICAqIC8vIHRoZW4gc2F5IGhlbGxvIGlzIGF2YWlsYWJsZSBmb3IgdXNlIGF0IG1vZGVsIHJlY29yZHNcbiAgICogTW9kZWwuJG5ldygpLmltMjA7IC8vIDIwXG4gICAqIGBgYFxuICAgKlxuICAgKiBUbyBhZGQvb3ZlcnJpZGUgbWV0aG9kcyBmcm9tIHRoZSByZWNvcmQgYXBpLCB1c2UgdGhlIGAkZXh0ZW5kYCBibG9jazpcbiAgICpcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiB2YXIgTW9kZWwgPSByZXN0bW9kLm1vZGVsKCcvJywge1xuICAgKiAgICRleHRlbmQ6IHtcbiAgICogICAgIHNheUhlbGxvOiBmdW5jdGlvbigpIHsgYWxlcnQoJ2hlbGxvIScpOyB9XG4gICAqICAgfVxuICAgKiB9KVxuICAgKlxuICAgKiAvLyB0aGVuIHNheSBoZWxsbyBpcyBhdmFpbGFibGUgZm9yIHVzZSBhdCBtb2RlbCByZWNvcmRzXG4gICAqIE1vZGVsLiRuZXcoKS5zYXlIZWxsbygpO1xuICAgKiBgYGBcbiAgICpcbiAgICogVG8gYWRkIGEgc3RhdGljIG1ldGhvZCBvciBhIGNvbGxlY3Rpb24gbWV0aG9kLCB5b3UgbXVzdCBzcGVjaWZ5IHRoZSBtZXRob2Qgc2NvcGU6ICwgcHJlZml4IHRoZSBkZWZpbml0aW9uIGtleSB3aXRoICoqXioqLCB0byBhZGQgaXQgdG8gdGhlIG1vZGVsIGNvbGxlY3Rpb24gcHJvdG90eXBlLFxuICAgKiBwcmVmaXggaXQgd2l0aCAqKioqKiBzdGF0aWMvY29sbGVjdGlvbiBtZXRob2RzIHRvIHRoZSBNb2RlbCwgcHJlZml4IHRoZSBkZWZpbml0aW9uIHByb3BlcnR5IG5hbWUgd2l0aCAqKkAqKlxuICAgKiAoc2FtZSBhcyBjYWxsaW5nIHtAbGluayBCdWlsZGVyQXBpI3Njb3BlRGVmaW5lfSBhdCBhIGRlZmluaXRpb24gZnVuY3Rpb24pLlxuICAgKlxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIHZhciBNb2RlbCA9IHJlc3Rtb2QubW9kZWwoJy8nLCB7XG4gICAqICAgJGV4dGVuZDoge1xuICAgKiAgICAgJ0NvbGxlY3Rpb24uY291bnQnOiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMubGVuZ3RoOyB9LCAgLy8gc2NvcGUgaXMgc2V0IHVzaW5nIGEgcHJlZml4XG4gICAqXG4gICAqICAgICBNb2RlbDoge1xuICAgKiAgICAgICBzYXlIZWxsbzogZnVuY3Rpb24oKSB7IGFsZXJ0KCdoZWxsbyEnKTsgfSAvLyBzY29wZSBpcyBzZXQgdXNpbmcgYSBibG9ja1xuICAgKiAgICAgfVxuICAgKiB9KVxuICAgKlxuICAgKiAvLyB0aGVuIHRoZSBmb2xsb3dpbmcgY2FsbCB3aWxsIGJlIHZhbGlkLlxuICAgKiBNb2RlbC5zYXlIZWxsbygpO1xuICAgKiBNb2RlbC4kY29sbGVjdGlvbigpLmNvdW50KCk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBNb3JlIGluZm9ybWF0aW9uIGFib3V0IG1ldGhvZCBzY29wZXMgY2FuIGJlIGZvdW5kIGluIHtAbGluayBCdWlsZGVyQXBpI2RlZmluZX1cbiAgICpcbiAgICogVG8gYWRkIGhvb2tzIHRvIHRoZSBNb2RlbCBsaWZlY3ljbGUgZXZlbnRzIHVzZSB0aGUgYCRob29rc2AgYmxvY2s6XG4gICAqXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogdmFyIE1vZGVsID0gcmVzdG1vZC5tb2RlbCgnLycsIHtcbiAgICogICAkaG9va3M6IHtcbiAgICogICAgICdhZnRlci1pbml0JzogZnVuY3Rpb24oKSB7IGFsZXJ0KCdoZWxsbyEnKTsgfVxuICAgKiAgIH1cbiAgICogfSlcbiAgICpcbiAgICogLy8gdGhlIGFmdGVyLWluaXQgaG9vayBpcyBjYWxsZWQgYWZ0ZXIgZXZlcnkgcmVjb3JkIGluaXRpYWxpemF0aW9uLlxuICAgKiBNb2RlbC4kbmV3KCk7IC8vIGFsZXJ0cyAnaGVsbG8hJztcbiAgICogYGBgXG4gICAqXG4gICAqICMjIERlZmluaXRpb24gZnVuY3Rpb25cbiAgICpcbiAgICogVGhlIGRlZmluaXRpb24gZnVuY3Rpb24gZ2l2ZXMgY29tcGxldGUgYWNjZXNzIHRvIHRoZSBtb2RlbCBidWlsZGVyIGFwaSwgZXZlcnkgbW9kZWwgYnVpbGRlciBmdW5jdGlvbiBkZXNjcmliZWRcbiAgICogaW4gdGhpcyBwYWdlIGNhbiBiZSBjYWxsZWQgZnJvbSB0aGUgZGVmaW5pdGlvbiBmdW5jdGlvbiBieSByZWZlcmVuY2luZyAqdGhpcyouXG4gICAqXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogcmVzdG1vZC5tb2RlbCgnJywgZnVuY3Rpb24oKSB7XG4gICAqICAgdGhpcy5hdHRyRGVmYXVsdCgncHJvcFdpdGhEZWZhdWx0JywgMjApXG4gICAqICAgICAgIC5hdHRyQXNDb2xsZWN0aW9uKCdoYXNNYW55UmVsYXRpb24nLCAnTW9kZWxOYW1lJylcbiAgICogICAgICAgLm9uKCdhZnRlci1jcmVhdGUnLCBmdW5jdGlvbigpIHtcbiAgICogICAgICAgICAvLyBkbyBzb21ldGhpbmcgYWZ0ZXIgY3JlYXRlLlxuICAgKiAgICAgICB9KTtcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKi9cbiAgZnVuY3Rpb24gQnVpbGRlcihfYmFzZURzbCkge1xuXG4gICAgdmFyIG1hcHBpbmdzID0ge1xuICAgICAgaW5pdDogWydhdHRyRGVmYXVsdCddLFxuICAgICAgbWFzazogWydhdHRyTWFzayddLFxuICAgICAgaWdub3JlOiBbJ2F0dHJNYXNrJ10sXG4gICAgICBtYXA6IFsnYXR0ck1hcCcsICdmb3JjZSddLFxuICAgICAgZGVjb2RlOiBbJ2F0dHJEZWNvZGVyJywgJ3BhcmFtJywgJ2NoYWluJ10sXG4gICAgICBlbmNvZGU6IFsnYXR0ckVuY29kZXInLCAncGFyYW0nLCAnY2hhaW4nXSxcbiAgICAgICd2b2xhdGlsZSc6IFsnYXR0clZvbGF0aWxlJ11cbiAgICB9O1xuXG4gICAgLy8gRFNMIGNvcmUgZnVuY3Rpb25zLlxuXG4gICAgdGhpcy5kc2wgPSBleHRlbmQoX2Jhc2VEc2wsIHtcblxuICAgICAgLyoqXG4gICAgICAgKiBAbWVtYmVyb2YgQnVpbGRlckFwaSNcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb24gUGFyc2VzIGEgZGVzY3JpcHRpb24gb2JqZWN0LCBjYWxscyB0aGUgcHJvcGVyIGJ1aWxkZXIgbWV0aG9kIGRlcGVuZGluZ1xuICAgICAgICogb24gZWFjaCBwcm9wZXJ0eSBkZXNjcmlwdGlvbiB0eXBlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBfZGVzY3JpcHRpb24gVGhlIGRlc2NyaXB0aW9uIG9iamVjdFxuICAgICAgICogQHJldHVybiB7QnVpbGRlckFwaX0gc2VsZlxuICAgICAgICovXG4gICAgICBkZXNjcmliZTogZnVuY3Rpb24oX2Rlc2NyaXB0aW9uKSB7XG4gICAgICAgIGZvckVhY2goX2Rlc2NyaXB0aW9uLCBmdW5jdGlvbihfZGVzYywgX2F0dHIpIHtcbiAgICAgICAgICBzd2l0Y2goX2F0dHIuY2hhckF0KDApKSB7XG4gICAgICAgICAgY2FzZSAnQCc6XG4gICAgICAgICAgICAkbG9nLndhcm4oJ1VzYWdlIG9mIEAgaW4gZGVzY3JpcHRpb24gb2JqZWN0cyB3aWxsIGJlIHJlbW92ZWQgaW4gMS4yLCB1c2UgYSAkZXh0ZW5kIGJsb2NrIGluc3RlYWQnKTtcbiAgICAgICAgICAgIHRoaXMuZGVmaW5lKCdTY29wZS4nICsgX2F0dHIuc3Vic3RyaW5nKDEpLCBfZGVzYyk7IC8vIHNldCBzdGF0aWMgbWV0aG9kXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICd+JzpcbiAgICAgICAgICAgIF9hdHRyID0gaW5mbGVjdG9yLnBhcmFtZXRlcml6ZShfYXR0ci5zdWJzdHJpbmcoMSkpO1xuICAgICAgICAgICAgJGxvZy53YXJuKCdVc2FnZSBvZiB+IGluIGRlc2NyaXB0aW9uIG9iamVjdHMgd2lsbCBiZSByZW1vdmVkIGluIDEuMiwgdXNlIGEgJGhvb2tzIGJsb2NrIGluc3RlYWQnKTtcbiAgICAgICAgICAgIHRoaXMub24oX2F0dHIsIF9kZXNjKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBpZihfYXR0ciA9PT0gJyRjb25maWcnKSB7IC8vIGNvbmZpZ3VyYXRpb24gYmxvY2tcbiAgICAgICAgICAgICAgZm9yKHZhciBrZXkgaW4gX2Rlc2MpIHtcbiAgICAgICAgICAgICAgICBpZihfZGVzYy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB0aGlzLnNldFByb3BlcnR5KGtleSwgX2Rlc2Nba2V5XSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZihfYXR0ciA9PT0gJyRleHRlbmQnKSB7IC8vIGV4dGVuc2lvbiBibG9ja1xuICAgICAgICAgICAgICBmb3IodmFyIGtleSBpbiBfZGVzYykge1xuICAgICAgICAgICAgICAgIGlmKF9kZXNjLmhhc093blByb3BlcnR5KGtleSkpIHRoaXMuZGVmaW5lKGtleSwgX2Rlc2Nba2V5XSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZihfYXR0ciA9PT0gJyRob29rcycpIHsgLy8gaG9va3MgYmxvY2tcbiAgICAgICAgICAgICAgZm9yKHZhciBrZXkgaW4gX2Rlc2MpIHtcbiAgICAgICAgICAgICAgICBpZihfZGVzYy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB0aGlzLm9uKGtleSwgX2Rlc2Nba2V5XSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZihWQVJfUkdYLnRlc3QoX2F0dHIpKSB7XG4gICAgICAgICAgICAgICRsb2cud2FybignVXNhZ2Ugb2YgfiBpbiBkZXNjcmlwdGlvbiBvYmplY3RzIHdpbGwgYmUgcmVtb3ZlZCBpbiAxLjIsIHVzZSBhICRjb25maWcgYmxvY2sgaW5zdGVhZCcpO1xuICAgICAgICAgICAgICBfYXR0ciA9IGluZmxlY3Rvci5jYW1lbGl6ZShfYXR0ci50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgICAgdGhpcy5zZXRQcm9wZXJ0eShfYXR0ciwgX2Rlc2MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihpc09iamVjdChfZGVzYykpIHRoaXMuYXR0cmlidXRlKF9hdHRyLCBfZGVzYyk7XG4gICAgICAgICAgICBlbHNlIGlmKGlzRnVuY3Rpb24oX2Rlc2MpKSB0aGlzLmRlZmluZShfYXR0ciwgX2Rlc2MpO1xuICAgICAgICAgICAgZWxzZSB0aGlzLmF0dHJEZWZhdWx0KF9hdHRyLCBfZGVzYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBtZW1iZXJvZiBCdWlsZGVyQXBpI1xuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvbiBFeHRlbmRzIHRoZSBidWlsZGVyIERTTFxuICAgICAgICpcbiAgICAgICAqIEFkZHMgYSBmdW5jdGlvbiB0byBkZSBidWlsZGVyIGFuZCBhbHRlcm5hdGl2ZWx5IG1hcHMgdGhlIGZ1bmN0aW9uIHRvIGFuXG4gICAgICAgKiBhdHRyaWJ1dGUgZGVmaW5pdGlvbiBrZXl3b3JkIHRoYXQgY2FuIGJlIGxhdGVyIHVzZWQgd2hlbiBjYWxsaW5nXG4gICAgICAgKiBgZGVmaW5lYCBvciBgYXR0cmlidXRlYC5cbiAgICAgICAqXG4gICAgICAgKiBNYXBwaW5nIHdvcmtzIGFzIGZvbGxvd2luZzpcbiAgICAgICAqXG4gICAgICAgKiAgICAvLyBHaXZlbiB0aGUgZm9sbG93aW5nIGNhbGxcbiAgICAgICAqICAgIGJ1aWxkZXIuZXh0ZW5kKCd0ZXN0QXR0cicsIGZ1bmN0aW9uKF9hdHRyLCBfdGVzdCwgX3BhcmFtMSwgcGFyYW0yKSB7XG4gICAgICAgKiAgICAgIC8vIHdoYXJldmVyLi5cbiAgICAgICAqICAgIH0sIFsndGVzdCcsICd0ZXN0UDEnLCAndGVzdFAyJ10pO1xuICAgICAgICpcbiAgICAgICAqICAgIC8vIEEgY2FsbCB0b1xuICAgICAgICogICAgYnVpbGRlci5hdHRyaWJ1dGUoJ2NoYXB0ZXInLCB7IHRlc3Q6ICdoZWxsbycsIHRlc3RQMTogJ3dvcmxkJyB9KTtcbiAgICAgICAqXG4gICAgICAgKiAgICAvLyBJdHMgZXF1aXZhbGVudCB0b1xuICAgICAgICogICAgYnVpbGRlci50ZXN0QXR0cignY2hhcHRlcicsICdoZWxsbycsICd3b3JsZCcpO1xuICAgICAgICpcbiAgICAgICAqIFRoZSBtZXRob2QgY2FuIGFsc28gYmUgcGFzc2VkIGFuIG9iamVjdCB3aXRoIHZhcmlvdXMgbWV0aG9kcyB0byBiZSBhZGRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IF9uYW1lIGZ1bmN0aW9uIG5hbWUgb3Igb2JqZWN0IHRvIG1lcmdlXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBfZnVuIGZ1bmN0aW9uXG4gICAgICAgKiBAcGFyYW0ge2FycmF5fSBfbWFwcGluZyBmdW5jdGlvbiBtYXBwaW5nIGRlZmluaXRpb25cbiAgICAgICAqIEByZXR1cm4ge0J1aWxkZXJBcGl9IHNlbGZcbiAgICAgICAqL1xuICAgICAgZXh0ZW5kOiBmdW5jdGlvbihfbmFtZSwgX2Z1biwgX21hcHBpbmcpIHtcbiAgICAgICAgaWYodHlwZW9mIF9uYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHRoaXNbX25hbWVdID0gVXRpbHMub3ZlcnJpZGUodGhpc1tuYW1lXSwgX2Z1bik7XG4gICAgICAgICAgaWYoX21hcHBpbmcpIHtcbiAgICAgICAgICAgIG1hcHBpbmdzW19tYXBwaW5nWzBdXSA9IF9tYXBwaW5nO1xuICAgICAgICAgICAgX21hcHBpbmdbMF0gPSBfbmFtZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBVdGlscy5leHRlbmRPdmVycmlkZW4odGhpcywgX25hbWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG1lbWJlcm9mIEJ1aWxkZXJBcGkjXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uIFNldHMgYW4gYXR0cmlidXRlIHByb3BlcnRpZXMuXG4gICAgICAgKlxuICAgICAgICogVGhpcyBtZXRob2QgdXNlcyB0aGUgYXR0cmlidXRlIG1vZGlmaWVycyBtYXBwaW5nIHRvIGNhbGwgcHJvcGVyXG4gICAgICAgKiBtb2RpZmllcnMgb24gdGhlIGFyZ3VtZW50LlxuICAgICAgICpcbiAgICAgICAqIEZvciBleGFtcGxlLCB1c2luZyB0aGUgZm9sbG93aW5nIGRlc2NyaXB0aW9uIG9uIHRoZSBjcmVhdGVkQXQgYXR0cmlidXRlXG4gICAgICAgKlxuICAgICAgICogICAgeyBkZWNvZGU6ICdkYXRlJywgcGFyYW07ICdZWS1tbS1kZCcgfVxuICAgICAgICpcbiAgICAgICAqIElzIHRoZSBzYW1lIGFzIGNhbGxpbmdcbiAgICAgICAqXG4gICAgICAgKiAgICBidWlsZGVyLmF0dHJEZWNvZGVyKCdjcmVhdGVkQXQnLCAnZGF0ZScsICdZWS1tbS1kZCcpXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IF9uYW1lIEF0dHJpYnV0ZSBuYW1lXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gX2Rlc2NyaXB0aW9uIERlc2NyaXB0aW9uIG9iamVjdFxuICAgICAgICogQHJldHVybiB7QnVpbGRlckFwaX0gc2VsZlxuICAgICAgICovXG4gICAgICBhdHRyaWJ1dGU6IGZ1bmN0aW9uKF9uYW1lLCBfZGVzY3JpcHRpb24pIHtcbiAgICAgICAgdmFyIGtleSwgbWFwLCBhcmdzLCBpO1xuICAgICAgICBmb3Ioa2V5IGluIF9kZXNjcmlwdGlvbikge1xuICAgICAgICAgIGlmKF9kZXNjcmlwdGlvbi5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICBtYXAgPSBtYXBwaW5nc1trZXldO1xuICAgICAgICAgICAgaWYobWFwKSB7XG4gICAgICAgICAgICAgIGFyZ3MgPSBbX25hbWUsIF9kZXNjcmlwdGlvbltrZXldXTtcbiAgICAgICAgICAgICAgZm9yKGkgPSAxOyBpIDwgbWFwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJncy5wdXNoKF9kZXNjcmlwdGlvblttYXBbaV1dKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBhcmdzLnB1c2goX2Rlc2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgdGhpc1ttYXBbMF1dLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIEJ1aWxkZXIucHJvdG90eXBlID0ge1xuXG4gICAgLy8gdXNlIHRoZSBidWlsZGVyIHRvIHByb2Nlc3MgYSBtaXhpbiBjaGFpblxuICAgIGNoYWluOiBmdW5jdGlvbihfY2hhaW4pIHtcbiAgICAgIGZvcih2YXIgaSA9IDAsIGwgPSBfY2hhaW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHRoaXMubWl4aW4oX2NoYWluW2ldKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gdXNlIHRoZSBidWlsZGVyIHRvIHByb2Nlc3MgYSBzaW5nbGUgbWl4aW5cbiAgICBtaXhpbjogZnVuY3Rpb24oX21peCkge1xuICAgICAgaWYoX21peC4kJGNoYWluKSB7XG4gICAgICAgIHRoaXMuY2hhaW4oX21peC4kJGNoYWluKTtcbiAgICAgIH0gZWxzZSBpZih0eXBlb2YgX21peCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5taXhpbigkaW5qZWN0b3IuZ2V0KF9taXgpKTtcbiAgICAgIH0gZWxzZSBpZihpc0FycmF5KF9taXgpKSB7XG4gICAgICAgIHRoaXMuY2hhaW4oX21peCk7XG4gICAgICB9IGVsc2UgaWYoaXNGdW5jdGlvbihfbWl4KSkge1xuICAgICAgICBfbWl4LmNhbGwodGhpcy5kc2wsICRpbmplY3Rvcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRzbC5kZXNjcmliZShfbWl4KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIEJ1aWxkZXI7XG5cbn1dKTtcblJNTW9kdWxlLmZhY3RvcnkoJ1JNQnVpbGRlckNvbXB1dGVkJywgWydyZXN0bW9kJyxcbiAgZnVuY3Rpb24ocmVzdG1vZCkge1xuICAgIC8qKlxuICAgICAqIEBjbGFzcyBSTUJ1aWxkZXJDb21wdXRlZEFwaVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBCdWlsZGVyIERTTCBleHRlbnNpb24gdG8gYnVpbGQgY29tcHV0ZWQgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEEgY29tcHV0ZWQgcHJvcGVydHkgaXMgYSBcInZpcnR1YWxcIiBwcm9wZXJ0eSB3aGljaCBpcyBjcmVhdGVkIHVzaW5nXG4gICAgICogb3RoZXIgbW9kZWwgcHJvcGVydGllcy4gRm9yIGV4YW1wbGUsIGEgdXNlciBoYXMgYSBmaXJzdE5hbWUgYW5kIGxhc3ROYW1lLFxuICAgICAqIEEgY29tcHV0ZWQgcHJvcGVydHksIGZ1bGxOYW1lLCBpcyBnZW5lcmF0ZWQgZnJvbSB0aGUgdHdvLlxuICAgICAqXG4gICAgICogQWRkcyB0aGUgZm9sbG93aW5nIHByb3BlcnR5IG1vZGlmaWVyczpcbiAgICAgKiAqIGBjb21wdXRlZGAgZnVuY3Rpb24gd2lsbCBiZSBhc3NpZ25lZCBhcyBnZXR0ZXIgdG8gTW9kZWwsIG1hcHMgdG8ge0BsaW5rIFJNQnVpbGRlckNvbXB1dGVkQXBpI2F0dHJBc0NvbXB1dGVkfVxuICAgICAqXG4gICAgICovXG4gICAgdmFyIEVYVCA9IHtcblxuICAgICAgLyoqXG4gICAgICAgKiBAbWVtYmVyb2YgUk1CdWlsZGVyQ29tcHV0ZWRBcGkjXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uIFJlZ2lzdGVycyBhIG1vZGVsIGNvbXB1dGVkIHByb3BlcnR5XG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9ICBfYXR0ciBBdHRyaWJ1dGUgbmFtZVxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gX2ZuIEZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgZGVzaXJlZCBhdHRyaWJ1dGUgdmFsdWUgd2hlbiBydW4uXG4gICAgICAgKiBAcmV0dXJuIHtCdWlsZGVyQXBpfSBzZWxmXG4gICAgICAgKi9cbiAgICAgIGF0dHJBc0NvbXB1dGVkOiBmdW5jdGlvbihfYXR0ciwgX2ZuKSB7XG4gICAgICAgIHRoaXMuYXR0ckNvbXB1dGVkKF9hdHRyLCBfZm4pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHJlc3Rtb2QubWl4aW4oZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmV4dGVuZCgnYXR0ckFzQ29tcHV0ZWQnLCBFWFQuYXR0ckFzQ29tcHV0ZWQsIFsnY29tcHV0ZWQnXSk7XG4gICAgfSk7XG4gIH1cbl0pO1xuUk1Nb2R1bGUuZmFjdG9yeSgnUk1CdWlsZGVyRXh0JywgWyckaW5qZWN0b3InLCAnJHBhcnNlJywgJ2luZmxlY3RvcicsICckbG9nJywgJ3Jlc3Rtb2QnLCBmdW5jdGlvbigkaW5qZWN0b3IsICRwYXJzZSwgaW5mbGVjdG9yLCAkbG9nLCByZXN0bW9kKSB7XG5cbiAgdmFyIGJpbmQgPSBhbmd1bGFyLmJpbmQsXG4gICAgICBpc0Z1bmN0aW9uID0gYW5ndWxhci5pc0Z1bmN0aW9uO1xuXG4gIC8qKlxuICAgKiBAY2xhc3MgRXh0ZW5kZWRCdWlsZGVyQXBpXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBOb24tY29yZSBidWlsZGVyIGV4dGVuc2lvbnNcbiAgICpcbiAgICogQWRkcyB0aGUgZm9sbG93aW5nIHByb3BlcnR5IG1vZGlmaWVyczpcbiAgICogKiBgc2VyaWFsaXplYCBzZXRzIHRoZSBlbmNvZGVyIGFuZCBkZWNvZGVyIGJlYXZpb3VyIGZvciBhbiBhdHRyaWJ1dGUsIG1hcHMgdG8ge0BsaW5rIEJ1aWxkZXJBcGkjYXR0clNlcmlhbGl6ZXJ9XG4gICAqXG4gICAqL1xuICB2YXIgRVhUID0ge1xuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBFeHRlbmRlZEJ1aWxkZXJBcGkjXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gU2V0cyBhbiB1cmwgcHJlZml4IHRvIGJlIGFkZGVkIHRvIGV2ZXJ5IHVybCBnZW5lcmF0ZWQgYnkgdGhlIG1vZGVsLlxuICAgICAqXG4gICAgICogVGhpcyBhcHBsaWVzIGV2ZW4gdG8gb2JqZWN0cyBnZW5lcmF0ZWQgYnkgdGhlIGAkc2luZ2xlYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBpbnRlbmRlZCB0byBiZSB1c2VkIGluIGEgYmFzZSBtb2RlbCBtaXhpbiBzbyBldmVyeW1vZGVsIHRoYXQgZXh0ZW5kcyBmcm9tIGl0XG4gICAgICogZ2V0cyB0aGUgc2FtZSB1cmwgcHJlZml4LlxuICAgICAqXG4gICAgICogVXNhZ2U6XG4gICAgICpcbiAgICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgICogdmFyIEJhc2VNb2RlbCA9IHJlc3Rtb2QubWl4aW4oZnVuY3Rpb24oKSB7XG4gICAgICogICB0aGlzLnNldFVybFByZWZpeCgnL2FwaScpO1xuICAgICAqIH0pXG4gICAgICpcbiAgICAgKiB2YXIgYmlrZSA9IHJlc3Rtb2QubW9kZWwoJy9iaWtlcycsIEJhc2VNb2RlbCkuJGJ1aWxkKHsgaWQ6IDEgfSk7XG4gICAgICogY29uc29sZS5sb2coYmlrZS4kdXJsKCkpIC8vIG91dHB1dHMgJy9hcGkvYmlrZXMvMSdcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBfcHJlZml4IHVybCBwb3J0aW9uXG4gICAgICogQHJldHVybiB7QnVpbGRlckFwaX0gc2VsZlxuICAgICAqL1xuICAgIHNldFVybFByZWZpeDogZnVuY3Rpb24oX3ByZWZpeCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0UHJvcGVydHkoJ3VybFByZWZpeCcsIF9wcmVmaXgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgRXh0ZW5kZWRCdWlsZGVyQXBpI1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIENoYW5nZXMgdGhlIG1vZGVsJ3MgcHJpbWFyeSBrZXkuXG4gICAgICpcbiAgICAgKiBQcmltYXJ5IGtleXMgYXJlIHBhc3NlZCB0byBzY29wZSdzIHVybCBtZXRob2RzIHRvIGdlbmVyYXRlIHVybHMuIFRoZSBkZWZhdWx0IHByaW1hcnkga2V5IGlzICdpZCcuXG4gICAgICpcbiAgICAgKiAqKkFUVEVOVElPTioqIFByaW1hcnkga2V5cyBhcmUgZXh0cmFjdGVkIGZyb20gcmF3IGRhdGEsIHNvIF9rZXkgbXVzdCB1c2UgcmF3IGFwaSBuYW1pbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbn0gX2tleSBOZXcgcHJpbWFyeSBrZXkuXG4gICAgICogQHJldHVybiB7QnVpbGRlckFwaX0gc2VsZlxuICAgICAqL1xuICAgIHNldFByaW1hcnlLZXk6IGZ1bmN0aW9uKF9rZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldFByb3BlcnR5KCdwcmltYXJ5S2V5JywgX2tleSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBFeHRlbmRlZEJ1aWxkZXJBcGkjXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gQXNzaWducyBhIHNlcmlhbGl6ZXIgdG8gYSBnaXZlbiBhdHRyaWJ1dGUuXG4gICAgICpcbiAgICAgKiBBIF9zZXJpYWxpemVyIGlzOlxuICAgICAqICogYW4gb2JqZWN0IHRoYXQgZGVmaW5lcyBib3RoIGEgYGRlY29kZWAgYW5kIGEgYGVuY29kZWAgbWV0aG9kXG4gICAgICogKiBhIGZ1bmN0aW9uIHRoYXQgd2hlbiBjYWxsZWQgcmV0dXJucyBhbiBvYmplY3QgdGhhdCBtYXRjaGVzIHRoZSBhYm92ZSBkZXNjcmlwdGlvbi5cbiAgICAgKiAqIGEgc3RyaW5nIHRoYXQgcmVwcmVzZW50cyBhbiBpbmplY3RhYmxlIHRoYXQgbWF0Y2hlcyBhbnkgb2YgdGhlIGFib3ZlIGRlc2NyaXB0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBfbmFtZSBBdHRyaWJ1dGUgbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdHxmdW5jdGlvbn0gX3NlcmlhbGl6ZXIgVGhlIHNlcmlhbGl6ZXJcbiAgICAgKiBAcmV0dXJuIHtCdWlsZGVyQXBpfSBzZWxmXG4gICAgICovXG4gICAgYXR0clNlcmlhbGl6ZXI6IGZ1bmN0aW9uKF9uYW1lLCBfc2VyaWFsaXplciwgX29wdCkge1xuICAgICAgaWYodHlwZW9mIF9zZXJpYWxpemVyID09PSAnc3RyaW5nJykge1xuICAgICAgICBfc2VyaWFsaXplciA9ICRpbmplY3Rvci5nZXQoaW5mbGVjdG9yLmNhbWVsaXplKF9zZXJpYWxpemVyLCB0cnVlKSArICdTZXJpYWxpemVyJyk7XG4gICAgICB9XG5cbiAgICAgIGlmKGlzRnVuY3Rpb24oX3NlcmlhbGl6ZXIpKSBfc2VyaWFsaXplciA9IF9zZXJpYWxpemVyKF9vcHQpO1xuICAgICAgaWYoX3NlcmlhbGl6ZXIuZGVjb2RlKSB0aGlzLmF0dHJEZWNvZGVyKF9uYW1lLCBiaW5kKF9zZXJpYWxpemVyLCBfc2VyaWFsaXplci5kZWNvZGUpKTtcbiAgICAgIGlmKF9zZXJpYWxpemVyLmVuY29kZSkgdGhpcy5hdHRyRW5jb2RlcihfbmFtZSwgYmluZChfc2VyaWFsaXplciwgX3NlcmlhbGl6ZXIuZW5jb2RlKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8vIEV4cGVyaW1lbnRhbCBtb2RpZmllcnNcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBFeHRlbmRlZEJ1aWxkZXJBcGkjXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gRXhwcmVzc2lvbiBhdHRyaWJ1dGVzIGFyZSBldmFsdWF0ZWQgZXZlcnkgdGltZSBuZXcgZGF0YSBpcyBmZWQgdG8gdGhlIG1vZGVsLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9ICBfbmFtZSBBdHRyaWJ1dGUgbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBfZXhwciBBbmd1bGFyIGV4cHJlc3Npb24gdG8gZXZhbHVhdGVcbiAgICAgKiBAcmV0dXJuIHtCdWlsZGVyQXBpfSBzZWxmXG4gICAgICovXG4gICAgYXR0ckV4cHJlc3Npb246IGZ1bmN0aW9uKF9uYW1lLCBfZXhwcikge1xuICAgICAgdmFyIGZpbHRlciA9ICRwYXJzZShfZXhwcik7XG4gICAgICByZXR1cm4gdGhpcy5vbignYWZ0ZXItZmVlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzW19uYW1lXSA9IGZpbHRlcih0aGlzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gcmVzdG1vZC5taXhpbihmdW5jdGlvbigpIHtcbiAgICB0aGlzLmV4dGVuZCgnc2V0VXJsUHJlZml4JywgRVhULnNldFVybFByZWZpeClcbiAgICAgICAgLmV4dGVuZCgnc2V0UHJpbWFyeUtleScsIEVYVC5zZXRQcmltYXJ5S2V5KVxuICAgICAgICAuZXh0ZW5kKCdhdHRyU2VyaWFsaXplcicsIEVYVC5hdHRyU2VyaWFsaXplciwgWydzZXJpYWxpemUnXSk7XG4gIH0pO1xufV0pO1xuUk1Nb2R1bGUuZmFjdG9yeSgnUk1CdWlsZGVyUmVsYXRpb25zJywgWyckaW5qZWN0b3InLCAnaW5mbGVjdG9yJywgJyRsb2cnLCAnUk1VdGlscycsICdyZXN0bW9kJywgJ1JNUGFja2VyQ2FjaGUnLCBmdW5jdGlvbigkaW5qZWN0b3IsIGluZmxlY3RvciwgJGxvZywgVXRpbHMsIHJlc3Rtb2QsIHBhY2tlckNhY2hlKSB7XG5cbiAgLy8gd3JhcHMgYSBob29rIGNhbGxiYWNrIHRvIGdpdmUgYWNjZXNzIHRvIHRoZSAkb3duZXIgb2JqZWN0XG4gIGZ1bmN0aW9uIHdyYXBIb29rKF9mdW4sIF9vd25lcikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvbGRPd25lciA9IHRoaXMuJG93bmVyO1xuICAgICAgdGhpcy4kb3duZXIgPSBfb3duZXI7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gX2Z1bi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhpcy4kb3duZXIgPSBvbGRPd25lcjtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gd3JhcHMgYSBidW5jaCBvZiBob29rc1xuICBmdW5jdGlvbiBhcHBseUhvb2tzKF90YXJnZXQsIF9ob29rcywgX293bmVyKSB7XG4gICAgZm9yKHZhciBrZXkgaW4gX2hvb2tzKSB7XG4gICAgICBpZihfaG9va3MuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBfdGFyZ2V0LiRvbihrZXksIHdyYXBIb29rKF9ob29rc1trZXldLCBfb3duZXIpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQGNsYXNzIFJlbGF0aW9uQnVpbGRlckFwaVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQnVpbGRlciBEU0wgZXh0ZW5zaW9uIHRvIGJ1aWxkIG1vZGVsIHJlbGF0aW9uc1xuICAgKlxuICAgKiBBZGRzIHRoZSBmb2xsb3dpbmcgcHJvcGVydHkgbW9kaWZpZXJzOlxuICAgKiAqIGBoYXNNYW55YCBzZXRzIGEgb25lIHRvIG1hbnkgaGllcmFyY2hpY2FsIHJlbGF0aW9uIHVuZGVyIHRoZSBhdHRyaWJ1dGUgbmFtZSwgbWFwcyB0byB7QGxpbmsgUmVsYXRpb25CdWlsZGVyQXBpI2F0dHJBc0NvbGxlY3Rpb259XG4gICAqICogYGhhc09uZWAgc2V0cyBhIG9uZSB0byBvbmUgaGllcmFyY2hpY2FsIHJlbGF0aW9uIHVuZGVyIHRoZSBhdHRyaWJ1dGUgbmFtZSwgbWFwcyB0byB7QGxpbmsgUmVsYXRpb25CdWlsZGVyQXBpI2F0dHJBc1Jlc291cmNlfVxuICAgKiAqIGBiZWxvbmdzVG9gIHNldHMgYSBvbmUgdG8gb25lIHJlZmVyZW5jZSByZWxhdGlvbiB1bmRlciB0aGUgYXR0cmlidXRlIG5hbWUsIG1hcHMgdG8ge0BsaW5rIFJlbGF0aW9uQnVpbGRlckFwaSNhdHRyQXNSZWZlcmVuY2V9XG4gICAqICogYGJlbG9uZ3NUb01hbnlgIHNldHMgYSBvbmUgdG8gbWFueSByZWZlcmVuY2UgcmVsYXRpb24gdW5kZXIgdGhlIGF0dHJpYnV0ZSBuYW1lLCBtYXBzIHRvIHtAbGluayBSZWxhdGlvbkJ1aWxkZXJBcGkjYXR0ckFzUmVmZXJlbmNlVG9NYW55fVxuICAgKlxuICAgKi9cbiAgdmFyIEVYVCA9IHtcbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgUmVsYXRpb25CdWlsZGVyQXBpI1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIFJlZ2lzdGVycyBhIG1vZGVsICoqcmVzb3VyY2VzKiogcmVsYXRpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSAgX25hbWUgQXR0cmlidXRlIG5hbWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IF9tb2RlbCBPdGhlciBtb2RlbCwgc3VwcG9ydHMgYSBtb2RlbCBuYW1lIG9yIGEgZGlyZWN0IHJlZmVyZW5jZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gX3VybCBQYXJ0aWFsIHVybFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBfc291cmNlIElubGluZSByZXNvdXJjZSBhbGlhcyAob3B0aW9uYWwpXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IF9pbnZlcnNlT2YgSW52ZXJzZSBwcm9wZXJ0eSBuYW1lIChvcHRpb25hbClcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gX3BhcmFtcyBHZW5lcmF0ZWQgY29sbGVjdGlvbiBkZWZhdWx0IHBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gX2hvb2tzIEhvb2tzIHRvIGJlIGFwcGxpZWQganVzdCB0byB0aGUgZ2VuZXJhdGVkIGNvbGxlY3Rpb25cbiAgICAgKiBAcmV0dXJuIHtCdWlsZGVyQXBpfSBzZWxmXG4gICAgICovXG4gICAgYXR0ckFzQ29sbGVjdGlvbjogZnVuY3Rpb24oX2F0dHIsIF9tb2RlbCwgX3VybCwgX3NvdXJjZSwgX2ludmVyc2VPZiwgX3BhcmFtcywgX2hvb2tzKSB7XG5cbiAgICAgIHZhciBvcHRpb25zLCBnbG9iYWxIb29rczsgLy8gZ2xvYmFsIHJlbGF0aW9uIGNvbmZpZ3VyYXRpb25cblxuICAgICAgdGhpcy5hdHRyRGVmYXVsdChfYXR0ciwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgaWYodHlwZW9mIF9tb2RlbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBfbW9kZWwgPSAkaW5qZWN0b3IuZ2V0KF9tb2RlbCk7XG5cbiAgICAgICAgICAvLyByZXRyaWV2ZSBnbG9iYWwgb3B0aW9uc1xuICAgICAgICAgIG9wdGlvbnMgPSBfbW9kZWwuZ2V0UHJvcGVydHkoJ2hhc01hbnknLCB7fSk7XG4gICAgICAgICAgZ2xvYmFsSG9va3MgPSBvcHRpb25zLmhvb2tzO1xuXG4gICAgICAgICAgaWYoX2ludmVyc2VPZikge1xuICAgICAgICAgICAgdmFyIGRlc2MgPSBfbW9kZWwuJCRnZXREZXNjcmlwdGlvbihfaW52ZXJzZU9mKTtcbiAgICAgICAgICAgIGlmKCFkZXNjIHx8IGRlc2MucmVsYXRpb24gIT09ICdiZWxvbmdzX3RvJykge1xuICAgICAgICAgICAgICAkbG9nLndhcm4oJ011c3QgZGVmaW5lIGFuIGludmVyc2UgYmVsb25nc1RvIHJlbGF0aW9uIGZvciBpbnZlcnNlT2YgdG8gd29yaycpO1xuICAgICAgICAgICAgICBfaW52ZXJzZU9mID0gZmFsc2U7IC8vIGRpc2FibGUgdGhlIGludmVyc2UgaWYgbm8gaW52ZXJzZSByZWxhdGlvbiBpcyBmb3VuZC5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2NvcGUgPSB0aGlzLiRidWlsZFNjb3BlKF9tb2RlbCwgX3VybCB8fCBfbW9kZWwuZW5jb2RlVXJsTmFtZShfYXR0cikpLCBjb2w7XG5cbiAgICAgICAgLy8gc2V0dXAgY29sbGVjdGlvblxuICAgICAgICBjb2wgPSBfbW9kZWwuJGNvbGxlY3Rpb24oX3BhcmFtcyB8fCBudWxsLCBzY29wZSk7XG4gICAgICAgIGlmKGdsb2JhbEhvb2tzKSBhcHBseUhvb2tzKGNvbCwgZ2xvYmFsSG9va3MsIHRoaXMpO1xuICAgICAgICBpZihfaG9va3MpIGFwcGx5SG9va3MoY29sLCBfaG9va3MsIHRoaXMpO1xuICAgICAgICBjb2wuJGRpc3BhdGNoKCdhZnRlci1oYXMtbWFueS1pbml0Jyk7XG5cbiAgICAgICAgLy8gc2V0IGludmVyc2UgcHJvcGVydHkgaWYgcmVxdWlyZWQuXG4gICAgICAgIGlmKF9pbnZlcnNlT2YpIHtcbiAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgY29sLiRvbignYWZ0ZXItYWRkJywgZnVuY3Rpb24oX29iaikge1xuICAgICAgICAgICAgX29ialtfaW52ZXJzZU9mXSA9IHNlbGY7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29sO1xuICAgICAgfSk7XG5cbiAgICAgIGlmKF9zb3VyY2UgfHwgX3VybCkgdGhpcy5hdHRyTWFwKF9hdHRyLCBfc291cmNlIHx8IF91cmwpO1xuXG4gICAgICB0aGlzLmF0dHJEZWNvZGVyKF9hdHRyLCBmdW5jdGlvbihfcmF3KSB7XG4gICAgICAgICAgICB0aGlzW19hdHRyXS4kcmVzZXQoKS4kZGVjb2RlKF9yYXcpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmF0dHJNYXNrKF9hdHRyLCBVdGlscy5XUklURV9NQVNLKVxuICAgICAgICAgIC5hdHRyTWV0YShfYXR0ciwgeyByZWxhdGlvbjogJ2hhc19tYW55JyB9KTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBSZWxhdGlvbkJ1aWxkZXJBcGkjXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gUmVnaXN0ZXJzIGEgbW9kZWwgKipyZXNvdXJjZSoqIHJlbGF0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gIF9uYW1lIEF0dHJpYnV0ZSBuYW1lXG4gICAgICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSBfbW9kZWwgT3RoZXIgbW9kZWwsIHN1cHBvcnRzIGEgbW9kZWwgbmFtZSBvciBhIGRpcmVjdCByZWZlcmVuY2UuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IF91cmwgUGFydGlhbCB1cmwgKG9wdGlvbmFsKVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBfc291cmNlIElubGluZSByZXNvdXJjZSBhbGlhcyAob3B0aW9uYWwpXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IF9pbnZlcnNlT2YgSW52ZXJzZSBwcm9wZXJ0eSBuYW1lIChvcHRpb25hbClcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gX2hvb2tzIEhvb2tzIHRvIGJlIGFwcGxpZWQganVzdCB0byB0aGUgaW5zdGFudGlhdGVkIHJlY29yZFxuICAgICAqIEByZXR1cm4ge0J1aWxkZXJBcGl9IHNlbGZcbiAgICAgKi9cbiAgICBhdHRyQXNSZXNvdXJjZTogZnVuY3Rpb24oX2F0dHIsIF9tb2RlbCwgX3VybCwgX3NvdXJjZSwgX2ludmVyc2VPZiwgX2hvb2tzKSB7XG5cbiAgICAgIHZhciBvcHRpb25zLCBnbG9iYWxIb29rczsgLy8gZ2xvYmFsIHJlbGF0aW9uIGNvbmZpZ3VyYXRpb25cblxuICAgICAgdGhpcy5hdHRyRGVmYXVsdChfYXR0ciwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgaWYodHlwZW9mIF9tb2RlbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBfbW9kZWwgPSAkaW5qZWN0b3IuZ2V0KF9tb2RlbCk7XG5cbiAgICAgICAgICAvLyByZXRyaWV2ZSBnbG9iYWwgb3B0aW9uc1xuICAgICAgICAgIG9wdGlvbnMgPSBfbW9kZWwuZ2V0UHJvcGVydHkoJ2hhc09uZScsIHt9KTtcbiAgICAgICAgICBnbG9iYWxIb29rcyA9IG9wdGlvbnMuaG9va3M7XG5cbiAgICAgICAgICBpZihfaW52ZXJzZU9mKSB7XG4gICAgICAgICAgICB2YXIgZGVzYyA9IF9tb2RlbC4kJGdldERlc2NyaXB0aW9uKF9pbnZlcnNlT2YpO1xuICAgICAgICAgICAgaWYoIWRlc2MgfHwgZGVzYy5yZWxhdGlvbiAhPT0gJ2JlbG9uZ3NfdG8nKSB7XG4gICAgICAgICAgICAgICRsb2cud2FybignTXVzdCBkZWZpbmUgYW4gaW52ZXJzZSBiZWxvbmdzVG8gcmVsYXRpb24gZm9yIGludmVyc2VPZiB0byB3b3JrJyk7XG4gICAgICAgICAgICAgIF9pbnZlcnNlT2YgPSBmYWxzZTsgLy8gZGlzYWJsZSB0aGUgaW52ZXJzZSBpZiBubyBpbnZlcnNlIHJlbGF0aW9uIGlzIGZvdW5kLlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzY29wZSA9IHRoaXMuJGJ1aWxkU2NvcGUoX21vZGVsLCBfdXJsIHx8IF9tb2RlbC5lbmNvZGVVcmxOYW1lKF9hdHRyKSksIGluc3Q7XG5cbiAgICAgICAgLy8gc2V0dXAgcmVjb3JkXG4gICAgICAgIGluc3QgPSBfbW9kZWwuJG5ldyhudWxsLCBzY29wZSk7XG4gICAgICAgIGlmKGdsb2JhbEhvb2tzKSBhcHBseUhvb2tzKGluc3QsIGdsb2JhbEhvb2tzLCB0aGlzKTtcbiAgICAgICAgaWYoX2hvb2tzKSBhcHBseUhvb2tzKGluc3QsIF9ob29rcywgdGhpcyk7XG4gICAgICAgIGluc3QuJGRpc3BhdGNoKCdhZnRlci1oYXMtb25lLWluaXQnKTtcblxuICAgICAgICBpZihfaW52ZXJzZU9mKSB7XG4gICAgICAgICAgaW5zdFtfaW52ZXJzZU9mXSA9IHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5zdDtcbiAgICAgIH0pO1xuXG4gICAgICBpZihfc291cmNlIHx8IF91cmwpIHRoaXMuYXR0ck1hcChfYXR0ciwgX3NvdXJjZSB8fCBfdXJsKTtcblxuICAgICAgdGhpcy5hdHRyRGVjb2RlcihfYXR0ciwgZnVuY3Rpb24oX3Jhdykge1xuICAgICAgICAgICAgdGhpc1tfYXR0cl0uJGRlY29kZShfcmF3KTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5hdHRyTWFzayhfYXR0ciwgVXRpbHMuV1JJVEVfTUFTSylcbiAgICAgICAgICAuYXR0ck1ldGEoX2F0dHIsIHsgcmVsYXRpb246ICdoYXNfb25lJyB9KTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBSZWxhdGlvbkJ1aWxkZXJBcGkjXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gUmVnaXN0ZXJzIGEgbW9kZWwgKipyZWZlcmVuY2UqKiByZWxhdGlvbi5cbiAgICAgKlxuICAgICAqIEEgcmVmZXJlbmNlIHJlbGF0aW9uIGV4cGVjdHMgdGhlIGhvc3Qgb2JqZWN0IHRvIHByb3ZpZGUgdGhlIHByaW1hcnkga2V5IG9mIHRoZSByZWZlcmVuY2VkIG9iamVjdCBvciB0aGUgcmVmZXJlbmNlZCBvYmplY3QgaXRzZWxmIChpbmNsdWRpbmcgaXRzIGtleSkuXG4gICAgICpcbiAgICAgKiBGb3IgZXhhbXBsZSwgZ2l2ZW4gdGhlIGZvbGxvd2luZyByZXNvdXJjZSBzdHJ1Y3R1cmUgd2l0aCBhIGZvcmVpZ24ga2V5OlxuICAgICAqXG4gICAgICogYGBganNvblxuICAgICAqIHtcbiAgICAgKiAgIHVzZXJfaWQ6IDIwXG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogT3IgdGhpcyBvdGhlciBzdHJ1Y3R1cmUgd2l0aCBpbmxpbmVkIGRhdGE6XG4gICAgICpcbiAgICAgKiBgYGBqc29uXG4gICAgICoge1xuICAgICAqICAgdXNlcjoge1xuICAgICAqICAgICBpZDogMzAsXG4gICAgICogICAgIG5hbWU6ICdTdGV2ZSdcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBZb3Ugc2hvdWxkIGRlZmluZSB0aGUgZm9sbG93aW5nIG1vZGVsOlxuICAgICAqXG4gICAgICogYGBgamF2YXNjcmlwdFxuICAgICAqIHJlc3Rtb2QubW9kZWwoJy9iaWtlcycsIHtcbiAgICAgKiAgIHVzZXI6IHsgYmVsb25nc1RvOiAnVXNlcicgfSAvLyB3b3JrcyBmb3IgYm90aCBjYXNlcyBkZXRhaWxlZCBhYm92ZVxuICAgICAqIH0pXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBUaGUgb2JqZWN0IGdlbmVyYXRlZCBieSB0aGUgcmVsYXRpb24gaXMgbm90IHNjb3BlZCB0byB0aGUgaG9zdCBvYmplY3QsIGJ1dCB0byBpdCdzIGJhc2UgY2xhc3MgaW5zdGVhZCAobm90IGxpa2UgaGFzT25lKSxcbiAgICAgKiBzbyB0aGUgdHlwZSBzaG91bGQgbm90IGJlIG5lc3RlZC5cbiAgICAgKlxuICAgICAqIEl0cyBhbHNvIHBvc2libGUgdG8gb3ZlcnJpZGUgdGhlICoqZm9yZWlnbiBrZXkgbmFtZSoqLlxuICAgICAqXG4gICAgICogV2hlbiBhIG9iamVjdCBjb250YWluaW5nIGEgYmVsb25nc1RvIHJlZmVyZW5jZSBpcyBlbmNvZGVkIGZvciBhIHNlcnZlciByZXF1ZXN0LCBvbmx5IHRoZSBwcmltYXJ5IGtleSB2YWx1ZSBpcyBzZW50IHVzaW5nIHRoZVxuICAgICAqIHNhbWUgKipmb3JlaWduIGtleSBuYW1lKiogdGhhdCB3YXMgdXNpbmcgb24gZGVjb2RpbmcuIChgdXNlcl9pZGAgaW4gdGhlIGFib3ZlIGV4YW1wbGUpLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9ICBfbmFtZSBBdHRyaWJ1dGUgbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gX21vZGVsIE90aGVyIG1vZGVsLCBzdXBwb3J0cyBhIG1vZGVsIG5hbWUgb3IgYSBkaXJlY3QgcmVmZXJlbmNlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBfa2V5IGZvcmVpZ24ga2V5IHByb3BlcnR5IG5hbWUgKG9wdGlvbmFsLCBkZWZhdWx0cyB0byBfYXR0ciArICdfaWQnKS5cbiAgICAgKiBAcGFyYW0ge2Jvb2x9IF9wcmVmZXRjaCBpZiBzZXQgdG8gdHJ1ZSwgJGZldGNoIHdpbGwgYmUgYXV0b21hdGljYWxseSBjYWxsZWQgb24gcmVsYXRpb24gb2JqZWN0IGxvYWQuXG4gICAgICogQHJldHVybiB7QnVpbGRlckFwaX0gc2VsZlxuICAgICAqL1xuICAgIGF0dHJBc1JlZmVyZW5jZTogZnVuY3Rpb24oX2F0dHIsIF9tb2RlbCwgX2tleSwgX3ByZWZldGNoKSB7XG5cbiAgICAgIHRoaXMuYXR0ckRlZmF1bHQoX2F0dHIsIG51bGwpXG4gICAgICAgICAgLmF0dHJNYXNrKF9hdHRyLCBVdGlscy5XUklURV9NQVNLKVxuICAgICAgICAgIC5hdHRyTWV0YShfYXR0ciwgeyByZWxhdGlvbjogJ2JlbG9uZ3NfdG8nIH0pO1xuXG4gICAgICBmdW5jdGlvbiBsb2FkTW9kZWwoKSB7XG4gICAgICAgIGlmKHR5cGVvZiBfbW9kZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgX21vZGVsID0gJGluamVjdG9yLmdldChfbW9kZWwpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRPRE86IHRoZSBmb2xsb3dpbmcgY29kZSBhc3N1bWVzIHRoYXQgYXR0cmlidXRlIGlzIGF0IHJvb3QgbGV2ZWwhICh3aGVuIHVzZXMgdGhpc1tfYXR0cl0gb3IgdGhpc1tfYXR0ciArICdJZCddKVxuXG4gICAgICAvLyBpbmxpbmUgZGF0YSBoYW5kbGluZ1xuICAgICAgdGhpcy5hdHRyRGVjb2RlcihfYXR0ciwgZnVuY3Rpb24oX3Jhdykge1xuICAgICAgICBpZihfcmF3ID09PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgICAgICAgbG9hZE1vZGVsKCk7XG4gICAgICAgIGlmKCF0aGlzW19hdHRyXSB8fCB0aGlzW19hdHRyXS4kcGsgIT09IF9tb2RlbC5pbmZlcktleShfcmF3KSkge1xuICAgICAgICAgIHRoaXNbX2F0dHJdID0gX21vZGVsLiRidWlsZFJhdyhfcmF3KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzW19hdHRyXS4kZGVjb2RlKF9yYXcpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gZm9yZWlnbiBrZXkgaGFuZGxpbmdcbiAgICAgIGlmKF9rZXkgIT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuYXR0ck1hcChfYXR0ciArICdJZCcsIF9rZXkgfHwgJyonLCB0cnVlKSAvLyBzZXQgYSBmb3JjZWQgbWFwcGluZyB0byBhbHdheXMgZ2VuZXJhdGUga2V5XG4gICAgICAgICAgICAuYXR0ckRlY29kZXIoX2F0dHIgKyAnSWQnLCBmdW5jdGlvbihfdmFsdWUpIHtcbiAgICAgICAgICAgICAgaWYoX3ZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAgICAgICAgICAgaWYoIXRoaXNbX2F0dHJdIHx8IHRoaXNbX2F0dHJdLiRwayAhPT0gX3ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYoX3ZhbHVlICE9PSBudWxsICYmIF92YWx1ZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgIGxvYWRNb2RlbCgpO1xuICAgICAgICAgICAgICAgICAgdGhpc1tfYXR0cl0gPSBwYWNrZXJDYWNoZS5yZXNvbHZlKF9tb2RlbC4kbmV3KF92YWx1ZSkpOyAvLyByZXNvbHZlIGlubWVkaWF0ZWxseSBpZiBjYWNoZWRcbiAgICAgICAgICAgICAgICAgIGlmKF9wcmVmZXRjaCkgdGhpc1tfYXR0cl0uJGZldGNoKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHRoaXNbX2F0dHJdID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYXR0ckVuY29kZXIoX2F0dHIgKyAnSWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbX2F0dHJdID8gdGhpc1tfYXR0cl0uJHBrIDogbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIFJlbGF0aW9uQnVpbGRlckFwaSNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBSZWdpc3RlcnMgYSBtb2RlbCAqKnJlZmVyZW5jZSoqIHJlbGF0aW9uLlxuICAgICAqXG4gICAgICogQSByZWZlcmVuY2UgcmVsYXRpb24gZXhwZWN0cyB0aGUgaG9zdCBvYmplY3QgdG8gcHJvdmlkZSB0aGUgcHJpbWFyeSBrZXkgb2YgdGhlIHJlZmVyZW5jZWQgb2JqZWN0cyBvciB0aGUgcmVmZXJlbmNlZCBvYmplY3RzIHRoZW1zZWx2ZXMgKGluY2x1ZGluZyBpdHMga2V5KS5cbiAgICAgKlxuICAgICAqIEZvciBleGFtcGxlLCBnaXZlbiB0aGUgZm9sbG93aW5nIHJlc291cmNlIHN0cnVjdHVyZSB3aXRoIGEgZm9yZWlnbiBrZXkgYXJyYXk6XG4gICAgICpcbiAgICAgKiBgYGBqc29uXG4gICAgICoge1xuICAgICAqICAgdXNlcnNfaWRzOiBbMjAsIDMwXVxuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIE9yIHRoaXMgb3RoZXIgc3RydWN0dXJlIHdpdGggaW5saW5lZCBkYXRhOlxuICAgICAqXG4gICAgICogYGBganNvblxuICAgICAqIHtcbiAgICAgKiAgIHVzZXJzOiBbe1xuICAgICAqICAgICBpZDogMjAsXG4gICAgICogICAgIG5hbWU6ICdTdGV2ZSdcbiAgICAgKiAgIH0se1xuICAgICAqICAgICBpZDogMzAsXG4gICAgICogICAgIG5hbWU6ICdQaWxpJ1xuICAgICAqICAgfV1cbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBZb3Ugc2hvdWxkIGRlZmluZSB0aGUgZm9sbG93aW5nIG1vZGVsOlxuICAgICAqXG4gICAgICogYGBgamF2YXNjcmlwdFxuICAgICAqIHJlc3Rtb2QubW9kZWwoJy9iaWtlcycsIHtcbiAgICAgKiAgIHVzZXJzOiB7IGJlbG9uZ3NUb01hbnk6ICdVc2VyJyB9IC8vIHdvcmtzIGZvciBib3RoIGNhc2VzIGRldGFpbGVkIGFib3ZlXG4gICAgICogfSlcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFRoZSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHRoZSByZWxhdGlvbiBpcyBub3Qgc2NvcGVkIHRvIHRoZSBob3N0IG9iamVjdCwgYnV0IHRvIGl0J3MgYmFzZSBjbGFzcyBpbnN0ZWFkICh1bmxpa2UgaGFzTWFueSksXG4gICAgICogc28gdGhlIHJlZmVyZW5jZWQgdHlwZSBzaG91bGQgbm90IGJlIG5lc3RlZC5cbiAgICAgKlxuICAgICAqIFdoZW4gYSBvYmplY3QgY29udGFpbmluZyBhIGJlbG9uZ3NUb01hbnkgcmVmZXJlbmNlIGlzIGVuY29kZWQgZm9yIGEgc2VydmVyIHJlcXVlc3QsIG9ubHkgdGhlIHByaW1hcnkga2V5IHZhbHVlIGlzIHNlbnQgZm9yIGVhY2ggb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9ICBfbmFtZSBBdHRyaWJ1dGUgbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gX21vZGVsIE90aGVyIG1vZGVsLCBzdXBwb3J0cyBhIG1vZGVsIG5hbWUgb3IgYSBkaXJlY3QgcmVmZXJlbmNlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBfa2V5cyBTZXJ2ZXIgbmFtZSBmb3IgdGhlIHByb3BlcnR5IHRoYXQgaG9sZHMgdGhlIHJlZmVyZW5jZWQga2V5cyBpbiByZXNwb25zZSBhbmQgcmVxdWVzdC5cbiAgICAgKiBAcmV0dXJuIHtCdWlsZGVyQXBpfSBzZWxmXG4gICAgICovXG4gICAgYXR0ckFzUmVmZXJlbmNlVG9NYW55OiBmdW5jdGlvbihfYXR0ciwgX21vZGVsLCBfa2V5cykge1xuXG4gICAgICB0aGlzLmF0dHJEZWZhdWx0KF9hdHRyLCBmdW5jdGlvbigpIHsgcmV0dXJuIFtdOyB9KVxuICAgICAgICAgIC5hdHRyTWFzayhfYXR0ciwgVXRpbHMuV1JJVEVfTUFTSylcbiAgICAgICAgICAuYXR0ck1ldGEoX2F0dHIsIHsgcmVsYXRpb246ICdiZWxvbmdzX3RvX21hbnknIH0pO1xuXG4gICAgICAvLyBUT0RPOiB0aGUgZm9sbG93aW5nIGNvZGUgYXNzdW1lcyB0aGF0IGF0dHJpYnV0ZSBpcyBhdCByb290IGxldmVsISAod2hlbiB1c2VzIHRoaXNbX2F0dHJdKVxuXG4gICAgICBmdW5jdGlvbiBsb2FkTW9kZWwoKSB7XG4gICAgICAgIGlmKHR5cGVvZiBfbW9kZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgX21vZGVsID0gJGluamVjdG9yLmdldChfbW9kZWwpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHByb2Nlc3NJbmJvdW5kKF9yYXcsIF9yZWYpIHtcbiAgICAgICAgbG9hZE1vZGVsKCk7XG4gICAgICAgIF9yZWYubGVuZ3RoID0gMDtcbiAgICAgICAgLy8gVE9ETzogcmV1c2Ugb2JqZWN0cyB0aGF0IGRvIG5vdCBjaGFuZ2UgKGNvbXBhcmUgJHBrcylcbiAgICAgICAgZm9yKHZhciBpID0gMCwgbCA9IF9yYXcubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgaWYodHlwZW9mIF9yYXdbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBfcmVmLnB1c2goX21vZGVsLiRidWlsZFJhdyhfcmF3W2ldKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF9yZWYucHVzaChwYWNrZXJDYWNoZS5yZXNvbHZlKF9tb2RlbC4kbmV3KF9yYXdbaV0pKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGlubGluZSBkYXRhIGhhbmRsaW5nXG4gICAgICB0aGlzLmF0dHJEZWNvZGVyKF9hdHRyLCBmdW5jdGlvbihfcmF3KSB7XG4gICAgICAgIC8vIFRPRE86IGlmIF9rZXlzID09IF9hdHRyIHRoZW4gaW5ib3VuZCBkYXRhIHdpbGwgYmUgcHJvY2Vzc2VkIHR3aWNlIVxuICAgICAgICBpZihfcmF3KSBwcm9jZXNzSW5ib3VuZChfcmF3LCB0aGlzW19hdHRyXSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gZm9yZWlnbiBrZXkgaGFuZGxpbmdcbiAgICAgIGlmKF9rZXlzICE9PSBmYWxzZSkge1xuICAgICAgICB2YXIgYXR0cklkcyA9IGluZmxlY3Rvci5zaW5ndWxhcml6ZShfYXR0cikgKyAnSWRzJztcbiAgICAgICAgdGhpcy5hdHRyTWFwKGF0dHJJZHMsIF9rZXlzIHx8ICcqJywgdHJ1ZSlcbiAgICAgICAgICAgIC5hdHRyRGVjb2RlcihhdHRySWRzLCBmdW5jdGlvbihfcmF3KSB7XG4gICAgICAgICAgICAgIGlmKF9yYXcpIHByb2Nlc3NJbmJvdW5kKF9yYXcsIHRoaXNbX2F0dHJdKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYXR0ckVuY29kZXIoYXR0cklkcywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXSwgb3RoZXJzID0gdGhpc1tfYXR0cl07XG4gICAgICAgICAgICAgIGZvcih2YXIgaSA9IDAsIGwgPSBvdGhlcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gob3RoZXJzW2ldLiRwayk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHJlc3Rtb2QubWl4aW4oZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5leHRlbmQoJ2F0dHJBc0NvbGxlY3Rpb24nLCBFWFQuYXR0ckFzQ29sbGVjdGlvbiwgWydoYXNNYW55JywgJ3BhdGgnLCAnc291cmNlJywgJ2ludmVyc2VPZicsICdwYXJhbXMnLCAnaG9va3MnXSkgLy8gVE9ETzogcmVuYW1lIHNvdXJjZSB0byBtYXAsIGJ1dCBkaXNhYmxlIGF0dHJNYXAgaWYgbWFwIGlzIHVzZWQgaGVyZS4uLlxuICAgICAgICAuZXh0ZW5kKCdhdHRyQXNSZXNvdXJjZScsIEVYVC5hdHRyQXNSZXNvdXJjZSwgWydoYXNPbmUnLCAncGF0aCcsICdzb3VyY2UnLCAnaW52ZXJzZU9mJywgJ2hvb2tzJ10pXG4gICAgICAgIC5leHRlbmQoJ2F0dHJBc1JlZmVyZW5jZScsIEVYVC5hdHRyQXNSZWZlcmVuY2UsIFsnYmVsb25nc1RvJywgJ2tleScsICdwcmVmZXRjaCddKVxuICAgICAgICAuZXh0ZW5kKCdhdHRyQXNSZWZlcmVuY2VUb01hbnknLCBFWFQuYXR0ckFzUmVmZXJlbmNlVG9NYW55LCBbJ2JlbG9uZ3NUb01hbnknLCAna2V5cyddKTtcbiAgfSk7XG5cbn1dKTtcblJNTW9kdWxlLmZhY3RvcnkoJ1JNTW9kZWxGYWN0b3J5JywgWyckaW5qZWN0b3InLCAnJGxvZycsICdpbmZsZWN0b3InLCAnUk1VdGlscycsICdSTVNjb3BlQXBpJywgJ1JNQ29tbW9uQXBpJywgJ1JNUmVjb3JkQXBpJywgJ1JNTGlzdEFwaScsICdSTUNvbGxlY3Rpb25BcGknLCAnUk1FeHRlbmRlZEFwaScsICdSTVNlcmlhbGl6ZXInLCAnUk1CdWlsZGVyJyxcbiAgZnVuY3Rpb24oJGluamVjdG9yLCAkbG9nLCBpbmZsZWN0b3IsIFV0aWxzLCBTY29wZUFwaSwgQ29tbW9uQXBpLCBSZWNvcmRBcGksIExpc3RBcGksIENvbGxlY3Rpb25BcGksIEV4dGVuZGVkQXBpLCBTZXJpYWxpemVyLCBCdWlsZGVyKSB7XG5cbiAgdmFyIE5BTUVfUkdYID0gLyguKj8pKFteXFwvXSspXFwvPyQvLFxuICAgICAgZXh0ZW5kID0gVXRpbHMuZXh0ZW5kT3ZlcnJpZGVuO1xuXG4gIHJldHVybiBmdW5jdGlvbihfYmFzZVVybCwgX2Jhc2VDaGFpbikge1xuXG4gICAgLy8gSURFQTogbWFrZSBjb25zdHJ1Y3RvciBpbmFjY2Vzc2libGUsIHVzZSBzZXBhcmF0ZSB0eXBlIGZvciByZWNvcmRzP1xuICAgIC8vICogV2lsbCBlbnN1cmUgcHJvcGVyIHVzYWdlLlxuICAgIC8vICogV2lsbCBsb3NlIHR5cGUgY2hlY2tpbmdcbiAgICBmdW5jdGlvbiBNb2RlbChfc2NvcGUsIF9waykge1xuICAgICAgdGhpcy4kc2NvcGUgPSBfc2NvcGUgfHwgTW9kZWw7XG4gICAgICB0aGlzLiRwayA9IF9waztcbiAgICAgIHRoaXMuJGluaXRpYWxpemUoKTtcbiAgICB9XG5cbiAgICBfYmFzZVVybCA9IFV0aWxzLmNsZWFuVXJsKF9iYXNlVXJsKTtcblxuICAgIHZhciBjb25maWcgPSB7XG4gICAgICAgIHByaW1hcnlLZXk6ICdpZCcsXG4gICAgICAgIHVybFByZWZpeDogbnVsbFxuICAgICAgfSxcbiAgICAgIHNlcmlhbGl6ZXIgPSBuZXcgU2VyaWFsaXplcihNb2RlbCksXG4gICAgICBkZWZhdWx0cyA9IFtdLCAgICAgICAgICAgICAgICAgICAgLy8gYXR0cmlidXRlIGRlZmF1bHRzIGFzIGFuIGFycmF5IG9mIFtrZXksIHZhbHVlXVxuICAgICAgY29tcHV0ZXMgPSBbXSwgICAgICAgICAgICAgICAgICAgIC8vIGNvbXB1dGVkIGF0dHJpYnV0ZXNcbiAgICAgIG1ldGEgPSB7fSwgICAgICAgICAgICAgICAgICAgICAgICAvLyBhdHJpYnV0ZSBtZXRhZGF0YVxuICAgICAgaG9va3MgPSB7fSxcbiAgICAgIGJ1aWxkZXI7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgbW9kZWwgYnVpbGRlclxuXG4gICAgLy8gbWFrZSBzdXJlIHRoZSByZXNvdXJjZSBuYW1lIGFuZCBwbHVyYWwgbmFtZSBhcmUgYXZhaWxhYmxlIGlmIHBvc2libGU6XG5cbiAgICBpZighY29uZmlnLm5hbWUgJiYgX2Jhc2VVcmwpIHtcbiAgICAgIGNvbmZpZy5uYW1lID0gaW5mbGVjdG9yLnNpbmd1bGFyaXplKF9iYXNlVXJsLnJlcGxhY2UoTkFNRV9SR1gsICckMicpKTtcbiAgICB9XG5cbiAgICBpZighY29uZmlnLnBsdXJhbCAmJiBjb25maWcubmFtZSkge1xuICAgICAgY29uZmlnLnBsdXJhbCA9IGluZmxlY3Rvci5wbHVyYWxpemUoY29uZmlnLm5hbWUpO1xuICAgIH1cblxuICAgIHZhciBDb2xsZWN0aW9uID0gVXRpbHMuYnVpbGRBcnJheVR5cGUoKSxcbiAgICAgICAgTGlzdCA9IFV0aWxzLmJ1aWxkQXJyYXlUeXBlKCksXG4gICAgICAgIER1bW15ID0gZnVuY3Rpb24oX2FzQ29sbGVjdGlvbikge1xuICAgICAgICAgIHRoaXMuJGlzQ29sbGVjdGlvbiA9IF9hc0NvbGxlY3Rpb247XG4gICAgICAgICAgdGhpcy4kaW5pdGlhbGl6ZSgpOyAvLyBUT0RPOiBkZXByZWNhdGUgdGhpc1xuICAgICAgICB9O1xuXG4gICAgLy8gQ29sbGVjdGlvbiBmYWN0b3J5XG4gICAgZnVuY3Rpb24gbmV3Q29sbGVjdGlvbihfcGFyYW1zLCBfc2NvcGUpIHtcbiAgICAgIHZhciBjb2wgPSBuZXcgQ29sbGVjdGlvbigpO1xuICAgICAgY29sLiRzY29wZSA9IF9zY29wZSB8fCBNb2RlbDtcbiAgICAgIGNvbC4kcGFyYW1zID0gX3BhcmFtcztcbiAgICAgIGNvbC4kaW5pdGlhbGl6ZSgpO1xuICAgICAgcmV0dXJuIGNvbDtcbiAgICB9XG5cbiAgICAvLy8vLyBTZXR1cCBzdGF0aWMgYXBpXG5cbiAgICAvKipcbiAgICAgKiBAY2xhc3MgU3RhdGljQXBpXG4gICAgICogQGV4dGVuZHMgU2NvcGVBcGlcbiAgICAgKiBAZXh0ZW5kcyBDb21tb25BcGlcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogVGhlIHJlc3Rtb2QgdHlwZSBBUEksIGV2ZXJ5IGdlbmVyYXRlZCByZXN0bW9kIG1vZGVsIHR5cGUgZXhwb3NlcyB0aGlzIEFQSS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSAkdHlwZSBSZWZlcmVuY2UgdG8gdGhlIHR5cGUgaXRzZWxmLCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIHRoZSB7QGxpbmsgU2NvcGVBcGl9XG4gICAgICpcbiAgICAgKiAjIyMjIEFib3V0IG9iamVjdCBjcmVhdGlvblxuICAgICAqXG4gICAgICogRGlyZWN0IGNvbnN0cnVjdGlvbiBvZiBvYmplY3QgaW5zdGFuY2VzIHVzaW5nIGBuZXdgIGlzIG5vdCByZWNvbW1lbmRlZC4gQSBjb2xsZWN0aW9uIG9mXG4gICAgICogc3RhdGljIG1ldGhvZHMgYXJlIGF2YWlsYWJsZSB0byBnZW5lcmF0ZSBuZXcgaW5zdGFuY2VzIG9mIGEgbW9kZWwsIGZvciBtb3JlIGluZm9ybWF0aW9uXG4gICAgICogcmVhZCB0aGUge0BsaW5rIE1vZGVsQ29sbGVjdGlvbn0gZG9jdW1lbnRhdGlvbi5cbiAgICAgKi9cbiAgICBleHRlbmQoTW9kZWwsIHtcblxuICAgICAgLy8gZ2V0cyBhbiBhdHRyaWJ1dGUgZGVzY3JpcHRpb24gKG1ldGFkYXRhKVxuICAgICAgJCRnZXREZXNjcmlwdGlvbjogZnVuY3Rpb24oX2F0dHJpYnV0ZSkge1xuICAgICAgICByZXR1cm4gbWV0YVtfYXR0cmlidXRlXTtcbiAgICAgIH0sXG5cbiAgICAgIC8vIGRlZmluaXRpb24gY2hhaW5cbiAgICAgICQkY2hhaW46IFtdLFxuXG4gICAgICAvLyBrZWVwIGEgcmVmZXJlbmNlIHRvIHR5cGUgaXRzZWxmIGZvciBzY29wZSBhcGkgY29tcGF0aWJpbGl0eVxuICAgICAgJHR5cGU6IE1vZGVsLFxuXG4gICAgICAvLyBjcmVhdGVzIGEgbmV3IG1vZGVsIGJvdW5kIGJ5IGRlZmF1bHQgdG8gdGhlIHN0YXRpYyBzY29wZVxuICAgICAgJG5ldzogZnVuY3Rpb24oX3BrLCBfc2NvcGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNb2RlbChfc2NvcGUgfHwgTW9kZWwsIF9wayk7XG4gICAgICB9LFxuXG4gICAgICAvLyBjcmVhdGVzIGEgbmV3IGNvbGxlY3Rpb24gYm91bmQgYnkgZGVmYXVsdCB0byB0aGUgc3RhdGljIHNjb3BlXG4gICAgICAkY29sbGVjdGlvbjogbmV3Q29sbGVjdGlvbixcblxuICAgICAgLy8gZ2V0cyBzY29wZSB1cmxcbiAgICAgICR1cmw6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY29uZmlnLnVybFByZWZpeCA/IFV0aWxzLmpvaW5VcmwoY29uZmlnLnVybFByZWZpeCwgX2Jhc2VVcmwpIDogX2Jhc2VVcmw7XG4gICAgICB9LFxuXG4gICAgICAvLyBidWJibGVzIGV2ZW50cyBjb21taW5nIGZyb20gcmVsYXRlZCByZXNvdXJjZXNcbiAgICAgICRkaXNwYXRjaDogZnVuY3Rpb24oX2hvb2ssIF9hcmdzLCBfY3R4KSB7XG4gICAgICAgIHZhciBjYnMgPSBob29rc1tfaG9va10sIGksIGNiO1xuICAgICAgICBpZihjYnMpIHtcbiAgICAgICAgICBmb3IoaSA9IDA7ICEhKGNiID0gY2JzW2ldKTsgaSsrKSB7XG4gICAgICAgICAgICBjYi5hcHBseShfY3R4IHx8IHRoaXMsIF9hcmdzIHx8IFtdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBtZW1iZXJvZiBTdGF0aWNBcGkjXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKlxuICAgICAgICogRXh0cmFjdHMgdGhlIHByaW1hcnkga2V5IGZyb20gcmF3IHJlY29yZCBkYXRhLlxuICAgICAgICpcbiAgICAgICAqIFVzZXMgdGhlIGtleSBjb25maWd1cmVkIGluIHRoZSBQUklNQVJZX0tFWSB2YXJpYWJsZSBvciAnaWQnIGJ5IGRlZmF1bHQuXG4gICAgICAgKlxuICAgICAgICogU29tZSBjb25zaWRlcmF0aW9uczpcbiAgICAgICAqICogVGhpcyBtZXRob2QgY2FuIGJlIG92ZXJyaWRlbiB0byBoYW5kbGUgb3RoZXIgc2NlbmFyaW9zLlxuICAgICAgICogKiBUaGlzIG1ldGhvZCBzaG91bGQgbm90IGNoYW5nZSB0aGUgcmF3IGRhdGEgcGFzc2VkIHRvIGl0LlxuICAgICAgICogKiBUaGUgcHJpbWFyeSBrZXkgdmFsdWUgZXh0cmFjdGVkIGJ5IHRoaXMgbWV0aG9kIHNob3VsZCBiZSBjb21wYXJhYmxlIHVzaW5nIHRoZSA9PSBvcGVyYXRvci5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IF9yYXdEYXRhIFJhdyBvYmplY3QgZGF0YSAoYmVmb3JlIGl0IGdvZXMgaW50byBkZWNvZGUpXG4gICAgICAgKiBAcmV0dXJuIHttaXhlZH0gVGhlIHByaW1hcnkga2V5IHZhbHVlLlxuICAgICAgICovXG4gICAgICBpbmZlcktleTogZnVuY3Rpb24oX3Jhd0RhdGEpIHtcbiAgICAgICAgaWYoIV9yYXdEYXRhIHx8IHR5cGVvZiBfcmF3RGF0YVtjb25maWcucHJpbWFyeUtleV0gPT09ICd1bmRlZmluZWQnKSByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIF9yYXdEYXRhW2NvbmZpZy5wcmltYXJ5S2V5XTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG1lbWJlcm9mIFN0YXRpY0FwaSNcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqXG4gICAgICAgKiBHZXRzIGEgbW9kZWwncyBpbnRlcm5hbCBwcm9wZXJ0eSB2YWx1ZS5cbiAgICAgICAqXG4gICAgICAgKiBTb21lIGJ1aWx0aW4gcHJvcGVydGllczpcbiAgICAgICAqICogdXJsXG4gICAgICAgKiAqIHVybFByZWZpeFxuICAgICAgICogKiBwcmltYXJ5S2V5XG4gICAgICAgKlxuICAgICAgICogQHBhcmFtICB7c3RyaW5nfSBfa2V5IFByb3BlcnR5IG5hbWVcbiAgICAgICAqIEBwYXJhbSAge21peGVkfSBfZGVmYXVsdCBWYWx1ZSB0byByZXR1cm4gaWYgcHJvcGVydHkgaXMgbm90IGRlZmluZWRcbiAgICAgICAqIEByZXR1cm4ge21peGVkfSB2YWx1ZVxuICAgICAgICovXG4gICAgICBnZXRQcm9wZXJ0eTogZnVuY3Rpb24oX2tleSwgX2RlZmF1bHQpIHtcbiAgICAgICAgdmFyIHZhbCA9IGNvbmZpZ1tfa2V5XTtcbiAgICAgICAgcmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID8gdmFsIDogX2RlZmF1bHQ7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBtZW1iZXJvZiBTdGF0aWNBcGkjXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uIFJldHVybnMgdHJ1ZSBpZiBtb2RlbCBpcyBuZXN0ZWQuXG4gICAgICAgKlxuICAgICAgICogQW4gbmVzdGVkIG1vZGVsIGNhbiBvbmx5IGJlIHVzZWQgYXMgYSBuZXN0ZWQgcmVzb3VyY2UgKHVzaW5nIGhhc01hbnkgb3IgaGFzT25lIHJlbGF0aW9ucylcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIG1vZGVsIGlzIG5lc3RlZC5cbiAgICAgICAqL1xuICAgICAgaXNOZXN0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gIV9iYXNlVXJsO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbWVtYmVyb2YgU3RhdGljQXBpI1xuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIGEgcmVzb3VyY2UgYm91bmQgdG8gYSBnaXZlbiB1cmwsIHdpdGggbm8gcGFyZW50IHNjb3BlLlxuICAgICAgICpcbiAgICAgICAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gY3JlYXRlIHNpbmdsZXRvbiByZXNvdXJjZXM6XG4gICAgICAgKlxuICAgICAgICogYGBgamF2YXNjcmlwdFxuICAgICAgICogbW9kdWxlKCdCaWtlU2hvcCcsIFtdKS5mYWN0b3J5KCdTdGF0dXMnLCBmdW5jdGlvbihyZXN0bW9kKSB7XG4gICAgICAgKiAgIHJldHVybiByZXN0bW9kLm1vZGVsKG51bGwpLiRzaW5nbGUoJy9hcGkvc3RhdHVzJyk7XG4gICAgICAgKiB9OylcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBfdXJsIFVybCB0byBib3VuZCByZXNvdXJjZSB0by5cbiAgICAgICAqIEByZXR1cm4ge01vZGVsfSBuZXcgcmVzb3VyY2UgaW5zdGFuY2UuXG4gICAgICAgKi9cbiAgICAgIHNpbmdsZTogZnVuY3Rpb24oX3VybCkge1xuICAgICAgICByZXR1cm4gbmV3IE1vZGVsKHtcbiAgICAgICAgICAkdXJsRm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25maWcudXJsUHJlZml4ID8gVXRpbHMuam9pblVybChjb25maWcudXJsUHJlZml4LCBfdXJsKSA6IF91cmw7XG4gICAgICAgICAgfVxuICAgICAgICB9LCAnJyk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEJ1aWxkcyBhIG5ldyBkdW1teSByZXNvdXJjZSwgdGhlIGR1bW15IHJlc291cmNlIGNhbiBiZSB1c2VkIHRvIGV4ZWN1dGUgcmFuZG9tIHF1ZXJpZXNcbiAgICAgICAqIHVzaW5nIHRoZSBzYW1lIGluZnJhc3RydWN0dXJlIGFzIHJlY29yZHMgYW5kIGNvbGxlY3Rpb25zLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge0R1bW15fSB0aGUgZHVtbXkgb2JqZWN0XG4gICAgICAgKi9cbiAgICAgIGR1bW15OiBmdW5jdGlvbihfYXNDb2xsZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBuZXcgRHVtbXkoX2FzQ29sbGVjdGlvbik7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIENyZWF0ZXMgYSBuZXcgcmVjb3JkIGxpc3QuXG4gICAgICAgKlxuICAgICAgICogQSBsaXN0IGlzIGEgb3JkZXJlZCBzZXQgb2YgcmVjb3JkcyBub3QgYm91bmQgdG8gYSBwYXJ0aWN1bGFyIHNjb3BlLlxuICAgICAgICpcbiAgICAgICAqIENvbnRhaW5lZCByZWNvcmRzIGNhbiBiZWxvbmcgdG8gYW55IHNjb3BlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge0xpc3R9IHRoZSBuZXcgbGlzdFxuICAgICAgICovXG4gICAgICBsaXN0OiBmdW5jdGlvbihfaXRlbXMpIHtcbiAgICAgICAgdmFyIGxpc3QgPSBuZXcgTGlzdCgpO1xuICAgICAgICBpZihfaXRlbXMpIGxpc3QucHVzaC5hcHBseShsaXN0LCBfaXRlbXMpO1xuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG1lbWJlcm9mIFN0YXRpY0FwaSNcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyB0aGUgbW9kZWwgQVBJIG5hbWUuXG4gICAgICAgKlxuICAgICAgICogVGhpcyBuYW1lIHNob3VsZCBtYXRjaCB0aGUgb25lIHVzZWQgdGhyb3VnaG91dCB0aGUgQVBJLiBJdCdzIG9ubHkgdXNlZCBieSBzb21lIGV4dGVuZGVkXG4gICAgICAgKiBmdW5jdGlvbmFsaXR5LCBsaWtlIHRoZSBkZWZhdWx0IHBhY2tlci5cbiAgICAgICAqXG4gICAgICAgKiBCeSBkZWZhdWx0IG1vZGVsIG5hbWUgaXMgaW5mZXJlZCBmcm9tIHRoZSB1cmwsIGJ1dCBmb3IgbmVzdGVkIG1vZGVscyBhbmQgc3BlY2lhbCBjYXNlc1xuICAgICAgICogaXQgc2hvdWxkIGJlIG1hbnVhbGx5IHNldCBieSB3cml0aW5nIHRoZSBuYW1lIGFuZCBwbHVyYWwgcHJvcGVydGllczpcbiAgICAgICAqXG4gICAgICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgICAgKiByZXN0bW9kLm1vZGVsKG51bGwsIHtcbiAgICAgICAqICAgX19uYW1lX186ICdyZXNvdXJjZScsXG4gICAgICAgKiAgIF9fcGx1cmFsX186ICdyZXNvdXJjaW5lc3MnIC8vIHNldCBvbmx5IGlmIGluZmxlY3RvciBjYW50IHByb3Blcmx5IGdlc3MgdGhlIG5hbWUuXG4gICAgICAgKiB9KTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IElmIHRydWUsIHJldHVybiBwbHVyYWwgbmFtZVxuICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgYmFzZSB1cmwuXG4gICAgICAgKi9cbiAgICAgIGlkZW50aXR5OiBmdW5jdGlvbihfcGx1cmFsKSB7XG4gICAgICAgIHJldHVybiBfcGx1cmFsID8gY29uZmlnLnBsdXJhbCA6IGNvbmZpZy5uYW1lO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbWVtYmVyb2YgU3RhdGljQXBpI1xuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvbiBNb2RpZmllcyBtb2RlbCBiZWhhdmlvci5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW1zIHttaXhlZH0gX21peGlucyBPbmUgb3IgbW9yZSBtaXhpbnMgb3IgbW9kZWwgZGVmaW5pdGlvbnMuXG4gICAgICAgKiBAcmV0dXJuIHtNb2RlbH0gVGhlIG1vZGVsXG4gICAgICAgKi9cbiAgICAgIG1peDogZnVuY3Rpb24oLyogbWl4aW5zICovKSB7XG4gICAgICAgIGJ1aWxkZXIuY2hhaW4oYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy4kJGNoYWluLnB1c2guYXBwbHkodGhpcy4kJGNoYWluLCBhcmd1bWVudHMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG5cbiAgICAgIC8vIFN0cmF0ZWdpZXNcblxuICAgICAgLyoqXG4gICAgICAgKiBAbWVtYmVyb2YgU3RhdGljQXBpI1xuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvbiBUaGUgbW9kZWwgdW5wYWNraW5nIHN0cmF0ZWd5XG4gICAgICAgKlxuICAgICAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIHRvIGV4dHJhY3QgcmVjb3JkIGRhdGEgZnJvbSBhIHJlcXVlc3QgcmVzcG9uc2UsIGl0cyBhbHNvXG4gICAgICAgKiByZXNwb25zaWJsZSBvZiBoYW5kbGluZyB0aGUgcmVzcG9uc2UgbWV0YWRhdGEuXG4gICAgICAgKlxuICAgICAgICogT3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gY2hhbmdlIHRoZSBtZXRhZGF0YSBwcm9jZXNzaW5nIHN0cmF0ZWd5LCBieSBkZWZhdWx0IGl0cyBhIG5vb3BcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW1zIHttaXhlZH0gX3Jlc291cmNlIFJlbGF0ZWQgcmVzb3VyY2UgaW5zdGFuY2VcbiAgICAgICAqIEBwYXJhbXMge21peGVkfSBfcmF3IFJlc3BvbnNlIHJhdyBkYXRhXG4gICAgICAgKiBAcmV0dXJuIHttaXhlZH0gUmVzb3VyY2UgcmF3IGRhdGFcbiAgICAgICAqL1xuICAgICAgdW5wYWNrOiBmdW5jdGlvbihfcmVzb3VyY2UsIF9yYXcpIHsgcmV0dXJuIF9yYXc7IH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG1lbWJlcm9mIFN0YXRpY0FwaSNcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb24gVGhlIG1vZGVsIHBhY2tpbmcgc3RyYXRlZ3lcbiAgICAgICAqXG4gICAgICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgdG8gd3JhcCByYXcgcmVjb3JkIGRhdGEgdG8gYmUgc2VudCBpbiBhIHJlcXVlc3QuXG4gICAgICAgKlxuICAgICAgICogT3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gY2hhbmdlIHRoZSByZXF1ZXN0IHBhY2tpbmcgc3RyYXRlZ3ksIGJ5IGRlZmF1bHQgaXRzIGEgbm9vcFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbXMge21peGVkfSBfcmVzb3VyY2UgUmVsYXRlZCByZXNvdXJjZSBpbnN0YW5jZVxuICAgICAgICogQHBhcmFtcyB7bWl4ZWR9IF9yYXcgUmVjb3JkIGRhdGEgdG8gYmUgc2VudCAoY2FuIGJlIGFuIGFycmF5IGlmIHJlc291cmNlIGlzIGNvbGxlY3Rpb24pXG4gICAgICAgKiBAcmV0dXJuIHttaXhlZH0gV3JhcHBlZCBkYXRhXG4gICAgICAgKi9cbiAgICAgIHBhY2s6IGZ1bmN0aW9uKF9yZWNvcmQsIF9yYXcpIHsgcmV0dXJuIF9yYXc7IH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG1lbWJlcm9mIFN0YXRpY0FwaSNcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb24gVGhlIG1vZGVsIGRlY29kaW5nIHN0cmF0ZWd5XG4gICAgICAgKlxuICAgICAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIHRvIHBvcHVsYXRlIGEgcmVjb3JkIGZyb20gcmF3IGRhdGEgKHVucHBhY2tlZClcbiAgICAgICAqL1xuICAgICAgZGVjb2RlOiBzZXJpYWxpemVyLmRlY29kZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbWVtYmVyb2YgU3RhdGljQXBpI1xuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvbiBUaGUgbW9kZWwgZW5jb2Rpbmcgc3RyYXRlZ3lcbiAgICAgICAqXG4gICAgICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgdG8gZXh0cmFjdCByYXcgZGF0YSBmcm9tIGEgcmVjb3JkIHRvIGJlIHNlbnQgdG8gc2VydmVyIChiZWZvcmUgcGFja2luZylcbiAgICAgICAqL1xuICAgICAgZW5jb2RlOiBzZXJpYWxpemVyLmVuY29kZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbWVtYmVyb2YgU3RhdGljQXBpI1xuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvbiBUaGUgbW9kZWwgbmFtZSBkZWNvZGluZyBzdHJhdGVneVxuICAgICAgICpcbiAgICAgICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBvbiBldmVyeSByYXcgcmVjb3JkIGRhdGEgcHJvcGVydHkgdG8gcmVuYW1lIGl0LCBieSBkZWZhdWx0IGlzIG5vdCBkZWZpbmVkLlxuICAgICAgICpcbiAgICAgICAqIE92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIGNoYW5nZSB0aGUgcHJvcGVydHkgcmVuYW1pbmcgc3RyYXRlZ3kuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtcyB7c3RyaW5nfSBfbmFtZSBSZXNwb25zZSAocmF3KSBuYW1lXG4gICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFJlY29yZCBuYW1lXG4gICAgICAgKi9cbiAgICAgIGRlY29kZU5hbWU6IG51bGwsXG5cbiAgICAgIC8qKlxuICAgICAgICogQG1lbWJlcm9mIFN0YXRpY0FwaSNcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb24gVGhlIG1vZGVsIG5hbWUgZW5jb2Rpbmcgc3RyYXRlZ3lcbiAgICAgICAqXG4gICAgICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgd2hlbiBlbmNvZGluZyBhIHJlY29yZCB0byByZW5hbWUgdGhlIHJlY29yZCBwcm9wZXJ0aWVzIGludG8gdGhlIHJhdyBkYXRhIHByb3BlcnRpZXMsXG4gICAgICAgKiBieSBkZWZhdWx0IGlzIG5vdCBkZWZpbmVkLlxuICAgICAgICpcbiAgICAgICAqIE92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIGNoYW5nZSB0aGUgcHJvcGVydHkgcmVuYW1pbmcgc3RyYXRlZ3lcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW1zIHtzdHJpbmd9IF9uYW1lIFJlY29yZCBuYW1lXG4gICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFJlc3BvbnNlIChyYXcpIG5hbWVcbiAgICAgICAqL1xuICAgICAgZW5jb2RlTmFtZTogbnVsbCxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbWVtYmVyb2YgU3RhdGljQXBpI1xuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvbiBUaGUgbW9kZWwgbmFtZSB0byB1cmwgZW5jb2Rpbmcgc3RyYXRlZ3lcbiAgICAgICAqXG4gICAgICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgd2hlbiB0cmFuc2xhdGluZyBhIG5hbWUgaW50byBhbiB1cmwgZnJhZ21lbnQgKG1haW5seSBieSByZWxhdGlvbnMpLlxuICAgICAgICpcbiAgICAgICAqIEJ5IGRlZmF1bHQgaXQgdXNlcyB0aGUgYGluZmxlY3Rvci5wYXJhbWV0ZXJpemVgIG1ldGhvZCwgaW4gMS4yIHRoaXMgd2lsbCBjaGFuZ2UgYW5kIHRoZSBkZWZhdWx0XG4gICAgICAgKiBiZWhhdmlvdXIgd2lsbCBiZSB0byBkbyBub3RoaW5nLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbXMge3N0cmluZ30gX25hbWUgbG9jYWwgbmFtZVxuICAgICAgICogQHJldHVybiB7c3RyaW5nfSB1cmwgZnJhZ21lbnRcbiAgICAgICAqL1xuICAgICAgZW5jb2RlVXJsTmFtZTogZnVuY3Rpb24oX25hbWUpIHtcbiAgICAgICAgJGxvZy53YXJuKCdEZWZhdWx0IHBhcmVtZXRlcml6YXRpb24gb2YgdXJscyB3aWxsIGJlIGRpc2FibGVkIGluIDEuMiwgb3ZlcnJpZGUgTW9kZWwuZW5jb2RlVXJsTmFtZSB3aXRoIGluZmxlY3Rvci5wYXJhbWV0ZXJpemUgaW4geW91ciBiYXNlIG1vZGVsIHRvIGtlZXAgdGhlIHNhbWUgYmVoYXZpb3VyLicpO1xuICAgICAgICByZXR1cm4gaW5mbGVjdG9yLnBhcmFtZXRlcml6ZShfbmFtZSk7XG4gICAgICB9XG5cbiAgICB9LCBTY29wZUFwaSk7XG5cbiAgICAvLy8vLyBTZXR1cCByZWNvcmQgYXBpXG5cbiAgICBleHRlbmQoTW9kZWwucHJvdG90eXBlLCB7XG5cbiAgICAgICR0eXBlOiBNb2RlbCxcblxuICAgICAgLy8gZGVmYXVsdCBpbml0aWFsaXplcjogbG9hZHMgdGhlIGRlZmF1bHQgcGFyYW1ldGVyIHZhbHVlc1xuICAgICAgJGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdG1wLCBpLCBzZWxmID0gdGhpcztcbiAgICAgICAgZm9yKGkgPSAwOyAodG1wID0gZGVmYXVsdHNbaV0pOyBpKyspIHtcbiAgICAgICAgICB0aGlzW3RtcFswXV0gPSAodHlwZW9mIHRtcFsxXSA9PT0gJ2Z1bmN0aW9uJykgPyB0bXBbMV0uYXBwbHkodGhpcykgOiB0bXBbMV07XG4gICAgICAgIH1cblxuICAgICAgICBmb3IoaSA9IDA7ICh0bXAgPSBjb21wdXRlc1tpXSk7IGkrKykge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLCB0bXBbMF0sIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBnZXQ6IHRtcFsxXVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICB9LCBDb21tb25BcGksIFJlY29yZEFwaSwgRXh0ZW5kZWRBcGkpO1xuXG4gICAgLy8vLy8gU2V0dXAgY29sbGVjdGlvbiBhcGlcblxuICAgIGV4dGVuZChDb2xsZWN0aW9uLnByb3RvdHlwZSwge1xuXG4gICAgICAkdHlwZTogTW9kZWwsXG5cbiAgICAgIC8vIHByb3ZpZGUgcmVjb3JkIGNvbnRydWN0b3JcbiAgICAgICRuZXc6IGZ1bmN0aW9uKF9waywgX3Njb3BlKSB7XG4gICAgICAgIHJldHVybiBNb2RlbC4kbmV3KF9waywgX3Njb3BlIHx8IHRoaXMpO1xuICAgICAgfSxcblxuICAgICAgLy8gcHJvdmlkZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgICAkY29sbGVjdGlvbjogZnVuY3Rpb24oX3BhcmFtcywgX3Njb3BlKSB7XG4gICAgICAgIF9wYXJhbXMgPSB0aGlzLiRwYXJhbXMgPyBhbmd1bGFyLmV4dGVuZCh7fSwgdGhpcy4kcGFyYW1zLCBfcGFyYW1zKSA6IF9wYXJhbXM7XG4gICAgICAgIHJldHVybiBuZXdDb2xsZWN0aW9uKF9wYXJhbXMsIF9zY29wZSB8fCB0aGlzLiRzY29wZSk7XG4gICAgICB9XG5cbiAgICB9LCBMaXN0QXBpLCBTY29wZUFwaSwgQ29tbW9uQXBpLCBDb2xsZWN0aW9uQXBpLCBFeHRlbmRlZEFwaSk7XG5cbiAgICAvLy8vLyBTZXR1cCBsaXN0IGFwaVxuXG4gICAgZXh0ZW5kKExpc3QucHJvdG90eXBlLCB7XG5cbiAgICAgICR0eXBlOiBNb2RlbFxuXG4gICAgfSwgTGlzdEFwaSwgQ29tbW9uQXBpKTtcblxuICAgIC8vLy8vIFNldHVwIGR1bW15IGFwaVxuXG4gICAgZXh0ZW5kKER1bW15LnByb3RvdHlwZSwge1xuXG4gICAgICAkdHlwZTogTW9kZWwsXG5cbiAgICAgICRpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gTm90aGluZyBieSBkZWZhdWx0XG4gICAgICB9XG5cbiAgICB9LCBDb21tb25BcGkpO1xuXG4gICAgLy8vLy8gU2V0dXAgYnVpbGRlclxuXG4gICAgdmFyIEFQSVMgPSB7XG4gICAgICBNb2RlbDogTW9kZWwsXG4gICAgICBSZWNvcmQ6IE1vZGVsLnByb3RvdHlwZSxcbiAgICAgIENvbGxlY3Rpb246IENvbGxlY3Rpb24ucHJvdG90eXBlLFxuICAgICAgTGlzdDogTGlzdC5wcm90b3R5cGUsXG4gICAgICBEdW1teTogRHVtbXkucHJvdG90eXBlXG4gICAgfTtcblxuICAgIC8vIGhlbHBlciB1c2VkIHRvIGV4dGVuZCBhcGknc1xuICAgIGZ1bmN0aW9uIGhlbHBEZWZpbmUoX2FwaSwgX25hbWUsIF9mdW4pIHtcbiAgICAgIHZhciBhcGkgPSBBUElTW19hcGldO1xuXG4gICAgICBVdGlscy5hc3NlcnQoISFhcGksICdJbnZhbGlkIGFwaSBuYW1lICQxJywgX2FwaSk7XG5cbiAgICAgIGlmKF9uYW1lKSB7XG4gICAgICAgIGFwaVtfbmFtZV0gPSBVdGlscy5vdmVycmlkZShhcGlbX25hbWVdLCBfZnVuKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFV0aWxzLmV4dGVuZE92ZXJyaWRlbihhcGksIF9mdW4pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGxvYWQgdGhlIGJ1aWxkZXJcbiAgICBidWlsZGVyID0gbmV3IEJ1aWxkZXIoYW5ndWxhci5leHRlbmQoc2VyaWFsaXplci5kc2woKSwge1xuXG4gICAgICAvKipcbiAgICAgICAqIEBtZW1iZXJvZiBCdWlsZGVyQXBpI1xuICAgICAgICpcbiAgICAgICAqIFNldHMgb25lIG9mIHRoZSBtb2RlbCdzIGNvbmZpZ3VyYXRpb24gcHJvcGVydGllcy5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgZm9sbG93aW5nIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVycyBhcmUgYXZhaWxhYmxlIGJ5IGRlZmF1bHQ6XG4gICAgICAgKiAqIHByaW1hcnlLZXk6IFRoZSBtb2RlbCdzIHByaW1hcnkga2V5LCBkZWZhdWx0cyB0byAqKmlkKiouIEtleXMgbXVzdCB1c2Ugc2VydmVyIG5hbWluZyBjb252ZW50aW9uIVxuICAgICAgICogKiB1cmxQcmVmaXg6IFVybCBwcmVmaXggdG8gcHJlcGVuZCB0byByZXNvdXJjZSB1cmwsIHVzZWZ1bGwgdG8gdXNlIGluIGEgYmFzZSBtaXhpbiB3aGVuIG11bHRpcGxlcyBtb2RlbHMgaGF2ZSB0aGUgc2FtZSBwcmVmaXguXG4gICAgICAgKiAqIHVybDogVGhlIHJlc291cmNlIGJhc2UgdXJsLCBudWxsIGJ5IGRlZmF1bHQuIElmIG5vdCBnaXZlbiByZXNvdXJjZSBpcyBjb25zaWRlcmVkIG5lc3RlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gX2tleSBUaGUgY29uZmlndXJhdGlvbiBrZXkgdG8gc2V0LlxuICAgICAgICogQHBhcmFtIHttaXhlZH0gX3ZhbHVlIFRoZSBjb25maWd1cmF0aW9uIHZhbHVlLlxuICAgICAgICogQHJldHVybiB7QnVpbGRlckFwaX0gc2VsZlxuICAgICAgICovXG4gICAgICBzZXRQcm9wZXJ0eTogZnVuY3Rpb24gKF9rZXksIF92YWx1ZSkge1xuICAgICAgICBjb25maWdbX2tleV0gPSBfdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbWVtYmVyb2YgQnVpbGRlckFwaSNcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb24gU2V0cyB0aGUgZGVmYXVsdCB2YWx1ZSBmb3IgYW4gYXR0cmlidXRlLlxuICAgICAgICpcbiAgICAgICAqIERlZmF1bHRzIHZhbHVlcyBhcmUgc2V0IG9ubHkgb24gb2JqZWN0IGNvbnN0cnVjdGlvbiBwaGFzZS5cbiAgICAgICAqXG4gICAgICAgKiBpZiBgX2luaXRgIGlzIGEgZnVuY3Rpb24sIHRoZW4gaXRzIGV2YWx1YXRlZCBldmVyeSB0aW1lIHRoZVxuICAgICAgICogZGVmYXVsdCB2YWx1ZSBpcyByZXF1aXJlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gX2F0dHIgQXR0cmlidXRlIG5hbWVcbiAgICAgICAqIEBwYXJhbSB7bWl4ZWR9IF9pbml0IERlZmF1bGYgdmFsdWUgLyBpbmlsaW5lIGZ1bmN0aW9uXG4gICAgICAgKiBAcmV0dXJuIHtCdWlsZGVyQXBpfSBzZWxmXG4gICAgICAgKi9cbiAgICAgIGF0dHJEZWZhdWx0OiBmdW5jdGlvbihfYXR0ciwgX2luaXQpIHtcbiAgICAgICAgZGVmYXVsdHMucHVzaChbX2F0dHIsIF9pbml0XSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbWVtYmVyb2YgQnVpbGRlckFwaSNcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb24gU2V0cyBhIGNvbXB1dGVkIHZhbHVlIGZvciBhbiBhdHRyaWJ1dGUuXG4gICAgICAgKlxuICAgICAgICogQ29tcHV0ZWQgdmFsdWVzIGFyZSBzZXQgb25seSBvbiBvYmplY3QgY29uc3RydWN0aW9uIHBoYXNlLlxuICAgICAgICogQ29tcHV0ZWQgdmFsdWVzIGFyZSBhbHdheXMgbWFza2VkXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IF9hdHRyIEF0dHJpYnV0ZSBuYW1lXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBfZm4gRnVuY3Rpb24gdGhhdCByZXR1cm5zIHZhbHVlXG4gICAgICAgKiBAcmV0dXJuIHtCdWlsZGVyQXBpfSBzZWxmXG4gICAgICAgKi9cbiAgICAgIGF0dHJDb21wdXRlZDogZnVuY3Rpb24oX2F0dHIsIF9mbikge1xuICAgICAgICBjb21wdXRlcy5wdXNoKFtfYXR0ciwgX2ZuXSk7XG4gICAgICAgIHRoaXMuYXR0ck1hc2soX2F0dHIsIHRydWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG1lbWJlcm9mIEJ1aWxkZXJBcGkjXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uIFJlZ2lzdGVycyBhdHRyaWJ1dGUgbWV0YWRhdGEuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IF9uYW1lIEF0dHJpYnV0ZSBuYW1lXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gX21ldGFkYXRhIEF0dHJpYnV0ZSBtZXRhZGF0YVxuICAgICAgICogQHJldHVybiB7QnVpbGRlckFwaX0gc2VsZlxuICAgICAgICovXG4gICAgICBhdHRyTWV0YTogZnVuY3Rpb24oX25hbWUsIF9tZXRhZGF0YSkge1xuICAgICAgICBtZXRhW19uYW1lXSA9IGV4dGVuZChtZXRhW19uYW1lXSB8fCB7fSwgX21ldGFkYXRhKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBtZW1iZXJvZiBCdWlsZGVyQXBpI1xuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvbiBBZGRzIG1ldGhvZHMgdG8gdGhlIG1vZGVsXG4gICAgICAgKlxuICAgICAgICogVGhpcyBtZXRob2QgYWxsb3dzIHRvIGV4dGVuZCB0aGUgZGlmZmVyZW50IG1vZGVsIEFQSSdzLlxuICAgICAgICpcbiAgICAgICAqIFRoZSBmb2xsb3dpbmcgQVBJJ3MgY2FuIGJlIGV4dGVuZGVkIHVzaW5nIHRoaXMgbWV0aG9kOlxuICAgICAgICogKiBNb2RlbDogVGhlIHN0YXRpYyBBUEksIGFmZmVjdHMgdGhlIE1vZGVsIG9iamVjdCBpdHNlbGYuXG4gICAgICAgKiAqIFJlY29yZDogQWZmZWN0cyBlYWNoIHJlY29yZCBnZW5lcmF0ZWQgYnkgdGhlIG1vZGVsLlxuICAgICAgICogKiBDb2xsZWN0aW9uOiBBZmZlY3RzIGVhY2ggY29sbGVjdGlvbiBnZW5lcmF0ZWQgYnkgdGhlIG1vZGVsLlxuICAgICAgICogKiBTY29wZTogQWZmZWN0cyBib3RoIHRoZSBzdGF0aWMgQVBJIGFuZCBjb2xsZWN0aW9ucy5cbiAgICAgICAqICogUmVzb3VyY2U6IEFmZmVjdHMgcmVjb3JkcyBhbmQgY29sbGVjdGlvbnMuXG4gICAgICAgKlxuICAgICAgICogSWYgbm8gYXBpIGlzIGdpdmVuXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqIElmIG5vIHNjb3BlIGlzIGdpdmVuLFxuICAgICAgICogQnkgZGVmYXVsdCB0aGlzIG1ldGhvZCBleHRlbmRzIHRoZSAqKlJlY29yZCoqIHByb3RvdHlwZS5cbiAgICAgICAqIElmIGNhbGxlZCB3aXRoIGFuIG9iamVjdFxuICAgICAgICogaW5zdGVhZCBvZiBhIGZ1bmN0aW9uIGl0IGNhbiBiZSB1c2VkIHRvIGV4dGVuZCB0aGUgY29sbGVjdGlvbiBhbmQgdGhlIHR5cGUgd2l0aFxuICAgICAgICogc3BlY2lmaWMgaW1wbGVtZW50YXRpb25zLlxuICAgICAgICpcbiAgICAgICAqIFVzYWdlOlxuICAgICAgICpcbiAgICAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAgICAqIHJlc3Rtb2QubWl4aW4oZnVuY3Rpb24oKSB7XG4gICAgICAgKiAgIHRoaXMuZGVmaW5lKCdteVJlY29yZE1ldGhvZCcsIGZ1bmN0aW9uKCkge30pXG4gICAgICAgKiAgICAgICAuZGVmaW5lKCdNb2RlbC5teVN0YXRpY01ldGhvZCcsIGZ1bmN0aW9uKCkge30pXG4gICAgICAgKiAgICAgICAuZGVmaW5lKCdDb2xsZWN0aW9uJywgeyB9KTsgLy8gb2JqZWN0IHRvIGV4dGVuZCBjb2xsZWN0aW9uIGFwaSB3aXRoXG4gICAgICAgKiB9KTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIEl0IGlzIHBvc2libGUgdG8gb3ZlcnJpZGUgYW4gZXhpc3RpbmcgbWV0aG9kIHVzaW5nIGRlZmluZSwgaWYgb3ZlcnJpZGVuLFxuICAgICAgICogdGhlIG9sZCBtZXRob2QgY2FuIGJlIGNhbGxlZCB1c2luZyBgdGhpcy4kc3VwZXJgIGluc2lkZSBkZSBuZXcgbWV0aG9kLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBfd2hlcmVcbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IF9mdW4gRnVuY3Rpb24gdG8gZGVmaW5lIG9yIG9iamVjdCB3aXRoIHBhcnRpY3VsYXIgaW1wbGVtZW50YXRpb25zXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gX2FwaSBPbmUgb2YgdGhlIGFwaSBuYW1lcyBsaXN0ZWQgYWJvdmUsIGlmIG5vdCBnaXZlbiBkZWZhdWx0cyB0byAnUmVjb3JkJ1xuICAgICAgICogQHJldHVybiB7QnVpbGRlckFwaX0gc2VsZlxuICAgICAgICovXG4gICAgICBkZWZpbmU6IGZ1bmN0aW9uKF93aGVyZSwgX2Z1bikge1xuXG4gICAgICAgIHZhciBuYW1lID0gZmFsc2UsIGFwaSA9ICdSZWNvcmQnO1xuICAgICAgICBpZih0eXBlb2YgX2Z1biA9PT0gJ29iamVjdCcgJiYgX2Z1bikge1xuICAgICAgICAgIGFwaSA9IF93aGVyZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuYW1lID0gX3doZXJlLnNwbGl0KCcuJyk7XG4gICAgICAgICAgaWYobmFtZS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lWzBdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcGkgPSBuYW1lWzBdO1xuICAgICAgICAgICAgbmFtZSA9IG5hbWVbMV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoKGFwaSkge1xuICAgICAgICAvLyBWaXJ0dWFsIEFQSSdzXG4gICAgICAgIGNhc2UgJ0xpc3QnOlxuICAgICAgICAgIGhlbHBEZWZpbmUoJ0NvbGxlY3Rpb24nLCBuYW1lLCBfZnVuKTtcbiAgICAgICAgICBoZWxwRGVmaW5lKCdMaXN0JywgbmFtZSwgX2Z1bik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ1Njb3BlJzpcbiAgICAgICAgICBoZWxwRGVmaW5lKCdNb2RlbCcsIG5hbWUsIF9mdW4pO1xuICAgICAgICAgIGhlbHBEZWZpbmUoJ0NvbGxlY3Rpb24nLCBuYW1lLCBfZnVuKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnUmVzb3VyY2UnOlxuICAgICAgICAgIGhlbHBEZWZpbmUoJ1JlY29yZCcsIG5hbWUsIF9mdW4pO1xuICAgICAgICAgIGhlbHBEZWZpbmUoJ0NvbGxlY3Rpb24nLCBuYW1lLCBfZnVuKTtcbiAgICAgICAgICBoZWxwRGVmaW5lKCdMaXN0JywgbmFtZSwgX2Z1bik7XG4gICAgICAgICAgaGVscERlZmluZSgnRHVtbXknLCBuYW1lLCBfZnVuKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBoZWxwRGVmaW5lKGFwaSwgbmFtZSwgX2Z1bik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG1lbWJlcm9mIEJ1aWxkZXJBcGkjXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uIEFkZHMgYW4gZXZlbnQgaG9va1xuICAgICAgICpcbiAgICAgICAqIEhvb2tzIGFyZSB1c2VkIHRvIGV4dGVuZCBvciBtb2RpZnkgdGhlIG1vZGVsIGJlaGF2aW9yLCBhbmQgYXJlIG5vdFxuICAgICAgICogZGVzaWduZWQgdG8gYmUgdXNlZCBhcyBhbiBldmVudCBsaXN0ZW5pbmcgc3lzdGVtLlxuICAgICAgICpcbiAgICAgICAqIFRoZSBnaXZlbiBmdW5jdGlvbiBpcyBleGVjdXRlZCBpbiB0aGUgaG9vaydzIGNvbnRleHQsIGRpZmZlcmVudCBob29rc1xuICAgICAgICogbWFrZSBkaWZmZXJlbnQgcGFyYW1ldGVycyBhdmFpbGFibGUgdG8gY2FsbGJhY2tzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBfaG9vayBUaGUgaG9vayBuYW1lLCByZWZlciB0byByZXN0bW9kIGRvY3MgZm9yIGJ1aWx0aW4gaG9va3MuXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBfZG8gZnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWRcbiAgICAgICAqIEByZXR1cm4ge0J1aWxkZXJBcGl9IHNlbGZcbiAgICAgICAqL1xuICAgICAgb246IGZ1bmN0aW9uKF9ob29rLCBfZG8pIHtcbiAgICAgICAgKGhvb2tzW19ob29rXSB8fCAoaG9va3NbX2hvb2tdID0gW10pKS5wdXNoKF9kbyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH0pKTtcblxuICAgIGJ1aWxkZXIuY2hhaW4oX2Jhc2VDaGFpbik7IC8vIGxvYWQgYmFzZSBjaGFpbi5cblxuICAgIHJldHVybiBNb2RlbDtcbiAgfTtcblxufV0pO1xuXG4vKipcbiAqIEBjbGFzcyBGYXN0UVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFN5bmNocm9ub3VzIHByb21pc2UgaW1wbGVtZW50YXRpb24gKHBhcnRpYWwpXG4gKlxuICovXG5STU1vZHVsZS5mYWN0b3J5KCdSTUZhc3RRJywgW2Z1bmN0aW9uKCkge1xuXG4gIHZhciBpc0Z1bmN0aW9uID0gYW5ndWxhci5pc0Z1bmN0aW9uLFxuICAgICAgY2F0Y2hFcnJvciA9IGZ1bmN0aW9uKF9lcnJvcikge1xuICAgICAgICByZXR1cm4gdGhpcy50aGVuKG51bGwsIF9lcnJvcik7XG4gICAgICB9O1xuXG4gIGZ1bmN0aW9uIHNpbXBsZVEoX3ZhbCwgX3dpdGhFcnJvcikge1xuXG4gICAgaWYoX3ZhbCAmJiBpc0Z1bmN0aW9uKF92YWwudGhlbikpIHJldHVybiB3cmFwcGVkUShfdmFsKTtcblxuICAgIHJldHVybiB7XG4gICAgICBzaW1wbGU6IHRydWUsXG5cbiAgICAgIHRoZW46IGZ1bmN0aW9uKF9zdWNjZXNzLCBfZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHNpbXBsZVEoX3dpdGhFcnJvciA/IF9lcnJvcihfdmFsKSA6IF9zdWNjZXNzKF92YWwpKTtcbiAgICAgIH0sXG4gICAgICAnY2F0Y2gnOiBjYXRjaEVycm9yLFxuICAgICAgJ2ZpbmFsbHknOiBmdW5jdGlvbihfY2IpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IF9jYigpO1xuICAgICAgICBpZihyZXN1bHQgJiYgaXNGdW5jdGlvbihfdmFsLnRoZW4pKSB7XG4gICAgICAgICAgLy8gaWYgZmluYWxseSByZXR1cm5zIGEgcHJvbWlzZSwgdGhlblxuICAgICAgICAgIHJldHVybiB3cmFwcGVkUShfdmFsLnRoZW4oXG4gICAgICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIF93aXRoRXJyb3IgPyBzaW1wbGVRKF92YWwsIHRydWUpIDogX3ZhbDsgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gX3dpdGhFcnJvciA/IHNpbXBsZVEoX3ZhbCwgdHJ1ZSkgOiBfdmFsOyB9KVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcHBlZFEoX3Byb21pc2UpIHtcbiAgICBpZihfcHJvbWlzZS5zaW1wbGUpIHJldHVybiBfcHJvbWlzZTtcblxuICAgIHZhciBzaW1wbGU7XG5cbiAgICAvLyB3aGVuIHJlc29sdmVkLCBtYWtlICRxIGEgc2ltcGxlUVxuICAgIF9wcm9taXNlLnRoZW4oZnVuY3Rpb24oX3ZhbCkge1xuICAgICAgc2ltcGxlID0gc2ltcGxlUShfdmFsKTtcbiAgICB9LCBmdW5jdGlvbihfdmFsKSB7XG4gICAgICBzaW1wbGUgPSBzaW1wbGVRKF92YWwsIHRydWUpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRoZW46IGZ1bmN0aW9uKF9zdWNjZXNzLCBfZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHNpbXBsZSA/XG4gICAgICAgICAgc2ltcGxlLnRoZW4oX3N1Y2Nlc3MsIF9lcnJvcikgOlxuICAgICAgICAgIHdyYXBwZWRRKF9wcm9taXNlLnRoZW4oX3N1Y2Nlc3MsIF9lcnJvcikpO1xuICAgICAgfSxcbiAgICAgICdjYXRjaCc6IGNhdGNoRXJyb3IsXG4gICAgICAnZmluYWxseSc6IGZ1bmN0aW9uKF9jYikge1xuICAgICAgICByZXR1cm4gc2ltcGxlID9cbiAgICAgICAgICBzaW1wbGVbJ2ZpbmFsbHknXShfY2IpIDpcbiAgICAgICAgICB3cmFwcGVkUShfcHJvbWlzZVsnZmluYWxseSddKF9jYikpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlamVjdDogZnVuY3Rpb24oX3JlYXNvbikge1xuICAgICAgcmV0dXJuIHNpbXBsZVEoX3JlYXNvbiwgdHJ1ZSk7XG4gICAgfSxcblxuICAgIC8vIG5vbiB3YWl0aW5nIHByb21pc2UsIGlmIHJlc29sdmVkIGV4ZWN1dGVzIGltbWVkaWF0ZWx5XG4gICAgd2hlbjogZnVuY3Rpb24oX3ZhbCkge1xuICAgICAgcmV0dXJuIHNpbXBsZVEoX3ZhbCwgZmFsc2UpO1xuICAgIH0sXG5cbiAgICB3cmFwOiB3cmFwcGVkUVxuICB9O1xufV0pO1xuXG5STU1vZHVsZS5mYWN0b3J5KCdSTVBhY2tlckNhY2hlJywgW2Z1bmN0aW9uKCkge1xuXG4gIHZhciBwYWNrZXJDYWNoZTtcblxuICAvKipcbiAgICogQGNsYXNzIFBhY2tlckNhY2hlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBUaGUgcGFja2VyIGNhY2hlIHNlcnZpY2UgZW5hYmxlcyBwYWNraW5nIHN0cmF0ZWdpZXMgdG8gcmVnaXN0ZXIgcmF3IG9iamVjdCBkYXRhIHRoYXQgY2FuIGJlIHRoZW4gdXNlZCBieVxuICAgKiBzdXBwb3J0aW5nIHJlbGF0aW9ucyBkdXJpbmcgdGhlIGRlY29kaW5nIHByb2Nlc3MgdG8gcHJlbG9hZCBvdGhlciByZWxhdGVkIHJlc291cmNlcy5cbiAgICpcbiAgICogVGhpcyBpcyBzcGVjaWFsbHkgdXNlZnVsIGZvciBhcGlzIHRoYXQgaW5jbHVkZSBsaW5rZWQgb2JqZWN0cyBkYXRhIGluIGV4dGVybmFsIG1ldGFkYXRhLlxuICAgKlxuICAgKiBUaGUgcGFja2VyIGNhY2hlIGlzIHJlc2V0IG9uIGV2ZXJ5IHJlc3BvbnNlIHVud3JhcHBpbmcgc28gaXQncyBub3Qgc3VwcG9zZWQgdG8gYmUgdXNlZCBhcyBhblxuICAgKiBhcHBsaWNhdGlvbiB3aWRlIGNhY2hlLlxuICAgKlxuICAgKiAjIyMgRm9yIGV4dGVuc2lvbiBkZXZlbG9wZXJzOlxuICAgKlxuICAgKiBVc2UgdGhlIGBmZWVkYCBtZXRob2QgdG8gYWRkIG5ldyByYXcgZGF0YSB0byBjYWNoZS5cbiAgICpcbiAgICogIyMjIEZvciByZWxhdGlvbiBkZXZlbG9wZXJzOlxuICAgKlxuICAgKiBVc2UgdGhlIGByZXNvbHZlYCBtZXRob2QgdG8gaW5qZWN0IGNhY2hlIGRhdGEgaW50byBhIGdpdmVuIGlkZW50aWZpZWQgcmVjb3JkLlxuICAgKlxuICAgKi9cbiAgcmV0dXJuIHtcbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgUGFja2VyQ2FjaGUjXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gRmVlZCBkYXRhIHRvIHRoZSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBfbmFtZSBSZXNvdXJjZSBuYW1lIChzaW5ndWxhcilcbiAgICAgKiBAcGFyYW0ge2FycmF5fSBfcmF3UmVjb3JkcyBSYXcgcmVjb3JkIGRhdGEgYXMgYW4gYXJyYXlcbiAgICAgKi9cbiAgICBmZWVkOiBmdW5jdGlvbihfbmFtZSwgX3Jhd1JlY29yZHMpIHtcbiAgICAgIHBhY2tlckNhY2hlW19uYW1lXSA9IF9yYXdSZWNvcmRzOyAvLyBUT0RPOiBtYXliZSBhcHBlbmQgbmV3IHJlY29yZCB0byBzdXBwb3J0IGV4dGVuZGVkIHNjZW5hcmlvcy5cbiAgICB9LFxuXG4gICAgLy8gSURFQTogZmVlZFNpbmdsZTogd291bGQgcmVxdWlyZSB0d28gc3RlcCByZXNvbHZlIG1hbnkgLT4gc2luZ2xlXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgUGFja2VyQ2FjaGUjXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gU2VhcmNoZXMgZm9yIGRhdGEgbWF0Y2hpbmcgdGhlIHJlY29yZCdzIHBrLCBpZiBmb3VuZCBkYXRhIGlzIHRoZW4gZmVkIHRvIHRoZSByZWNvcmQgdXNpbmcgJGRlY29kZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVjb3JkQXBpfSBfcmVjb3JkIHJlc3Rtb2QgcmVjb3JkIHRvIHJlc29sdmUsIG11c3QgYmUgaWRlbnRpZmllZC5cbiAgICAgKiBAcmV0dXJuIHtSZWNvcmRBcGl9IFRoZSByZWNvcmQsIHNvIGNhbGwgY2FuIGJlIG5lc3RlZC5cbiAgICAgKi9cbiAgICByZXNvbHZlOiBmdW5jdGlvbihfcmVjb3JkKSB7XG5cbiAgICAgIGlmKHBhY2tlckNhY2hlKSB7IC8vIG1ha2Ugc3VyZSB0aGlzIGlzIGEgcGFja2VyIGNhY2hlIGVuYWJsZWQgY29udGV4dC5cblxuICAgICAgICB2YXIgbW9kZWxUeXBlID0gX3JlY29yZC4kdHlwZSxcbiAgICAgICAgICAgIGNhY2hlID0gcGFja2VyQ2FjaGVbbW9kZWxUeXBlLmlkZW50aXR5KHRydWUpXTtcblxuICAgICAgICBpZihjYWNoZSAmJiBfcmVjb3JkLiRwaykge1xuICAgICAgICAgIGZvcih2YXIgaSA9IDAsIGwgPSBjYWNoZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGlmKF9yZWNvcmQuJHBrID09PSBtb2RlbFR5cGUuaW5mZXJLZXkoY2FjaGVbaV0pKSB7IC8vIHRoaXMgY291bGQgYmUgc29ydCBvZiBzbG93PyBuYWhcbiAgICAgICAgICAgICAgX3JlY29yZC4kZGVjb2RlKGNhY2hlW2ldKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmVjb3JkO1xuICAgIH0sXG5cbiAgICAvLyBwcml2YXRlIGFwaSBtZXRob2QgdXNlZCBieSB0aGUgdW53cmFwcGVyIGZ1bmN0aW9uLlxuICAgIHByZXBhcmU6IGZ1bmN0aW9uKCkge1xuICAgICAgcGFja2VyQ2FjaGUgPSB7fTtcbiAgICB9LFxuXG4gICAgLy8gcHJpdmF0ZSBhcGkgaW50ZXJuYWwgbWV0aG9kIHVzZWQgYnkgdGhlIHVud3JhcHBlciBmdW5jdGlvbi5cbiAgICBjbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgICBwYWNrZXJDYWNoZSA9IG51bGw7XG4gICAgfVxuICB9O1xuXG59XSk7XG5STU1vZHVsZS5mYWN0b3J5KCdSTVNlcmlhbGl6ZXInLCBbJyRpbmplY3RvcicsICdpbmZsZWN0b3InLCAnJGZpbHRlcicsICdSTVV0aWxzJywgZnVuY3Rpb24oJGluamVjdG9yLCBpbmZsZWN0b3IsICRmaWx0ZXIsIFV0aWxzKSB7XG5cbiAgZnVuY3Rpb24gZXh0cmFjdChfZnJvbSwgX3BhdGgpIHtcbiAgICB2YXIgbm9kZTtcbiAgICBmb3IodmFyIGkgPSAwOyBfZnJvbSAmJiAobm9kZSA9IF9wYXRoW2ldKTsgaSsrKSB7XG4gICAgICBfZnJvbSA9IF9mcm9tW25vZGVdO1xuICAgIH1cbiAgICByZXR1cm4gX2Zyb207XG4gIH1cblxuICBmdW5jdGlvbiBpbnNlcnQoX2ludG8sIF9wYXRoLCBfdmFsdWUpIHtcbiAgICBmb3IodmFyIGkgPSAwLCBsID0gX3BhdGgubGVuZ3RoLTE7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBub2RlID0gX3BhdGhbaV07XG4gICAgICBfaW50byA9IF9pbnRvW25vZGVdIHx8IChfaW50b1tub2RlXSA9IHt9KTtcbiAgICB9XG4gICAgX2ludG9bX3BhdGhbX3BhdGgubGVuZ3RoLTFdXSA9IF92YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbihfc3RyYXRlZ2llcykge1xuXG4gICAgdmFyIGlzQXJyYXkgPSBhbmd1bGFyLmlzQXJyYXk7XG5cbiAgICAvLyBQcml2YXRlIHNlcmlhbGl6ZXIgYXR0cmlidXRlc1xuICAgIHZhciBtYXNrcyA9IHt9LFxuICAgICAgICBkZWNvZGVycyA9IHt9LFxuICAgICAgICBlbmNvZGVycyA9IHt9LFxuICAgICAgICBtYXBwZWQgPSB7fSxcbiAgICAgICAgbWFwcGluZ3MgPSB7fSxcbiAgICAgICAgdm9sID0ge307XG5cbiAgICBmdW5jdGlvbiBpc01hc2tlZChfbmFtZSwgX21hc2spIHtcbiAgICAgIGlmKHR5cGVvZiBfbWFzayA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIF9tYXNrKF9uYW1lKTtcbiAgICAgIHZhciBtYXNrID0gbWFza3NbX25hbWVdO1xuICAgICAgcmV0dXJuIChtYXNrICYmIChtYXNrID09PSB0cnVlIHx8IG1hc2suaW5kZXhPZihfbWFzaykgIT09IC0xKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVjb2RlKF9mcm9tLCBfdG8sIF9wcmVmaXgsIF9tYXNrLCBfY3R4KSB7XG4gICAgICB2YXIga2V5LCBkZWNvZGVkTmFtZSwgZnVsbE5hbWUsIHZhbHVlLCBtYXBzLCBpc01hcHBlZCwgaSwgbCxcbiAgICAgICAgICBwcmVmaXggPSBfcHJlZml4ID8gX3ByZWZpeCArICcuJyA6ICcnO1xuXG4gICAgICAvLyBleHBsaWNpdCBtYXBwaW5nc1xuICAgICAgbWFwcyA9IG1hcHBpbmdzW19wcmVmaXhdO1xuICAgICAgaWYobWFwcykge1xuICAgICAgICBmb3IoaSA9IDAsIGwgPSBtYXBzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGZ1bGxOYW1lID0gcHJlZml4ICsgbWFwc1tpXS5wYXRoO1xuICAgICAgICAgIGlmKGlzTWFza2VkKGZ1bGxOYW1lLCBfbWFzaykpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgaWYobWFwc1tpXS5tYXApIHtcbiAgICAgICAgICAgIHZhbHVlID0gZXh0cmFjdChfZnJvbSwgbWFwc1tpXS5tYXApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IF9mcm9tW19zdHJhdGVnaWVzLmVuY29kZU5hbWUgPyBfc3RyYXRlZ2llcy5lbmNvZGVOYW1lKG1hcHNbaV0ucGF0aCkgOiBtYXBzW2ldLnBhdGhdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmKCFtYXBzW2ldLmZvcmNlZCAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSBjb250aW51ZTtcblxuICAgICAgICAgIHZhbHVlID0gZGVjb2RlUHJvcCh2YWx1ZSwgZnVsbE5hbWUsIF9tYXNrLCBfY3R4KTtcbiAgICAgICAgICBpZih2YWx1ZSAhPT0gdW5kZWZpbmVkKSBfdG9bbWFwc1tpXS5wYXRoXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGltcGxpY2l0IG1hcHBpbmdzXG4gICAgICBmb3Ioa2V5IGluIF9mcm9tKSB7XG4gICAgICAgIGlmKF9mcm9tLmhhc093blByb3BlcnR5KGtleSkpIHtcblxuICAgICAgICAgIGRlY29kZWROYW1lID0gX3N0cmF0ZWdpZXMuZGVjb2RlTmFtZSA/IF9zdHJhdGVnaWVzLmRlY29kZU5hbWUoa2V5KSA6IGtleTtcbiAgICAgICAgICBpZihkZWNvZGVkTmFtZVswXSA9PT0gJyQnKSBjb250aW51ZTtcblxuICAgICAgICAgIGlmKG1hcHMpIHtcbiAgICAgICAgICAgIC8vIGlnbm9yZSBhbHJlYWR5IG1hcHBlZCBrZXlzXG4gICAgICAgICAgICAvLyBUT0RPOiBpZ25vcmUgbmVzdGVkIG1hcHBpbmdzIHRvby5cbiAgICAgICAgICAgIGZvcihcbiAgICAgICAgICAgICAgLy8gaXMgdGhpcyBzbyBtdWNoIGZhc3RlciB0aGFuIHVzaW5nIC5zb21lPyBodHRwOi8vanNwZXJmLmNvbS9zb21lLXZzLWZvci1sb29wXG4gICAgICAgICAgICAgIGlzTWFwcGVkID0gZmFsc2UsIGkgPSAwLCBsID0gbWFwcy5sZW5ndGg7XG4gICAgICAgICAgICAgIGkgPCBsICYmICEoaXNNYXBwZWQgPSAobWFwc1tpXS5tYXBQYXRoID09PSBrZXkpKTtcbiAgICAgICAgICAgICAgaSsrXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYoaXNNYXBwZWQpIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZ1bGxOYW1lID0gcHJlZml4ICsgZGVjb2RlZE5hbWU7XG4gICAgICAgICAgLy8gcHJldmVudCBtYXNrZWQgb3IgYWxyZWFkeSBtYXBwZWQgcHJvcGVydGllcyB0byBiZSBzZXRcbiAgICAgICAgICBpZihtYXBwZWRbZnVsbE5hbWVdIHx8IGlzTWFza2VkKGZ1bGxOYW1lLCBfbWFzaykpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgdmFsdWUgPSBkZWNvZGVQcm9wKF9mcm9tW2tleV0sIGZ1bGxOYW1lLCBfbWFzaywgX2N0eCk7XG4gICAgICAgICAgaWYodmFsdWUgIT09IHVuZGVmaW5lZCkgX3RvW2RlY29kZWROYW1lXSA9IHZhbHVlOyAvLyBpZ25vcmUgdmFsdWUgaWYgZmlsdGVyIHJldHVybnMgdW5kZWZpbmVkXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWNvZGVQcm9wKF92YWx1ZSwgX25hbWUsIF9tYXNrLCBfY3R4KSB7XG4gICAgICB2YXIgZmlsdGVyID0gZGVjb2RlcnNbX25hbWVdLCByZXN1bHQgPSBfdmFsdWU7XG5cbiAgICAgIGlmKGZpbHRlcikge1xuICAgICAgICByZXN1bHQgPSBmaWx0ZXIuY2FsbChfY3R4LCBfdmFsdWUpO1xuICAgICAgfSBlbHNlIGlmKHR5cGVvZiBfdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vIElERUE6IG1ha2UgZXh0ZW5kZWQgZGVjb2RpbmcvZW5jb2Rpbmcgb3B0aW9uYWwsIGNvdWxkIGJlIGEgbGl0dGxlIHRheGluZyBmb3Igc29tZSBhcHBzXG4gICAgICAgIGlmKGlzQXJyYXkoX3ZhbHVlKSkge1xuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuICAgICAgICAgIGZvcih2YXIgaSA9IDAsIGwgPSBfdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChkZWNvZGVQcm9wKF92YWx1ZVtpXSwgX25hbWUgKyAnW10nLCBfbWFzaywgX2N0eCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmKF92YWx1ZSkge1xuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuICAgICAgICAgIGRlY29kZShfdmFsdWUsIHJlc3VsdCwgX25hbWUsIF9tYXNrLCBfY3R4KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuY29kZShfZnJvbSwgX3RvLCBfcHJlZml4LCBfbWFzaywgX2N0eCkge1xuICAgICAgdmFyIGtleSwgZnVsbE5hbWUsIGVuY29kZWROYW1lLCB2YWx1ZSwgbWFwcyxcbiAgICAgICAgICBwcmVmaXggPSBfcHJlZml4ID8gX3ByZWZpeCArICcuJyA6ICcnO1xuXG4gICAgICAvLyBpbXBsaWNpdCBtYXBwaW5nc1xuICAgICAgZm9yKGtleSBpbiBfZnJvbSkge1xuICAgICAgICBpZihfZnJvbS5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIGtleVswXSAhPT0gJyQnKSB7XG4gICAgICAgICAgZnVsbE5hbWUgPSBwcmVmaXggKyBrZXk7XG4gICAgICAgICAgLy8gcHJldmVudCBtYXNrZWQgb3IgYWxyZWFkeSBtYXBwZWQgcHJvcGVydGllcyB0byBiZSBjb3BpZWRcbiAgICAgICAgICBpZihtYXBwZWRbZnVsbE5hbWVdIHx8IGlzTWFza2VkKGZ1bGxOYW1lLCBfbWFzaykpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgdmFsdWUgPSBlbmNvZGVQcm9wKF9mcm9tW2tleV0sIGZ1bGxOYW1lLCBfbWFzaywgX2N0eCk7XG4gICAgICAgICAgaWYodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZW5jb2RlZE5hbWUgPSBfc3RyYXRlZ2llcy5lbmNvZGVOYW1lID8gX3N0cmF0ZWdpZXMuZW5jb2RlTmFtZShrZXkpIDoga2V5O1xuICAgICAgICAgICAgX3RvW2VuY29kZWROYW1lXSA9IHZhbHVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmKHZvbFtmdWxsTmFtZV0pIGRlbGV0ZSBfZnJvbVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGV4cGxpY2l0IG1hcHBpbmdzOlxuICAgICAgbWFwcyA9IG1hcHBpbmdzW19wcmVmaXhdO1xuICAgICAgaWYobWFwcykge1xuICAgICAgICBmb3IodmFyIGkgPSAwLCBsID0gbWFwcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBmdWxsTmFtZSA9IHByZWZpeCArIG1hcHNbaV0ucGF0aDtcbiAgICAgICAgICBpZihpc01hc2tlZChmdWxsTmFtZSwgX21hc2spKSBjb250aW51ZTtcblxuICAgICAgICAgIHZhbHVlID0gX2Zyb21bbWFwc1tpXS5wYXRoXTtcbiAgICAgICAgICBpZighbWFwc1tpXS5mb3JjZWQgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgY29udGludWU7XG5cbiAgICAgICAgICB2YWx1ZSA9IGVuY29kZVByb3AodmFsdWUsIGZ1bGxOYW1lLCBfbWFzaywgX2N0eCk7XG4gICAgICAgICAgaWYodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYobWFwc1tpXS5tYXApIHtcbiAgICAgICAgICAgICAgaW5zZXJ0KF90bywgbWFwc1tpXS5tYXAsIHZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIF90b1tfc3RyYXRlZ2llcy5lbmNvZGVOYW1lID8gX3N0cmF0ZWdpZXMuZW5jb2RlTmFtZShtYXBzW2ldLnBhdGgpIDogbWFwc1tpXS5wYXRoXSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuY29kZVByb3AoX3ZhbHVlLCBfbmFtZSwgX21hc2ssIF9jdHgpIHtcbiAgICAgIHZhciBmaWx0ZXIgPSBlbmNvZGVyc1tfbmFtZV0sIHJlc3VsdCA9IF92YWx1ZTtcblxuICAgICAgaWYoZmlsdGVyKSB7XG4gICAgICAgIHJlc3VsdCA9IGZpbHRlci5jYWxsKF9jdHgsIF92YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYoX3ZhbHVlICE9PSBudWxsICYmIHR5cGVvZiBfdmFsdWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBfdmFsdWUudG9KU09OICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIElERUE6IG1ha2UgZGVlcCBkZWNvZGluZy9lbmNvZGluZyBvcHRpb25hbCwgY291bGQgYmUgYSBsaXR0bGUgdGF4aW5nIGZvciBzb21lIGFwcHNcbiAgICAgICAgaWYoaXNBcnJheShfdmFsdWUpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gW107XG4gICAgICAgICAgZm9yKHZhciBpID0gMCwgbCA9IF92YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGVuY29kZVByb3AoX3ZhbHVlW2ldLCBfbmFtZSArICdbXScsIF9tYXNrLCBfY3R4KSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYoX3ZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0ID0ge307XG4gICAgICAgICAgZW5jb2RlKF92YWx1ZSwgcmVzdWx0LCBfbmFtZSwgX21hc2ssIF9jdHgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcblxuICAgICAgLy8gZGVjb2RlcyBhIHJhdyByZWNvcmQgaW50byBhIHJlY29yZFxuICAgICAgZGVjb2RlOiBmdW5jdGlvbihfcmVjb3JkLCBfcmF3LCBfbWFzaykge1xuICAgICAgICBkZWNvZGUoX3JhdywgX3JlY29yZCwgJycsIF9tYXNrLCBfcmVjb3JkKTtcbiAgICAgIH0sXG5cbiAgICAgIC8vIGVuY29kZXMgYSByZWNvcmQsIHJldHVybmluZyBhIHJhdyByZWNvcmRcbiAgICAgIGVuY29kZTogZnVuY3Rpb24oX3JlY29yZCwgX21hc2spIHtcbiAgICAgICAgdmFyIHJhdyA9IHt9O1xuICAgICAgICBlbmNvZGUoX3JlY29yZCwgcmF3LCAnJywgX21hc2ssIF9yZWNvcmQpO1xuICAgICAgICByZXR1cm4gcmF3O1xuICAgICAgfSxcblxuICAgICAgLy8gYnVpbGRzIGEgc2VyaWFsaXplcmQgRFNMLCBpcyBhIHN0YW5kYWxvbmUgb2JqZWN0IHRoYXQgY2FuIGJlIGV4dGVuZGVkLlxuICAgICAgZHNsOiBmdW5jdGlvbigpIHtcblxuICAgICAgICByZXR1cm4ge1xuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG1lbWJlcm9mIEJ1aWxkZXJBcGkjXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2V0cyBhbiBhdHRyaWJ1dGUgbWFwcGluZy5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEFsbG93cyBhIGV4cGxpY2l0IHNlcnZlciB0byBtb2RlbCBwcm9wZXJ0eSBtYXBwaW5nIHRvIGJlIGRlZmluZWQuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBGb3IgZXhhbXBsZSwgdG8gbWFwIHRoZSByZXNwb25zZSBwcm9wZXJ0eSBgc3RhdHMuY3JlYXRlZF9hdGAgdG8gbW9kZWwncyBgY3JlYXRlZGAgcHJvcGVydHkuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgICAgICAgICogYnVpbGRlci5hdHRyTWFwKCdjcmVhdGVkJywgJ3N0YXRzLmNyZWF0ZWRfYXQnKTtcbiAgICAgICAgICAgKiBgYGBcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEl0J3MgYWxzbyBwb3NpYmxlIHRvIHVzZSBhIHdpbGRjYXJkICcqJyBhcyBzZXJ2ZXIgbmFtZSB0byB1c2UgdGhlIGRlZmF1bHQgbmFtZSBkZWNvZGVyIGFzXG4gICAgICAgICAgICogc2VydmVyIG5hbWUuIFRoaXMgaXMgdXNlZCB0byBmb3JjZSBhIHByb3BlcnR5IHRvIGJlIHByb2Nlc3NlZCBvbiBkZWNvZGUvZW5jb2RlIGV2ZW4gaWYgaXRzXG4gICAgICAgICAgICogbm90IHByZXNlbnQgb24gcmVxdWVzdC9yZWNvcmQgKHJlc3BlY3RpdmVseSksIGJ5IGRvaW5nIHRoaXMgaXRzIHBvc2libGUsIGZvciBleGFtcGxlLCB0byBkZWZpbmVcbiAgICAgICAgICAgKiBhIGR5bmFtaWMgcHJvcGVydHkgdGhhdCBpcyBnZW5lcmF0ZWQgYXV0b21hdGljYWxseSBiZWZvcmUgdGhlIG9iamVjdCBpcyBzZW5kIHRvIHRoZSBzZXJ2ZXIuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gX2F0dHIgQXR0cmlidXRlIG5hbWVcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gX3NlcnZlck5hbWUgU2VydmVyIChyZXF1ZXN0L3Jlc3BvbnNlKSBwcm9wZXJ0eSBuYW1lXG4gICAgICAgICAgICogQHJldHVybiB7QnVpbGRlckFwaX0gc2VsZlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGF0dHJNYXA6IGZ1bmN0aW9uKF9hdHRyLCBfc2VydmVyUGF0aCwgX2ZvcmNlZCkge1xuICAgICAgICAgICAgLy8gZXh0cmFjdCBwYXJlbnQgbm9kZSBmcm9tIGNsaWVudCBuYW1lOlxuICAgICAgICAgICAgdmFyIGluZGV4ID0gX2F0dHIubGFzdEluZGV4T2YoJy4nKSxcbiAgICAgICAgICAgICAgICBub2RlID0gaW5kZXggIT09IC0xID8gX2F0dHIuc3Vic3RyKDAsIGluZGV4KSA6ICcnLFxuICAgICAgICAgICAgICAgIGxlYWYgPSBpbmRleCAhPT0gLTEgPyBfYXR0ci5zdWJzdHIoaW5kZXggKyAxKSA6IF9hdHRyO1xuXG4gICAgICAgICAgICBtYXBwZWRbX2F0dHJdID0gdHJ1ZTtcblxuICAgICAgICAgICAgdmFyIG5vZGVzID0gKG1hcHBpbmdzW25vZGVdIHx8IChtYXBwaW5nc1tub2RlXSA9IFtdKSk7XG4gICAgICAgICAgICBub2Rlcy5wdXNoKHsgcGF0aDogbGVhZiwgbWFwOiBfc2VydmVyUGF0aCA9PT0gJyonID8gbnVsbCA6IF9zZXJ2ZXJQYXRoLnNwbGl0KCcuJyksIG1hcFBhdGg6IF9zZXJ2ZXJQYXRoLCBmb3JjZWQ6IF9mb3JjZWQgfSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG1lbWJlcm9mIEJ1aWxkZXJBcGkjXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2V0cyBhbiBhdHRyaWJ1dGUgbWFzay5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEFuIGF0dHJpYnV0ZSBtYXNrIHByZXZlbnRzIHRoZSBhdHRyaWJ1dGUgdG8gYmUgbG9hZGVkIGZyb20gb3Igc2VudCB0byB0aGUgc2VydmVyIG9uIGNlcnRhaW4gb3BlcmF0aW9ucy5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIFRoZSBhdHRyaWJ1dGUgbWFzayBpcyBhIHN0cmluZyBjb21wb3NlZCBieTpcbiAgICAgICAgICAgKiAqIEM6IFRvIHByZXZlbnQgYXR0cmlidXRlIGZyb20gYmVpbmcgc2VudCBvbiBjcmVhdGVcbiAgICAgICAgICAgKiAqIFI6IFRvIHByZXZlbnQgYXR0cmlidXRlIGZyb20gYmVpbmcgbG9hZGVkIGZyb20gc2VydmVyXG4gICAgICAgICAgICogKiBVOiBUbyBwcmV2ZW50IGF0dHJpYnV0ZSBmcm9tIGJlaW5nIHNlbnQgb24gdXBkYXRlXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBGb3IgZXhhbXBsZSwgdGhlIGZvbGxvd2luZyB3aWxsIHByZXZlbnQgYW4gYXR0cmlidXRlIHRvIGJlIHNlbmQgb24gY3JlYXRlIG9yIHVwZGF0ZTpcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAgICAgICAgKiBidWlsZGVyLmF0dHJNYXNrKCdyZWFkT25seScsICdDVScpO1xuICAgICAgICAgICAqIGBgYFxuICAgICAgICAgICAqXG4gICAgICAgICAgICogSWYgYSB0cnVlIGJvb2xlYW4gdmFsdWUgaXMgcGFzc2VkIGFzIG1hc2ssIHRoZW4gJ0NSVScgd2lsbCBiZSB1c2VkXG4gICAgICAgICAgICogSWYgYSBmYWxzZSBib29sZWFuIHZhbHVzIGlzIHBhc3NlZCBhcyBtYXNrLCB0aGVuIG1hc2sgd2lsbCBiZSByZW1vdmVkXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gX2F0dHIgQXR0cmlidXRlIG5hbWVcbiAgICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW58c3RyaW5nfSBfbWFzayBBdHRyaWJ1dGUgbWFza1xuICAgICAgICAgICAqIEByZXR1cm4ge0J1aWxkZXJBcGl9IHNlbGZcbiAgICAgICAgICAgKi9cbiAgICAgICAgICBhdHRyTWFzazogZnVuY3Rpb24oX2F0dHIsIF9tYXNrKSB7XG4gICAgICAgICAgICBpZighX21hc2spIHtcbiAgICAgICAgICAgICAgZGVsZXRlIG1hc2tzW19hdHRyXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1hc2tzW19hdHRyXSA9IF9tYXNrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBtZW1iZXJvZiBCdWlsZGVyQXBpI1xuICAgICAgICAgICAqXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uIEFzc2lnbnMgYSBkZWNvZGluZyBmdW5jdGlvbi9maWx0ZXIgdG8gYSBnaXZlbiBhdHRyaWJ1dGUuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gX25hbWUgQXR0cmlidXRlIG5hbWVcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbn0gX2ZpbHRlciBmaWx0ZXIgb3IgZnVuY3Rpb24gdG8gcmVnaXN0ZXJcbiAgICAgICAgICAgKiBAcGFyYW0ge21peGVkfSBfZmlsdGVyUGFyYW0gTWlzYyBmaWx0ZXIgcGFyYW1ldGVyXG4gICAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBfY2hhaW4gSWYgdHJ1ZSwgZmlsdGVyIGlzIGNoYWluZWQgdG8gdGhlIGN1cnJlbnQgYXR0cmlidXRlIGZpbHRlci5cbiAgICAgICAgICAgKiBAcmV0dXJuIHtCdWlsZGVyQXBpfSBzZWxmXG4gICAgICAgICAgICovXG4gICAgICAgICAgYXR0ckRlY29kZXI6IGZ1bmN0aW9uKF9hdHRyLCBfZmlsdGVyLCBfZmlsdGVyUGFyYW0sIF9jaGFpbikge1xuXG4gICAgICAgICAgICBpZih0eXBlb2YgX2ZpbHRlciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgdmFyIGZpbHRlciA9ICRmaWx0ZXIoX2ZpbHRlcik7XG4gICAgICAgICAgICAgIF9maWx0ZXIgPSBmdW5jdGlvbihfdmFsdWUpIHsgcmV0dXJuIGZpbHRlcihfdmFsdWUsIF9maWx0ZXJQYXJhbSk7IH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlY29kZXJzW19hdHRyXSA9IF9jaGFpbiA/IFV0aWxzLmNoYWluKGRlY29kZXJzW19hdHRyXSwgX2ZpbHRlcikgOiBfZmlsdGVyO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBtZW1iZXJvZiBCdWlsZGVyQXBpI1xuICAgICAgICAgICAqXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uIEFzc2lnbnMgYSBlbmNvZGluZyBmdW5jdGlvbi9maWx0ZXIgdG8gYSBnaXZlbiBhdHRyaWJ1dGUuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gX25hbWUgQXR0cmlidXRlIG5hbWVcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbn0gX2ZpbHRlciBmaWx0ZXIgb3IgZnVuY3Rpb24gdG8gcmVnaXN0ZXJcbiAgICAgICAgICAgKiBAcGFyYW0ge21peGVkfSBfZmlsdGVyUGFyYW0gTWlzYyBmaWx0ZXIgcGFyYW1ldGVyXG4gICAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBfY2hhaW4gSWYgdHJ1ZSwgZmlsdGVyIGlzIGNoYWluZWQgdG8gdGhlIGN1cnJlbnQgYXR0cmlidXRlIGZpbHRlci5cbiAgICAgICAgICAgKiBAcmV0dXJuIHtCdWlsZGVyQXBpfSBzZWxmXG4gICAgICAgICAgICovXG4gICAgICAgICAgYXR0ckVuY29kZXI6IGZ1bmN0aW9uKF9hdHRyLCBfZmlsdGVyLCBfZmlsdGVyUGFyYW0sIF9jaGFpbikge1xuXG4gICAgICAgICAgICBpZih0eXBlb2YgX2ZpbHRlciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgdmFyIGZpbHRlciA9ICRmaWx0ZXIoX2ZpbHRlcik7XG4gICAgICAgICAgICAgIF9maWx0ZXIgPSBmdW5jdGlvbihfdmFsdWUpIHsgcmV0dXJuIGZpbHRlcihfdmFsdWUsIF9maWx0ZXJQYXJhbSk7IH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVuY29kZXJzW19hdHRyXSA9IF9jaGFpbiA/IFV0aWxzLmNoYWluKGVuY29kZXJzW19hdHRyXSwgX2ZpbHRlcikgOiBfZmlsdGVyO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBtZW1iZXJvZiBCdWlsZGVyQXBpI1xuICAgICAgICAgICAqXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uIE1ha2VzIGFuIGF0dHJpYnV0ZSB2b2xhdGlsZSwgYSB2b2xhdGlsZSBhdHRyaWJ1dGUgaXMgZGVsZXRlZCBmcm9tIHNvdXJjZSBhZnRlciBlbmNvZGluZy5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBfbmFtZSBBdHRyaWJ1dGUgbmFtZVxuICAgICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gX2lzVm9sYXRpbGUgZGVmYXVsdHMgdG8gdHJ1ZSwgaWYgc2V0IHRvIGZhbHNlIHRoZW4gdGhlIGF0dHJpYnV0ZSBpcyBubyBsb25nZXIgdm9sYXRpbGUuXG4gICAgICAgICAgICogQHJldHVybiB7QnVpbGRlckFwaX0gc2VsZlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGF0dHJWb2xhdGlsZTogZnVuY3Rpb24oX2F0dHIsIF9pc1ZvbGF0aWxlKSB7XG4gICAgICAgICAgICB2b2xbX2F0dHJdID0gX2lzVm9sYXRpbGUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBfaXNWb2xhdGlsZTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG59XSk7XG5STU1vZHVsZS5mYWN0b3J5KCdEZWZhdWx0UGFja2VyJywgWydyZXN0bW9kJywgJ2luZmxlY3RvcicsICdSTVBhY2tlckNhY2hlJywgZnVuY3Rpb24ocmVzdG1vZCwgaW5mbGVjdG9yLCBwYWNrZXJDYWNoZSkge1xuXG4gIGZ1bmN0aW9uIGluY2x1ZGUoX3NvdXJjZSwgX2xpc3QsIF9kbykge1xuICAgIGZvcih2YXIgaSA9IDAsIGwgPSBfbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIF9kbyhfbGlzdFtpXSwgX3NvdXJjZVtfbGlzdFtpXV0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGV4Y2x1ZGUoX3NvdXJjZSwgX3NraXAsIF9kbykge1xuICAgIGZvcih2YXIga2V5IGluIF9zb3VyY2UpIHtcbiAgICAgIGlmKF9zb3VyY2UuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBfc2tpcC5pbmRleE9mKGtleSkgPT09IC0xKSB7XG4gICAgICAgIF9kbyhrZXksIF9zb3VyY2Vba2V5XSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gcHJvY2VzcyBsaW5rcyBhbmQgc3RvcmVzIHRoZW0gaW4gdGhlIHBhY2tlciBjYWNoZVxuICBmdW5jdGlvbiBwcm9jZXNzRmVhdHVyZShfcmF3LCBfbmFtZSwgX2ZlYXR1cmUsIF9vdGhlciwgX2RvKSB7XG4gICAgaWYoX2ZlYXR1cmUgPT09ICcuJyB8fCBfZmVhdHVyZSA9PT0gdHJ1ZSkge1xuICAgICAgdmFyIHNraXAgPSBbX25hbWVdO1xuICAgICAgaWYoX290aGVyKSBza2lwLnB1c2guYXBwbHkoc2tpcCwgYW5ndWxhci5pc0FycmF5KF9vdGhlcikgPyBfb3RoZXIgOiBbX290aGVyXSk7XG4gICAgICBleGNsdWRlKF9yYXcsIHNraXAsIF9kbyk7XG4gICAgfSBlbHNlIGlmKHR5cGVvZiBfZmVhdHVyZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGV4Y2x1ZGUoX3Jhd1tfZmVhdHVyZV0sIFtdLCBfZG8pO1xuICAgIH0gZWxzZSB7IC8vIGxpbmtzIGlzIGFuIGFycmF5XG4gICAgICBpbmNsdWRlKF9yYXcsIF9mZWF0dXJlLCBfZG8pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAY2xhc3MgRGVmYXVsdFBhY2tlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogU2ltcGxlIGAkdW5wYWNrYCBpbXBsZW1lbnRhdGlvbiB0aGF0IGF0dGVtcHRzIHRvIGNvdmVyIHRoZSBzdGFuZGFyZCBwcm9wb3NlZCBieVxuICAgKiBbYWN0aXZlX21vZGVsX3NlcmlhbGl6ZXJzXShodHRwczovL2dpdGh1Yi5jb20vcmFpbHMtYXBpL2FjdGl2ZV9tb2RlbF9zZXJpYWxpemVycy5cbiAgICpcbiAgICogVGhpcyBpcyBhIHNpbXBsaWZpZWQgdmVyc2lvbiBvZiB0aGUgd3JhcHBpbmcgc3RydWN0dXJlIHJlY29tbWVudGVkIGJ5IHRoZSBqc29uYXBpLm9yZyBzdGFuZGFyZCxcbiAgICogaXQgc3VwcG9ydHMgc2lkZSBsb2FkZWQgYXNzb2NpYXRlZCByZXNvdXJjZXMgKHZpYSBzdXBwb3J0aW5nIHJlbGF0aW9ucykgYW5kIG1ldGFkYXRhIGV4dHJhY3Rpb24uXG4gICAqXG4gICAqIFRvIGFjdGl2YXRlIGFkZCBtaXhpbiB0byBtb2RlbCBjaGFpblxuICAgKlxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIHJlc3Rtb2RQcm92aWRlLnJlYmFzZSgnRGVmYXVsdFBhY2tlcicpO1xuICAgKiBgYGBcbiAgICpcbiAgICogIyMjIEpzb24gcm9vdFxuICAgKlxuICAgKiBCeSBkZWZhdWx0IHRoZSBtaXhpbiB3aWxsIHVzZSB0aGUgc2luZ3VsYXIgbW9kZWwgbmFtZSBhcyBqc29uIHJvb3QgZm9yIHNpbmdsZSByZXNvdXJjZSByZXF1ZXN0c1xuICAgKiBhbmQgcGx1cmFsaXplZCBuYW1lIGZvciBjb2xsZWN0aW9uIHJlcXVlc3RzLiBNYWtlIHN1cmUgdGhlIG1vZGVsIG5hbWUgaXMgY29ycmVjdGx5IHNldC5cbiAgICpcbiAgICogVG8gb3ZlcnJpZGUgdGhlIG5hbWUgdXNlZCBieSB0aGUgbWl4aW4gc2V0IHRoZSAqKmpzb25Sb290U2luZ2xlKiogYW5kICoqanNvblJvb3RNYW55KiogdmFyaWFibGVzLlxuICAgKiBPciBzZXQgKipqc29uUm9vdCoqIHRvIG92ZXJyaWRlIGJvdGguXG4gICAqXG4gICAqICMjIyBTaWRlIGxvYWRlZCByZXNvdXJjZXNcbiAgICpcbiAgICogQnkgZGVmYXVsdCB0aGUgbWl4aW4gd2lsbCBsb29rIGZvciBsaW5rcyB0byBvdGhlciByZXNvdXJjZXMgaW4gdGhlICdsaW5rZWQnIHJvb3QgcHJvcGVydHksIHlvdVxuICAgKiBjYW4gY2hhbmdlIHRoaXMgYnkgc2V0dGluZyB0aGUganNvbkxpbmtzIHZhcmlhYmxlLiBUbyB1c2UgdGhlIHJvb3QgZWxlbWVudCBhcyBsaW5rIHNvdXJjZVxuICAgKiB1c2UgYGpzb25MaW5rczogJy4nYC4gWW91IGNhbiBhbHNvIGV4cGxpY2l0bHkgc2VsZWN0IHdoaWNoIHByb3BlcnRpZXMgdG8gY29uc2lkZXIgbGlua3MgdXNpbmcgYW5cbiAgICogYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuIFRvIHNraXAgbGlua3MgcHJvY2Vzc2luZyBhbHRvZ2V0aGVyLCBzZXQgaXQgdG8gZmFsc2UuXG4gICAqXG4gICAqIExpbmtzIGFyZSBleHBlY3RlZCB0byB1c2UgdGhlIHBsdXJhbGl6ZWQgdmVyc2lvbiBvZiB0aGUgbmFtZSBmb3IgdGhlIHJlZmVyZW5jZWQgbW9kZWwuIEZvciBleGFtcGxlLFxuICAgKiBnaXZlbiB0aGUgZm9sbG93aW5nIHJlc3BvbnNlOlxuICAgKlxuICAgKiBgYGBqc29uXG4gICAqIHtcbiAgICogICBiaWtlczogWy4uLl0sXG4gICAqICAgbGlua3Mge1xuICAgKiAgICAgcGFydHM6IFsuLi5dXG4gICAqICAgfVxuICAgKiB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBSZXN0bW9kIHdpbGwgZXhwZWN0IHRoYXQgdGhlIFBhcnQgbW9kZWwgcGx1cmFsIG5hbWUgaXMgY29ycmVjdGx5IHNldCBwYXJ0cy4gT25seSBwcm9wZXJ0aWVzIGRlY2xhcmVkXG4gICAqIGFzIHJlZmVyZW5jZSByZWxhdGlvbnMgKGJlbG9uZ3NUbyBhbmQgYmVsb25nc1RvTWFueSkgd2lsbCBiZSBjb3JyZWN0bHkgcmVzb2x2ZWQuXG4gICAqXG4gICAqICMjIyBNZXRhZGF0YVxuICAgKlxuICAgKiBCeSBkZWZhdWx0IG1ldGFkYXRhIGlzIG9ubHkgY2FwdHVyZWQgaWYgaXQgY29tZXMgaW4gdGhlICdtZXRhJyByb290IHByb3BlcnR5LiBNZXRhZGF0YSBpcyB0aGVuXG4gICAqIHN0b3JlZCBpbiB0aGUgJG1ldGEgcHJvcGVydHkgb2YgdGhlIHJlc291cmNlIGJlaW5nIHVud3JhcHBlZC5cbiAgICpcbiAgICogSnVzdCBsaWtlIGxpbmtzLCB0byBjaGFuZ2UgdGhlIG1ldGFkYXRhIHNvdXJjZSBwcm9wZXJ0eSBzZXQgdGhlIGpzb25NZXRhIHByb3BlcnR5IHRvIHRoZSBkZXNpcmVkIG5hbWUsIHNldFxuICAgKiBpdCB0byAnLicgdG8gY2FwdHVyZSB0aGUgZW50aXJlIHJhdyByZXNwb25zZSBvciBzZXQgaXQgdG8gZmFsc2UgdG8gc2tpcCBtZXRhZGF0YSBhbmQgc2V0IGl0IHRvIGFuIGFycmF5IG9mIHByb3BlcnRpZXNcbiAgICogdG8gYmUgZXh0cmFjdCBzZWxlY3RlZCBwcm9wZXJ0aWVzLlxuICAgKlxuICAgKiBAcHJvcGVydHkge21peGVkfSBzaW5nbGUgVGhlIGV4cGVjdGVkIHNpbmdsZSByZXNvdXJjZSB3cmFwcGVyIHByb3BlcnR5IG5hbWVcbiAgICogQHByb3BlcnR5IHtvYmplY3R9IHBsdXJhbCBUaGUgZXhwZWN0ZWQgY29sbGVjdGlvbiB3cmFwcGVyIHByb3BlcnR5IG5hbWVcbiAgICogQHByb3BlcnR5IHttaXhlZH0gbGlua3MgVGhlIGxpbmtzIHJlcG9zaXRvcnkgcHJvcGVydHkgbmFtZVxuICAgKiBAcHJvcGVydHkge29iamVjdH0gbWV0YSBUaGUgbWV0YWRhdGEgcmVwb3NpdG9yeSBwcm9wZXJ0eSBuYW1lXG4gICAqXG4gICAqL1xuICByZXR1cm4gcmVzdG1vZC5taXhpbihmdW5jdGlvbigpIHtcbiAgICB0aGlzLmRlZmluZSgnTW9kZWwudW5wYWNrJywgZnVuY3Rpb24oX3Jlc291cmNlLCBfcmF3KSB7XG4gICAgICB2YXIgbmFtZSA9IG51bGwsXG4gICAgICAgICAgbGlua3MgPSB0aGlzLmdldFByb3BlcnR5KCdqc29uTGlua3MnLCAnbGlua2VkJyksXG4gICAgICAgICAgbWV0YSA9IHRoaXMuZ2V0UHJvcGVydHkoJ2pzb25NZXRhJywgJ21ldGEnKTtcblxuICAgICAgaWYoX3Jlc291cmNlLiRpc0NvbGxlY3Rpb24pIHtcbiAgICAgICAgbmFtZSA9IHRoaXMuZ2V0UHJvcGVydHkoJ2pzb25Sb290TWFueScpIHx8IHRoaXMuZ2V0UHJvcGVydHkoJ2pzb25Sb290JykgfHwgdGhpcy5nZXRQcm9wZXJ0eSgncGx1cmFsJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUT0RPOiB1c2UgcGx1cmFsIGZvciBzaW5nbGUgcmVzb3VyY2Ugb3B0aW9uLlxuICAgICAgICBuYW1lID0gdGhpcy5nZXRQcm9wZXJ0eSgnanNvblJvb3RTaW5nbGUnKSB8fCB0aGlzLmdldFByb3BlcnR5KCdqc29uUm9vdCcpIHx8IHRoaXMuZ2V0UHJvcGVydHkoJ25hbWUnKTtcbiAgICAgIH1cblxuICAgICAgaWYobWV0YSkge1xuICAgICAgICBfcmVzb3VyY2UuJG1ldGFkYXRhID0ge307XG4gICAgICAgIHByb2Nlc3NGZWF0dXJlKF9yYXcsIG5hbWUsIG1ldGEsIGxpbmtzLCBmdW5jdGlvbihfa2V5LCBfdmFsdWUpIHtcbiAgICAgICAgICBfcmVzb3VyY2UuJG1ldGFkYXRhW19rZXldID0gX3ZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYobGlua3MpIHtcbiAgICAgICAgcHJvY2Vzc0ZlYXR1cmUoX3JhdywgbmFtZSwgbGlua3MsIG1ldGEsIGZ1bmN0aW9uKF9rZXksIF92YWx1ZSkge1xuICAgICAgICAgIC8vIFRPRE86IGNoZWNrIHRoYXQgY2FjaGUgaXMgYW4gYXJyYXkuXG4gICAgICAgICAgcGFja2VyQ2FjaGUuZmVlZChfa2V5LCBfdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yYXdbbmFtZV07XG4gICAgfSk7XG4gIH0pO1xuXG59XSk7XG4vKipcbiAqIEBjbGFzcyBVdGlsc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFZhcmlvdXMgdXRpbGl0aWVzIHVzZWQgYWNyb3NzIHRoZSBsaWJyYXJ5LlxuICpcbiAqL1xuUk1Nb2R1bGUuZmFjdG9yeSgnUk1VdGlscycsIFsnJGxvZycsIGZ1bmN0aW9uKCRsb2cpIHtcblxuICAvLyBkZXRlcm1pbmUgYnJvd3NlciBzdXBwb3J0IGZvciBvYmplY3QgcHJvdG90eXBlIGNoYW5naW5nXG4gIHZhciBJRlJBTUVfUkVGID0gW107XG4gIHZhciBQUk9UT19TRVRURVIgPSAoZnVuY3Rpb24oKSB7XG4gICAgdmFyIFRlc3QgPSBmdW5jdGlvbigpIHt9O1xuICAgIGlmKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKF90YXJnZXQsIF9wcm90bykge1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoX3RhcmdldCwgX3Byb3RvKTsgLy8gTm90IHN1cmUgYWJvdXQgc3VwcG9ydGluZyB0aGlzLi4uXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZigobmV3IFRlc3QpLl9fcHJvdG9fXyA9PT0gVGVzdC5wcm90b3R5cGUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihfdGFyZ2V0LCBfcHJvdG8pIHtcbiAgICAgICAgX3RhcmdldC5fX3Byb3RvX18gPSBfcHJvdG87XG4gICAgICB9O1xuICAgIH1cbiAgfSkoKTtcblxuICB2YXIgVXRpbHMgPSB7XG5cbiAgICAvLyBJZ25vcmUgTWFza3NcbiAgICBDUkVBVEVfTUFTSzogJ0MnLFxuICAgIFVQREFURV9NQVNLOiAnVScsXG4gICAgUkVBRF9NQVNLOiAnUicsXG4gICAgV1JJVEVfTUFTSzogJ0NVJyxcbiAgICBGVUxMX01BU0s6ICdDUlUnLFxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIFV0aWxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIEZvcm1hdHMgYSBzdHJpbmdcbiAgICAgKlxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gX3N0ciBTdHJpbmcgdG8gZm9ybWF0XG4gICAgICogQHBhcmFtICB7YXJyYXl9IF9hcmdzIFN0cmluZyBhcmd1bWVudHNcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IEZvcm1hdGVkIHN0cmluZ1xuICAgICAqL1xuICAgIGZvcm1hdDogZnVuY3Rpb24oX3N0ciwgX2FyZ3MpIHtcbiAgICAgIGZvcih2YXIgaSA9IDA7IF9hcmdzICYmIGkgPCBfYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICBfc3RyID0gX3N0ci5yZXBsYWNlKCckJyArIChpKzEpLCBfYXJnc1tpXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX3N0cjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIFV0aWxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIFRlc3QgZm9yIGEgY29uZGl0aW9uIHRvIGJlIG1ldCwgaWYgbm90IGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtib29sZWFufSBfY29uZGl0aW9uIENvbmRpdGlvbiB0byBhc3NlcnRcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IF9tc2cgRXJyb3IgbWVzc2FnZVxuICAgICAqL1xuICAgIGFzc2VydDogZnVuY3Rpb24oX2NvbmRpdGlvbiwgX21zZyAvKiwgcGFyYW1zICovKSB7XG4gICAgICBpZighX2NvbmRpdGlvbikge1xuICAgICAgICB2YXIgcGFyYW1zID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgICAgICAgX21zZyA9IFV0aWxzLmZvcm1hdChfbXNnLCBwYXJhbXMpO1xuICAgICAgICAkbG9nLmVycm9yKF9tc2cpOyAvLyBsb2cgZXJyb3IgbWVzc2FnZVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoX21zZyk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBVdGlsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBTaW1wbGUgdXJsIGpvaW5pbmcsIHJldHVybnMgbnVsbCBpZiBfaGVhZCBvciBfdGFpbCBpcyBudWxsLlxuICAgICAqXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSBfaGVhZCBVcmwgcHJlZml4XG4gICAgICogQHBhcmFtICB7c3RyaW5nfSBfdGFpbCBVcmwgc3VmZml4XG4gICAgICogQHJldHVybiB7c3RyaW5nfSBSZXN1bHRpbmcgdXJsXG4gICAgICovXG4gICAgam9pblVybDogZnVuY3Rpb24oX2hlYWQsIF90YWlsKSB7XG4gICAgICBpZighX2hlYWQgfHwgIV90YWlsKSByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiAoX2hlYWQrJycpLnJlcGxhY2UoL1xcLyQvLCAnJykgKyAnLycgKyAoX3RhaWwrJycpLnJlcGxhY2UoL15cXC8vLCAnJyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBVdGlsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBDbGVhbnMgdHJhaWxpbmcgc2xhc2hlcyBmcm9tIGFuIHVybFxuICAgICAqXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSBfdXJsIFVybCB0byBjbGVhblxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gUmVzdWx0aW5nIHVybFxuICAgICAqL1xuICAgIGNsZWFuVXJsOiBmdW5jdGlvbihfdXJsKSB7XG4gICAgICByZXR1cm4gX3VybCA/IF91cmwucmVwbGFjZSgvXFwvJC8sICcnKSA6IF91cmw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBVdGlsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBDaGFpbnMgdG8gZmlsdGVyaW5nIGZ1bmN0aW9ucyB0b2dldGhlclxuICAgICAqXG4gICAgICogQHBhcmFtICB7ZnVuY3Rpb259IF9maXJzdCBvcmlnaW5hbCBmdW5jdGlvblxuICAgICAqIEBwYXJhbSAge2Z1bmN0aW9ufSBfZnVuICAgZnVuY3Rpb24gdG8gY2FsbCBvbiB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gcmVzdWx0XG4gICAgICogQHJldHVybiB7bWl4ZWR9IHZhbHVlIHJldHVybmVkIGJ5IHRoZSBsYXN0IGZ1bmN0aW9uIGNhbGxcbiAgICAgKi9cbiAgICBjaGFpbjogZnVuY3Rpb24oX2ZpcnN0LCBfZnVuKSB7XG4gICAgICBpZighX2ZpcnN0KSByZXR1cm4gX2Z1bjtcbiAgICAgIHJldHVybiBmdW5jdGlvbihfdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIF9mdW4uY2FsbCh0aGlzLCBfZmlyc3QuY2FsbCh0aGlzLCBfdmFsdWUpKTtcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBVdGlsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBPdmVycmlkZSBhIHByb3BlcnR5IHZhbHVlLCBtYWtpbmcgb3ZlcnJpZGVuIGZ1bmN0aW9uIGF2YWlsYWJsZSBhcyB0aGlzLiRzdXBlclxuICAgICAqXG4gICAgICogQHBhcmFtICB7ZnVuY3Rpb259IF9zdXBlciBPcmlnaW5hbCB2YWx1ZVxuICAgICAqIEBwYXJhbSAge21peGVkfSBfZnVuIE5ldyBwcm9wZXJ0eSB2YWx1ZVxuICAgICAqIEByZXR1cm4ge21peGVkfSBWYWx1ZSByZXR1cm5lZCBieSBuZXcgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBvdmVycmlkZTogZnVuY3Rpb24oX3N1cGVyLCBfZnVuKSB7XG4gICAgICBpZighX3N1cGVyIHx8IHR5cGVvZiBfZnVuICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gX2Z1bjtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgb2xkU3VwZXIgPSB0aGlzLiRzdXBlcjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLiRzdXBlciA9IF9zdXBlcjtcbiAgICAgICAgICByZXR1cm4gX2Z1bi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHRoaXMuJHN1cGVyID0gb2xkU3VwZXI7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBVdGlsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBFeHRlbmQgYW4gb2JqZWN0IHVzaW5nIGBVdGlscy5vdmVycmlkZWAgaW5zdGVhZCBvZiBqdXN0IHJlcGxhY2luZyB0aGUgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHBhcmFtICB7b2JqZWN0fSBfdGFyZ2V0IE9iamVjdCB0byBiZSBleHRlbmRlZFxuICAgICAqIEBwYXJhbSAge29iamVjdH0gX290aGVyICBTb3VyY2Ugb2JqZWN0XG4gICAgICovXG4gICAgZXh0ZW5kT3ZlcnJpZGVuOiBmdW5jdGlvbihfdGFyZ2V0KSB7XG4gICAgICBmb3IodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBvdGhlciA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgZm9yKHZhciBrZXkgaW4gb3RoZXIpIHtcbiAgICAgICAgICBpZihvdGhlci5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICBfdGFyZ2V0W2tleV0gPSBfdGFyZ2V0W2tleV0gJiYgdHlwZW9mIF90YXJnZXRba2V5XSA9PT0gJ2Z1bmN0aW9uJyA/IFV0aWxzLm92ZXJyaWRlKF90YXJnZXRba2V5XSwgb3RoZXJba2V5XSkgOiBvdGhlcltrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3RhcmdldDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIFV0aWxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIEdlbmVyYXRlcyBhIG5ldyBhcnJheSB0eXBlLCBoYW5kbGVzIHBsYXRmb3JtIHNwZWNpZmljcyAoYmFnLU8taGFja3MpXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9IEluZGVwZW5kZW50IGFycmF5IHR5cGUuXG4gICAgICovXG4gICAgYnVpbGRBcnJheVR5cGU6IGZ1bmN0aW9uKF9mb3JjZUlmcmFtZSkge1xuXG4gICAgICB2YXIgYXJyYXlUeXBlO1xuXG4gICAgICBpZihQUk9UT19TRVRURVIgJiYgIV9mb3JjZUlmcmFtZSkge1xuXG4gICAgICAgIC8vIFVzZSBvYmplY3QgcHJvdG90eXBlIG92ZXJyaWRlIHRlY2huaXF1ZVxuICAgICAgICAvL1xuICAgICAgICAvLyBWZXJ5IG5pY2UgYXJyYXkgc3ViY2xhc3NpbmcgYW5hbHlzaXM6IGh0dHA6Ly9wZXJmZWN0aW9ua2lsbHMuY29tL2hvdy1lY21hc2NyaXB0LTUtc3RpbGwtZG9lcy1ub3QtYWxsb3ctdG8tc3ViY2xhc3MtYW4tYXJyYXkvI3doeV9zdWJjbGFzc19hbl9hcnJheVxuICAgICAgICAvL1xuXG4gICAgICAgIHZhciBTdWJBcnJheSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhcnIgPSBbIF07XG4gICAgICAgICAgYXJyLnB1c2guYXBwbHkoYXJyLCBhcmd1bWVudHMpO1xuICAgICAgICAgIFBST1RPX1NFVFRFUihhcnIsIFN1YkFycmF5LnByb3RvdHlwZSk7XG4gICAgICAgICAgcmV0dXJuIGFycjtcbiAgICAgICAgfTtcblxuICAgICAgICBTdWJBcnJheS5wcm90b3R5cGUgPSBbXTtcbiAgICAgICAgU3ViQXJyYXkucHJvdG90eXBlLmxhc3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdGhpc1t0aGlzLmxlbmd0aCAtIDFdO1xuICAgICAgICB9O1xuXG4gICAgICAgIGFycmF5VHlwZSA9IFN1YkFycmF5O1xuXG4gICAgICB9IGVsc2UgIHtcblxuICAgICAgICAvLyBVc2UgaWZyYW1lIGhpamFjayB0ZWNobmlxdWUgZm9yIElFMTE8XG4gICAgICAgIC8vXG4gICAgICAgIC8vIEJhc2VkIG9uIHRoZSBhd2Vzb21lIGJsb2cgcG9zdCBvZiBEZWFuIEVkd2FyZHM6IGh0dHA6Ly9kZWFuLmVkd2FyZHMubmFtZS93ZWJsb2cvMjAwNi8xMS9ob29yYXkvXG4gICAgICAgIC8vXG5cbiAgICAgICAgLy8gY3JlYXRlIGEgaGlkZGVuIDxpZnJhbWU+LlxuICAgICAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICAgIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICBpZnJhbWUuaGVpZ2h0ID0gMDtcbiAgICAgICAgaWZyYW1lLndpZHRoID0gMDtcbiAgICAgICAgaWZyYW1lLmJvcmRlciA9IDA7XG5cbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuXG4gICAgICAgIC8vIHdyaXRlIGEgc2NyaXB0IGludG8gdGhlIDxpZnJhbWU+IGFuZCBzdGVhbCBpdHMgQXJyYXkgb2JqZWN0LlxuICAgICAgICB3aW5kb3cuZnJhbWVzW3dpbmRvdy5mcmFtZXMubGVuZ3RoIC0gMV0uZG9jdW1lbnQud3JpdGUoJzxzY3JpcHQ+cGFyZW50LlJlc3Rtb2RBcnJheSA9IEFycmF5OzxcXC9zY3JpcHQ+Jyk7XG5cbiAgICAgICAgLy8gdGFrZSB0aGUgYXJyYXkgb2JqZWN0IGFuZCBtb3ZlIGl0IHRvIGxvY2FsIGNvbnRleHQuXG4gICAgICAgIGFycmF5VHlwZSA9IHdpbmRvdy5SZXN0bW9kQXJyYXk7XG4gICAgICAgIGRlbGV0ZSB3aW5kb3cuUmVzdG1vZEFycmF5O1xuXG4gICAgICAgIC8vIGNvcHkgdGhpcyBjb250ZXh0IEFycmF5J3MgZXh0ZW5zaW9ucyB0byBuZXcgYXJyYXkgdHlwZSAoY291bGQgYmUgYSBsaXR0bGUgc2xvdy4uLilcbiAgICAgICAgZm9yKHZhciBrZXkgaW4gQXJyYXkucHJvdG90eXBlKSB7XG4gICAgICAgICAgaWYodHlwZW9mIEFycmF5LnByb3RvdHlwZVtrZXldID09PSAnZnVuY3Rpb24nICYmICFhcnJheVR5cGUucHJvdG90eXBlW2tleV0pIHtcbiAgICAgICAgICAgIGFycmF5VHlwZS5wcm90b3R5cGVba2V5XSA9IEFycmF5LnByb3RvdHlwZVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlbW92ZSBpZnJhbWUgZnJvbSBET00uXG4gICAgICAgIC8vXG4gICAgICAgIC8vIEV2ZW4gdGhvdWdoIE1TIHNheXMgdGhhdCByZW1vdmluZyBpZnJhbWUgZnJvbSBET00gd2lsbCByZWxlYXNlIGl0J3MgcmVsYXRlZCBzdHJ1Y3R1cmVzIChodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvZ2c2MjI5Mjkodj12cy44NSkuYXNweCksXG4gICAgICAgIC8vIGFjdHVhbGx5IGtlZXBpbmcgaXQgcmVmZXJlbmNlZCBoYXMgcHJvdmVuIHRvIGJlIGVub3VnaCB0byBrZWVwIHRoZSBzdHJ1Y3R1cmVzIGFsaXZlLiAodGhhdCBpbmNsdWRlcyBvdXIgYXJyYXkgdHlwZSlcbiAgICAgICAgLy9cbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICAgICAgICBJRlJBTUVfUkVGLnB1c2goaWZyYW1lKTsgLy8ga2VlcCBpZnJhbWUgcmVmZXJlbmNlIVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXJyYXlUeXBlO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gVXRpbHM7XG59XSk7XG59KShhbmd1bGFyKTsiLCIvKipcbiAqIEFQSSBCb3VuZCBNb2RlbHMgZm9yIEFuZ3VsYXJKU1xuICogQHZlcnNpb24gdjEuMS43IC0gMjAxNS0wMS0wNlxuICogQGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXItcGxhdGFudXMvcmVzdG1vZFxuICogQGF1dGhvciBJZ25hY2lvIEJhaXhhcyA8aWduYWNpb0BwbGF0YW4udXM+XG4gKiBAbGljZW5zZSBNSVQgTGljZW5zZSwgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcbiAqL1xuIWZ1bmN0aW9uKGEpe1widXNlIHN0cmljdFwiO2EubW9kdWxlKFwicmVzdG1vZFwiKS5mYWN0b3J5KFwiQU1TQXBpXCIsW1wicmVzdG1vZFwiLFwiaW5mbGVjdG9yXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5taXhpbihcIkRlZmF1bHRQYWNrZXJcIix7JGNvbmZpZzp7c3R5bGU6XCJBTVNcIixwcmltYXJ5S2V5OlwiaWRcIixqc29uTWV0YTpcIm1ldGFcIixqc29uTGlua3M6XCJsaW5rc1wifSwkZXh0ZW5kOntNb2RlbDp7ZGVjb2RlTmFtZTpiLmNhbWVsaXplLGVuY29kZU5hbWU6ZnVuY3Rpb24oYSl7cmV0dXJuIGIucGFyYW1ldGVyaXplKGEsXCJfXCIpfSxlbmNvZGVVcmxOYW1lOmIucGFyYW1ldGVyaXplfX19KX1dKX0oYW5ndWxhcik7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IG1hY2ludG9zaCBvbiAxLzI4LzE1LlxuICovXG5cbnJlcXVpcmUoJy4vYW5ndWxhci5taW4uanMnKTtcbm1vZHVsZS5leHBvcnRzID0gYW5ndWxhcjsiLCIvKlxuIEFuZ3VsYXJKUyB2MS4zLjEzXG4gKGMpIDIwMTAtMjAxNCBHb29nbGUsIEluYy4gaHR0cDovL2FuZ3VsYXJqcy5vcmdcbiBMaWNlbnNlOiBNSVRcbiovXG4oZnVuY3Rpb24oTSxZLHQpeyd1c2Ugc3RyaWN0JztmdW5jdGlvbiBTKGIpe3JldHVybiBmdW5jdGlvbigpe3ZhciBhPWFyZ3VtZW50c1swXSxjO2M9XCJbXCIrKGI/YitcIjpcIjpcIlwiKSthK1wiXSBodHRwOi8vZXJyb3JzLmFuZ3VsYXJqcy5vcmcvMS4zLjEzL1wiKyhiP2IrXCIvXCI6XCJcIikrYTtmb3IoYT0xO2E8YXJndW1lbnRzLmxlbmd0aDthKyspe2M9YysoMT09YT9cIj9cIjpcIiZcIikrXCJwXCIrKGEtMSkrXCI9XCI7dmFyIGQ9ZW5jb2RlVVJJQ29tcG9uZW50LGU7ZT1hcmd1bWVudHNbYV07ZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBlP2UudG9TdHJpbmcoKS5yZXBsYWNlKC8gXFx7W1xcc1xcU10qJC8sXCJcIik6XCJ1bmRlZmluZWRcIj09dHlwZW9mIGU/XCJ1bmRlZmluZWRcIjpcInN0cmluZ1wiIT10eXBlb2YgZT9KU09OLnN0cmluZ2lmeShlKTplO2MrPWQoZSl9cmV0dXJuIEVycm9yKGMpfX1mdW5jdGlvbiBUYShiKXtpZihudWxsPT1ifHxVYShiKSlyZXR1cm4hMTt2YXIgYT1iLmxlbmd0aDtyZXR1cm4gYi5ub2RlVHlwZT09PVxub2EmJmE/ITA6RihiKXx8SChiKXx8MD09PWF8fFwibnVtYmVyXCI9PT10eXBlb2YgYSYmMDxhJiZhLTEgaW4gYn1mdW5jdGlvbiBzKGIsYSxjKXt2YXIgZCxlO2lmKGIpaWYoRyhiKSlmb3IoZCBpbiBiKVwicHJvdG90eXBlXCI9PWR8fFwibGVuZ3RoXCI9PWR8fFwibmFtZVwiPT1kfHxiLmhhc093blByb3BlcnR5JiYhYi5oYXNPd25Qcm9wZXJ0eShkKXx8YS5jYWxsKGMsYltkXSxkLGIpO2Vsc2UgaWYoSChiKXx8VGEoYikpe3ZhciBmPVwib2JqZWN0XCIhPT10eXBlb2YgYjtkPTA7Zm9yKGU9Yi5sZW5ndGg7ZDxlO2QrKykoZnx8ZCBpbiBiKSYmYS5jYWxsKGMsYltkXSxkLGIpfWVsc2UgaWYoYi5mb3JFYWNoJiZiLmZvckVhY2ghPT1zKWIuZm9yRWFjaChhLGMsYik7ZWxzZSBmb3IoZCBpbiBiKWIuaGFzT3duUHJvcGVydHkoZCkmJmEuY2FsbChjLGJbZF0sZCxiKTtyZXR1cm4gYn1mdW5jdGlvbiBFZChiLGEsYyl7Zm9yKHZhciBkPU9iamVjdC5rZXlzKGIpLnNvcnQoKSxlPTA7ZTxkLmxlbmd0aDtlKyspYS5jYWxsKGMsXG5iW2RbZV1dLGRbZV0pO3JldHVybiBkfWZ1bmN0aW9uIGxjKGIpe3JldHVybiBmdW5jdGlvbihhLGMpe2IoYyxhKX19ZnVuY3Rpb24gRmQoKXtyZXR1cm4rK29ifWZ1bmN0aW9uIG1jKGIsYSl7YT9iLiQkaGFzaEtleT1hOmRlbGV0ZSBiLiQkaGFzaEtleX1mdW5jdGlvbiB4KGIpe2Zvcih2YXIgYT1iLiQkaGFzaEtleSxjPTEsZD1hcmd1bWVudHMubGVuZ3RoO2M8ZDtjKyspe3ZhciBlPWFyZ3VtZW50c1tjXTtpZihlKWZvcih2YXIgZj1PYmplY3Qua2V5cyhlKSxnPTAsaD1mLmxlbmd0aDtnPGg7ZysrKXt2YXIgbD1mW2ddO2JbbF09ZVtsXX19bWMoYixhKTtyZXR1cm4gYn1mdW5jdGlvbiBiYShiKXtyZXR1cm4gcGFyc2VJbnQoYiwxMCl9ZnVuY3Rpb24gUGIoYixhKXtyZXR1cm4geChPYmplY3QuY3JlYXRlKGIpLGEpfWZ1bmN0aW9uIHooKXt9ZnVuY3Rpb24gcGEoYil7cmV0dXJuIGJ9ZnVuY3Rpb24gZWEoYil7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGJ9fWZ1bmN0aW9uIEIoYil7cmV0dXJuXCJ1bmRlZmluZWRcIj09PVxudHlwZW9mIGJ9ZnVuY3Rpb24geShiKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIGJ9ZnVuY3Rpb24gSShiKXtyZXR1cm4gbnVsbCE9PWImJlwib2JqZWN0XCI9PT10eXBlb2YgYn1mdW5jdGlvbiBGKGIpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYn1mdW5jdGlvbiBWKGIpe3JldHVyblwibnVtYmVyXCI9PT10eXBlb2YgYn1mdW5jdGlvbiBxYShiKXtyZXR1cm5cIltvYmplY3QgRGF0ZV1cIj09PURhLmNhbGwoYil9ZnVuY3Rpb24gRyhiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYn1mdW5jdGlvbiBwYihiKXtyZXR1cm5cIltvYmplY3QgUmVnRXhwXVwiPT09RGEuY2FsbChiKX1mdW5jdGlvbiBVYShiKXtyZXR1cm4gYiYmYi53aW5kb3c9PT1ifWZ1bmN0aW9uIFZhKGIpe3JldHVybiBiJiZiLiRldmFsQXN5bmMmJmIuJHdhdGNofWZ1bmN0aW9uIFdhKGIpe3JldHVyblwiYm9vbGVhblwiPT09dHlwZW9mIGJ9ZnVuY3Rpb24gbmMoYil7cmV0dXJuISghYnx8IShiLm5vZGVOYW1lfHxiLnByb3AmJlxuYi5hdHRyJiZiLmZpbmQpKX1mdW5jdGlvbiBHZChiKXt2YXIgYT17fTtiPWIuc3BsaXQoXCIsXCIpO3ZhciBjO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYVtiW2NdXT0hMDtyZXR1cm4gYX1mdW5jdGlvbiB1YShiKXtyZXR1cm4gUShiLm5vZGVOYW1lfHxiWzBdJiZiWzBdLm5vZGVOYW1lKX1mdW5jdGlvbiBYYShiLGEpe3ZhciBjPWIuaW5kZXhPZihhKTswPD1jJiZiLnNwbGljZShjLDEpO3JldHVybiBhfWZ1bmN0aW9uIEVhKGIsYSxjLGQpe2lmKFVhKGIpfHxWYShiKSl0aHJvdyBLYShcImNwd3NcIik7aWYoYSl7aWYoYj09PWEpdGhyb3cgS2EoXCJjcGlcIik7Yz1jfHxbXTtkPWR8fFtdO2lmKEkoYikpe3ZhciBlPWMuaW5kZXhPZihiKTtpZigtMSE9PWUpcmV0dXJuIGRbZV07Yy5wdXNoKGIpO2QucHVzaChhKX1pZihIKGIpKWZvcih2YXIgZj1hLmxlbmd0aD0wO2Y8Yi5sZW5ndGg7ZisrKWU9RWEoYltmXSxudWxsLGMsZCksSShiW2ZdKSYmKGMucHVzaChiW2ZdKSxkLnB1c2goZSkpLGEucHVzaChlKTtcbmVsc2V7dmFyIGc9YS4kJGhhc2hLZXk7SChhKT9hLmxlbmd0aD0wOnMoYSxmdW5jdGlvbihiLGMpe2RlbGV0ZSBhW2NdfSk7Zm9yKGYgaW4gYiliLmhhc093blByb3BlcnR5KGYpJiYoZT1FYShiW2ZdLG51bGwsYyxkKSxJKGJbZl0pJiYoYy5wdXNoKGJbZl0pLGQucHVzaChlKSksYVtmXT1lKTttYyhhLGcpfX1lbHNlIGlmKGE9YilIKGIpP2E9RWEoYixbXSxjLGQpOnFhKGIpP2E9bmV3IERhdGUoYi5nZXRUaW1lKCkpOnBiKGIpPyhhPW5ldyBSZWdFeHAoYi5zb3VyY2UsYi50b1N0cmluZygpLm1hdGNoKC9bXlxcL10qJC8pWzBdKSxhLmxhc3RJbmRleD1iLmxhc3RJbmRleCk6SShiKSYmKGU9T2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YoYikpLGE9RWEoYixlLGMsZCkpO3JldHVybiBhfWZ1bmN0aW9uIHJhKGIsYSl7aWYoSChiKSl7YT1hfHxbXTtmb3IodmFyIGM9MCxkPWIubGVuZ3RoO2M8ZDtjKyspYVtjXT1iW2NdfWVsc2UgaWYoSShiKSlmb3IoYyBpbiBhPWF8fHt9LFxuYilpZihcIiRcIiE9PWMuY2hhckF0KDApfHxcIiRcIiE9PWMuY2hhckF0KDEpKWFbY109YltjXTtyZXR1cm4gYXx8Yn1mdW5jdGlvbiBnYShiLGEpe2lmKGI9PT1hKXJldHVybiEwO2lmKG51bGw9PT1ifHxudWxsPT09YSlyZXR1cm4hMTtpZihiIT09YiYmYSE9PWEpcmV0dXJuITA7dmFyIGM9dHlwZW9mIGIsZDtpZihjPT10eXBlb2YgYSYmXCJvYmplY3RcIj09YylpZihIKGIpKXtpZighSChhKSlyZXR1cm4hMTtpZigoYz1iLmxlbmd0aCk9PWEubGVuZ3RoKXtmb3IoZD0wO2Q8YztkKyspaWYoIWdhKGJbZF0sYVtkXSkpcmV0dXJuITE7cmV0dXJuITB9fWVsc2V7aWYocWEoYikpcmV0dXJuIHFhKGEpP2dhKGIuZ2V0VGltZSgpLGEuZ2V0VGltZSgpKTohMTtpZihwYihiKSYmcGIoYSkpcmV0dXJuIGIudG9TdHJpbmcoKT09YS50b1N0cmluZygpO2lmKFZhKGIpfHxWYShhKXx8VWEoYil8fFVhKGEpfHxIKGEpKXJldHVybiExO2M9e307Zm9yKGQgaW4gYilpZihcIiRcIiE9PWQuY2hhckF0KDApJiYhRyhiW2RdKSl7aWYoIWdhKGJbZF0sXG5hW2RdKSlyZXR1cm4hMTtjW2RdPSEwfWZvcihkIGluIGEpaWYoIWMuaGFzT3duUHJvcGVydHkoZCkmJlwiJFwiIT09ZC5jaGFyQXQoMCkmJmFbZF0hPT10JiYhRyhhW2RdKSlyZXR1cm4hMTtyZXR1cm4hMH1yZXR1cm4hMX1mdW5jdGlvbiBZYShiLGEsYyl7cmV0dXJuIGIuY29uY2F0KFphLmNhbGwoYSxjKSl9ZnVuY3Rpb24gb2MoYixhKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGg/WmEuY2FsbChhcmd1bWVudHMsMik6W107cmV0dXJuIUcoYSl8fGEgaW5zdGFuY2VvZiBSZWdFeHA/YTpjLmxlbmd0aD9mdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoP2EuYXBwbHkoYixZYShjLGFyZ3VtZW50cywwKSk6YS5hcHBseShiLGMpfTpmdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoP2EuYXBwbHkoYixhcmd1bWVudHMpOmEuY2FsbChiKX19ZnVuY3Rpb24gSGQoYixhKXt2YXIgYz1hO1wic3RyaW5nXCI9PT10eXBlb2YgYiYmXCIkXCI9PT1iLmNoYXJBdCgwKSYmXCIkXCI9PT1iLmNoYXJBdCgxKT9cbmM9dDpVYShhKT9jPVwiJFdJTkRPV1wiOmEmJlk9PT1hP2M9XCIkRE9DVU1FTlRcIjpWYShhKSYmKGM9XCIkU0NPUEVcIik7cmV0dXJuIGN9ZnVuY3Rpb24gJGEoYixhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGIpcmV0dXJuIHQ7VihhKXx8KGE9YT8yOm51bGwpO3JldHVybiBKU09OLnN0cmluZ2lmeShiLEhkLGEpfWZ1bmN0aW9uIHBjKGIpe3JldHVybiBGKGIpP0pTT04ucGFyc2UoYik6Yn1mdW5jdGlvbiB2YShiKXtiPUQoYikuY2xvbmUoKTt0cnl7Yi5lbXB0eSgpfWNhdGNoKGEpe312YXIgYz1EKFwiPGRpdj5cIikuYXBwZW5kKGIpLmh0bWwoKTt0cnl7cmV0dXJuIGJbMF0ubm9kZVR5cGU9PT1xYj9RKGMpOmMubWF0Y2goL14oPFtePl0rPikvKVsxXS5yZXBsYWNlKC9ePChbXFx3XFwtXSspLyxmdW5jdGlvbihhLGIpe3JldHVyblwiPFwiK1EoYil9KX1jYXRjaChkKXtyZXR1cm4gUShjKX19ZnVuY3Rpb24gcWMoYil7dHJ5e3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoYil9Y2F0Y2goYSl7fX1mdW5jdGlvbiByYyhiKXt2YXIgYT1cbnt9LGMsZDtzKChifHxcIlwiKS5zcGxpdChcIiZcIiksZnVuY3Rpb24oYil7YiYmKGM9Yi5yZXBsYWNlKC9cXCsvZyxcIiUyMFwiKS5zcGxpdChcIj1cIiksZD1xYyhjWzBdKSx5KGQpJiYoYj15KGNbMV0pP3FjKGNbMV0pOiEwLHNjLmNhbGwoYSxkKT9IKGFbZF0pP2FbZF0ucHVzaChiKTphW2RdPVthW2RdLGJdOmFbZF09YikpfSk7cmV0dXJuIGF9ZnVuY3Rpb24gUWIoYil7dmFyIGE9W107cyhiLGZ1bmN0aW9uKGIsZCl7SChiKT9zKGIsZnVuY3Rpb24oYil7YS5wdXNoKEZhKGQsITApKyghMD09PWI/XCJcIjpcIj1cIitGYShiLCEwKSkpfSk6YS5wdXNoKEZhKGQsITApKyghMD09PWI/XCJcIjpcIj1cIitGYShiLCEwKSkpfSk7cmV0dXJuIGEubGVuZ3RoP2Euam9pbihcIiZcIik6XCJcIn1mdW5jdGlvbiByYihiKXtyZXR1cm4gRmEoYiwhMCkucmVwbGFjZSgvJTI2L2dpLFwiJlwiKS5yZXBsYWNlKC8lM0QvZ2ksXCI9XCIpLnJlcGxhY2UoLyUyQi9naSxcIitcIil9ZnVuY3Rpb24gRmEoYixhKXtyZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KGIpLnJlcGxhY2UoLyU0MC9naSxcblwiQFwiKS5yZXBsYWNlKC8lM0EvZ2ksXCI6XCIpLnJlcGxhY2UoLyUyNC9nLFwiJFwiKS5yZXBsYWNlKC8lMkMvZ2ksXCIsXCIpLnJlcGxhY2UoLyUzQi9naSxcIjtcIikucmVwbGFjZSgvJTIwL2csYT9cIiUyMFwiOlwiK1wiKX1mdW5jdGlvbiBJZChiLGEpe3ZhciBjLGQsZT1zYi5sZW5ndGg7Yj1EKGIpO2ZvcihkPTA7ZDxlOysrZClpZihjPXNiW2RdK2EsRihjPWIuYXR0cihjKSkpcmV0dXJuIGM7cmV0dXJuIG51bGx9ZnVuY3Rpb24gSmQoYixhKXt2YXIgYyxkLGU9e307cyhzYixmdW5jdGlvbihhKXthKz1cImFwcFwiOyFjJiZiLmhhc0F0dHJpYnV0ZSYmYi5oYXNBdHRyaWJ1dGUoYSkmJihjPWIsZD1iLmdldEF0dHJpYnV0ZShhKSl9KTtzKHNiLGZ1bmN0aW9uKGEpe2ErPVwiYXBwXCI7dmFyIGU7IWMmJihlPWIucXVlcnlTZWxlY3RvcihcIltcIithLnJlcGxhY2UoXCI6XCIsXCJcXFxcOlwiKStcIl1cIikpJiYoYz1lLGQ9ZS5nZXRBdHRyaWJ1dGUoYSkpfSk7YyYmKGUuc3RyaWN0RGk9bnVsbCE9PUlkKGMsXCJzdHJpY3QtZGlcIiksXG5hKGMsZD9bZF06W10sZSkpfWZ1bmN0aW9uIHRjKGIsYSxjKXtJKGMpfHwoYz17fSk7Yz14KHtzdHJpY3REaTohMX0sYyk7dmFyIGQ9ZnVuY3Rpb24oKXtiPUQoYik7aWYoYi5pbmplY3RvcigpKXt2YXIgZD1iWzBdPT09WT9cImRvY3VtZW50XCI6dmEoYik7dGhyb3cgS2EoXCJidHN0cnBkXCIsZC5yZXBsYWNlKC88LyxcIiZsdDtcIikucmVwbGFjZSgvPi8sXCImZ3Q7XCIpKTt9YT1hfHxbXTthLnVuc2hpZnQoW1wiJHByb3ZpZGVcIixmdW5jdGlvbihhKXthLnZhbHVlKFwiJHJvb3RFbGVtZW50XCIsYil9XSk7Yy5kZWJ1Z0luZm9FbmFibGVkJiZhLnB1c2goW1wiJGNvbXBpbGVQcm92aWRlclwiLGZ1bmN0aW9uKGEpe2EuZGVidWdJbmZvRW5hYmxlZCghMCl9XSk7YS51bnNoaWZ0KFwibmdcIik7ZD1hYihhLGMuc3RyaWN0RGkpO2QuaW52b2tlKFtcIiRyb290U2NvcGVcIixcIiRyb290RWxlbWVudFwiLFwiJGNvbXBpbGVcIixcIiRpbmplY3RvclwiLGZ1bmN0aW9uKGEsYixjLGQpe2EuJGFwcGx5KGZ1bmN0aW9uKCl7Yi5kYXRhKFwiJGluamVjdG9yXCIsXG5kKTtjKGIpKGEpfSl9XSk7cmV0dXJuIGR9LGU9L15OR19FTkFCTEVfREVCVUdfSU5GTyEvLGY9L15OR19ERUZFUl9CT09UU1RSQVAhLztNJiZlLnRlc3QoTS5uYW1lKSYmKGMuZGVidWdJbmZvRW5hYmxlZD0hMCxNLm5hbWU9TS5uYW1lLnJlcGxhY2UoZSxcIlwiKSk7aWYoTSYmIWYudGVzdChNLm5hbWUpKXJldHVybiBkKCk7TS5uYW1lPU0ubmFtZS5yZXBsYWNlKGYsXCJcIik7Y2EucmVzdW1lQm9vdHN0cmFwPWZ1bmN0aW9uKGIpe3MoYixmdW5jdGlvbihiKXthLnB1c2goYil9KTtyZXR1cm4gZCgpfTtHKGNhLnJlc3VtZURlZmVycmVkQm9vdHN0cmFwKSYmY2EucmVzdW1lRGVmZXJyZWRCb290c3RyYXAoKX1mdW5jdGlvbiBLZCgpe00ubmFtZT1cIk5HX0VOQUJMRV9ERUJVR19JTkZPIVwiK00ubmFtZTtNLmxvY2F0aW9uLnJlbG9hZCgpfWZ1bmN0aW9uIExkKGIpe2I9Y2EuZWxlbWVudChiKS5pbmplY3RvcigpO2lmKCFiKXRocm93IEthKFwidGVzdFwiKTtyZXR1cm4gYi5nZXQoXCIkJHRlc3RhYmlsaXR5XCIpfVxuZnVuY3Rpb24gdWMoYixhKXthPWF8fFwiX1wiO3JldHVybiBiLnJlcGxhY2UoTWQsZnVuY3Rpb24oYixkKXtyZXR1cm4oZD9hOlwiXCIpK2IudG9Mb3dlckNhc2UoKX0pfWZ1bmN0aW9uIE5kKCl7dmFyIGI7dmN8fCgoc2E9TS5qUXVlcnkpJiZzYS5mbi5vbj8oRD1zYSx4KHNhLmZuLHtzY29wZTpMYS5zY29wZSxpc29sYXRlU2NvcGU6TGEuaXNvbGF0ZVNjb3BlLGNvbnRyb2xsZXI6TGEuY29udHJvbGxlcixpbmplY3RvcjpMYS5pbmplY3Rvcixpbmhlcml0ZWREYXRhOkxhLmluaGVyaXRlZERhdGF9KSxiPXNhLmNsZWFuRGF0YSxzYS5jbGVhbkRhdGE9ZnVuY3Rpb24oYSl7dmFyIGM7aWYoUmIpUmI9ITE7ZWxzZSBmb3IodmFyIGQ9MCxlO251bGwhPShlPWFbZF0pO2QrKykoYz1zYS5fZGF0YShlLFwiZXZlbnRzXCIpKSYmYy4kZGVzdHJveSYmc2EoZSkudHJpZ2dlckhhbmRsZXIoXCIkZGVzdHJveVwiKTtiKGEpfSk6RD1SLGNhLmVsZW1lbnQ9RCx2Yz0hMCl9ZnVuY3Rpb24gU2IoYixhLGMpe2lmKCFiKXRocm93IEthKFwiYXJlcVwiLFxuYXx8XCI/XCIsY3x8XCJyZXF1aXJlZFwiKTtyZXR1cm4gYn1mdW5jdGlvbiB0YihiLGEsYyl7YyYmSChiKSYmKGI9YltiLmxlbmd0aC0xXSk7U2IoRyhiKSxhLFwibm90IGEgZnVuY3Rpb24sIGdvdCBcIisoYiYmXCJvYmplY3RcIj09PXR5cGVvZiBiP2IuY29uc3RydWN0b3IubmFtZXx8XCJPYmplY3RcIjp0eXBlb2YgYikpO3JldHVybiBifWZ1bmN0aW9uIE1hKGIsYSl7aWYoXCJoYXNPd25Qcm9wZXJ0eVwiPT09Yil0aHJvdyBLYShcImJhZG5hbWVcIixhKTt9ZnVuY3Rpb24gd2MoYixhLGMpe2lmKCFhKXJldHVybiBiO2E9YS5zcGxpdChcIi5cIik7Zm9yKHZhciBkLGU9YixmPWEubGVuZ3RoLGc9MDtnPGY7ZysrKWQ9YVtnXSxiJiYoYj0oZT1iKVtkXSk7cmV0dXJuIWMmJkcoYik/b2MoZSxiKTpifWZ1bmN0aW9uIHViKGIpe3ZhciBhPWJbMF07Yj1iW2IubGVuZ3RoLTFdO3ZhciBjPVthXTtkb3thPWEubmV4dFNpYmxpbmc7aWYoIWEpYnJlYWs7Yy5wdXNoKGEpfXdoaWxlKGEhPT1iKTtyZXR1cm4gRChjKX1mdW5jdGlvbiBoYSgpe3JldHVybiBPYmplY3QuY3JlYXRlKG51bGwpfVxuZnVuY3Rpb24gT2QoYil7ZnVuY3Rpb24gYShhLGIsYyl7cmV0dXJuIGFbYl18fChhW2JdPWMoKSl9dmFyIGM9UyhcIiRpbmplY3RvclwiKSxkPVMoXCJuZ1wiKTtiPWEoYixcImFuZ3VsYXJcIixPYmplY3QpO2IuJCRtaW5FcnI9Yi4kJG1pbkVycnx8UztyZXR1cm4gYShiLFwibW9kdWxlXCIsZnVuY3Rpb24oKXt2YXIgYj17fTtyZXR1cm4gZnVuY3Rpb24oZixnLGgpe2lmKFwiaGFzT3duUHJvcGVydHlcIj09PWYpdGhyb3cgZChcImJhZG5hbWVcIixcIm1vZHVsZVwiKTtnJiZiLmhhc093blByb3BlcnR5KGYpJiYoYltmXT1udWxsKTtyZXR1cm4gYShiLGYsZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGMsZCxlLGYpe2Z8fChmPWIpO3JldHVybiBmdW5jdGlvbigpe2ZbZXx8XCJwdXNoXCJdKFtjLGQsYXJndW1lbnRzXSk7cmV0dXJuIHV9fWlmKCFnKXRocm93IGMoXCJub21vZFwiLGYpO3ZhciBiPVtdLGQ9W10sZT1bXSxxPWEoXCIkaW5qZWN0b3JcIixcImludm9rZVwiLFwicHVzaFwiLGQpLHU9e19pbnZva2VRdWV1ZTpiLF9jb25maWdCbG9ja3M6ZCxcbl9ydW5CbG9ja3M6ZSxyZXF1aXJlczpnLG5hbWU6Zixwcm92aWRlcjphKFwiJHByb3ZpZGVcIixcInByb3ZpZGVyXCIpLGZhY3Rvcnk6YShcIiRwcm92aWRlXCIsXCJmYWN0b3J5XCIpLHNlcnZpY2U6YShcIiRwcm92aWRlXCIsXCJzZXJ2aWNlXCIpLHZhbHVlOmEoXCIkcHJvdmlkZVwiLFwidmFsdWVcIiksY29uc3RhbnQ6YShcIiRwcm92aWRlXCIsXCJjb25zdGFudFwiLFwidW5zaGlmdFwiKSxhbmltYXRpb246YShcIiRhbmltYXRlUHJvdmlkZXJcIixcInJlZ2lzdGVyXCIpLGZpbHRlcjphKFwiJGZpbHRlclByb3ZpZGVyXCIsXCJyZWdpc3RlclwiKSxjb250cm9sbGVyOmEoXCIkY29udHJvbGxlclByb3ZpZGVyXCIsXCJyZWdpc3RlclwiKSxkaXJlY3RpdmU6YShcIiRjb21waWxlUHJvdmlkZXJcIixcImRpcmVjdGl2ZVwiKSxjb25maWc6cSxydW46ZnVuY3Rpb24oYSl7ZS5wdXNoKGEpO3JldHVybiB0aGlzfX07aCYmcShoKTtyZXR1cm4gdX0pfX0pfWZ1bmN0aW9uIFBkKGIpe3goYix7Ym9vdHN0cmFwOnRjLGNvcHk6RWEsZXh0ZW5kOngsZXF1YWxzOmdhLFxuZWxlbWVudDpELGZvckVhY2g6cyxpbmplY3RvcjphYixub29wOnosYmluZDpvYyx0b0pzb246JGEsZnJvbUpzb246cGMsaWRlbnRpdHk6cGEsaXNVbmRlZmluZWQ6Qixpc0RlZmluZWQ6eSxpc1N0cmluZzpGLGlzRnVuY3Rpb246Ryxpc09iamVjdDpJLGlzTnVtYmVyOlYsaXNFbGVtZW50Om5jLGlzQXJyYXk6SCx2ZXJzaW9uOlFkLGlzRGF0ZTpxYSxsb3dlcmNhc2U6USx1cHBlcmNhc2U6dmIsY2FsbGJhY2tzOntjb3VudGVyOjB9LGdldFRlc3RhYmlsaXR5OkxkLCQkbWluRXJyOlMsJCRjc3A6YmIscmVsb2FkV2l0aERlYnVnSW5mbzpLZH0pO2NiPU9kKE0pO3RyeXtjYihcIm5nTG9jYWxlXCIpfWNhdGNoKGEpe2NiKFwibmdMb2NhbGVcIixbXSkucHJvdmlkZXIoXCIkbG9jYWxlXCIsUmQpfWNiKFwibmdcIixbXCJuZ0xvY2FsZVwiXSxbXCIkcHJvdmlkZVwiLGZ1bmN0aW9uKGEpe2EucHJvdmlkZXIoeyQkc2FuaXRpemVVcmk6U2R9KTthLnByb3ZpZGVyKFwiJGNvbXBpbGVcIix4YykuZGlyZWN0aXZlKHthOlRkLFxuaW5wdXQ6eWMsdGV4dGFyZWE6eWMsZm9ybTpVZCxzY3JpcHQ6VmQsc2VsZWN0OldkLHN0eWxlOlhkLG9wdGlvbjpZZCxuZ0JpbmQ6WmQsbmdCaW5kSHRtbDokZCxuZ0JpbmRUZW1wbGF0ZTphZSxuZ0NsYXNzOmJlLG5nQ2xhc3NFdmVuOmNlLG5nQ2xhc3NPZGQ6ZGUsbmdDbG9hazplZSxuZ0NvbnRyb2xsZXI6ZmUsbmdGb3JtOmdlLG5nSGlkZTpoZSxuZ0lmOmllLG5nSW5jbHVkZTpqZSxuZ0luaXQ6a2UsbmdOb25CaW5kYWJsZTpsZSxuZ1BsdXJhbGl6ZTptZSxuZ1JlcGVhdDpuZSxuZ1Nob3c6b2UsbmdTdHlsZTpwZSxuZ1N3aXRjaDpxZSxuZ1N3aXRjaFdoZW46cmUsbmdTd2l0Y2hEZWZhdWx0OnNlLG5nT3B0aW9uczp0ZSxuZ1RyYW5zY2x1ZGU6dWUsbmdNb2RlbDp2ZSxuZ0xpc3Q6d2UsbmdDaGFuZ2U6eGUscGF0dGVybjp6YyxuZ1BhdHRlcm46emMscmVxdWlyZWQ6QWMsbmdSZXF1aXJlZDpBYyxtaW5sZW5ndGg6QmMsbmdNaW5sZW5ndGg6QmMsbWF4bGVuZ3RoOkNjLG5nTWF4bGVuZ3RoOkNjLFxubmdWYWx1ZTp5ZSxuZ01vZGVsT3B0aW9uczp6ZX0pLmRpcmVjdGl2ZSh7bmdJbmNsdWRlOkFlfSkuZGlyZWN0aXZlKHdiKS5kaXJlY3RpdmUoRGMpO2EucHJvdmlkZXIoeyRhbmNob3JTY3JvbGw6QmUsJGFuaW1hdGU6Q2UsJGJyb3dzZXI6RGUsJGNhY2hlRmFjdG9yeTpFZSwkY29udHJvbGxlcjpGZSwkZG9jdW1lbnQ6R2UsJGV4Y2VwdGlvbkhhbmRsZXI6SGUsJGZpbHRlcjpFYywkaW50ZXJwb2xhdGU6SWUsJGludGVydmFsOkplLCRodHRwOktlLCRodHRwQmFja2VuZDpMZSwkbG9jYXRpb246TWUsJGxvZzpOZSwkcGFyc2U6T2UsJHJvb3RTY29wZTpQZSwkcTpRZSwkJHE6UmUsJHNjZTpTZSwkc2NlRGVsZWdhdGU6VGUsJHNuaWZmZXI6VWUsJHRlbXBsYXRlQ2FjaGU6VmUsJHRlbXBsYXRlUmVxdWVzdDpXZSwkJHRlc3RhYmlsaXR5OlhlLCR0aW1lb3V0OlllLCR3aW5kb3c6WmUsJCRyQUY6JGUsJCRhc3luY0NhbGxiYWNrOmFmLCQkanFMaXRlOmJmfSl9XSl9ZnVuY3Rpb24gZGIoYil7cmV0dXJuIGIucmVwbGFjZShjZixcbmZ1bmN0aW9uKGEsYixkLGUpe3JldHVybiBlP2QudG9VcHBlckNhc2UoKTpkfSkucmVwbGFjZShkZixcIk1veiQxXCIpfWZ1bmN0aW9uIEZjKGIpe2I9Yi5ub2RlVHlwZTtyZXR1cm4gYj09PW9hfHwhYnx8OT09PWJ9ZnVuY3Rpb24gR2MoYixhKXt2YXIgYyxkLGU9YS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksZj1bXTtpZihUYi50ZXN0KGIpKXtjPWN8fGUuYXBwZW5kQ2hpbGQoYS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKTtkPShlZi5leGVjKGIpfHxbXCJcIixcIlwiXSlbMV0udG9Mb3dlckNhc2UoKTtkPWlhW2RdfHxpYS5fZGVmYXVsdDtjLmlubmVySFRNTD1kWzFdK2IucmVwbGFjZShmZixcIjwkMT48LyQyPlwiKStkWzJdO2ZvcihkPWRbMF07ZC0tOyljPWMubGFzdENoaWxkO2Y9WWEoZixjLmNoaWxkTm9kZXMpO2M9ZS5maXJzdENoaWxkO2MudGV4dENvbnRlbnQ9XCJcIn1lbHNlIGYucHVzaChhLmNyZWF0ZVRleHROb2RlKGIpKTtlLnRleHRDb250ZW50PVwiXCI7ZS5pbm5lckhUTUw9XCJcIjtzKGYsZnVuY3Rpb24oYSl7ZS5hcHBlbmRDaGlsZChhKX0pO1xucmV0dXJuIGV9ZnVuY3Rpb24gUihiKXtpZihiIGluc3RhbmNlb2YgUilyZXR1cm4gYjt2YXIgYTtGKGIpJiYoYj1VKGIpLGE9ITApO2lmKCEodGhpcyBpbnN0YW5jZW9mIFIpKXtpZihhJiZcIjxcIiE9Yi5jaGFyQXQoMCkpdGhyb3cgVWIoXCJub3NlbFwiKTtyZXR1cm4gbmV3IFIoYil9aWYoYSl7YT1ZO3ZhciBjO2I9KGM9Z2YuZXhlYyhiKSk/W2EuY3JlYXRlRWxlbWVudChjWzFdKV06KGM9R2MoYixhKSk/Yy5jaGlsZE5vZGVzOltdfUhjKHRoaXMsYil9ZnVuY3Rpb24gVmIoYil7cmV0dXJuIGIuY2xvbmVOb2RlKCEwKX1mdW5jdGlvbiB4YihiLGEpe2F8fHliKGIpO2lmKGIucXVlcnlTZWxlY3RvckFsbClmb3IodmFyIGM9Yi5xdWVyeVNlbGVjdG9yQWxsKFwiKlwiKSxkPTAsZT1jLmxlbmd0aDtkPGU7ZCsrKXliKGNbZF0pfWZ1bmN0aW9uIEljKGIsYSxjLGQpe2lmKHkoZCkpdGhyb3cgVWIoXCJvZmZhcmdzXCIpO3ZhciBlPShkPXpiKGIpKSYmZC5ldmVudHMsZj1kJiZkLmhhbmRsZTtpZihmKWlmKGEpcyhhLnNwbGl0KFwiIFwiKSxcbmZ1bmN0aW9uKGEpe2lmKHkoYykpe3ZhciBkPWVbYV07WGEoZHx8W10sYyk7aWYoZCYmMDxkLmxlbmd0aClyZXR1cm59Yi5yZW1vdmVFdmVudExpc3RlbmVyKGEsZiwhMSk7ZGVsZXRlIGVbYV19KTtlbHNlIGZvcihhIGluIGUpXCIkZGVzdHJveVwiIT09YSYmYi5yZW1vdmVFdmVudExpc3RlbmVyKGEsZiwhMSksZGVsZXRlIGVbYV19ZnVuY3Rpb24geWIoYixhKXt2YXIgYz1iLm5nMzM5LGQ9YyYmQWJbY107ZCYmKGE/ZGVsZXRlIGQuZGF0YVthXTooZC5oYW5kbGUmJihkLmV2ZW50cy4kZGVzdHJveSYmZC5oYW5kbGUoe30sXCIkZGVzdHJveVwiKSxJYyhiKSksZGVsZXRlIEFiW2NdLGIubmczMzk9dCkpfWZ1bmN0aW9uIHpiKGIsYSl7dmFyIGM9Yi5uZzMzOSxjPWMmJkFiW2NdO2EmJiFjJiYoYi5uZzMzOT1jPSsraGYsYz1BYltjXT17ZXZlbnRzOnt9LGRhdGE6e30saGFuZGxlOnR9KTtyZXR1cm4gY31mdW5jdGlvbiBXYihiLGEsYyl7aWYoRmMoYikpe3ZhciBkPXkoYyksZT0hZCYmYSYmIUkoYSksXG5mPSFhO2I9KGI9emIoYiwhZSkpJiZiLmRhdGE7aWYoZCliW2FdPWM7ZWxzZXtpZihmKXJldHVybiBiO2lmKGUpcmV0dXJuIGImJmJbYV07eChiLGEpfX19ZnVuY3Rpb24gQmIoYixhKXtyZXR1cm4gYi5nZXRBdHRyaWJ1dGU/LTE8KFwiIFwiKyhiLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfHxcIlwiKStcIiBcIikucmVwbGFjZSgvW1xcblxcdF0vZyxcIiBcIikuaW5kZXhPZihcIiBcIithK1wiIFwiKTohMX1mdW5jdGlvbiBDYihiLGEpe2EmJmIuc2V0QXR0cmlidXRlJiZzKGEuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKGEpe2Iuc2V0QXR0cmlidXRlKFwiY2xhc3NcIixVKChcIiBcIisoYi5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKXx8XCJcIikrXCIgXCIpLnJlcGxhY2UoL1tcXG5cXHRdL2csXCIgXCIpLnJlcGxhY2UoXCIgXCIrVShhKStcIiBcIixcIiBcIikpKX0pfWZ1bmN0aW9uIERiKGIsYSl7aWYoYSYmYi5zZXRBdHRyaWJ1dGUpe3ZhciBjPShcIiBcIisoYi5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKXx8XCJcIikrXCIgXCIpLnJlcGxhY2UoL1tcXG5cXHRdL2csXCIgXCIpO1xucyhhLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihhKXthPVUoYSk7LTE9PT1jLmluZGV4T2YoXCIgXCIrYStcIiBcIikmJihjKz1hK1wiIFwiKX0pO2Iuc2V0QXR0cmlidXRlKFwiY2xhc3NcIixVKGMpKX19ZnVuY3Rpb24gSGMoYixhKXtpZihhKWlmKGEubm9kZVR5cGUpYltiLmxlbmd0aCsrXT1hO2Vsc2V7dmFyIGM9YS5sZW5ndGg7aWYoXCJudW1iZXJcIj09PXR5cGVvZiBjJiZhLndpbmRvdyE9PWEpe2lmKGMpZm9yKHZhciBkPTA7ZDxjO2QrKyliW2IubGVuZ3RoKytdPWFbZF19ZWxzZSBiW2IubGVuZ3RoKytdPWF9fWZ1bmN0aW9uIEpjKGIsYSl7cmV0dXJuIEViKGIsXCIkXCIrKGF8fFwibmdDb250cm9sbGVyXCIpK1wiQ29udHJvbGxlclwiKX1mdW5jdGlvbiBFYihiLGEsYyl7OT09Yi5ub2RlVHlwZSYmKGI9Yi5kb2N1bWVudEVsZW1lbnQpO2ZvcihhPUgoYSk/YTpbYV07Yjspe2Zvcih2YXIgZD0wLGU9YS5sZW5ndGg7ZDxlO2QrKylpZigoYz1ELmRhdGEoYixhW2RdKSkhPT10KXJldHVybiBjO2I9Yi5wYXJlbnROb2RlfHxcbjExPT09Yi5ub2RlVHlwZSYmYi5ob3N0fX1mdW5jdGlvbiBLYyhiKXtmb3IoeGIoYiwhMCk7Yi5maXJzdENoaWxkOyliLnJlbW92ZUNoaWxkKGIuZmlyc3RDaGlsZCl9ZnVuY3Rpb24gTGMoYixhKXthfHx4YihiKTt2YXIgYz1iLnBhcmVudE5vZGU7YyYmYy5yZW1vdmVDaGlsZChiKX1mdW5jdGlvbiBqZihiLGEpe2E9YXx8TTtpZihcImNvbXBsZXRlXCI9PT1hLmRvY3VtZW50LnJlYWR5U3RhdGUpYS5zZXRUaW1lb3V0KGIpO2Vsc2UgRChhKS5vbihcImxvYWRcIixiKX1mdW5jdGlvbiBNYyhiLGEpe3ZhciBjPUZiW2EudG9Mb3dlckNhc2UoKV07cmV0dXJuIGMmJk5jW3VhKGIpXSYmY31mdW5jdGlvbiBrZihiLGEpe3ZhciBjPWIubm9kZU5hbWU7cmV0dXJuKFwiSU5QVVRcIj09PWN8fFwiVEVYVEFSRUFcIj09PWMpJiZPY1thXX1mdW5jdGlvbiBsZihiLGEpe3ZhciBjPWZ1bmN0aW9uKGMsZSl7Yy5pc0RlZmF1bHRQcmV2ZW50ZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gYy5kZWZhdWx0UHJldmVudGVkfTt2YXIgZj1cbmFbZXx8Yy50eXBlXSxnPWY/Zi5sZW5ndGg6MDtpZihnKXtpZihCKGMuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKSl7dmFyIGg9Yy5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb247Yy5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb249ZnVuY3Rpb24oKXtjLmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZD0hMDtjLnN0b3BQcm9wYWdhdGlvbiYmYy5zdG9wUHJvcGFnYXRpb24oKTtoJiZoLmNhbGwoYyl9fWMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ9ZnVuY3Rpb24oKXtyZXR1cm4hMD09PWMuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkfTsxPGcmJihmPXJhKGYpKTtmb3IodmFyIGw9MDtsPGc7bCsrKWMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKXx8ZltsXS5jYWxsKGIsYyl9fTtjLmVsZW09YjtyZXR1cm4gY31mdW5jdGlvbiBiZigpe3RoaXMuJGdldD1mdW5jdGlvbigpe3JldHVybiB4KFIse2hhc0NsYXNzOmZ1bmN0aW9uKGIsYSl7Yi5hdHRyJiYoYj1iWzBdKTtcbnJldHVybiBCYihiLGEpfSxhZGRDbGFzczpmdW5jdGlvbihiLGEpe2IuYXR0ciYmKGI9YlswXSk7cmV0dXJuIERiKGIsYSl9LHJlbW92ZUNsYXNzOmZ1bmN0aW9uKGIsYSl7Yi5hdHRyJiYoYj1iWzBdKTtyZXR1cm4gQ2IoYixhKX19KX19ZnVuY3Rpb24gTmEoYixhKXt2YXIgYz1iJiZiLiQkaGFzaEtleTtpZihjKXJldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBjJiYoYz1iLiQkaGFzaEtleSgpKSxjO2M9dHlwZW9mIGI7cmV0dXJuIGM9XCJmdW5jdGlvblwiPT1jfHxcIm9iamVjdFwiPT1jJiZudWxsIT09Yj9iLiQkaGFzaEtleT1jK1wiOlwiKyhhfHxGZCkoKTpjK1wiOlwiK2J9ZnVuY3Rpb24gZWIoYixhKXtpZihhKXt2YXIgYz0wO3RoaXMubmV4dFVpZD1mdW5jdGlvbigpe3JldHVybisrY319cyhiLHRoaXMucHV0LHRoaXMpfWZ1bmN0aW9uIG1mKGIpe3JldHVybihiPWIudG9TdHJpbmcoKS5yZXBsYWNlKFBjLFwiXCIpLm1hdGNoKFFjKSk/XCJmdW5jdGlvbihcIisoYlsxXXx8XCJcIikucmVwbGFjZSgvW1xcc1xcclxcbl0rLyxcblwiIFwiKStcIilcIjpcImZuXCJ9ZnVuY3Rpb24gYWIoYixhKXtmdW5jdGlvbiBjKGEpe3JldHVybiBmdW5jdGlvbihiLGMpe2lmKEkoYikpcyhiLGxjKGEpKTtlbHNlIHJldHVybiBhKGIsYyl9fWZ1bmN0aW9uIGQoYSxiKXtNYShhLFwic2VydmljZVwiKTtpZihHKGIpfHxIKGIpKWI9cS5pbnN0YW50aWF0ZShiKTtpZighYi4kZ2V0KXRocm93IEdhKFwicGdldFwiLGEpO3JldHVybiBuW2ErXCJQcm92aWRlclwiXT1ifWZ1bmN0aW9uIGUoYSxiKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1yLmludm9rZShiLHRoaXMpO2lmKEIoYykpdGhyb3cgR2EoXCJ1bmRlZlwiLGEpO3JldHVybiBjfX1mdW5jdGlvbiBmKGEsYixjKXtyZXR1cm4gZChhLHskZ2V0OiExIT09Yz9lKGEsYik6Yn0pfWZ1bmN0aW9uIGcoYSl7dmFyIGI9W10sYztzKGEsZnVuY3Rpb24oYSl7ZnVuY3Rpb24gZChhKXt2YXIgYixjO2I9MDtmb3IoYz1hLmxlbmd0aDtiPGM7YisrKXt2YXIgZT1hW2JdLGY9cS5nZXQoZVswXSk7ZltlWzFdXS5hcHBseShmLFxuZVsyXSl9fWlmKCFtLmdldChhKSl7bS5wdXQoYSwhMCk7dHJ5e0YoYSk/KGM9Y2IoYSksYj1iLmNvbmNhdChnKGMucmVxdWlyZXMpKS5jb25jYXQoYy5fcnVuQmxvY2tzKSxkKGMuX2ludm9rZVF1ZXVlKSxkKGMuX2NvbmZpZ0Jsb2NrcykpOkcoYSk/Yi5wdXNoKHEuaW52b2tlKGEpKTpIKGEpP2IucHVzaChxLmludm9rZShhKSk6dGIoYSxcIm1vZHVsZVwiKX1jYXRjaChlKXt0aHJvdyBIKGEpJiYoYT1hW2EubGVuZ3RoLTFdKSxlLm1lc3NhZ2UmJmUuc3RhY2smJi0xPT1lLnN0YWNrLmluZGV4T2YoZS5tZXNzYWdlKSYmKGU9ZS5tZXNzYWdlK1wiXFxuXCIrZS5zdGFjayksR2EoXCJtb2R1bGVyclwiLGEsZS5zdGFja3x8ZS5tZXNzYWdlfHxlKTt9fX0pO3JldHVybiBifWZ1bmN0aW9uIGgoYixjKXtmdW5jdGlvbiBkKGEsZSl7aWYoYi5oYXNPd25Qcm9wZXJ0eShhKSl7aWYoYlthXT09PWwpdGhyb3cgR2EoXCJjZGVwXCIsYStcIiA8LSBcIitrLmpvaW4oXCIgPC0gXCIpKTtyZXR1cm4gYlthXX10cnl7cmV0dXJuIGsudW5zaGlmdChhKSxcbmJbYV09bCxiW2FdPWMoYSxlKX1jYXRjaChmKXt0aHJvdyBiW2FdPT09bCYmZGVsZXRlIGJbYV0sZjt9ZmluYWxseXtrLnNoaWZ0KCl9fWZ1bmN0aW9uIGUoYixjLGYsZyl7XCJzdHJpbmdcIj09PXR5cGVvZiBmJiYoZz1mLGY9bnVsbCk7dmFyIGg9W10saz1hYi4kJGFubm90YXRlKGIsYSxnKSxsLHEsbjtxPTA7Zm9yKGw9ay5sZW5ndGg7cTxsO3ErKyl7bj1rW3FdO2lmKFwic3RyaW5nXCIhPT10eXBlb2Ygbil0aHJvdyBHYShcIml0a25cIixuKTtoLnB1c2goZiYmZi5oYXNPd25Qcm9wZXJ0eShuKT9mW25dOmQobixnKSl9SChiKSYmKGI9YltsXSk7cmV0dXJuIGIuYXBwbHkoYyxoKX1yZXR1cm57aW52b2tlOmUsaW5zdGFudGlhdGU6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPU9iamVjdC5jcmVhdGUoKEgoYSk/YVthLmxlbmd0aC0xXTphKS5wcm90b3R5cGV8fG51bGwpO2E9ZShhLGQsYixjKTtyZXR1cm4gSShhKXx8RyhhKT9hOmR9LGdldDpkLGFubm90YXRlOmFiLiQkYW5ub3RhdGUsaGFzOmZ1bmN0aW9uKGEpe3JldHVybiBuLmhhc093blByb3BlcnR5KGErXG5cIlByb3ZpZGVyXCIpfHxiLmhhc093blByb3BlcnR5KGEpfX19YT0hMD09PWE7dmFyIGw9e30saz1bXSxtPW5ldyBlYihbXSwhMCksbj17JHByb3ZpZGU6e3Byb3ZpZGVyOmMoZCksZmFjdG9yeTpjKGYpLHNlcnZpY2U6YyhmdW5jdGlvbihhLGIpe3JldHVybiBmKGEsW1wiJGluamVjdG9yXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGEuaW5zdGFudGlhdGUoYil9XSl9KSx2YWx1ZTpjKGZ1bmN0aW9uKGEsYil7cmV0dXJuIGYoYSxlYShiKSwhMSl9KSxjb25zdGFudDpjKGZ1bmN0aW9uKGEsYil7TWEoYSxcImNvbnN0YW50XCIpO25bYV09Yjt1W2FdPWJ9KSxkZWNvcmF0b3I6ZnVuY3Rpb24oYSxiKXt2YXIgYz1xLmdldChhK1wiUHJvdmlkZXJcIiksZD1jLiRnZXQ7Yy4kZ2V0PWZ1bmN0aW9uKCl7dmFyIGE9ci5pbnZva2UoZCxjKTtyZXR1cm4gci5pbnZva2UoYixudWxsLHskZGVsZWdhdGU6YX0pfX19fSxxPW4uJGluamVjdG9yPWgobixmdW5jdGlvbihhLGIpe2NhLmlzU3RyaW5nKGIpJiZrLnB1c2goYik7XG50aHJvdyBHYShcInVucHJcIixrLmpvaW4oXCIgPC0gXCIpKTt9KSx1PXt9LHI9dS4kaW5qZWN0b3I9aCh1LGZ1bmN0aW9uKGEsYil7dmFyIGM9cS5nZXQoYStcIlByb3ZpZGVyXCIsYik7cmV0dXJuIHIuaW52b2tlKGMuJGdldCxjLHQsYSl9KTtzKGcoYiksZnVuY3Rpb24oYSl7ci5pbnZva2UoYXx8eil9KTtyZXR1cm4gcn1mdW5jdGlvbiBCZSgpe3ZhciBiPSEwO3RoaXMuZGlzYWJsZUF1dG9TY3JvbGxpbmc9ZnVuY3Rpb24oKXtiPSExfTt0aGlzLiRnZXQ9W1wiJHdpbmRvd1wiLFwiJGxvY2F0aW9uXCIsXCIkcm9vdFNjb3BlXCIsZnVuY3Rpb24oYSxjLGQpe2Z1bmN0aW9uIGUoYSl7dmFyIGI9bnVsbDtBcnJheS5wcm90b3R5cGUuc29tZS5jYWxsKGEsZnVuY3Rpb24oYSl7aWYoXCJhXCI9PT11YShhKSlyZXR1cm4gYj1hLCEwfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZihiKXtpZihiKXtiLnNjcm9sbEludG9WaWV3KCk7dmFyIGM7Yz1nLnlPZmZzZXQ7RyhjKT9jPWMoKTpuYyhjKT8oYz1jWzBdLGM9XCJmaXhlZFwiIT09XG5hLmdldENvbXB1dGVkU3R5bGUoYykucG9zaXRpb24/MDpjLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSk6VihjKXx8KGM9MCk7YyYmKGI9Yi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AsYS5zY3JvbGxCeSgwLGItYykpfWVsc2UgYS5zY3JvbGxUbygwLDApfWZ1bmN0aW9uIGcoKXt2YXIgYT1jLmhhc2goKSxiO2E/KGI9aC5nZXRFbGVtZW50QnlJZChhKSk/ZihiKTooYj1lKGguZ2V0RWxlbWVudHNCeU5hbWUoYSkpKT9mKGIpOlwidG9wXCI9PT1hJiZmKG51bGwpOmYobnVsbCl9dmFyIGg9YS5kb2N1bWVudDtiJiZkLiR3YXRjaChmdW5jdGlvbigpe3JldHVybiBjLmhhc2goKX0sZnVuY3Rpb24oYSxiKXthPT09YiYmXCJcIj09PWF8fGpmKGZ1bmN0aW9uKCl7ZC4kZXZhbEFzeW5jKGcpfSl9KTtyZXR1cm4gZ31dfWZ1bmN0aW9uIGFmKCl7dGhpcy4kZ2V0PVtcIiQkckFGXCIsXCIkdGltZW91dFwiLGZ1bmN0aW9uKGIsYSl7cmV0dXJuIGIuc3VwcG9ydGVkP2Z1bmN0aW9uKGEpe3JldHVybiBiKGEpfTpcbmZ1bmN0aW9uKGIpe3JldHVybiBhKGIsMCwhMSl9fV19ZnVuY3Rpb24gbmYoYixhLGMsZCl7ZnVuY3Rpb24gZShhKXt0cnl7YS5hcHBseShudWxsLFphLmNhbGwoYXJndW1lbnRzLDEpKX1maW5hbGx5e2lmKHYtLSwwPT09dilmb3IoO3cubGVuZ3RoOyl0cnl7dy5wb3AoKSgpfWNhdGNoKGIpe2MuZXJyb3IoYil9fX1mdW5jdGlvbiBmKGEsYil7KGZ1bmN0aW9uIE4oKXtzKEwsZnVuY3Rpb24oYSl7YSgpfSk7Qz1iKE4sYSl9KSgpfWZ1bmN0aW9uIGcoKXtoKCk7bCgpfWZ1bmN0aW9uIGgoKXtBPWIuaGlzdG9yeS5zdGF0ZTtBPUIoQSk/bnVsbDpBO2dhKEEsSikmJihBPUopO0o9QX1mdW5jdGlvbiBsKCl7aWYoRSE9PW0udXJsKCl8fE8hPT1BKUU9bS51cmwoKSxPPUEscyhXLGZ1bmN0aW9uKGEpe2EobS51cmwoKSxBKX0pfWZ1bmN0aW9uIGsoYSl7dHJ5e3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoYSl9Y2F0Y2goYil7cmV0dXJuIGF9fXZhciBtPXRoaXMsbj1hWzBdLHE9Yi5sb2NhdGlvbixcbnU9Yi5oaXN0b3J5LHI9Yi5zZXRUaW1lb3V0LFA9Yi5jbGVhclRpbWVvdXQscD17fTttLmlzTW9jaz0hMTt2YXIgdj0wLHc9W107bS4kJGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0PWU7bS4kJGluY091dHN0YW5kaW5nUmVxdWVzdENvdW50PWZ1bmN0aW9uKCl7disrfTttLm5vdGlmeVdoZW5Ob091dHN0YW5kaW5nUmVxdWVzdHM9ZnVuY3Rpb24oYSl7cyhMLGZ1bmN0aW9uKGEpe2EoKX0pOzA9PT12P2EoKTp3LnB1c2goYSl9O3ZhciBMPVtdLEM7bS5hZGRQb2xsRm49ZnVuY3Rpb24oYSl7QihDKSYmZigxMDAscik7TC5wdXNoKGEpO3JldHVybiBhfTt2YXIgQSxPLEU9cS5ocmVmLFQ9YS5maW5kKFwiYmFzZVwiKSxYPW51bGw7aCgpO089QTttLnVybD1mdW5jdGlvbihhLGMsZSl7QihlKSYmKGU9bnVsbCk7cSE9PWIubG9jYXRpb24mJihxPWIubG9jYXRpb24pO3UhPT1iLmhpc3RvcnkmJih1PWIuaGlzdG9yeSk7aWYoYSl7dmFyIGY9Tz09PWU7aWYoRT09PWEmJighZC5oaXN0b3J5fHxmKSlyZXR1cm4gbTtcbnZhciBnPUUmJkhhKEUpPT09SGEoYSk7RT1hO089ZTshZC5oaXN0b3J5fHxnJiZmPyhnfHwoWD1hKSxjP3EucmVwbGFjZShhKTpnPyhjPXEsZT1hLmluZGV4T2YoXCIjXCIpLGE9LTE9PT1lP1wiXCI6YS5zdWJzdHIoZSsxKSxjLmhhc2g9YSk6cS5ocmVmPWEpOih1W2M/XCJyZXBsYWNlU3RhdGVcIjpcInB1c2hTdGF0ZVwiXShlLFwiXCIsYSksaCgpLE89QSk7cmV0dXJuIG19cmV0dXJuIFh8fHEuaHJlZi5yZXBsYWNlKC8lMjcvZyxcIidcIil9O20uc3RhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gQX07dmFyIFc9W10sd2E9ITEsSj1udWxsO20ub25VcmxDaGFuZ2U9ZnVuY3Rpb24oYSl7aWYoIXdhKXtpZihkLmhpc3RvcnkpRChiKS5vbihcInBvcHN0YXRlXCIsZyk7RChiKS5vbihcImhhc2hjaGFuZ2VcIixnKTt3YT0hMH1XLnB1c2goYSk7cmV0dXJuIGF9O20uJCRjaGVja1VybENoYW5nZT1sO20uYmFzZUhyZWY9ZnVuY3Rpb24oKXt2YXIgYT1ULmF0dHIoXCJocmVmXCIpO3JldHVybiBhP2EucmVwbGFjZSgvXihodHRwcz9cXDopP1xcL1xcL1teXFwvXSovLFxuXCJcIik6XCJcIn07dmFyIGZhPXt9LHk9XCJcIixkYT1tLmJhc2VIcmVmKCk7bS5jb29raWVzPWZ1bmN0aW9uKGEsYil7dmFyIGQsZSxmLGc7aWYoYSliPT09dD9uLmNvb2tpZT1lbmNvZGVVUklDb21wb25lbnQoYSkrXCI9O3BhdGg9XCIrZGErXCI7ZXhwaXJlcz1UaHUsIDAxIEphbiAxOTcwIDAwOjAwOjAwIEdNVFwiOkYoYikmJihkPShuLmNvb2tpZT1lbmNvZGVVUklDb21wb25lbnQoYSkrXCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KGIpK1wiO3BhdGg9XCIrZGEpLmxlbmd0aCsxLDQwOTY8ZCYmYy53YXJuKFwiQ29va2llICdcIithK1wiJyBwb3NzaWJseSBub3Qgc2V0IG9yIG92ZXJmbG93ZWQgYmVjYXVzZSBpdCB3YXMgdG9vIGxhcmdlIChcIitkK1wiID4gNDA5NiBieXRlcykhXCIpKTtlbHNle2lmKG4uY29va2llIT09eSlmb3IoeT1uLmNvb2tpZSxkPXkuc3BsaXQoXCI7IFwiKSxmYT17fSxmPTA7ZjxkLmxlbmd0aDtmKyspZT1kW2ZdLGc9ZS5pbmRleE9mKFwiPVwiKSwwPGcmJihhPWsoZS5zdWJzdHJpbmcoMCxnKSksXG5mYVthXT09PXQmJihmYVthXT1rKGUuc3Vic3RyaW5nKGcrMSkpKSk7cmV0dXJuIGZhfX07bS5kZWZlcj1mdW5jdGlvbihhLGIpe3ZhciBjO3YrKztjPXIoZnVuY3Rpb24oKXtkZWxldGUgcFtjXTtlKGEpfSxifHwwKTtwW2NdPSEwO3JldHVybiBjfTttLmRlZmVyLmNhbmNlbD1mdW5jdGlvbihhKXtyZXR1cm4gcFthXT8oZGVsZXRlIHBbYV0sUChhKSxlKHopLCEwKTohMX19ZnVuY3Rpb24gRGUoKXt0aGlzLiRnZXQ9W1wiJHdpbmRvd1wiLFwiJGxvZ1wiLFwiJHNuaWZmZXJcIixcIiRkb2N1bWVudFwiLGZ1bmN0aW9uKGIsYSxjLGQpe3JldHVybiBuZXcgbmYoYixkLGEsYyl9XX1mdW5jdGlvbiBFZSgpe3RoaXMuJGdldD1mdW5jdGlvbigpe2Z1bmN0aW9uIGIoYixkKXtmdW5jdGlvbiBlKGEpe2EhPW4mJihxP3E9PWEmJihxPWEubik6cT1hLGYoYS5uLGEucCksZihhLG4pLG49YSxuLm49bnVsbCl9ZnVuY3Rpb24gZihhLGIpe2EhPWImJihhJiYoYS5wPWIpLGImJihiLm49YSkpfWlmKGIgaW4gYSl0aHJvdyBTKFwiJGNhY2hlRmFjdG9yeVwiKShcImlpZFwiLFxuYik7dmFyIGc9MCxoPXgoe30sZCx7aWQ6Yn0pLGw9e30saz1kJiZkLmNhcGFjaXR5fHxOdW1iZXIuTUFYX1ZBTFVFLG09e30sbj1udWxsLHE9bnVsbDtyZXR1cm4gYVtiXT17cHV0OmZ1bmN0aW9uKGEsYil7aWYoazxOdW1iZXIuTUFYX1ZBTFVFKXt2YXIgYz1tW2FdfHwobVthXT17a2V5OmF9KTtlKGMpfWlmKCFCKGIpKXJldHVybiBhIGluIGx8fGcrKyxsW2FdPWIsZz5rJiZ0aGlzLnJlbW92ZShxLmtleSksYn0sZ2V0OmZ1bmN0aW9uKGEpe2lmKGs8TnVtYmVyLk1BWF9WQUxVRSl7dmFyIGI9bVthXTtpZighYilyZXR1cm47ZShiKX1yZXR1cm4gbFthXX0scmVtb3ZlOmZ1bmN0aW9uKGEpe2lmKGs8TnVtYmVyLk1BWF9WQUxVRSl7dmFyIGI9bVthXTtpZighYilyZXR1cm47Yj09biYmKG49Yi5wKTtiPT1xJiYocT1iLm4pO2YoYi5uLGIucCk7ZGVsZXRlIG1bYV19ZGVsZXRlIGxbYV07Zy0tfSxyZW1vdmVBbGw6ZnVuY3Rpb24oKXtsPXt9O2c9MDttPXt9O249cT1udWxsfSxkZXN0cm95OmZ1bmN0aW9uKCl7bT1cbmg9bD1udWxsO2RlbGV0ZSBhW2JdfSxpbmZvOmZ1bmN0aW9uKCl7cmV0dXJuIHgoe30saCx7c2l6ZTpnfSl9fX12YXIgYT17fTtiLmluZm89ZnVuY3Rpb24oKXt2YXIgYj17fTtzKGEsZnVuY3Rpb24oYSxlKXtiW2VdPWEuaW5mbygpfSk7cmV0dXJuIGJ9O2IuZ2V0PWZ1bmN0aW9uKGIpe3JldHVybiBhW2JdfTtyZXR1cm4gYn19ZnVuY3Rpb24gVmUoKXt0aGlzLiRnZXQ9W1wiJGNhY2hlRmFjdG9yeVwiLGZ1bmN0aW9uKGIpe3JldHVybiBiKFwidGVtcGxhdGVzXCIpfV19ZnVuY3Rpb24geGMoYixhKXtmdW5jdGlvbiBjKGEsYil7dmFyIGM9L15cXHMqKFtAJl18PShcXCo/KSkoXFw/PylcXHMqKFxcdyopXFxzKiQvLGQ9e307cyhhLGZ1bmN0aW9uKGEsZSl7dmFyIGY9YS5tYXRjaChjKTtpZighZil0aHJvdyBqYShcImlzY3BcIixiLGUsYSk7ZFtlXT17bW9kZTpmWzFdWzBdLGNvbGxlY3Rpb246XCIqXCI9PT1mWzJdLG9wdGlvbmFsOlwiP1wiPT09ZlszXSxhdHRyTmFtZTpmWzRdfHxlfX0pO3JldHVybiBkfXZhciBkPVxue30sZT0vXlxccypkaXJlY3RpdmVcXDpcXHMqKFtcXHdcXC1dKylcXHMrKC4qKSQvLGY9LygoW1xcd1xcLV0rKSg/OlxcOihbXjtdKykpPzs/KS8sZz1HZChcIm5nU3JjLG5nU3Jjc2V0LHNyYyxzcmNzZXRcIiksaD0vXig/OihcXF5cXF4/KT8oXFw/KT8oXFxeXFxePyk/KT8vLGw9L14ob25bYS16XSt8Zm9ybWFjdGlvbikkLzt0aGlzLmRpcmVjdGl2ZT1mdW5jdGlvbiBuKGEsZSl7TWEoYSxcImRpcmVjdGl2ZVwiKTtGKGEpPyhTYihlLFwiZGlyZWN0aXZlRmFjdG9yeVwiKSxkLmhhc093blByb3BlcnR5KGEpfHwoZFthXT1bXSxiLmZhY3RvcnkoYStcIkRpcmVjdGl2ZVwiLFtcIiRpbmplY3RvclwiLFwiJGV4Y2VwdGlvbkhhbmRsZXJcIixmdW5jdGlvbihiLGUpe3ZhciBmPVtdO3MoZFthXSxmdW5jdGlvbihkLGcpe3RyeXt2YXIgaD1iLmludm9rZShkKTtHKGgpP2g9e2NvbXBpbGU6ZWEoaCl9OiFoLmNvbXBpbGUmJmgubGluayYmKGguY29tcGlsZT1lYShoLmxpbmspKTtoLnByaW9yaXR5PWgucHJpb3JpdHl8fDA7aC5pbmRleD1cbmc7aC5uYW1lPWgubmFtZXx8YTtoLnJlcXVpcmU9aC5yZXF1aXJlfHxoLmNvbnRyb2xsZXImJmgubmFtZTtoLnJlc3RyaWN0PWgucmVzdHJpY3R8fFwiRUFcIjtJKGguc2NvcGUpJiYoaC4kJGlzb2xhdGVCaW5kaW5ncz1jKGguc2NvcGUsaC5uYW1lKSk7Zi5wdXNoKGgpfWNhdGNoKGwpe2UobCl9fSk7cmV0dXJuIGZ9XSkpLGRbYV0ucHVzaChlKSk6cyhhLGxjKG4pKTtyZXR1cm4gdGhpc307dGhpcy5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdD1mdW5jdGlvbihiKXtyZXR1cm4geShiKT8oYS5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdChiKSx0aGlzKTphLmFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0KCl9O3RoaXMuaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0PWZ1bmN0aW9uKGIpe3JldHVybiB5KGIpPyhhLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdChiKSx0aGlzKTphLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCgpfTt2YXIgaz0hMDt0aGlzLmRlYnVnSW5mb0VuYWJsZWQ9XG5mdW5jdGlvbihhKXtyZXR1cm4geShhKT8oaz1hLHRoaXMpOmt9O3RoaXMuJGdldD1bXCIkaW5qZWN0b3JcIixcIiRpbnRlcnBvbGF0ZVwiLFwiJGV4Y2VwdGlvbkhhbmRsZXJcIixcIiR0ZW1wbGF0ZVJlcXVlc3RcIixcIiRwYXJzZVwiLFwiJGNvbnRyb2xsZXJcIixcIiRyb290U2NvcGVcIixcIiRkb2N1bWVudFwiLFwiJHNjZVwiLFwiJGFuaW1hdGVcIixcIiQkc2FuaXRpemVVcmlcIixmdW5jdGlvbihhLGIsYyxyLFAscCx2LHcsTCxDLEEpe2Z1bmN0aW9uIE8oYSxiKXt0cnl7YS5hZGRDbGFzcyhiKX1jYXRjaChjKXt9fWZ1bmN0aW9uIEUoYSxiLGMsZCxlKXthIGluc3RhbmNlb2YgRHx8KGE9RChhKSk7cyhhLGZ1bmN0aW9uKGIsYyl7Yi5ub2RlVHlwZT09cWImJmIubm9kZVZhbHVlLm1hdGNoKC9cXFMrLykmJihhW2NdPUQoYikud3JhcChcIjxzcGFuPjwvc3Bhbj5cIikucGFyZW50KClbMF0pfSk7dmFyIGY9VChhLGIsYSxjLGQsZSk7RS4kJGFkZFNjb3BlQ2xhc3MoYSk7dmFyIGc9bnVsbDtyZXR1cm4gZnVuY3Rpb24oYixjLFxuZCl7U2IoYixcInNjb3BlXCIpO2Q9ZHx8e307dmFyIGU9ZC5wYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbixoPWQudHJhbnNjbHVkZUNvbnRyb2xsZXJzO2Q9ZC5mdXR1cmVQYXJlbnRFbGVtZW50O2UmJmUuJCRib3VuZFRyYW5zY2x1ZGUmJihlPWUuJCRib3VuZFRyYW5zY2x1ZGUpO2d8fChnPShkPWQmJmRbMF0pP1wiZm9yZWlnbm9iamVjdFwiIT09dWEoZCkmJmQudG9TdHJpbmcoKS5tYXRjaCgvU1ZHLyk/XCJzdmdcIjpcImh0bWxcIjpcImh0bWxcIik7ZD1cImh0bWxcIiE9PWc/RChYYihnLEQoXCI8ZGl2PlwiKS5hcHBlbmQoYSkuaHRtbCgpKSk6Yz9MYS5jbG9uZS5jYWxsKGEpOmE7aWYoaClmb3IodmFyIGwgaW4gaClkLmRhdGEoXCIkXCIrbCtcIkNvbnRyb2xsZXJcIixoW2xdLmluc3RhbmNlKTtFLiQkYWRkU2NvcGVJbmZvKGQsYik7YyYmYyhkLGIpO2YmJmYoYixkLGQsZSk7cmV0dXJuIGR9fWZ1bmN0aW9uIFQoYSxiLGMsZCxlLGYpe2Z1bmN0aW9uIGcoYSxjLGQsZSl7dmFyIGYsbCxrLHEsbixwLHc7aWYocilmb3Iodz1cbkFycmF5KGMubGVuZ3RoKSxxPTA7cTxoLmxlbmd0aDtxKz0zKWY9aFtxXSx3W2ZdPWNbZl07ZWxzZSB3PWM7cT0wO2ZvcihuPWgubGVuZ3RoO3E8bjspbD13W2hbcSsrXV0sYz1oW3ErK10sZj1oW3ErK10sYz8oYy5zY29wZT8oaz1hLiRuZXcoKSxFLiQkYWRkU2NvcGVJbmZvKEQobCksaykpOms9YSxwPWMudHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQ/WChhLGMudHJhbnNjbHVkZSxlLGMuZWxlbWVudFRyYW5zY2x1ZGVPblRoaXNFbGVtZW50KTohYy50ZW1wbGF0ZU9uVGhpc0VsZW1lbnQmJmU/ZTohZSYmYj9YKGEsYik6bnVsbCxjKGYsayxsLGQscCkpOmYmJmYoYSxsLmNoaWxkTm9kZXMsdCxlKX1mb3IodmFyIGg9W10sbCxrLHEsbixyLHA9MDtwPGEubGVuZ3RoO3ArKyl7bD1uZXcgWWI7az1XKGFbcF0sW10sbCwwPT09cD9kOnQsZSk7KGY9ay5sZW5ndGg/ZmEoayxhW3BdLGwsYixjLG51bGwsW10sW10sZik6bnVsbCkmJmYuc2NvcGUmJkUuJCRhZGRTY29wZUNsYXNzKGwuJCRlbGVtZW50KTtcbmw9ZiYmZi50ZXJtaW5hbHx8IShxPWFbcF0uY2hpbGROb2Rlcyl8fCFxLmxlbmd0aD9udWxsOlQocSxmPyhmLnRyYW5zY2x1ZGVPblRoaXNFbGVtZW50fHwhZi50ZW1wbGF0ZU9uVGhpc0VsZW1lbnQpJiZmLnRyYW5zY2x1ZGU6Yik7aWYoZnx8bCloLnB1c2gocCxmLGwpLG49ITAscj1yfHxmO2Y9bnVsbH1yZXR1cm4gbj9nOm51bGx9ZnVuY3Rpb24gWChhLGIsYyxkKXtyZXR1cm4gZnVuY3Rpb24oZCxlLGYsZyxoKXtkfHwoZD1hLiRuZXcoITEsaCksZC4kJHRyYW5zY2x1ZGVkPSEwKTtyZXR1cm4gYihkLGUse3BhcmVudEJvdW5kVHJhbnNjbHVkZUZuOmMsdHJhbnNjbHVkZUNvbnRyb2xsZXJzOmYsZnV0dXJlUGFyZW50RWxlbWVudDpnfSl9fWZ1bmN0aW9uIFcoYSxiLGMsZCxnKXt2YXIgaD1jLiRhdHRyLGw7c3dpdGNoKGEubm9kZVR5cGUpe2Nhc2Ugb2E6ZGEoYix5YSh1YShhKSksXCJFXCIsZCxnKTtmb3IodmFyIGsscSxuLHI9YS5hdHRyaWJ1dGVzLHA9MCx3PXImJnIubGVuZ3RoO3A8XG53O3ArKyl7dmFyIFA9ITEsTD0hMTtrPXJbcF07bD1rLm5hbWU7cT1VKGsudmFsdWUpO2s9eWEobCk7aWYobj1nYi50ZXN0KGspKWw9bC5yZXBsYWNlKFNjLFwiXCIpLnN1YnN0cig4KS5yZXBsYWNlKC9fKC4pL2csZnVuY3Rpb24oYSxiKXtyZXR1cm4gYi50b1VwcGVyQ2FzZSgpfSk7dmFyIHU9ay5yZXBsYWNlKC8oU3RhcnR8RW5kKSQvLFwiXCIpO0IodSkmJms9PT11K1wiU3RhcnRcIiYmKFA9bCxMPWwuc3Vic3RyKDAsbC5sZW5ndGgtNSkrXCJlbmRcIixsPWwuc3Vic3RyKDAsbC5sZW5ndGgtNikpO2s9eWEobC50b0xvd2VyQ2FzZSgpKTtoW2tdPWw7aWYobnx8IWMuaGFzT3duUHJvcGVydHkoaykpY1trXT1xLE1jKGEsaykmJihjW2tdPSEwKTtQYShhLGIscSxrLG4pO2RhKGIsayxcIkFcIixkLGcsUCxMKX1hPWEuY2xhc3NOYW1lO0koYSkmJihhPWEuYW5pbVZhbCk7aWYoRihhKSYmXCJcIiE9PWEpZm9yKDtsPWYuZXhlYyhhKTspaz15YShsWzJdKSxkYShiLGssXCJDXCIsZCxnKSYmKGNba109VShsWzNdKSksXG5hPWEuc3Vic3RyKGwuaW5kZXgrbFswXS5sZW5ndGgpO2JyZWFrO2Nhc2UgcWI6TShiLGEubm9kZVZhbHVlKTticmVhaztjYXNlIDg6dHJ5e2lmKGw9ZS5leGVjKGEubm9kZVZhbHVlKSlrPXlhKGxbMV0pLGRhKGIsayxcIk1cIixkLGcpJiYoY1trXT1VKGxbMl0pKX1jYXRjaCh2KXt9fWIuc29ydChOKTtyZXR1cm4gYn1mdW5jdGlvbiB3YShhLGIsYyl7dmFyIGQ9W10sZT0wO2lmKGImJmEuaGFzQXR0cmlidXRlJiZhLmhhc0F0dHJpYnV0ZShiKSl7ZG97aWYoIWEpdGhyb3cgamEoXCJ1dGVyZGlyXCIsYixjKTthLm5vZGVUeXBlPT1vYSYmKGEuaGFzQXR0cmlidXRlKGIpJiZlKyssYS5oYXNBdHRyaWJ1dGUoYykmJmUtLSk7ZC5wdXNoKGEpO2E9YS5uZXh0U2libGluZ313aGlsZSgwPGUpfWVsc2UgZC5wdXNoKGEpO3JldHVybiBEKGQpfWZ1bmN0aW9uIEooYSxiLGMpe3JldHVybiBmdW5jdGlvbihkLGUsZixnLGgpe2U9d2EoZVswXSxiLGMpO3JldHVybiBhKGQsZSxmLGcsaCl9fWZ1bmN0aW9uIGZhKGEsXG5kLGUsZixnLGwsayxuLHIpe2Z1bmN0aW9uIHcoYSxiLGMsZCl7aWYoYSl7YyYmKGE9SihhLGMsZCkpO2EucmVxdWlyZT1LLnJlcXVpcmU7YS5kaXJlY3RpdmVOYW1lPXg7aWYoVD09PUt8fEsuJCRpc29sYXRlU2NvcGUpYT1aKGEse2lzb2xhdGVTY29wZTohMH0pO2sucHVzaChhKX1pZihiKXtjJiYoYj1KKGIsYyxkKSk7Yi5yZXF1aXJlPUsucmVxdWlyZTtiLmRpcmVjdGl2ZU5hbWU9eDtpZihUPT09S3x8Sy4kJGlzb2xhdGVTY29wZSliPVooYix7aXNvbGF0ZVNjb3BlOiEwfSk7bi5wdXNoKGIpfX1mdW5jdGlvbiBMKGEsYixjLGQpe3ZhciBlLGY9XCJkYXRhXCIsZz0hMSxsPWMsaztpZihGKGIpKXtrPWIubWF0Y2goaCk7Yj1iLnN1YnN0cmluZyhrWzBdLmxlbmd0aCk7a1szXSYmKGtbMV0/a1szXT1udWxsOmtbMV09a1szXSk7XCJeXCI9PT1rWzFdP2Y9XCJpbmhlcml0ZWREYXRhXCI6XCJeXlwiPT09a1sxXSYmKGY9XCJpbmhlcml0ZWREYXRhXCIsbD1jLnBhcmVudCgpKTtcIj9cIj09PWtbMl0mJihnPSEwKTtcbmU9bnVsbDtkJiZcImRhdGFcIj09PWYmJihlPWRbYl0pJiYoZT1lLmluc3RhbmNlKTtlPWV8fGxbZl0oXCIkXCIrYitcIkNvbnRyb2xsZXJcIik7aWYoIWUmJiFnKXRocm93IGphKFwiY3RyZXFcIixiLGEpO3JldHVybiBlfHxudWxsfUgoYikmJihlPVtdLHMoYixmdW5jdGlvbihiKXtlLnB1c2goTChhLGIsYyxkKSl9KSk7cmV0dXJuIGV9ZnVuY3Rpb24gdihhLGMsZixnLGgpe2Z1bmN0aW9uIGwoYSxiLGMpe3ZhciBkO1ZhKGEpfHwoYz1iLGI9YSxhPXQpO3omJihkPU8pO2N8fChjPXo/Vy5wYXJlbnQoKTpXKTtyZXR1cm4gaChhLGIsZCxjLHdhKX12YXIgcix3LHUsQSxPLGZiLFcsSjtkPT09Zj8oSj1lLFc9ZS4kJGVsZW1lbnQpOihXPUQoZiksSj1uZXcgWWIoVyxlKSk7VCYmKEE9Yy4kbmV3KCEwKSk7aCYmKGZiPWwsZmIuJCRib3VuZFRyYW5zY2x1ZGU9aCk7QyYmKFg9e30sTz17fSxzKEMsZnVuY3Rpb24oYSl7dmFyIGI9eyRzY29wZTphPT09VHx8YS4kJGlzb2xhdGVTY29wZT9BOmMsJGVsZW1lbnQ6VyxcbiRhdHRyczpKLCR0cmFuc2NsdWRlOmZifTt1PWEuY29udHJvbGxlcjtcIkBcIj09dSYmKHU9SlthLm5hbWVdKTtiPXAodSxiLCEwLGEuY29udHJvbGxlckFzKTtPW2EubmFtZV09Yjt6fHxXLmRhdGEoXCIkXCIrYS5uYW1lK1wiQ29udHJvbGxlclwiLGIuaW5zdGFuY2UpO1hbYS5uYW1lXT1ifSkpO2lmKFQpe0UuJCRhZGRTY29wZUluZm8oVyxBLCEwLCEoa2EmJihrYT09PVR8fGthPT09VC4kJG9yaWdpbmFsRGlyZWN0aXZlKSkpO0UuJCRhZGRTY29wZUNsYXNzKFcsITApO2c9WCYmWFtULm5hbWVdO3ZhciB4YT1BO2cmJmcuaWRlbnRpZmllciYmITA9PT1ULmJpbmRUb0NvbnRyb2xsZXImJih4YT1nLmluc3RhbmNlKTtzKEEuJCRpc29sYXRlQmluZGluZ3M9VC4kJGlzb2xhdGVCaW5kaW5ncyxmdW5jdGlvbihhLGQpe3ZhciBlPWEuYXR0ck5hbWUsZj1hLm9wdGlvbmFsLGcsaCxsLGs7c3dpdGNoKGEubW9kZSl7Y2FzZSBcIkBcIjpKLiRvYnNlcnZlKGUsZnVuY3Rpb24oYSl7eGFbZF09YX0pO0ouJCRvYnNlcnZlcnNbZV0uJCRzY29wZT1cbmM7SltlXSYmKHhhW2RdPWIoSltlXSkoYykpO2JyZWFrO2Nhc2UgXCI9XCI6aWYoZiYmIUpbZV0pYnJlYWs7aD1QKEpbZV0pO2s9aC5saXRlcmFsP2dhOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGE9PT1ifHxhIT09YSYmYiE9PWJ9O2w9aC5hc3NpZ258fGZ1bmN0aW9uKCl7Zz14YVtkXT1oKGMpO3Rocm93IGphKFwibm9uYXNzaWduXCIsSltlXSxULm5hbWUpO307Zz14YVtkXT1oKGMpO2Y9ZnVuY3Rpb24oYSl7ayhhLHhhW2RdKXx8KGsoYSxnKT9sKGMsYT14YVtkXSk6eGFbZF09YSk7cmV0dXJuIGc9YX07Zi4kc3RhdGVmdWw9ITA7Zj1hLmNvbGxlY3Rpb24/Yy4kd2F0Y2hDb2xsZWN0aW9uKEpbZV0sZik6Yy4kd2F0Y2goUChKW2VdLGYpLG51bGwsaC5saXRlcmFsKTtBLiRvbihcIiRkZXN0cm95XCIsZik7YnJlYWs7Y2FzZSBcIiZcIjpoPVAoSltlXSkseGFbZF09ZnVuY3Rpb24oYSl7cmV0dXJuIGgoYyxhKX19fSl9WCYmKHMoWCxmdW5jdGlvbihhKXthKCl9KSxYPW51bGwpO2c9MDtmb3Iocj1rLmxlbmd0aDtnPFxucjtnKyspdz1rW2ddLCQodyx3Lmlzb2xhdGVTY29wZT9BOmMsVyxKLHcucmVxdWlyZSYmTCh3LmRpcmVjdGl2ZU5hbWUsdy5yZXF1aXJlLFcsTyksZmIpO3ZhciB3YT1jO1QmJihULnRlbXBsYXRlfHxudWxsPT09VC50ZW1wbGF0ZVVybCkmJih3YT1BKTthJiZhKHdhLGYuY2hpbGROb2Rlcyx0LGgpO2ZvcihnPW4ubGVuZ3RoLTE7MDw9ZztnLS0pdz1uW2ddLCQodyx3Lmlzb2xhdGVTY29wZT9BOmMsVyxKLHcucmVxdWlyZSYmTCh3LmRpcmVjdGl2ZU5hbWUsdy5yZXF1aXJlLFcsTyksZmIpfXI9cnx8e307Zm9yKHZhciBBPS1OdW1iZXIuTUFYX1ZBTFVFLE8sQz1yLmNvbnRyb2xsZXJEaXJlY3RpdmVzLFgsVD1yLm5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSxrYT1yLnRlbXBsYXRlRGlyZWN0aXZlLGZhPXIubm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZSxkYT0hMSxCPSExLHo9ci5oYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSxhYT1lLiQkZWxlbWVudD1EKGQpLEsseCxOLEFhPWYsXG5RLE09MCxSPWEubGVuZ3RoO008UjtNKyspe0s9YVtNXTt2YXIgUGE9Sy4kJHN0YXJ0LGdiPUsuJCRlbmQ7UGEmJihhYT13YShkLFBhLGdiKSk7Tj10O2lmKEE+Sy5wcmlvcml0eSlicmVhaztpZihOPUsuc2NvcGUpSy50ZW1wbGF0ZVVybHx8KEkoTik/KE9hKFwibmV3L2lzb2xhdGVkIHNjb3BlXCIsVHx8TyxLLGFhKSxUPUspOk9hKFwibmV3L2lzb2xhdGVkIHNjb3BlXCIsVCxLLGFhKSksTz1PfHxLO3g9Sy5uYW1lOyFLLnRlbXBsYXRlVXJsJiZLLmNvbnRyb2xsZXImJihOPUsuY29udHJvbGxlcixDPUN8fHt9LE9hKFwiJ1wiK3grXCInIGNvbnRyb2xsZXJcIixDW3hdLEssYWEpLENbeF09Syk7aWYoTj1LLnRyYW5zY2x1ZGUpZGE9ITAsSy4kJHRsYnx8KE9hKFwidHJhbnNjbHVzaW9uXCIsZmEsSyxhYSksZmE9SyksXCJlbGVtZW50XCI9PU4/KHo9ITAsQT1LLnByaW9yaXR5LE49YWEsYWE9ZS4kJGVsZW1lbnQ9RChZLmNyZWF0ZUNvbW1lbnQoXCIgXCIreCtcIjogXCIrZVt4XStcIiBcIikpLGQ9YWFbMF0sVihnLFphLmNhbGwoTixcbjApLGQpLEFhPUUoTixmLEEsbCYmbC5uYW1lLHtub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlOmZhfSkpOihOPUQoVmIoZCkpLmNvbnRlbnRzKCksYWEuZW1wdHkoKSxBYT1FKE4sZikpO2lmKEsudGVtcGxhdGUpaWYoQj0hMCxPYShcInRlbXBsYXRlXCIsa2EsSyxhYSksa2E9SyxOPUcoSy50ZW1wbGF0ZSk/Sy50ZW1wbGF0ZShhYSxlKTpLLnRlbXBsYXRlLE49VGMoTiksSy5yZXBsYWNlKXtsPUs7Tj1UYi50ZXN0KE4pP1VjKFhiKEsudGVtcGxhdGVOYW1lc3BhY2UsVShOKSkpOltdO2Q9TlswXTtpZigxIT1OLmxlbmd0aHx8ZC5ub2RlVHlwZSE9PW9hKXRocm93IGphKFwidHBscnRcIix4LFwiXCIpO1YoZyxhYSxkKTtSPXskYXR0cjp7fX07Tj1XKGQsW10sUik7dmFyIGJhPWEuc3BsaWNlKE0rMSxhLmxlbmd0aC0oTSsxKSk7VCYmeShOKTthPWEuY29uY2F0KE4pLmNvbmNhdChiYSk7UmMoZSxSKTtSPWEubGVuZ3RofWVsc2UgYWEuaHRtbChOKTtpZihLLnRlbXBsYXRlVXJsKUI9ITAsT2EoXCJ0ZW1wbGF0ZVwiLFxua2EsSyxhYSksa2E9SyxLLnJlcGxhY2UmJihsPUspLHY9UyhhLnNwbGljZShNLGEubGVuZ3RoLU0pLGFhLGUsZyxkYSYmQWEsayxuLHtjb250cm9sbGVyRGlyZWN0aXZlczpDLG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZTpULHRlbXBsYXRlRGlyZWN0aXZlOmthLG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmU6ZmF9KSxSPWEubGVuZ3RoO2Vsc2UgaWYoSy5jb21waWxlKXRyeXtRPUsuY29tcGlsZShhYSxlLEFhKSxHKFEpP3cobnVsbCxRLFBhLGdiKTpRJiZ3KFEucHJlLFEucG9zdCxQYSxnYil9Y2F0Y2gob2Ype2Mob2YsdmEoYWEpKX1LLnRlcm1pbmFsJiYodi50ZXJtaW5hbD0hMCxBPU1hdGgubWF4KEEsSy5wcmlvcml0eSkpfXYuc2NvcGU9TyYmITA9PT1PLnNjb3BlO3YudHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQ9ZGE7di5lbGVtZW50VHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQ9ejt2LnRlbXBsYXRlT25UaGlzRWxlbWVudD1CO3YudHJhbnNjbHVkZT1BYTtyLmhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlPVxuejtyZXR1cm4gdn1mdW5jdGlvbiB5KGEpe2Zvcih2YXIgYj0wLGM9YS5sZW5ndGg7YjxjO2IrKylhW2JdPVBiKGFbYl0seyQkaXNvbGF0ZVNjb3BlOiEwfSl9ZnVuY3Rpb24gZGEoYixlLGYsZyxoLGwsayl7aWYoZT09PWgpcmV0dXJuIG51bGw7aD1udWxsO2lmKGQuaGFzT3duUHJvcGVydHkoZSkpe3ZhciBxO2U9YS5nZXQoZStcIkRpcmVjdGl2ZVwiKTtmb3IodmFyIHI9MCxwPWUubGVuZ3RoO3I8cDtyKyspdHJ5e3E9ZVtyXSwoZz09PXR8fGc+cS5wcmlvcml0eSkmJi0xIT1xLnJlc3RyaWN0LmluZGV4T2YoZikmJihsJiYocT1QYihxLHskJHN0YXJ0OmwsJCRlbmQ6a30pKSxiLnB1c2gocSksaD1xKX1jYXRjaCh3KXtjKHcpfX1yZXR1cm4gaH1mdW5jdGlvbiBCKGIpe2lmKGQuaGFzT3duUHJvcGVydHkoYikpZm9yKHZhciBjPWEuZ2V0KGIrXCJEaXJlY3RpdmVcIiksZT0wLGY9Yy5sZW5ndGg7ZTxmO2UrKylpZihiPWNbZV0sYi5tdWx0aUVsZW1lbnQpcmV0dXJuITA7cmV0dXJuITF9ZnVuY3Rpb24gUmMoYSxcbmIpe3ZhciBjPWIuJGF0dHIsZD1hLiRhdHRyLGU9YS4kJGVsZW1lbnQ7cyhhLGZ1bmN0aW9uKGQsZSl7XCIkXCIhPWUuY2hhckF0KDApJiYoYltlXSYmYltlXSE9PWQmJihkKz0oXCJzdHlsZVwiPT09ZT9cIjtcIjpcIiBcIikrYltlXSksYS4kc2V0KGUsZCwhMCxjW2VdKSl9KTtzKGIsZnVuY3Rpb24oYixmKXtcImNsYXNzXCI9PWY/KE8oZSxiKSxhW1wiY2xhc3NcIl09KGFbXCJjbGFzc1wiXT9hW1wiY2xhc3NcIl0rXCIgXCI6XCJcIikrYik6XCJzdHlsZVwiPT1mPyhlLmF0dHIoXCJzdHlsZVwiLGUuYXR0cihcInN0eWxlXCIpK1wiO1wiK2IpLGEuc3R5bGU9KGEuc3R5bGU/YS5zdHlsZStcIjtcIjpcIlwiKStiKTpcIiRcIj09Zi5jaGFyQXQoMCl8fGEuaGFzT3duUHJvcGVydHkoZil8fChhW2ZdPWIsZFtmXT1jW2ZdKX0pfWZ1bmN0aW9uIFMoYSxiLGMsZCxlLGYsZyxoKXt2YXIgbD1bXSxrLHEsbj1iWzBdLHA9YS5zaGlmdCgpLHc9UGIocCx7dGVtcGxhdGVVcmw6bnVsbCx0cmFuc2NsdWRlOm51bGwscmVwbGFjZTpudWxsLCQkb3JpZ2luYWxEaXJlY3RpdmU6cH0pLFxuUD1HKHAudGVtcGxhdGVVcmwpP3AudGVtcGxhdGVVcmwoYixjKTpwLnRlbXBsYXRlVXJsLHU9cC50ZW1wbGF0ZU5hbWVzcGFjZTtiLmVtcHR5KCk7cihMLmdldFRydXN0ZWRSZXNvdXJjZVVybChQKSkudGhlbihmdW5jdGlvbihyKXt2YXIgTCx2O3I9VGMocik7aWYocC5yZXBsYWNlKXtyPVRiLnRlc3Qocik/VWMoWGIodSxVKHIpKSk6W107TD1yWzBdO2lmKDEhPXIubGVuZ3RofHxMLm5vZGVUeXBlIT09b2EpdGhyb3cgamEoXCJ0cGxydFwiLHAubmFtZSxQKTtyPXskYXR0cjp7fX07VihkLGIsTCk7dmFyIEE9VyhMLFtdLHIpO0kocC5zY29wZSkmJnkoQSk7YT1BLmNvbmNhdChhKTtSYyhjLHIpfWVsc2UgTD1uLGIuaHRtbChyKTthLnVuc2hpZnQodyk7az1mYShhLEwsYyxlLGIscCxmLGcsaCk7cyhkLGZ1bmN0aW9uKGEsYyl7YT09TCYmKGRbY109YlswXSl9KTtmb3IocT1UKGJbMF0uY2hpbGROb2RlcyxlKTtsLmxlbmd0aDspe3I9bC5zaGlmdCgpO3Y9bC5zaGlmdCgpO3ZhciBDPWwuc2hpZnQoKSxcbkU9bC5zaGlmdCgpLEE9YlswXTtpZighci4kJGRlc3Ryb3llZCl7aWYodiE9PW4pe3ZhciBKPXYuY2xhc3NOYW1lO2guaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUmJnAucmVwbGFjZXx8KEE9VmIoTCkpO1YoQyxEKHYpLEEpO08oRChBKSxKKX12PWsudHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQ/WChyLGsudHJhbnNjbHVkZSxFKTpFO2socSxyLEEsZCx2KX19bD1udWxsfSk7cmV0dXJuIGZ1bmN0aW9uKGEsYixjLGQsZSl7YT1lO2IuJCRkZXN0cm95ZWR8fChsP2wucHVzaChiLGMsZCxhKTooay50cmFuc2NsdWRlT25UaGlzRWxlbWVudCYmKGE9WChiLGsudHJhbnNjbHVkZSxlKSksayhxLGIsYyxkLGEpKSl9fWZ1bmN0aW9uIE4oYSxiKXt2YXIgYz1iLnByaW9yaXR5LWEucHJpb3JpdHk7cmV0dXJuIDAhPT1jP2M6YS5uYW1lIT09Yi5uYW1lP2EubmFtZTxiLm5hbWU/LTE6MTphLmluZGV4LWIuaW5kZXh9ZnVuY3Rpb24gT2EoYSxiLGMsZCl7aWYoYil0aHJvdyBqYShcIm11bHRpZGlyXCIsXG5iLm5hbWUsYy5uYW1lLGEsdmEoZCkpO31mdW5jdGlvbiBNKGEsYyl7dmFyIGQ9YihjLCEwKTtkJiZhLnB1c2goe3ByaW9yaXR5OjAsY29tcGlsZTpmdW5jdGlvbihhKXthPWEucGFyZW50KCk7dmFyIGI9ISFhLmxlbmd0aDtiJiZFLiQkYWRkQmluZGluZ0NsYXNzKGEpO3JldHVybiBmdW5jdGlvbihhLGMpe3ZhciBlPWMucGFyZW50KCk7Ynx8RS4kJGFkZEJpbmRpbmdDbGFzcyhlKTtFLiQkYWRkQmluZGluZ0luZm8oZSxkLmV4cHJlc3Npb25zKTthLiR3YXRjaChkLGZ1bmN0aW9uKGEpe2NbMF0ubm9kZVZhbHVlPWF9KX19fSl9ZnVuY3Rpb24gWGIoYSxiKXthPVEoYXx8XCJodG1sXCIpO3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6Y2FzZSBcIm1hdGhcIjp2YXIgYz1ZLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7Yy5pbm5lckhUTUw9XCI8XCIrYStcIj5cIitiK1wiPC9cIithK1wiPlwiO3JldHVybiBjLmNoaWxkTm9kZXNbMF0uY2hpbGROb2RlcztkZWZhdWx0OnJldHVybiBifX1mdW5jdGlvbiBSKGEsYil7aWYoXCJzcmNkb2NcIj09XG5iKXJldHVybiBMLkhUTUw7dmFyIGM9dWEoYSk7aWYoXCJ4bGlua0hyZWZcIj09Ynx8XCJmb3JtXCI9PWMmJlwiYWN0aW9uXCI9PWJ8fFwiaW1nXCIhPWMmJihcInNyY1wiPT1ifHxcIm5nU3JjXCI9PWIpKXJldHVybiBMLlJFU09VUkNFX1VSTH1mdW5jdGlvbiBQYShhLGMsZCxlLGYpe3ZhciBoPVIoYSxlKTtmPWdbZV18fGY7dmFyIGs9YihkLCEwLGgsZik7aWYoayl7aWYoXCJtdWx0aXBsZVwiPT09ZSYmXCJzZWxlY3RcIj09PXVhKGEpKXRocm93IGphKFwic2VsbXVsdGlcIix2YShhKSk7Yy5wdXNoKHtwcmlvcml0eToxMDAsY29tcGlsZTpmdW5jdGlvbigpe3JldHVybntwcmU6ZnVuY3Rpb24oYSxjLGcpe2M9Zy4kJG9ic2VydmVyc3x8KGcuJCRvYnNlcnZlcnM9e30pO2lmKGwudGVzdChlKSl0aHJvdyBqYShcIm5vZG9tZXZlbnRzXCIpO3ZhciBuPWdbZV07biE9PWQmJihrPW4mJmIobiwhMCxoLGYpLGQ9bik7ayYmKGdbZV09ayhhKSwoY1tlXXx8KGNbZV09W10pKS4kJGludGVyPSEwLChnLiQkb2JzZXJ2ZXJzJiZnLiQkb2JzZXJ2ZXJzW2VdLiQkc2NvcGV8fFxuYSkuJHdhdGNoKGssZnVuY3Rpb24oYSxiKXtcImNsYXNzXCI9PT1lJiZhIT1iP2cuJHVwZGF0ZUNsYXNzKGEsYik6Zy4kc2V0KGUsYSl9KSl9fX19KX19ZnVuY3Rpb24gVihhLGIsYyl7dmFyIGQ9YlswXSxlPWIubGVuZ3RoLGY9ZC5wYXJlbnROb2RlLGcsaDtpZihhKWZvcihnPTAsaD1hLmxlbmd0aDtnPGg7ZysrKWlmKGFbZ109PWQpe2FbZysrXT1jO2g9ZytlLTE7Zm9yKHZhciBsPWEubGVuZ3RoO2c8bDtnKyssaCsrKWg8bD9hW2ddPWFbaF06ZGVsZXRlIGFbZ107YS5sZW5ndGgtPWUtMTthLmNvbnRleHQ9PT1kJiYoYS5jb250ZXh0PWMpO2JyZWFrfWYmJmYucmVwbGFjZUNoaWxkKGMsZCk7YT1ZLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTthLmFwcGVuZENoaWxkKGQpO0QoYykuZGF0YShEKGQpLmRhdGEoKSk7c2E/KFJiPSEwLHNhLmNsZWFuRGF0YShbZF0pKTpkZWxldGUgRC5jYWNoZVtkW0QuZXhwYW5kb11dO2Q9MTtmb3IoZT1iLmxlbmd0aDtkPGU7ZCsrKWY9YltkXSxEKGYpLnJlbW92ZSgpLFxuYS5hcHBlbmRDaGlsZChmKSxkZWxldGUgYltkXTtiWzBdPWM7Yi5sZW5ndGg9MX1mdW5jdGlvbiBaKGEsYil7cmV0dXJuIHgoZnVuY3Rpb24oKXtyZXR1cm4gYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LGEsYil9ZnVuY3Rpb24gJChhLGIsZCxlLGYsZyl7dHJ5e2EoYixkLGUsZixnKX1jYXRjaChoKXtjKGgsdmEoZCkpfX12YXIgWWI9ZnVuY3Rpb24oYSxiKXtpZihiKXt2YXIgYz1PYmplY3Qua2V5cyhiKSxkLGUsZjtkPTA7Zm9yKGU9Yy5sZW5ndGg7ZDxlO2QrKylmPWNbZF0sdGhpc1tmXT1iW2ZdfWVsc2UgdGhpcy4kYXR0cj17fTt0aGlzLiQkZWxlbWVudD1hfTtZYi5wcm90b3R5cGU9eyRub3JtYWxpemU6eWEsJGFkZENsYXNzOmZ1bmN0aW9uKGEpe2EmJjA8YS5sZW5ndGgmJkMuYWRkQ2xhc3ModGhpcy4kJGVsZW1lbnQsYSl9LCRyZW1vdmVDbGFzczpmdW5jdGlvbihhKXthJiYwPGEubGVuZ3RoJiZDLnJlbW92ZUNsYXNzKHRoaXMuJCRlbGVtZW50LGEpfSwkdXBkYXRlQ2xhc3M6ZnVuY3Rpb24oYSxcbmIpe3ZhciBjPVZjKGEsYik7YyYmYy5sZW5ndGgmJkMuYWRkQ2xhc3ModGhpcy4kJGVsZW1lbnQsYyk7KGM9VmMoYixhKSkmJmMubGVuZ3RoJiZDLnJlbW92ZUNsYXNzKHRoaXMuJCRlbGVtZW50LGMpfSwkc2V0OmZ1bmN0aW9uKGEsYixkLGUpe3ZhciBmPXRoaXMuJCRlbGVtZW50WzBdLGc9TWMoZixhKSxoPWtmKGYsYSksZj1hO2c/KHRoaXMuJCRlbGVtZW50LnByb3AoYSxiKSxlPWcpOmgmJih0aGlzW2hdPWIsZj1oKTt0aGlzW2FdPWI7ZT90aGlzLiRhdHRyW2FdPWU6KGU9dGhpcy4kYXR0clthXSl8fCh0aGlzLiRhdHRyW2FdPWU9dWMoYSxcIi1cIikpO2c9dWEodGhpcy4kJGVsZW1lbnQpO2lmKFwiYVwiPT09ZyYmXCJocmVmXCI9PT1hfHxcImltZ1wiPT09ZyYmXCJzcmNcIj09PWEpdGhpc1thXT1iPUEoYixcInNyY1wiPT09YSk7ZWxzZSBpZihcImltZ1wiPT09ZyYmXCJzcmNzZXRcIj09PWEpe2Zvcih2YXIgZz1cIlwiLGg9VShiKSxsPS8oXFxzK1xcZCt4XFxzKix8XFxzK1xcZCt3XFxzKix8XFxzKyx8LFxccyspLyxsPS9cXHMvLnRlc3QoaCk/XG5sOi8oLCkvLGg9aC5zcGxpdChsKSxsPU1hdGguZmxvb3IoaC5sZW5ndGgvMiksaz0wO2s8bDtrKyspdmFyIHE9MiprLGc9ZytBKFUoaFtxXSksITApLGc9ZysoXCIgXCIrVShoW3ErMV0pKTtoPVUoaFsyKmtdKS5zcGxpdCgvXFxzLyk7Zys9QShVKGhbMF0pLCEwKTsyPT09aC5sZW5ndGgmJihnKz1cIiBcIitVKGhbMV0pKTt0aGlzW2FdPWI9Z30hMSE9PWQmJihudWxsPT09Ynx8Yj09PXQ/dGhpcy4kJGVsZW1lbnQucmVtb3ZlQXR0cihlKTp0aGlzLiQkZWxlbWVudC5hdHRyKGUsYikpOyhhPXRoaXMuJCRvYnNlcnZlcnMpJiZzKGFbZl0sZnVuY3Rpb24oYSl7dHJ5e2EoYil9Y2F0Y2goZCl7YyhkKX19KX0sJG9ic2VydmU6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLGQ9Yy4kJG9ic2VydmVyc3x8KGMuJCRvYnNlcnZlcnM9aGEoKSksZT1kW2FdfHwoZFthXT1bXSk7ZS5wdXNoKGIpO3YuJGV2YWxBc3luYyhmdW5jdGlvbigpeyFlLiQkaW50ZXImJmMuaGFzT3duUHJvcGVydHkoYSkmJmIoY1thXSl9KTtcbnJldHVybiBmdW5jdGlvbigpe1hhKGUsYil9fX07dmFyIEFhPWIuc3RhcnRTeW1ib2woKSxrYT1iLmVuZFN5bWJvbCgpLFRjPVwie3tcIj09QWF8fFwifX1cIj09a2E/cGE6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVwbGFjZSgvXFx7XFx7L2csQWEpLnJlcGxhY2UoL319L2csa2EpfSxnYj0vXm5nQXR0cltBLVpdLztFLiQkYWRkQmluZGluZ0luZm89az9mdW5jdGlvbihhLGIpe3ZhciBjPWEuZGF0YShcIiRiaW5kaW5nXCIpfHxbXTtIKGIpP2M9Yy5jb25jYXQoYik6Yy5wdXNoKGIpO2EuZGF0YShcIiRiaW5kaW5nXCIsYyl9Ono7RS4kJGFkZEJpbmRpbmdDbGFzcz1rP2Z1bmN0aW9uKGEpe08oYSxcIm5nLWJpbmRpbmdcIil9Ono7RS4kJGFkZFNjb3BlSW5mbz1rP2Z1bmN0aW9uKGEsYixjLGQpe2EuZGF0YShjP2Q/XCIkaXNvbGF0ZVNjb3BlTm9UZW1wbGF0ZVwiOlwiJGlzb2xhdGVTY29wZVwiOlwiJHNjb3BlXCIsYil9Ono7RS4kJGFkZFNjb3BlQ2xhc3M9az9mdW5jdGlvbihhLGIpe08oYSxiP1wibmctaXNvbGF0ZS1zY29wZVwiOlxuXCJuZy1zY29wZVwiKX06ejtyZXR1cm4gRX1dfWZ1bmN0aW9uIHlhKGIpe3JldHVybiBkYihiLnJlcGxhY2UoU2MsXCJcIikpfWZ1bmN0aW9uIFZjKGIsYSl7dmFyIGM9XCJcIixkPWIuc3BsaXQoL1xccysvKSxlPWEuc3BsaXQoL1xccysvKSxmPTA7YTpmb3IoO2Y8ZC5sZW5ndGg7ZisrKXtmb3IodmFyIGc9ZFtmXSxoPTA7aDxlLmxlbmd0aDtoKyspaWYoZz09ZVtoXSljb250aW51ZSBhO2MrPSgwPGMubGVuZ3RoP1wiIFwiOlwiXCIpK2d9cmV0dXJuIGN9ZnVuY3Rpb24gVWMoYil7Yj1EKGIpO3ZhciBhPWIubGVuZ3RoO2lmKDE+PWEpcmV0dXJuIGI7Zm9yKDthLS07KTg9PT1iW2FdLm5vZGVUeXBlJiZwZi5jYWxsKGIsYSwxKTtyZXR1cm4gYn1mdW5jdGlvbiBGZSgpe3ZhciBiPXt9LGE9ITEsYz0vXihcXFMrKShcXHMrYXNcXHMrKFxcdyspKT8kLzt0aGlzLnJlZ2lzdGVyPWZ1bmN0aW9uKGEsYyl7TWEoYSxcImNvbnRyb2xsZXJcIik7SShhKT94KGIsYSk6YlthXT1jfTt0aGlzLmFsbG93R2xvYmFscz1mdW5jdGlvbigpe2E9XG4hMH07dGhpcy4kZ2V0PVtcIiRpbmplY3RvclwiLFwiJHdpbmRvd1wiLGZ1bmN0aW9uKGQsZSl7ZnVuY3Rpb24gZihhLGIsYyxkKXtpZighYXx8IUkoYS4kc2NvcGUpKXRocm93IFMoXCIkY29udHJvbGxlclwiKShcIm5vc2NwXCIsZCxiKTthLiRzY29wZVtiXT1jfXJldHVybiBmdW5jdGlvbihnLGgsbCxrKXt2YXIgbSxuLHE7bD0hMD09PWw7ayYmRihrKSYmKHE9ayk7aWYoRihnKSl7az1nLm1hdGNoKGMpO2lmKCFrKXRocm93IHFmKFwiY3RybGZtdFwiLGcpO249a1sxXTtxPXF8fGtbM107Zz1iLmhhc093blByb3BlcnR5KG4pP2Jbbl06d2MoaC4kc2NvcGUsbiwhMCl8fChhP3djKGUsbiwhMCk6dCk7dGIoZyxuLCEwKX1pZihsKXJldHVybiBsPShIKGcpP2dbZy5sZW5ndGgtMV06ZykucHJvdG90eXBlLG09T2JqZWN0LmNyZWF0ZShsfHxudWxsKSxxJiZmKGgscSxtLG58fGcubmFtZSkseChmdW5jdGlvbigpe2QuaW52b2tlKGcsbSxoLG4pO3JldHVybiBtfSx7aW5zdGFuY2U6bSxpZGVudGlmaWVyOnF9KTtcbm09ZC5pbnN0YW50aWF0ZShnLGgsbik7cSYmZihoLHEsbSxufHxnLm5hbWUpO3JldHVybiBtfX1dfWZ1bmN0aW9uIEdlKCl7dGhpcy4kZ2V0PVtcIiR3aW5kb3dcIixmdW5jdGlvbihiKXtyZXR1cm4gRChiLmRvY3VtZW50KX1dfWZ1bmN0aW9uIEhlKCl7dGhpcy4kZ2V0PVtcIiRsb2dcIixmdW5jdGlvbihiKXtyZXR1cm4gZnVuY3Rpb24oYSxjKXtiLmVycm9yLmFwcGx5KGIsYXJndW1lbnRzKX19XX1mdW5jdGlvbiBaYihiLGEpe2lmKEYoYikpe3ZhciBjPWIucmVwbGFjZShyZixcIlwiKS50cmltKCk7aWYoYyl7dmFyIGQ9YShcIkNvbnRlbnQtVHlwZVwiKTsoZD1kJiYwPT09ZC5pbmRleE9mKFdjKSl8fChkPShkPWMubWF0Y2goc2YpKSYmdGZbZFswXV0udGVzdChjKSk7ZCYmKGI9cGMoYykpfX1yZXR1cm4gYn1mdW5jdGlvbiBYYyhiKXt2YXIgYT1oYSgpLGMsZCxlO2lmKCFiKXJldHVybiBhO3MoYi5zcGxpdChcIlxcblwiKSxmdW5jdGlvbihiKXtlPWIuaW5kZXhPZihcIjpcIik7Yz1RKFUoYi5zdWJzdHIoMCxcbmUpKSk7ZD1VKGIuc3Vic3RyKGUrMSkpO2MmJihhW2NdPWFbY10/YVtjXStcIiwgXCIrZDpkKX0pO3JldHVybiBhfWZ1bmN0aW9uIFljKGIpe3ZhciBhPUkoYik/Yjp0O3JldHVybiBmdW5jdGlvbihjKXthfHwoYT1YYyhiKSk7cmV0dXJuIGM/KGM9YVtRKGMpXSx2b2lkIDA9PT1jJiYoYz1udWxsKSxjKTphfX1mdW5jdGlvbiBaYyhiLGEsYyxkKXtpZihHKGQpKXJldHVybiBkKGIsYSxjKTtzKGQsZnVuY3Rpb24oZCl7Yj1kKGIsYSxjKX0pO3JldHVybiBifWZ1bmN0aW9uIEtlKCl7dmFyIGI9dGhpcy5kZWZhdWx0cz17dHJhbnNmb3JtUmVzcG9uc2U6W1piXSx0cmFuc2Zvcm1SZXF1ZXN0OltmdW5jdGlvbihhKXtyZXR1cm4gSShhKSYmXCJbb2JqZWN0IEZpbGVdXCIhPT1EYS5jYWxsKGEpJiZcIltvYmplY3QgQmxvYl1cIiE9PURhLmNhbGwoYSkmJlwiW29iamVjdCBGb3JtRGF0YV1cIiE9PURhLmNhbGwoYSk/JGEoYSk6YX1dLGhlYWRlcnM6e2NvbW1vbjp7QWNjZXB0OlwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qXCJ9LFxucG9zdDpyYSgkYikscHV0OnJhKCRiKSxwYXRjaDpyYSgkYil9LHhzcmZDb29raWVOYW1lOlwiWFNSRi1UT0tFTlwiLHhzcmZIZWFkZXJOYW1lOlwiWC1YU1JGLVRPS0VOXCJ9LGE9ITE7dGhpcy51c2VBcHBseUFzeW5jPWZ1bmN0aW9uKGIpe3JldHVybiB5KGIpPyhhPSEhYix0aGlzKTphfTt2YXIgYz10aGlzLmludGVyY2VwdG9ycz1bXTt0aGlzLiRnZXQ9W1wiJGh0dHBCYWNrZW5kXCIsXCIkYnJvd3NlclwiLFwiJGNhY2hlRmFjdG9yeVwiLFwiJHJvb3RTY29wZVwiLFwiJHFcIixcIiRpbmplY3RvclwiLGZ1bmN0aW9uKGQsZSxmLGcsaCxsKXtmdW5jdGlvbiBrKGEpe2Z1bmN0aW9uIGMoYSl7dmFyIGI9eCh7fSxhKTtiLmRhdGE9YS5kYXRhP1pjKGEuZGF0YSxhLmhlYWRlcnMsYS5zdGF0dXMsZS50cmFuc2Zvcm1SZXNwb25zZSk6YS5kYXRhO2E9YS5zdGF0dXM7cmV0dXJuIDIwMDw9YSYmMzAwPmE/YjpoLnJlamVjdChiKX1mdW5jdGlvbiBkKGEpe3ZhciBiLGM9e307cyhhLGZ1bmN0aW9uKGEsZCl7RyhhKT8oYj1cbmEoKSxudWxsIT1iJiYoY1tkXT1iKSk6Y1tkXT1hfSk7cmV0dXJuIGN9aWYoIWNhLmlzT2JqZWN0KGEpKXRocm93IFMoXCIkaHR0cFwiKShcImJhZHJlcVwiLGEpO3ZhciBlPXgoe21ldGhvZDpcImdldFwiLHRyYW5zZm9ybVJlcXVlc3Q6Yi50cmFuc2Zvcm1SZXF1ZXN0LHRyYW5zZm9ybVJlc3BvbnNlOmIudHJhbnNmb3JtUmVzcG9uc2V9LGEpO2UuaGVhZGVycz1mdW5jdGlvbihhKXt2YXIgYz1iLmhlYWRlcnMsZT14KHt9LGEuaGVhZGVycyksZixnLGM9eCh7fSxjLmNvbW1vbixjW1EoYS5tZXRob2QpXSk7YTpmb3IoZiBpbiBjKXthPVEoZik7Zm9yKGcgaW4gZSlpZihRKGcpPT09YSljb250aW51ZSBhO2VbZl09Y1tmXX1yZXR1cm4gZChlKX0oYSk7ZS5tZXRob2Q9dmIoZS5tZXRob2QpO3ZhciBmPVtmdW5jdGlvbihhKXt2YXIgZD1hLmhlYWRlcnMsZT1aYyhhLmRhdGEsWWMoZCksdCxhLnRyYW5zZm9ybVJlcXVlc3QpO0IoZSkmJnMoZCxmdW5jdGlvbihhLGIpe1wiY29udGVudC10eXBlXCI9PT1RKGIpJiZcbmRlbGV0ZSBkW2JdfSk7QihhLndpdGhDcmVkZW50aWFscykmJiFCKGIud2l0aENyZWRlbnRpYWxzKSYmKGEud2l0aENyZWRlbnRpYWxzPWIud2l0aENyZWRlbnRpYWxzKTtyZXR1cm4gbShhLGUpLnRoZW4oYyxjKX0sdF0sZz1oLndoZW4oZSk7Zm9yKHModSxmdW5jdGlvbihhKXsoYS5yZXF1ZXN0fHxhLnJlcXVlc3RFcnJvcikmJmYudW5zaGlmdChhLnJlcXVlc3QsYS5yZXF1ZXN0RXJyb3IpOyhhLnJlc3BvbnNlfHxhLnJlc3BvbnNlRXJyb3IpJiZmLnB1c2goYS5yZXNwb25zZSxhLnJlc3BvbnNlRXJyb3IpfSk7Zi5sZW5ndGg7KXthPWYuc2hpZnQoKTt2YXIgbD1mLnNoaWZ0KCksZz1nLnRoZW4oYSxsKX1nLnN1Y2Nlc3M9ZnVuY3Rpb24oYSl7Zy50aGVuKGZ1bmN0aW9uKGIpe2EoYi5kYXRhLGIuc3RhdHVzLGIuaGVhZGVycyxlKX0pO3JldHVybiBnfTtnLmVycm9yPWZ1bmN0aW9uKGEpe2cudGhlbihudWxsLGZ1bmN0aW9uKGIpe2EoYi5kYXRhLGIuc3RhdHVzLGIuaGVhZGVycyxlKX0pO1xucmV0dXJuIGd9O3JldHVybiBnfWZ1bmN0aW9uIG0oYyxmKXtmdW5jdGlvbiBsKGIsYyxkLGUpe2Z1bmN0aW9uIGYoKXttKGMsYixkLGUpfU8mJigyMDA8PWImJjMwMD5iP08ucHV0KFgsW2IsYyxYYyhkKSxlXSk6Ty5yZW1vdmUoWCkpO2E/Zy4kYXBwbHlBc3luYyhmKTooZigpLGcuJCRwaGFzZXx8Zy4kYXBwbHkoKSl9ZnVuY3Rpb24gbShhLGIsZCxlKXtiPU1hdGgubWF4KGIsMCk7KDIwMDw9YiYmMzAwPmI/Qy5yZXNvbHZlOkMucmVqZWN0KSh7ZGF0YTphLHN0YXR1czpiLGhlYWRlcnM6WWMoZCksY29uZmlnOmMsc3RhdHVzVGV4dDplfSl9ZnVuY3Rpb24gdyhhKXttKGEuZGF0YSxhLnN0YXR1cyxyYShhLmhlYWRlcnMoKSksYS5zdGF0dXNUZXh0KX1mdW5jdGlvbiB1KCl7dmFyIGE9ay5wZW5kaW5nUmVxdWVzdHMuaW5kZXhPZihjKTstMSE9PWEmJmsucGVuZGluZ1JlcXVlc3RzLnNwbGljZShhLDEpfXZhciBDPWguZGVmZXIoKSxBPUMucHJvbWlzZSxPLEUscz1jLmhlYWRlcnMsWD1uKGMudXJsLFxuYy5wYXJhbXMpO2sucGVuZGluZ1JlcXVlc3RzLnB1c2goYyk7QS50aGVuKHUsdSk7IWMuY2FjaGUmJiFiLmNhY2hlfHwhMT09PWMuY2FjaGV8fFwiR0VUXCIhPT1jLm1ldGhvZCYmXCJKU09OUFwiIT09Yy5tZXRob2R8fChPPUkoYy5jYWNoZSk/Yy5jYWNoZTpJKGIuY2FjaGUpP2IuY2FjaGU6cSk7TyYmKEU9Ty5nZXQoWCkseShFKT9FJiZHKEUudGhlbik/RS50aGVuKHcsdyk6SChFKT9tKEVbMV0sRVswXSxyYShFWzJdKSxFWzNdKTptKEUsMjAwLHt9LFwiT0tcIik6Ty5wdXQoWCxBKSk7QihFKSYmKChFPSRjKGMudXJsKT9lLmNvb2tpZXMoKVtjLnhzcmZDb29raWVOYW1lfHxiLnhzcmZDb29raWVOYW1lXTp0KSYmKHNbYy54c3JmSGVhZGVyTmFtZXx8Yi54c3JmSGVhZGVyTmFtZV09RSksZChjLm1ldGhvZCxYLGYsbCxzLGMudGltZW91dCxjLndpdGhDcmVkZW50aWFscyxjLnJlc3BvbnNlVHlwZSkpO3JldHVybiBBfWZ1bmN0aW9uIG4oYSxiKXtpZighYilyZXR1cm4gYTt2YXIgYz1bXTtFZChiLFxuZnVuY3Rpb24oYSxiKXtudWxsPT09YXx8QihhKXx8KEgoYSl8fChhPVthXSkscyhhLGZ1bmN0aW9uKGEpe0koYSkmJihhPXFhKGEpP2EudG9JU09TdHJpbmcoKTokYShhKSk7Yy5wdXNoKEZhKGIpK1wiPVwiK0ZhKGEpKX0pKX0pOzA8Yy5sZW5ndGgmJihhKz0oLTE9PWEuaW5kZXhPZihcIj9cIik/XCI/XCI6XCImXCIpK2Muam9pbihcIiZcIikpO3JldHVybiBhfXZhciBxPWYoXCIkaHR0cFwiKSx1PVtdO3MoYyxmdW5jdGlvbihhKXt1LnVuc2hpZnQoRihhKT9sLmdldChhKTpsLmludm9rZShhKSl9KTtrLnBlbmRpbmdSZXF1ZXN0cz1bXTsoZnVuY3Rpb24oYSl7cyhhcmd1bWVudHMsZnVuY3Rpb24oYSl7a1thXT1mdW5jdGlvbihiLGMpe3JldHVybiBrKHgoY3x8e30se21ldGhvZDphLHVybDpifSkpfX0pfSkoXCJnZXRcIixcImRlbGV0ZVwiLFwiaGVhZFwiLFwianNvbnBcIik7KGZ1bmN0aW9uKGEpe3MoYXJndW1lbnRzLGZ1bmN0aW9uKGEpe2tbYV09ZnVuY3Rpb24oYixjLGQpe3JldHVybiBrKHgoZHx8e30se21ldGhvZDphLFxudXJsOmIsZGF0YTpjfSkpfX0pfSkoXCJwb3N0XCIsXCJwdXRcIixcInBhdGNoXCIpO2suZGVmYXVsdHM9YjtyZXR1cm4ga31dfWZ1bmN0aW9uIHVmKCl7cmV0dXJuIG5ldyBNLlhNTEh0dHBSZXF1ZXN0fWZ1bmN0aW9uIExlKCl7dGhpcy4kZ2V0PVtcIiRicm93c2VyXCIsXCIkd2luZG93XCIsXCIkZG9jdW1lbnRcIixmdW5jdGlvbihiLGEsYyl7cmV0dXJuIHZmKGIsdWYsYi5kZWZlcixhLmFuZ3VsYXIuY2FsbGJhY2tzLGNbMF0pfV19ZnVuY3Rpb24gdmYoYixhLGMsZCxlKXtmdW5jdGlvbiBmKGEsYixjKXt2YXIgZj1lLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIiksbT1udWxsO2YudHlwZT1cInRleHQvamF2YXNjcmlwdFwiO2Yuc3JjPWE7Zi5hc3luYz0hMDttPWZ1bmN0aW9uKGEpe2YucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImxvYWRcIixtLCExKTtmLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLG0sITEpO2UuYm9keS5yZW1vdmVDaGlsZChmKTtmPW51bGw7dmFyIGc9LTEsdT1cInVua25vd25cIjthJiYoXCJsb2FkXCIhPT1cbmEudHlwZXx8ZFtiXS5jYWxsZWR8fChhPXt0eXBlOlwiZXJyb3JcIn0pLHU9YS50eXBlLGc9XCJlcnJvclwiPT09YS50eXBlPzQwNDoyMDApO2MmJmMoZyx1KX07Zi5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLG0sITEpO2YuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsbSwhMSk7ZS5ib2R5LmFwcGVuZENoaWxkKGYpO3JldHVybiBtfXJldHVybiBmdW5jdGlvbihlLGgsbCxrLG0sbixxLHUpe2Z1bmN0aW9uIHIoKXt2JiZ2KCk7dyYmdy5hYm9ydCgpfWZ1bmN0aW9uIFAoYSxkLGUsZixnKXtDIT09dCYmYy5jYW5jZWwoQyk7dj13PW51bGw7YShkLGUsZixnKTtiLiQkY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3Qoeil9Yi4kJGluY091dHN0YW5kaW5nUmVxdWVzdENvdW50KCk7aD1ofHxiLnVybCgpO2lmKFwianNvbnBcIj09UShlKSl7dmFyIHA9XCJfXCIrKGQuY291bnRlcisrKS50b1N0cmluZygzNik7ZFtwXT1mdW5jdGlvbihhKXtkW3BdLmRhdGE9YTtkW3BdLmNhbGxlZD0hMH07dmFyIHY9ZihoLnJlcGxhY2UoXCJKU09OX0NBTExCQUNLXCIsXG5cImFuZ3VsYXIuY2FsbGJhY2tzLlwiK3ApLHAsZnVuY3Rpb24oYSxiKXtQKGssYSxkW3BdLmRhdGEsXCJcIixiKTtkW3BdPXp9KX1lbHNle3ZhciB3PWEoKTt3Lm9wZW4oZSxoLCEwKTtzKG0sZnVuY3Rpb24oYSxiKXt5KGEpJiZ3LnNldFJlcXVlc3RIZWFkZXIoYixhKX0pO3cub25sb2FkPWZ1bmN0aW9uKCl7dmFyIGE9dy5zdGF0dXNUZXh0fHxcIlwiLGI9XCJyZXNwb25zZVwiaW4gdz93LnJlc3BvbnNlOncucmVzcG9uc2VUZXh0LGM9MTIyMz09PXcuc3RhdHVzPzIwNDp3LnN0YXR1czswPT09YyYmKGM9Yj8yMDA6XCJmaWxlXCI9PUJhKGgpLnByb3RvY29sPzQwNDowKTtQKGssYyxiLHcuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCksYSl9O2U9ZnVuY3Rpb24oKXtQKGssLTEsbnVsbCxudWxsLFwiXCIpfTt3Lm9uZXJyb3I9ZTt3Lm9uYWJvcnQ9ZTtxJiYody53aXRoQ3JlZGVudGlhbHM9ITApO2lmKHUpdHJ5e3cucmVzcG9uc2VUeXBlPXV9Y2F0Y2goTCl7aWYoXCJqc29uXCIhPT11KXRocm93IEw7fXcuc2VuZChsfHxcbm51bGwpfWlmKDA8bil2YXIgQz1jKHIsbik7ZWxzZSBuJiZHKG4udGhlbikmJm4udGhlbihyKX19ZnVuY3Rpb24gSWUoKXt2YXIgYj1cInt7XCIsYT1cIn19XCI7dGhpcy5zdGFydFN5bWJvbD1mdW5jdGlvbihhKXtyZXR1cm4gYT8oYj1hLHRoaXMpOmJ9O3RoaXMuZW5kU3ltYm9sPWZ1bmN0aW9uKGIpe3JldHVybiBiPyhhPWIsdGhpcyk6YX07dGhpcy4kZ2V0PVtcIiRwYXJzZVwiLFwiJGV4Y2VwdGlvbkhhbmRsZXJcIixcIiRzY2VcIixmdW5jdGlvbihjLGQsZSl7ZnVuY3Rpb24gZihhKXtyZXR1cm5cIlxcXFxcXFxcXFxcXFwiK2F9ZnVuY3Rpb24gZyhmLGcsdSxyKXtmdW5jdGlvbiBQKGMpe3JldHVybiBjLnJlcGxhY2UoayxiKS5yZXBsYWNlKG0sYSl9ZnVuY3Rpb24gcChhKXt0cnl7dmFyIGI9YTthPXU/ZS5nZXRUcnVzdGVkKHUsYik6ZS52YWx1ZU9mKGIpO3ZhciBjO2lmKHImJiF5KGEpKWM9YTtlbHNlIGlmKG51bGw9PWEpYz1cIlwiO2Vsc2V7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwic3RyaW5nXCI6YnJlYWs7Y2FzZSBcIm51bWJlclwiOmE9XG5cIlwiK2E7YnJlYWs7ZGVmYXVsdDphPSRhKGEpfWM9YX1yZXR1cm4gY31jYXRjaChnKXtjPWFjKFwiaW50ZXJyXCIsZixnLnRvU3RyaW5nKCkpLGQoYyl9fXI9ISFyO2Zvcih2YXIgdix3LEw9MCxDPVtdLEE9W10sTz1mLmxlbmd0aCxFPVtdLHM9W107TDxPOylpZigtMSE9KHY9Zi5pbmRleE9mKGIsTCkpJiYtMSE9KHc9Zi5pbmRleE9mKGEsditoKSkpTCE9PXYmJkUucHVzaChQKGYuc3Vic3RyaW5nKEwsdikpKSxMPWYuc3Vic3RyaW5nKHYraCx3KSxDLnB1c2goTCksQS5wdXNoKGMoTCxwKSksTD13K2wscy5wdXNoKEUubGVuZ3RoKSxFLnB1c2goXCJcIik7ZWxzZXtMIT09TyYmRS5wdXNoKFAoZi5zdWJzdHJpbmcoTCkpKTticmVha31pZih1JiYxPEUubGVuZ3RoKXRocm93IGFjKFwibm9jb25jYXRcIixmKTtpZighZ3x8Qy5sZW5ndGgpe3ZhciBYPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj0wLGM9Qy5sZW5ndGg7YjxjO2IrKyl7aWYociYmQihhW2JdKSlyZXR1cm47RVtzW2JdXT1hW2JdfXJldHVybiBFLmpvaW4oXCJcIil9O1xucmV0dXJuIHgoZnVuY3Rpb24oYSl7dmFyIGI9MCxjPUMubGVuZ3RoLGU9QXJyYXkoYyk7dHJ5e2Zvcig7YjxjO2IrKyllW2JdPUFbYl0oYSk7cmV0dXJuIFgoZSl9Y2F0Y2goZyl7YT1hYyhcImludGVyclwiLGYsZy50b1N0cmluZygpKSxkKGEpfX0se2V4cDpmLGV4cHJlc3Npb25zOkMsJCR3YXRjaERlbGVnYXRlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZDtyZXR1cm4gYS4kd2F0Y2hHcm91cChBLGZ1bmN0aW9uKGMsZSl7dmFyIGY9WChjKTtHKGIpJiZiLmNhbGwodGhpcyxmLGMhPT1lP2Q6ZixhKTtkPWZ9LGMpfX0pfX12YXIgaD1iLmxlbmd0aCxsPWEubGVuZ3RoLGs9bmV3IFJlZ0V4cChiLnJlcGxhY2UoLy4vZyxmKSxcImdcIiksbT1uZXcgUmVnRXhwKGEucmVwbGFjZSgvLi9nLGYpLFwiZ1wiKTtnLnN0YXJ0U3ltYm9sPWZ1bmN0aW9uKCl7cmV0dXJuIGJ9O2cuZW5kU3ltYm9sPWZ1bmN0aW9uKCl7cmV0dXJuIGF9O3JldHVybiBnfV19ZnVuY3Rpb24gSmUoKXt0aGlzLiRnZXQ9W1wiJHJvb3RTY29wZVwiLFxuXCIkd2luZG93XCIsXCIkcVwiLFwiJCRxXCIsZnVuY3Rpb24oYixhLGMsZCl7ZnVuY3Rpb24gZShlLGgsbCxrKXt2YXIgbT1hLnNldEludGVydmFsLG49YS5jbGVhckludGVydmFsLHE9MCx1PXkoaykmJiFrLHI9KHU/ZDpjKS5kZWZlcigpLFA9ci5wcm9taXNlO2w9eShsKT9sOjA7UC50aGVuKG51bGwsbnVsbCxlKTtQLiQkaW50ZXJ2YWxJZD1tKGZ1bmN0aW9uKCl7ci5ub3RpZnkocSsrKTswPGwmJnE+PWwmJihyLnJlc29sdmUocSksbihQLiQkaW50ZXJ2YWxJZCksZGVsZXRlIGZbUC4kJGludGVydmFsSWRdKTt1fHxiLiRhcHBseSgpfSxoKTtmW1AuJCRpbnRlcnZhbElkXT1yO3JldHVybiBQfXZhciBmPXt9O2UuY2FuY2VsPWZ1bmN0aW9uKGIpe3JldHVybiBiJiZiLiQkaW50ZXJ2YWxJZCBpbiBmPyhmW2IuJCRpbnRlcnZhbElkXS5yZWplY3QoXCJjYW5jZWxlZFwiKSxhLmNsZWFySW50ZXJ2YWwoYi4kJGludGVydmFsSWQpLGRlbGV0ZSBmW2IuJCRpbnRlcnZhbElkXSwhMCk6ITF9O3JldHVybiBlfV19XG5mdW5jdGlvbiBSZCgpe3RoaXMuJGdldD1mdW5jdGlvbigpe3JldHVybntpZDpcImVuLXVzXCIsTlVNQkVSX0ZPUk1BVFM6e0RFQ0lNQUxfU0VQOlwiLlwiLEdST1VQX1NFUDpcIixcIixQQVRURVJOUzpbe21pbkludDoxLG1pbkZyYWM6MCxtYXhGcmFjOjMscG9zUHJlOlwiXCIscG9zU3VmOlwiXCIsbmVnUHJlOlwiLVwiLG5lZ1N1ZjpcIlwiLGdTaXplOjMsbGdTaXplOjN9LHttaW5JbnQ6MSxtaW5GcmFjOjIsbWF4RnJhYzoyLHBvc1ByZTpcIlxcdTAwYTRcIixwb3NTdWY6XCJcIixuZWdQcmU6XCIoXFx1MDBhNFwiLG5lZ1N1ZjpcIilcIixnU2l6ZTozLGxnU2l6ZTozfV0sQ1VSUkVOQ1lfU1lNOlwiJFwifSxEQVRFVElNRV9GT1JNQVRTOntNT05USDpcIkphbnVhcnkgRmVicnVhcnkgTWFyY2ggQXByaWwgTWF5IEp1bmUgSnVseSBBdWd1c3QgU2VwdGVtYmVyIE9jdG9iZXIgTm92ZW1iZXIgRGVjZW1iZXJcIi5zcGxpdChcIiBcIiksU0hPUlRNT05USDpcIkphbiBGZWIgTWFyIEFwciBNYXkgSnVuIEp1bCBBdWcgU2VwIE9jdCBOb3YgRGVjXCIuc3BsaXQoXCIgXCIpLFxuREFZOlwiU3VuZGF5IE1vbmRheSBUdWVzZGF5IFdlZG5lc2RheSBUaHVyc2RheSBGcmlkYXkgU2F0dXJkYXlcIi5zcGxpdChcIiBcIiksU0hPUlREQVk6XCJTdW4gTW9uIFR1ZSBXZWQgVGh1IEZyaSBTYXRcIi5zcGxpdChcIiBcIiksQU1QTVM6W1wiQU1cIixcIlBNXCJdLG1lZGl1bTpcIk1NTSBkLCB5IGg6bW06c3MgYVwiLFwic2hvcnRcIjpcIk0vZC95eSBoOm1tIGFcIixmdWxsRGF0ZTpcIkVFRUUsIE1NTU0gZCwgeVwiLGxvbmdEYXRlOlwiTU1NTSBkLCB5XCIsbWVkaXVtRGF0ZTpcIk1NTSBkLCB5XCIsc2hvcnREYXRlOlwiTS9kL3l5XCIsbWVkaXVtVGltZTpcImg6bW06c3MgYVwiLHNob3J0VGltZTpcImg6bW0gYVwifSxwbHVyYWxDYXQ6ZnVuY3Rpb24oYil7cmV0dXJuIDE9PT1iP1wib25lXCI6XCJvdGhlclwifX19fWZ1bmN0aW9uIGJjKGIpe2I9Yi5zcGxpdChcIi9cIik7Zm9yKHZhciBhPWIubGVuZ3RoO2EtLTspYlthXT1yYihiW2FdKTtyZXR1cm4gYi5qb2luKFwiL1wiKX1mdW5jdGlvbiBhZChiLGEpe3ZhciBjPUJhKGIpO2EuJCRwcm90b2NvbD1cbmMucHJvdG9jb2w7YS4kJGhvc3Q9Yy5ob3N0bmFtZTthLiQkcG9ydD1iYShjLnBvcnQpfHx3ZltjLnByb3RvY29sXXx8bnVsbH1mdW5jdGlvbiBiZChiLGEpe3ZhciBjPVwiL1wiIT09Yi5jaGFyQXQoMCk7YyYmKGI9XCIvXCIrYik7dmFyIGQ9QmEoYik7YS4kJHBhdGg9ZGVjb2RlVVJJQ29tcG9uZW50KGMmJlwiL1wiPT09ZC5wYXRobmFtZS5jaGFyQXQoMCk/ZC5wYXRobmFtZS5zdWJzdHJpbmcoMSk6ZC5wYXRobmFtZSk7YS4kJHNlYXJjaD1yYyhkLnNlYXJjaCk7YS4kJGhhc2g9ZGVjb2RlVVJJQ29tcG9uZW50KGQuaGFzaCk7YS4kJHBhdGgmJlwiL1wiIT1hLiQkcGF0aC5jaGFyQXQoMCkmJihhLiQkcGF0aD1cIi9cIithLiQkcGF0aCl9ZnVuY3Rpb24gemEoYixhKXtpZigwPT09YS5pbmRleE9mKGIpKXJldHVybiBhLnN1YnN0cihiLmxlbmd0aCl9ZnVuY3Rpb24gSGEoYil7dmFyIGE9Yi5pbmRleE9mKFwiI1wiKTtyZXR1cm4tMT09YT9iOmIuc3Vic3RyKDAsYSl9ZnVuY3Rpb24gR2IoYil7cmV0dXJuIGIucmVwbGFjZSgvKCMuKyl8IyQvLFxuXCIkMVwiKX1mdW5jdGlvbiBjYyhiKXtyZXR1cm4gYi5zdWJzdHIoMCxIYShiKS5sYXN0SW5kZXhPZihcIi9cIikrMSl9ZnVuY3Rpb24gZGMoYixhKXt0aGlzLiQkaHRtbDU9ITA7YT1hfHxcIlwiO3ZhciBjPWNjKGIpO2FkKGIsdGhpcyk7dGhpcy4kJHBhcnNlPWZ1bmN0aW9uKGEpe3ZhciBiPXphKGMsYSk7aWYoIUYoYikpdGhyb3cgSGIoXCJpcHRocHJmeFwiLGEsYyk7YmQoYix0aGlzKTt0aGlzLiQkcGF0aHx8KHRoaXMuJCRwYXRoPVwiL1wiKTt0aGlzLiQkY29tcG9zZSgpfTt0aGlzLiQkY29tcG9zZT1mdW5jdGlvbigpe3ZhciBhPVFiKHRoaXMuJCRzZWFyY2gpLGI9dGhpcy4kJGhhc2g/XCIjXCIrcmIodGhpcy4kJGhhc2gpOlwiXCI7dGhpcy4kJHVybD1iYyh0aGlzLiQkcGF0aCkrKGE/XCI/XCIrYTpcIlwiKStiO3RoaXMuJCRhYnNVcmw9Yyt0aGlzLiQkdXJsLnN1YnN0cigxKX07dGhpcy4kJHBhcnNlTGlua1VybD1mdW5jdGlvbihkLGUpe2lmKGUmJlwiI1wiPT09ZVswXSlyZXR1cm4gdGhpcy5oYXNoKGUuc2xpY2UoMSkpLFxuITA7dmFyIGYsZzsoZj16YShiLGQpKSE9PXQ/KGc9ZixnPShmPXphKGEsZikpIT09dD9jKyh6YShcIi9cIixmKXx8Zik6YitnKTooZj16YShjLGQpKSE9PXQ/Zz1jK2Y6Yz09ZCtcIi9cIiYmKGc9Yyk7ZyYmdGhpcy4kJHBhcnNlKGcpO3JldHVybiEhZ319ZnVuY3Rpb24gZWMoYixhKXt2YXIgYz1jYyhiKTthZChiLHRoaXMpO3RoaXMuJCRwYXJzZT1mdW5jdGlvbihkKXtkPXphKGIsZCl8fHphKGMsZCk7dmFyIGU7XCIjXCI9PT1kLmNoYXJBdCgwKT8oZT16YShhLGQpLEIoZSkmJihlPWQpKTplPXRoaXMuJCRodG1sNT9kOlwiXCI7YmQoZSx0aGlzKTtkPXRoaXMuJCRwYXRoO3ZhciBmPS9eXFwvW0EtWl06KFxcLy4qKS87MD09PWUuaW5kZXhPZihiKSYmKGU9ZS5yZXBsYWNlKGIsXCJcIikpO2YuZXhlYyhlKXx8KGQ9KGU9Zi5leGVjKGQpKT9lWzFdOmQpO3RoaXMuJCRwYXRoPWQ7dGhpcy4kJGNvbXBvc2UoKX07dGhpcy4kJGNvbXBvc2U9ZnVuY3Rpb24oKXt2YXIgYz1RYih0aGlzLiQkc2VhcmNoKSxlPXRoaXMuJCRoYXNoP1xuXCIjXCIrcmIodGhpcy4kJGhhc2gpOlwiXCI7dGhpcy4kJHVybD1iYyh0aGlzLiQkcGF0aCkrKGM/XCI/XCIrYzpcIlwiKStlO3RoaXMuJCRhYnNVcmw9YisodGhpcy4kJHVybD9hK3RoaXMuJCR1cmw6XCJcIil9O3RoaXMuJCRwYXJzZUxpbmtVcmw9ZnVuY3Rpb24oYSxjKXtyZXR1cm4gSGEoYik9PUhhKGEpPyh0aGlzLiQkcGFyc2UoYSksITApOiExfX1mdW5jdGlvbiBjZChiLGEpe3RoaXMuJCRodG1sNT0hMDtlYy5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dmFyIGM9Y2MoYik7dGhpcy4kJHBhcnNlTGlua1VybD1mdW5jdGlvbihkLGUpe2lmKGUmJlwiI1wiPT09ZVswXSlyZXR1cm4gdGhpcy5oYXNoKGUuc2xpY2UoMSkpLCEwO3ZhciBmLGc7Yj09SGEoZCk/Zj1kOihnPXphKGMsZCkpP2Y9YithK2c6Yz09PWQrXCIvXCImJihmPWMpO2YmJnRoaXMuJCRwYXJzZShmKTtyZXR1cm4hIWZ9O3RoaXMuJCRjb21wb3NlPWZ1bmN0aW9uKCl7dmFyIGM9UWIodGhpcy4kJHNlYXJjaCksZT10aGlzLiQkaGFzaD9cIiNcIityYih0aGlzLiQkaGFzaCk6XG5cIlwiO3RoaXMuJCR1cmw9YmModGhpcy4kJHBhdGgpKyhjP1wiP1wiK2M6XCJcIikrZTt0aGlzLiQkYWJzVXJsPWIrYSt0aGlzLiQkdXJsfX1mdW5jdGlvbiBJYihiKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdGhpc1tiXX19ZnVuY3Rpb24gZGQoYixhKXtyZXR1cm4gZnVuY3Rpb24oYyl7aWYoQihjKSlyZXR1cm4gdGhpc1tiXTt0aGlzW2JdPWEoYyk7dGhpcy4kJGNvbXBvc2UoKTtyZXR1cm4gdGhpc319ZnVuY3Rpb24gTWUoKXt2YXIgYj1cIlwiLGE9e2VuYWJsZWQ6ITEscmVxdWlyZUJhc2U6ITAscmV3cml0ZUxpbmtzOiEwfTt0aGlzLmhhc2hQcmVmaXg9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk/KGI9YSx0aGlzKTpifTt0aGlzLmh0bWw1TW9kZT1mdW5jdGlvbihiKXtyZXR1cm4gV2EoYik/KGEuZW5hYmxlZD1iLHRoaXMpOkkoYik/KFdhKGIuZW5hYmxlZCkmJihhLmVuYWJsZWQ9Yi5lbmFibGVkKSxXYShiLnJlcXVpcmVCYXNlKSYmKGEucmVxdWlyZUJhc2U9Yi5yZXF1aXJlQmFzZSksV2EoYi5yZXdyaXRlTGlua3MpJiZcbihhLnJld3JpdGVMaW5rcz1iLnJld3JpdGVMaW5rcyksdGhpcyk6YX07dGhpcy4kZ2V0PVtcIiRyb290U2NvcGVcIixcIiRicm93c2VyXCIsXCIkc25pZmZlclwiLFwiJHJvb3RFbGVtZW50XCIsXCIkd2luZG93XCIsZnVuY3Rpb24oYyxkLGUsZixnKXtmdW5jdGlvbiBoKGEsYixjKXt2YXIgZT1rLnVybCgpLGY9ay4kJHN0YXRlO3RyeXtkLnVybChhLGIsYyksay4kJHN0YXRlPWQuc3RhdGUoKX1jYXRjaChnKXt0aHJvdyBrLnVybChlKSxrLiQkc3RhdGU9ZixnO319ZnVuY3Rpb24gbChhLGIpe2MuJGJyb2FkY2FzdChcIiRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3NcIixrLmFic1VybCgpLGEsay4kJHN0YXRlLGIpfXZhciBrLG07bT1kLmJhc2VIcmVmKCk7dmFyIG49ZC51cmwoKSxxO2lmKGEuZW5hYmxlZCl7aWYoIW0mJmEucmVxdWlyZUJhc2UpdGhyb3cgSGIoXCJub2Jhc2VcIik7cT1uLnN1YnN0cmluZygwLG4uaW5kZXhPZihcIi9cIixuLmluZGV4T2YoXCIvL1wiKSsyKSkrKG18fFwiL1wiKTttPWUuaGlzdG9yeT9kYzpjZH1lbHNlIHE9XG5IYShuKSxtPWVjO2s9bmV3IG0ocSxcIiNcIitiKTtrLiQkcGFyc2VMaW5rVXJsKG4sbik7ay4kJHN0YXRlPWQuc3RhdGUoKTt2YXIgdT0vXlxccyooamF2YXNjcmlwdHxtYWlsdG8pOi9pO2Yub24oXCJjbGlja1wiLGZ1bmN0aW9uKGIpe2lmKGEucmV3cml0ZUxpbmtzJiYhYi5jdHJsS2V5JiYhYi5tZXRhS2V5JiYhYi5zaGlmdEtleSYmMiE9Yi53aGljaCYmMiE9Yi5idXR0b24pe2Zvcih2YXIgZT1EKGIudGFyZ2V0KTtcImFcIiE9PXVhKGVbMF0pOylpZihlWzBdPT09ZlswXXx8IShlPWUucGFyZW50KCkpWzBdKXJldHVybjt2YXIgaD1lLnByb3AoXCJocmVmXCIpLGw9ZS5hdHRyKFwiaHJlZlwiKXx8ZS5hdHRyKFwieGxpbms6aHJlZlwiKTtJKGgpJiZcIltvYmplY3QgU1ZHQW5pbWF0ZWRTdHJpbmddXCI9PT1oLnRvU3RyaW5nKCkmJihoPUJhKGguYW5pbVZhbCkuaHJlZik7dS50ZXN0KGgpfHwhaHx8ZS5hdHRyKFwidGFyZ2V0XCIpfHxiLmlzRGVmYXVsdFByZXZlbnRlZCgpfHwhay4kJHBhcnNlTGlua1VybChoLFxubCl8fChiLnByZXZlbnREZWZhdWx0KCksay5hYnNVcmwoKSE9ZC51cmwoKSYmKGMuJGFwcGx5KCksZy5hbmd1bGFyW1wiZmYtNjg0MjA4LXByZXZlbnREZWZhdWx0XCJdPSEwKSl9fSk7R2Ioay5hYnNVcmwoKSkhPUdiKG4pJiZkLnVybChrLmFic1VybCgpLCEwKTt2YXIgcj0hMDtkLm9uVXJsQ2hhbmdlKGZ1bmN0aW9uKGEsYil7Yy4kZXZhbEFzeW5jKGZ1bmN0aW9uKCl7dmFyIGQ9ay5hYnNVcmwoKSxlPWsuJCRzdGF0ZSxmO2suJCRwYXJzZShhKTtrLiQkc3RhdGU9YjtmPWMuJGJyb2FkY2FzdChcIiRsb2NhdGlvbkNoYW5nZVN0YXJ0XCIsYSxkLGIsZSkuZGVmYXVsdFByZXZlbnRlZDtrLmFic1VybCgpPT09YSYmKGY/KGsuJCRwYXJzZShkKSxrLiQkc3RhdGU9ZSxoKGQsITEsZSkpOihyPSExLGwoZCxlKSkpfSk7Yy4kJHBoYXNlfHxjLiRkaWdlc3QoKX0pO2MuJHdhdGNoKGZ1bmN0aW9uKCl7dmFyIGE9R2IoZC51cmwoKSksYj1HYihrLmFic1VybCgpKSxmPWQuc3RhdGUoKSxnPWsuJCRyZXBsYWNlLFxucT1hIT09Ynx8ay4kJGh0bWw1JiZlLmhpc3RvcnkmJmYhPT1rLiQkc3RhdGU7aWYocnx8cSlyPSExLGMuJGV2YWxBc3luYyhmdW5jdGlvbigpe3ZhciBiPWsuYWJzVXJsKCksZD1jLiRicm9hZGNhc3QoXCIkbG9jYXRpb25DaGFuZ2VTdGFydFwiLGIsYSxrLiQkc3RhdGUsZikuZGVmYXVsdFByZXZlbnRlZDtrLmFic1VybCgpPT09YiYmKGQ/KGsuJCRwYXJzZShhKSxrLiQkc3RhdGU9Zik6KHEmJmgoYixnLGY9PT1rLiQkc3RhdGU/bnVsbDprLiQkc3RhdGUpLGwoYSxmKSkpfSk7ay4kJHJlcGxhY2U9ITF9KTtyZXR1cm4ga31dfWZ1bmN0aW9uIE5lKCl7dmFyIGI9ITAsYT10aGlzO3RoaXMuZGVidWdFbmFibGVkPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPyhiPWEsdGhpcyk6Yn07dGhpcy4kZ2V0PVtcIiR3aW5kb3dcIixmdW5jdGlvbihjKXtmdW5jdGlvbiBkKGEpe2EgaW5zdGFuY2VvZiBFcnJvciYmKGEuc3RhY2s/YT1hLm1lc3NhZ2UmJi0xPT09YS5zdGFjay5pbmRleE9mKGEubWVzc2FnZSk/XG5cIkVycm9yOiBcIithLm1lc3NhZ2UrXCJcXG5cIithLnN0YWNrOmEuc3RhY2s6YS5zb3VyY2VVUkwmJihhPWEubWVzc2FnZStcIlxcblwiK2Euc291cmNlVVJMK1wiOlwiK2EubGluZSkpO3JldHVybiBhfWZ1bmN0aW9uIGUoYSl7dmFyIGI9Yy5jb25zb2xlfHx7fSxlPWJbYV18fGIubG9nfHx6O2E9ITE7dHJ5e2E9ISFlLmFwcGx5fWNhdGNoKGwpe31yZXR1cm4gYT9mdW5jdGlvbigpe3ZhciBhPVtdO3MoYXJndW1lbnRzLGZ1bmN0aW9uKGIpe2EucHVzaChkKGIpKX0pO3JldHVybiBlLmFwcGx5KGIsYSl9OmZ1bmN0aW9uKGEsYil7ZShhLG51bGw9PWI/XCJcIjpiKX19cmV0dXJue2xvZzplKFwibG9nXCIpLGluZm86ZShcImluZm9cIiksd2FybjplKFwid2FyblwiKSxlcnJvcjplKFwiZXJyb3JcIiksZGVidWc6ZnVuY3Rpb24oKXt2YXIgYz1lKFwiZGVidWdcIik7cmV0dXJuIGZ1bmN0aW9uKCl7YiYmYy5hcHBseShhLGFyZ3VtZW50cyl9fSgpfX1dfWZ1bmN0aW9uIHRhKGIsYSl7aWYoXCJfX2RlZmluZUdldHRlcl9fXCI9PT1cbmJ8fFwiX19kZWZpbmVTZXR0ZXJfX1wiPT09Ynx8XCJfX2xvb2t1cEdldHRlcl9fXCI9PT1ifHxcIl9fbG9va3VwU2V0dGVyX19cIj09PWJ8fFwiX19wcm90b19fXCI9PT1iKXRocm93IGxhKFwiaXNlY2ZsZFwiLGEpO3JldHVybiBifWZ1bmN0aW9uIG1hKGIsYSl7aWYoYil7aWYoYi5jb25zdHJ1Y3Rvcj09PWIpdGhyb3cgbGEoXCJpc2VjZm5cIixhKTtpZihiLndpbmRvdz09PWIpdGhyb3cgbGEoXCJpc2Vjd2luZG93XCIsYSk7aWYoYi5jaGlsZHJlbiYmKGIubm9kZU5hbWV8fGIucHJvcCYmYi5hdHRyJiZiLmZpbmQpKXRocm93IGxhKFwiaXNlY2RvbVwiLGEpO2lmKGI9PT1PYmplY3QpdGhyb3cgbGEoXCJpc2Vjb2JqXCIsYSk7fXJldHVybiBifWZ1bmN0aW9uIGZjKGIpe3JldHVybiBiLmNvbnN0YW50fWZ1bmN0aW9uIGhiKGIsYSxjLGQsZSl7bWEoYixlKTttYShhLGUpO2M9Yy5zcGxpdChcIi5cIik7Zm9yKHZhciBmLGc9MDsxPGMubGVuZ3RoO2crKyl7Zj10YShjLnNoaWZ0KCksZSk7dmFyIGg9MD09PWcmJmEmJmFbZl18fFxuYltmXTtofHwoaD17fSxiW2ZdPWgpO2I9bWEoaCxlKX1mPXRhKGMuc2hpZnQoKSxlKTttYShiW2ZdLGUpO3JldHVybiBiW2ZdPWR9ZnVuY3Rpb24gUWEoYil7cmV0dXJuXCJjb25zdHJ1Y3RvclwiPT1ifWZ1bmN0aW9uIGVkKGIsYSxjLGQsZSxmLGcpe3RhKGIsZik7dGEoYSxmKTt0YShjLGYpO3RhKGQsZik7dGEoZSxmKTt2YXIgaD1mdW5jdGlvbihhKXtyZXR1cm4gbWEoYSxmKX0sbD1nfHxRYShiKT9oOnBhLGs9Z3x8UWEoYSk/aDpwYSxtPWd8fFFhKGMpP2g6cGEsbj1nfHxRYShkKT9oOnBhLHE9Z3x8UWEoZSk/aDpwYTtyZXR1cm4gZnVuY3Rpb24oZixnKXt2YXIgaD1nJiZnLmhhc093blByb3BlcnR5KGIpP2c6ZjtpZihudWxsPT1oKXJldHVybiBoO2g9bChoW2JdKTtpZighYSlyZXR1cm4gaDtpZihudWxsPT1oKXJldHVybiB0O2g9ayhoW2FdKTtpZighYylyZXR1cm4gaDtpZihudWxsPT1oKXJldHVybiB0O2g9bShoW2NdKTtpZighZClyZXR1cm4gaDtpZihudWxsPT1oKXJldHVybiB0O1xuaD1uKGhbZF0pO3JldHVybiBlP251bGw9PWg/dDpoPXEoaFtlXSk6aH19ZnVuY3Rpb24geGYoYixhKXtyZXR1cm4gZnVuY3Rpb24oYyxkKXtyZXR1cm4gYihjLGQsbWEsYSl9fWZ1bmN0aW9uIHlmKGIsYSxjKXt2YXIgZD1hLmV4cGVuc2l2ZUNoZWNrcyxlPWQ/emY6QWYsZj1lW2JdO2lmKGYpcmV0dXJuIGY7dmFyIGc9Yi5zcGxpdChcIi5cIiksaD1nLmxlbmd0aDtpZihhLmNzcClmPTY+aD9lZChnWzBdLGdbMV0sZ1syXSxnWzNdLGdbNF0sYyxkKTpmdW5jdGlvbihhLGIpe3ZhciBlPTAsZjtkbyBmPWVkKGdbZSsrXSxnW2UrK10sZ1tlKytdLGdbZSsrXSxnW2UrK10sYyxkKShhLGIpLGI9dCxhPWY7d2hpbGUoZTxoKTtyZXR1cm4gZn07ZWxzZXt2YXIgbD1cIlwiO2QmJihsKz1cInMgPSBlc28ocywgZmUpO1xcbmwgPSBlc28obCwgZmUpO1xcblwiKTt2YXIgaz1kO3MoZyxmdW5jdGlvbihhLGIpe3RhKGEsYyk7dmFyIGU9KGI/XCJzXCI6JygobCYmbC5oYXNPd25Qcm9wZXJ0eShcIicrYSsnXCIpKT9sOnMpJykrXG5cIi5cIithO2lmKGR8fFFhKGEpKWU9XCJlc28oXCIrZStcIiwgZmUpXCIsaz0hMDtsKz1cImlmKHMgPT0gbnVsbCkgcmV0dXJuIHVuZGVmaW5lZDtcXG5zPVwiK2UrXCI7XFxuXCJ9KTtsKz1cInJldHVybiBzO1wiO2E9bmV3IEZ1bmN0aW9uKFwic1wiLFwibFwiLFwiZXNvXCIsXCJmZVwiLGwpO2EudG9TdHJpbmc9ZWEobCk7ayYmKGE9eGYoYSxjKSk7Zj1hfWYuc2hhcmVkR2V0dGVyPSEwO2YuYXNzaWduPWZ1bmN0aW9uKGEsYyxkKXtyZXR1cm4gaGIoYSxkLGIsYyxiKX07cmV0dXJuIGVbYl09Zn1mdW5jdGlvbiBnYyhiKXtyZXR1cm4gRyhiLnZhbHVlT2YpP2IudmFsdWVPZigpOkJmLmNhbGwoYil9ZnVuY3Rpb24gT2UoKXt2YXIgYj1oYSgpLGE9aGEoKTt0aGlzLiRnZXQ9W1wiJGZpbHRlclwiLFwiJHNuaWZmZXJcIixmdW5jdGlvbihjLGQpe2Z1bmN0aW9uIGUoYSl7dmFyIGI9YTthLnNoYXJlZEdldHRlciYmKGI9ZnVuY3Rpb24oYixjKXtyZXR1cm4gYShiLGMpfSxiLmxpdGVyYWw9YS5saXRlcmFsLGIuY29uc3RhbnQ9YS5jb25zdGFudCxcbmIuYXNzaWduPWEuYXNzaWduKTtyZXR1cm4gYn1mdW5jdGlvbiBmKGEsYil7Zm9yKHZhciBjPTAsZD1hLmxlbmd0aDtjPGQ7YysrKXt2YXIgZT1hW2NdO2UuY29uc3RhbnR8fChlLmlucHV0cz9mKGUuaW5wdXRzLGIpOi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSkpfXJldHVybiBifWZ1bmN0aW9uIGcoYSxiKXtyZXR1cm4gbnVsbD09YXx8bnVsbD09Yj9hPT09YjpcIm9iamVjdFwiPT09dHlwZW9mIGEmJihhPWdjKGEpLFwib2JqZWN0XCI9PT10eXBlb2YgYSk/ITE6YT09PWJ8fGEhPT1hJiZiIT09Yn1mdW5jdGlvbiBoKGEsYixjLGQpe3ZhciBlPWQuJCRpbnB1dHN8fChkLiQkaW5wdXRzPWYoZC5pbnB1dHMsW10pKSxoO2lmKDE9PT1lLmxlbmd0aCl7dmFyIGw9ZyxlPWVbMF07cmV0dXJuIGEuJHdhdGNoKGZ1bmN0aW9uKGEpe3ZhciBiPWUoYSk7ZyhiLGwpfHwoaD1kKGEpLGw9YiYmZ2MoYikpO3JldHVybiBofSxiLGMpfWZvcih2YXIgaz1bXSxxPTAsbj1lLmxlbmd0aDtxPG47cSsrKWtbcV09XG5nO3JldHVybiBhLiR3YXRjaChmdW5jdGlvbihhKXtmb3IodmFyIGI9ITEsYz0wLGY9ZS5sZW5ndGg7YzxmO2MrKyl7dmFyIGw9ZVtjXShhKTtpZihifHwoYj0hZyhsLGtbY10pKSlrW2NdPWwmJmdjKGwpfWImJihoPWQoYSkpO3JldHVybiBofSxiLGMpfWZ1bmN0aW9uIGwoYSxiLGMsZCl7dmFyIGUsZjtyZXR1cm4gZT1hLiR3YXRjaChmdW5jdGlvbihhKXtyZXR1cm4gZChhKX0sZnVuY3Rpb24oYSxjLGQpe2Y9YTtHKGIpJiZiLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt5KGEpJiZkLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpe3koZikmJmUoKX0pfSxjKX1mdW5jdGlvbiBrKGEsYixjLGQpe2Z1bmN0aW9uIGUoYSl7dmFyIGI9ITA7cyhhLGZ1bmN0aW9uKGEpe3koYSl8fChiPSExKX0pO3JldHVybiBifXZhciBmLGc7cmV0dXJuIGY9YS4kd2F0Y2goZnVuY3Rpb24oYSl7cmV0dXJuIGQoYSl9LGZ1bmN0aW9uKGEsYyxkKXtnPWE7RyhiKSYmYi5jYWxsKHRoaXMsYSxjLGQpO2UoYSkmJmQuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCl7ZShnKSYmXG5mKCl9KX0sYyl9ZnVuY3Rpb24gbShhLGIsYyxkKXt2YXIgZTtyZXR1cm4gZT1hLiR3YXRjaChmdW5jdGlvbihhKXtyZXR1cm4gZChhKX0sZnVuY3Rpb24oYSxjLGQpe0coYikmJmIuYXBwbHkodGhpcyxhcmd1bWVudHMpO2UoKX0sYyl9ZnVuY3Rpb24gbihhLGIpe2lmKCFiKXJldHVybiBhO3ZhciBjPWEuJCR3YXRjaERlbGVnYXRlLGM9YyE9PWsmJmMhPT1sP2Z1bmN0aW9uKGMsZCl7dmFyIGU9YShjLGQpO3JldHVybiBiKGUsYyxkKX06ZnVuY3Rpb24oYyxkKXt2YXIgZT1hKGMsZCksZj1iKGUsYyxkKTtyZXR1cm4geShlKT9mOmV9O2EuJCR3YXRjaERlbGVnYXRlJiZhLiQkd2F0Y2hEZWxlZ2F0ZSE9PWg/Yy4kJHdhdGNoRGVsZWdhdGU9YS4kJHdhdGNoRGVsZWdhdGU6Yi4kc3RhdGVmdWx8fChjLiQkd2F0Y2hEZWxlZ2F0ZT1oLGMuaW5wdXRzPVthXSk7cmV0dXJuIGN9dmFyIHE9e2NzcDpkLmNzcCxleHBlbnNpdmVDaGVja3M6ITF9LHU9e2NzcDpkLmNzcCxleHBlbnNpdmVDaGVja3M6ITB9O1xucmV0dXJuIGZ1bmN0aW9uKGQsZixnKXt2YXIgdix3LEw7c3dpdGNoKHR5cGVvZiBkKXtjYXNlIFwic3RyaW5nXCI6TD1kPWQudHJpbSgpO3ZhciBDPWc/YTpiO3Y9Q1tMXTt2fHwoXCI6XCI9PT1kLmNoYXJBdCgwKSYmXCI6XCI9PT1kLmNoYXJBdCgxKSYmKHc9ITAsZD1kLnN1YnN0cmluZygyKSksZz1nP3U6cSx2PW5ldyBoYyhnKSx2PShuZXcgaWIodixjLGcpKS5wYXJzZShkKSx2LmNvbnN0YW50P3YuJCR3YXRjaERlbGVnYXRlPW06dz8odj1lKHYpLHYuJCR3YXRjaERlbGVnYXRlPXYubGl0ZXJhbD9rOmwpOnYuaW5wdXRzJiYodi4kJHdhdGNoRGVsZWdhdGU9aCksQ1tMXT12KTtyZXR1cm4gbih2LGYpO2Nhc2UgXCJmdW5jdGlvblwiOnJldHVybiBuKGQsZik7ZGVmYXVsdDpyZXR1cm4gbih6LGYpfX19XX1mdW5jdGlvbiBRZSgpe3RoaXMuJGdldD1bXCIkcm9vdFNjb3BlXCIsXCIkZXhjZXB0aW9uSGFuZGxlclwiLGZ1bmN0aW9uKGIsYSl7cmV0dXJuIGZkKGZ1bmN0aW9uKGEpe2IuJGV2YWxBc3luYyhhKX0sXG5hKX1dfWZ1bmN0aW9uIFJlKCl7dGhpcy4kZ2V0PVtcIiRicm93c2VyXCIsXCIkZXhjZXB0aW9uSGFuZGxlclwiLGZ1bmN0aW9uKGIsYSl7cmV0dXJuIGZkKGZ1bmN0aW9uKGEpe2IuZGVmZXIoYSl9LGEpfV19ZnVuY3Rpb24gZmQoYixhKXtmdW5jdGlvbiBjKGEsYixjKXtmdW5jdGlvbiBkKGIpe3JldHVybiBmdW5jdGlvbihjKXtlfHwoZT0hMCxiLmNhbGwoYSxjKSl9fXZhciBlPSExO3JldHVybltkKGIpLGQoYyldfWZ1bmN0aW9uIGQoKXt0aGlzLiQkc3RhdGU9e3N0YXR1czowfX1mdW5jdGlvbiBlKGEsYil7cmV0dXJuIGZ1bmN0aW9uKGMpe2IuY2FsbChhLGMpfX1mdW5jdGlvbiBmKGMpeyFjLnByb2Nlc3NTY2hlZHVsZWQmJmMucGVuZGluZyYmKGMucHJvY2Vzc1NjaGVkdWxlZD0hMCxiKGZ1bmN0aW9uKCl7dmFyIGIsZCxlO2U9Yy5wZW5kaW5nO2MucHJvY2Vzc1NjaGVkdWxlZD0hMTtjLnBlbmRpbmc9dDtmb3IodmFyIGY9MCxnPWUubGVuZ3RoO2Y8ZzsrK2Ype2Q9ZVtmXVswXTtiPWVbZl1bYy5zdGF0dXNdO1xudHJ5e0coYik/ZC5yZXNvbHZlKGIoYy52YWx1ZSkpOjE9PT1jLnN0YXR1cz9kLnJlc29sdmUoYy52YWx1ZSk6ZC5yZWplY3QoYy52YWx1ZSl9Y2F0Y2goaCl7ZC5yZWplY3QoaCksYShoKX19fSkpfWZ1bmN0aW9uIGcoKXt0aGlzLnByb21pc2U9bmV3IGQ7dGhpcy5yZXNvbHZlPWUodGhpcyx0aGlzLnJlc29sdmUpO3RoaXMucmVqZWN0PWUodGhpcyx0aGlzLnJlamVjdCk7dGhpcy5ub3RpZnk9ZSh0aGlzLHRoaXMubm90aWZ5KX12YXIgaD1TKFwiJHFcIixUeXBlRXJyb3IpO2QucHJvdG90eXBlPXt0aGVuOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1uZXcgZzt0aGlzLiQkc3RhdGUucGVuZGluZz10aGlzLiQkc3RhdGUucGVuZGluZ3x8W107dGhpcy4kJHN0YXRlLnBlbmRpbmcucHVzaChbZCxhLGIsY10pOzA8dGhpcy4kJHN0YXRlLnN0YXR1cyYmZih0aGlzLiQkc3RhdGUpO3JldHVybiBkLnByb21pc2V9LFwiY2F0Y2hcIjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy50aGVuKG51bGwsYSl9LFwiZmluYWxseVwiOmZ1bmN0aW9uKGEsXG5iKXtyZXR1cm4gdGhpcy50aGVuKGZ1bmN0aW9uKGIpe3JldHVybiBrKGIsITAsYSl9LGZ1bmN0aW9uKGIpe3JldHVybiBrKGIsITEsYSl9LGIpfX07Zy5wcm90b3R5cGU9e3Jlc29sdmU6ZnVuY3Rpb24oYSl7dGhpcy5wcm9taXNlLiQkc3RhdGUuc3RhdHVzfHwoYT09PXRoaXMucHJvbWlzZT90aGlzLiQkcmVqZWN0KGgoXCJxY3ljbGVcIixhKSk6dGhpcy4kJHJlc29sdmUoYSkpfSwkJHJlc29sdmU6ZnVuY3Rpb24oYil7dmFyIGQsZTtlPWModGhpcyx0aGlzLiQkcmVzb2x2ZSx0aGlzLiQkcmVqZWN0KTt0cnl7aWYoSShiKXx8RyhiKSlkPWImJmIudGhlbjtHKGQpPyh0aGlzLnByb21pc2UuJCRzdGF0ZS5zdGF0dXM9LTEsZC5jYWxsKGIsZVswXSxlWzFdLHRoaXMubm90aWZ5KSk6KHRoaXMucHJvbWlzZS4kJHN0YXRlLnZhbHVlPWIsdGhpcy5wcm9taXNlLiQkc3RhdGUuc3RhdHVzPTEsZih0aGlzLnByb21pc2UuJCRzdGF0ZSkpfWNhdGNoKGcpe2VbMV0oZyksYShnKX19LHJlamVjdDpmdW5jdGlvbihhKXt0aGlzLnByb21pc2UuJCRzdGF0ZS5zdGF0dXN8fFxudGhpcy4kJHJlamVjdChhKX0sJCRyZWplY3Q6ZnVuY3Rpb24oYSl7dGhpcy5wcm9taXNlLiQkc3RhdGUudmFsdWU9YTt0aGlzLnByb21pc2UuJCRzdGF0ZS5zdGF0dXM9MjtmKHRoaXMucHJvbWlzZS4kJHN0YXRlKX0sbm90aWZ5OmZ1bmN0aW9uKGMpe3ZhciBkPXRoaXMucHJvbWlzZS4kJHN0YXRlLnBlbmRpbmc7MD49dGhpcy5wcm9taXNlLiQkc3RhdGUuc3RhdHVzJiZkJiZkLmxlbmd0aCYmYihmdW5jdGlvbigpe2Zvcih2YXIgYixlLGY9MCxnPWQubGVuZ3RoO2Y8ZztmKyspe2U9ZFtmXVswXTtiPWRbZl1bM107dHJ5e2Uubm90aWZ5KEcoYik/YihjKTpjKX1jYXRjaChoKXthKGgpfX19KX19O3ZhciBsPWZ1bmN0aW9uKGEsYil7dmFyIGM9bmV3IGc7Yj9jLnJlc29sdmUoYSk6Yy5yZWplY3QoYSk7cmV0dXJuIGMucHJvbWlzZX0saz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9bnVsbDt0cnl7RyhjKSYmKGQ9YygpKX1jYXRjaChlKXtyZXR1cm4gbChlLCExKX1yZXR1cm4gZCYmRyhkLnRoZW4pP1xuZC50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGwoYSxiKX0sZnVuY3Rpb24oYSl7cmV0dXJuIGwoYSwhMSl9KTpsKGEsYil9LG09ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9bmV3IGc7ZS5yZXNvbHZlKGEpO3JldHVybiBlLnByb21pc2UudGhlbihiLGMsZCl9LG49ZnVuY3Rpb24gdShhKXtpZighRyhhKSl0aHJvdyBoKFwibm9yc2x2clwiLGEpO2lmKCEodGhpcyBpbnN0YW5jZW9mIHUpKXJldHVybiBuZXcgdShhKTt2YXIgYj1uZXcgZzthKGZ1bmN0aW9uKGEpe2IucmVzb2x2ZShhKX0sZnVuY3Rpb24oYSl7Yi5yZWplY3QoYSl9KTtyZXR1cm4gYi5wcm9taXNlfTtuLmRlZmVyPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBnfTtuLnJlamVjdD1mdW5jdGlvbihhKXt2YXIgYj1uZXcgZztiLnJlamVjdChhKTtyZXR1cm4gYi5wcm9taXNlfTtuLndoZW49bTtuLmFsbD1mdW5jdGlvbihhKXt2YXIgYj1uZXcgZyxjPTAsZD1IKGEpP1tdOnt9O3MoYSxmdW5jdGlvbihhLGUpe2MrKzttKGEpLnRoZW4oZnVuY3Rpb24oYSl7ZC5oYXNPd25Qcm9wZXJ0eShlKXx8XG4oZFtlXT1hLC0tY3x8Yi5yZXNvbHZlKGQpKX0sZnVuY3Rpb24oYSl7ZC5oYXNPd25Qcm9wZXJ0eShlKXx8Yi5yZWplY3QoYSl9KX0pOzA9PT1jJiZiLnJlc29sdmUoZCk7cmV0dXJuIGIucHJvbWlzZX07cmV0dXJuIG59ZnVuY3Rpb24gJGUoKXt0aGlzLiRnZXQ9W1wiJHdpbmRvd1wiLFwiJHRpbWVvdXRcIixmdW5jdGlvbihiLGEpe3ZhciBjPWIucmVxdWVzdEFuaW1hdGlvbkZyYW1lfHxiLndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSxkPWIuY2FuY2VsQW5pbWF0aW9uRnJhbWV8fGIud2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWV8fGIud2Via2l0Q2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lLGU9ISFjLGY9ZT9mdW5jdGlvbihhKXt2YXIgYj1jKGEpO3JldHVybiBmdW5jdGlvbigpe2QoYil9fTpmdW5jdGlvbihiKXt2YXIgYz1hKGIsMTYuNjYsITEpO3JldHVybiBmdW5jdGlvbigpe2EuY2FuY2VsKGMpfX07Zi5zdXBwb3J0ZWQ9ZTtyZXR1cm4gZn1dfWZ1bmN0aW9uIFBlKCl7dmFyIGI9XG4xMCxhPVMoXCIkcm9vdFNjb3BlXCIpLGM9bnVsbCxkPW51bGw7dGhpcy5kaWdlc3RUdGw9ZnVuY3Rpb24oYSl7YXJndW1lbnRzLmxlbmd0aCYmKGI9YSk7cmV0dXJuIGJ9O3RoaXMuJGdldD1bXCIkaW5qZWN0b3JcIixcIiRleGNlcHRpb25IYW5kbGVyXCIsXCIkcGFyc2VcIixcIiRicm93c2VyXCIsZnVuY3Rpb24oZSxmLGcsaCl7ZnVuY3Rpb24gbCgpe3RoaXMuJGlkPSsrb2I7dGhpcy4kJHBoYXNlPXRoaXMuJHBhcmVudD10aGlzLiQkd2F0Y2hlcnM9dGhpcy4kJG5leHRTaWJsaW5nPXRoaXMuJCRwcmV2U2libGluZz10aGlzLiQkY2hpbGRIZWFkPXRoaXMuJCRjaGlsZFRhaWw9bnVsbDt0aGlzLiRyb290PXRoaXM7dGhpcy4kJGRlc3Ryb3llZD0hMTt0aGlzLiQkbGlzdGVuZXJzPXt9O3RoaXMuJCRsaXN0ZW5lckNvdW50PXt9O3RoaXMuJCRpc29sYXRlQmluZGluZ3M9bnVsbH1mdW5jdGlvbiBrKGIpe2lmKHIuJCRwaGFzZSl0aHJvdyBhKFwiaW5wcm9nXCIsci4kJHBoYXNlKTtyLiQkcGhhc2U9Yn1mdW5jdGlvbiBtKGEsXG5iLGMpe2RvIGEuJCRsaXN0ZW5lckNvdW50W2NdLT1iLDA9PT1hLiQkbGlzdGVuZXJDb3VudFtjXSYmZGVsZXRlIGEuJCRsaXN0ZW5lckNvdW50W2NdO3doaWxlKGE9YS4kcGFyZW50KX1mdW5jdGlvbiBuKCl7fWZ1bmN0aW9uIHEoKXtmb3IoO3YubGVuZ3RoOyl0cnl7di5zaGlmdCgpKCl9Y2F0Y2goYSl7ZihhKX1kPW51bGx9ZnVuY3Rpb24gdSgpe251bGw9PT1kJiYoZD1oLmRlZmVyKGZ1bmN0aW9uKCl7ci4kYXBwbHkocSl9KSl9bC5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOmwsJG5ldzpmdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoKXtkLiQkZGVzdHJveWVkPSEwfXZhciBkO2I9Ynx8dGhpczthPyhkPW5ldyBsLGQuJHJvb3Q9dGhpcy4kcm9vdCk6KHRoaXMuJCRDaGlsZFNjb3BlfHwodGhpcy4kJENoaWxkU2NvcGU9ZnVuY3Rpb24oKXt0aGlzLiQkd2F0Y2hlcnM9dGhpcy4kJG5leHRTaWJsaW5nPXRoaXMuJCRjaGlsZEhlYWQ9dGhpcy4kJGNoaWxkVGFpbD1udWxsO3RoaXMuJCRsaXN0ZW5lcnM9XG57fTt0aGlzLiQkbGlzdGVuZXJDb3VudD17fTt0aGlzLiRpZD0rK29iO3RoaXMuJCRDaGlsZFNjb3BlPW51bGx9LHRoaXMuJCRDaGlsZFNjb3BlLnByb3RvdHlwZT10aGlzKSxkPW5ldyB0aGlzLiQkQ2hpbGRTY29wZSk7ZC4kcGFyZW50PWI7ZC4kJHByZXZTaWJsaW5nPWIuJCRjaGlsZFRhaWw7Yi4kJGNoaWxkSGVhZD8oYi4kJGNoaWxkVGFpbC4kJG5leHRTaWJsaW5nPWQsYi4kJGNoaWxkVGFpbD1kKTpiLiQkY2hpbGRIZWFkPWIuJCRjaGlsZFRhaWw9ZDsoYXx8YiE9dGhpcykmJmQuJG9uKFwiJGRlc3Ryb3lcIixjKTtyZXR1cm4gZH0sJHdhdGNoOmZ1bmN0aW9uKGEsYixkKXt2YXIgZT1nKGEpO2lmKGUuJCR3YXRjaERlbGVnYXRlKXJldHVybiBlLiQkd2F0Y2hEZWxlZ2F0ZSh0aGlzLGIsZCxlKTt2YXIgZj10aGlzLiQkd2F0Y2hlcnMsaD17Zm46YixsYXN0Om4sZ2V0OmUsZXhwOmEsZXE6ISFkfTtjPW51bGw7RyhiKXx8KGguZm49eik7Znx8KGY9dGhpcy4kJHdhdGNoZXJzPVtdKTtmLnVuc2hpZnQoaCk7XG5yZXR1cm4gZnVuY3Rpb24oKXtYYShmLGgpO2M9bnVsbH19LCR3YXRjaEdyb3VwOmZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYygpe2g9ITE7bD8obD0hMSxiKGUsZSxnKSk6YihlLGQsZyl9dmFyIGQ9QXJyYXkoYS5sZW5ndGgpLGU9QXJyYXkoYS5sZW5ndGgpLGY9W10sZz10aGlzLGg9ITEsbD0hMDtpZighYS5sZW5ndGgpe3ZhciBrPSEwO2cuJGV2YWxBc3luYyhmdW5jdGlvbigpe2smJmIoZSxlLGcpfSk7cmV0dXJuIGZ1bmN0aW9uKCl7az0hMX19aWYoMT09PWEubGVuZ3RoKXJldHVybiB0aGlzLiR3YXRjaChhWzBdLGZ1bmN0aW9uKGEsYyxmKXtlWzBdPWE7ZFswXT1jO2IoZSxhPT09Yz9lOmQsZil9KTtzKGEsZnVuY3Rpb24oYSxiKXt2YXIgbD1nLiR3YXRjaChhLGZ1bmN0aW9uKGEsZil7ZVtiXT1hO2RbYl09ZjtofHwoaD0hMCxnLiRldmFsQXN5bmMoYykpfSk7Zi5wdXNoKGwpfSk7cmV0dXJuIGZ1bmN0aW9uKCl7Zm9yKDtmLmxlbmd0aDspZi5zaGlmdCgpKCl9fSwkd2F0Y2hDb2xsZWN0aW9uOmZ1bmN0aW9uKGEsXG5iKXtmdW5jdGlvbiBjKGEpe2U9YTt2YXIgYixkLGcsaDtpZighQihlKSl7aWYoSShlKSlpZihUYShlKSlmb3IoZiE9PXEmJihmPXEsdT1mLmxlbmd0aD0wLGsrKyksYT1lLmxlbmd0aCx1IT09YSYmKGsrKyxmLmxlbmd0aD11PWEpLGI9MDtiPGE7YisrKWg9ZltiXSxnPWVbYl0sZD1oIT09aCYmZyE9PWcsZHx8aD09PWd8fChrKyssZltiXT1nKTtlbHNle2YhPT1tJiYoZj1tPXt9LHU9MCxrKyspO2E9MDtmb3IoYiBpbiBlKWUuaGFzT3duUHJvcGVydHkoYikmJihhKyssZz1lW2JdLGg9ZltiXSxiIGluIGY/KGQ9aCE9PWgmJmchPT1nLGR8fGg9PT1nfHwoaysrLGZbYl09ZykpOih1KyssZltiXT1nLGsrKykpO2lmKHU+YSlmb3IoYiBpbiBrKyssZillLmhhc093blByb3BlcnR5KGIpfHwodS0tLGRlbGV0ZSBmW2JdKX1lbHNlIGYhPT1lJiYoZj1lLGsrKyk7cmV0dXJuIGt9fWMuJHN0YXRlZnVsPSEwO3ZhciBkPXRoaXMsZSxmLGgsbD0xPGIubGVuZ3RoLGs9MCxuPWcoYSxjKSxxPVtdLG09XG57fSxwPSEwLHU9MDtyZXR1cm4gdGhpcy4kd2F0Y2gobixmdW5jdGlvbigpe3A/KHA9ITEsYihlLGUsZCkpOmIoZSxoLGQpO2lmKGwpaWYoSShlKSlpZihUYShlKSl7aD1BcnJheShlLmxlbmd0aCk7Zm9yKHZhciBhPTA7YTxlLmxlbmd0aDthKyspaFthXT1lW2FdfWVsc2UgZm9yKGEgaW4gaD17fSxlKXNjLmNhbGwoZSxhKSYmKGhbYV09ZVthXSk7ZWxzZSBoPWV9KX0sJGRpZ2VzdDpmdW5jdGlvbigpe3ZhciBlLGcsbCxtLHUsdixzPWIsdCxXPVtdLHksSjtrKFwiJGRpZ2VzdFwiKTtoLiQkY2hlY2tVcmxDaGFuZ2UoKTt0aGlzPT09ciYmbnVsbCE9PWQmJihoLmRlZmVyLmNhbmNlbChkKSxxKCkpO2M9bnVsbDtkb3t2PSExO2Zvcih0PXRoaXM7UC5sZW5ndGg7KXt0cnl7Sj1QLnNoaWZ0KCksSi5zY29wZS4kZXZhbChKLmV4cHJlc3Npb24sSi5sb2NhbHMpfWNhdGNoKEQpe2YoRCl9Yz1udWxsfWE6ZG97aWYobT10LiQkd2F0Y2hlcnMpZm9yKHU9bS5sZW5ndGg7dS0tOyl0cnl7aWYoZT1tW3VdKWlmKChnPVxuZS5nZXQodCkpIT09KGw9ZS5sYXN0KSYmIShlLmVxP2dhKGcsbCk6XCJudW1iZXJcIj09PXR5cGVvZiBnJiZcIm51bWJlclwiPT09dHlwZW9mIGwmJmlzTmFOKGcpJiZpc05hTihsKSkpdj0hMCxjPWUsZS5sYXN0PWUuZXE/RWEoZyxudWxsKTpnLGUuZm4oZyxsPT09bj9nOmwsdCksNT5zJiYoeT00LXMsV1t5XXx8KFdbeV09W10pLFdbeV0ucHVzaCh7bXNnOkcoZS5leHApP1wiZm46IFwiKyhlLmV4cC5uYW1lfHxlLmV4cC50b1N0cmluZygpKTplLmV4cCxuZXdWYWw6ZyxvbGRWYWw6bH0pKTtlbHNlIGlmKGU9PT1jKXt2PSExO2JyZWFrIGF9fWNhdGNoKEIpe2YoQil9aWYoIShtPXQuJCRjaGlsZEhlYWR8fHQhPT10aGlzJiZ0LiQkbmV4dFNpYmxpbmcpKWZvcig7dCE9PXRoaXMmJiEobT10LiQkbmV4dFNpYmxpbmcpOyl0PXQuJHBhcmVudH13aGlsZSh0PW0pO2lmKCh2fHxQLmxlbmd0aCkmJiFzLS0pdGhyb3cgci4kJHBoYXNlPW51bGwsYShcImluZmRpZ1wiLGIsVyk7fXdoaWxlKHZ8fFAubGVuZ3RoKTtcbmZvcihyLiQkcGhhc2U9bnVsbDtwLmxlbmd0aDspdHJ5e3Auc2hpZnQoKSgpfWNhdGNoKGRhKXtmKGRhKX19LCRkZXN0cm95OmZ1bmN0aW9uKCl7aWYoIXRoaXMuJCRkZXN0cm95ZWQpe3ZhciBhPXRoaXMuJHBhcmVudDt0aGlzLiRicm9hZGNhc3QoXCIkZGVzdHJveVwiKTt0aGlzLiQkZGVzdHJveWVkPSEwO2lmKHRoaXMhPT1yKXtmb3IodmFyIGIgaW4gdGhpcy4kJGxpc3RlbmVyQ291bnQpbSh0aGlzLHRoaXMuJCRsaXN0ZW5lckNvdW50W2JdLGIpO2EuJCRjaGlsZEhlYWQ9PXRoaXMmJihhLiQkY2hpbGRIZWFkPXRoaXMuJCRuZXh0U2libGluZyk7YS4kJGNoaWxkVGFpbD09dGhpcyYmKGEuJCRjaGlsZFRhaWw9dGhpcy4kJHByZXZTaWJsaW5nKTt0aGlzLiQkcHJldlNpYmxpbmcmJih0aGlzLiQkcHJldlNpYmxpbmcuJCRuZXh0U2libGluZz10aGlzLiQkbmV4dFNpYmxpbmcpO3RoaXMuJCRuZXh0U2libGluZyYmKHRoaXMuJCRuZXh0U2libGluZy4kJHByZXZTaWJsaW5nPXRoaXMuJCRwcmV2U2libGluZyk7XG50aGlzLiRkZXN0cm95PXRoaXMuJGRpZ2VzdD10aGlzLiRhcHBseT10aGlzLiRldmFsQXN5bmM9dGhpcy4kYXBwbHlBc3luYz16O3RoaXMuJG9uPXRoaXMuJHdhdGNoPXRoaXMuJHdhdGNoR3JvdXA9ZnVuY3Rpb24oKXtyZXR1cm4gen07dGhpcy4kJGxpc3RlbmVycz17fTt0aGlzLiRwYXJlbnQ9dGhpcy4kJG5leHRTaWJsaW5nPXRoaXMuJCRwcmV2U2libGluZz10aGlzLiQkY2hpbGRIZWFkPXRoaXMuJCRjaGlsZFRhaWw9dGhpcy4kcm9vdD10aGlzLiQkd2F0Y2hlcnM9bnVsbH19fSwkZXZhbDpmdW5jdGlvbihhLGIpe3JldHVybiBnKGEpKHRoaXMsYil9LCRldmFsQXN5bmM6ZnVuY3Rpb24oYSxiKXtyLiQkcGhhc2V8fFAubGVuZ3RofHxoLmRlZmVyKGZ1bmN0aW9uKCl7UC5sZW5ndGgmJnIuJGRpZ2VzdCgpfSk7UC5wdXNoKHtzY29wZTp0aGlzLGV4cHJlc3Npb246YSxsb2NhbHM6Yn0pfSwkJHBvc3REaWdlc3Q6ZnVuY3Rpb24oYSl7cC5wdXNoKGEpfSwkYXBwbHk6ZnVuY3Rpb24oYSl7dHJ5e3JldHVybiBrKFwiJGFwcGx5XCIpLFxudGhpcy4kZXZhbChhKX1jYXRjaChiKXtmKGIpfWZpbmFsbHl7ci4kJHBoYXNlPW51bGw7dHJ5e3IuJGRpZ2VzdCgpfWNhdGNoKGMpe3Rocm93IGYoYyksYzt9fX0sJGFwcGx5QXN5bmM6ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe2MuJGV2YWwoYSl9dmFyIGM9dGhpczthJiZ2LnB1c2goYik7dSgpfSwkb246ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLiQkbGlzdGVuZXJzW2FdO2N8fCh0aGlzLiQkbGlzdGVuZXJzW2FdPWM9W10pO2MucHVzaChiKTt2YXIgZD10aGlzO2RvIGQuJCRsaXN0ZW5lckNvdW50W2FdfHwoZC4kJGxpc3RlbmVyQ291bnRbYV09MCksZC4kJGxpc3RlbmVyQ291bnRbYV0rKzt3aGlsZShkPWQuJHBhcmVudCk7dmFyIGU9dGhpcztyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZD1jLmluZGV4T2YoYik7LTEhPT1kJiYoY1tkXT1udWxsLG0oZSwxLGEpKX19LCRlbWl0OmZ1bmN0aW9uKGEsYil7dmFyIGM9W10sZCxlPXRoaXMsZz0hMSxoPXtuYW1lOmEsdGFyZ2V0U2NvcGU6ZSxcbnN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe2c9ITB9LHByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7aC5kZWZhdWx0UHJldmVudGVkPSEwfSxkZWZhdWx0UHJldmVudGVkOiExfSxsPVlhKFtoXSxhcmd1bWVudHMsMSksayxtO2Rve2Q9ZS4kJGxpc3RlbmVyc1thXXx8YztoLmN1cnJlbnRTY29wZT1lO2s9MDtmb3IobT1kLmxlbmd0aDtrPG07aysrKWlmKGRba10pdHJ5e2Rba10uYXBwbHkobnVsbCxsKX1jYXRjaChuKXtmKG4pfWVsc2UgZC5zcGxpY2UoaywxKSxrLS0sbS0tO2lmKGcpcmV0dXJuIGguY3VycmVudFNjb3BlPW51bGwsaDtlPWUuJHBhcmVudH13aGlsZShlKTtoLmN1cnJlbnRTY29wZT1udWxsO3JldHVybiBofSwkYnJvYWRjYXN0OmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcyxkPXRoaXMsZT17bmFtZTphLHRhcmdldFNjb3BlOnRoaXMscHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXtlLmRlZmF1bHRQcmV2ZW50ZWQ9ITB9LGRlZmF1bHRQcmV2ZW50ZWQ6ITF9O2lmKCF0aGlzLiQkbGlzdGVuZXJDb3VudFthXSlyZXR1cm4gZTtcbmZvcih2YXIgZz1ZYShbZV0sYXJndW1lbnRzLDEpLGgsbDtjPWQ7KXtlLmN1cnJlbnRTY29wZT1jO2Q9Yy4kJGxpc3RlbmVyc1thXXx8W107aD0wO2ZvcihsPWQubGVuZ3RoO2g8bDtoKyspaWYoZFtoXSl0cnl7ZFtoXS5hcHBseShudWxsLGcpfWNhdGNoKGspe2Yoayl9ZWxzZSBkLnNwbGljZShoLDEpLGgtLSxsLS07aWYoIShkPWMuJCRsaXN0ZW5lckNvdW50W2FdJiZjLiQkY2hpbGRIZWFkfHxjIT09dGhpcyYmYy4kJG5leHRTaWJsaW5nKSlmb3IoO2MhPT10aGlzJiYhKGQ9Yy4kJG5leHRTaWJsaW5nKTspYz1jLiRwYXJlbnR9ZS5jdXJyZW50U2NvcGU9bnVsbDtyZXR1cm4gZX19O3ZhciByPW5ldyBsLFA9ci4kJGFzeW5jUXVldWU9W10scD1yLiQkcG9zdERpZ2VzdFF1ZXVlPVtdLHY9ci4kJGFwcGx5QXN5bmNRdWV1ZT1bXTtyZXR1cm4gcn1dfWZ1bmN0aW9uIFNkKCl7dmFyIGI9L15cXHMqKGh0dHBzP3xmdHB8bWFpbHRvfHRlbHxmaWxlKTovLGE9L15cXHMqKChodHRwcz98ZnRwfGZpbGV8YmxvYik6fGRhdGE6aW1hZ2VcXC8pLztcbnRoaXMuYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3Q9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk/KGI9YSx0aGlzKTpifTt0aGlzLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdD1mdW5jdGlvbihiKXtyZXR1cm4geShiKT8oYT1iLHRoaXMpOmF9O3RoaXMuJGdldD1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihjLGQpe3ZhciBlPWQ/YTpiLGY7Zj1CYShjKS5ocmVmO3JldHVyblwiXCI9PT1mfHxmLm1hdGNoKGUpP2M6XCJ1bnNhZmU6XCIrZn19fWZ1bmN0aW9uIENmKGIpe2lmKFwic2VsZlwiPT09YilyZXR1cm4gYjtpZihGKGIpKXtpZigtMTxiLmluZGV4T2YoXCIqKipcIikpdGhyb3cgQ2EoXCJpd2NhcmRcIixiKTtiPWdkKGIpLnJlcGxhY2UoXCJcXFxcKlxcXFwqXCIsXCIuKlwiKS5yZXBsYWNlKFwiXFxcXCpcIixcIlteOi8uPyY7XSpcIik7cmV0dXJuIG5ldyBSZWdFeHAoXCJeXCIrYitcIiRcIil9aWYocGIoYikpcmV0dXJuIG5ldyBSZWdFeHAoXCJeXCIrYi5zb3VyY2UrXCIkXCIpO3Rocm93IENhKFwiaW1hdGNoZXJcIik7fWZ1bmN0aW9uIGhkKGIpe3ZhciBhPVxuW107eShiKSYmcyhiLGZ1bmN0aW9uKGIpe2EucHVzaChDZihiKSl9KTtyZXR1cm4gYX1mdW5jdGlvbiBUZSgpe3RoaXMuU0NFX0NPTlRFWFRTPW5hO3ZhciBiPVtcInNlbGZcIl0sYT1bXTt0aGlzLnJlc291cmNlVXJsV2hpdGVsaXN0PWZ1bmN0aW9uKGEpe2FyZ3VtZW50cy5sZW5ndGgmJihiPWhkKGEpKTtyZXR1cm4gYn07dGhpcy5yZXNvdXJjZVVybEJsYWNrbGlzdD1mdW5jdGlvbihiKXthcmd1bWVudHMubGVuZ3RoJiYoYT1oZChiKSk7cmV0dXJuIGF9O3RoaXMuJGdldD1bXCIkaW5qZWN0b3JcIixmdW5jdGlvbihjKXtmdW5jdGlvbiBkKGEsYil7cmV0dXJuXCJzZWxmXCI9PT1hPyRjKGIpOiEhYS5leGVjKGIuaHJlZil9ZnVuY3Rpb24gZShhKXt2YXIgYj1mdW5jdGlvbihhKXt0aGlzLiQkdW53cmFwVHJ1c3RlZFZhbHVlPWZ1bmN0aW9uKCl7cmV0dXJuIGF9fTthJiYoYi5wcm90b3R5cGU9bmV3IGEpO2IucHJvdG90eXBlLnZhbHVlT2Y9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kJHVud3JhcFRydXN0ZWRWYWx1ZSgpfTtcbmIucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJCR1bndyYXBUcnVzdGVkVmFsdWUoKS50b1N0cmluZygpfTtyZXR1cm4gYn12YXIgZj1mdW5jdGlvbihhKXt0aHJvdyBDYShcInVuc2FmZVwiKTt9O2MuaGFzKFwiJHNhbml0aXplXCIpJiYoZj1jLmdldChcIiRzYW5pdGl6ZVwiKSk7dmFyIGc9ZSgpLGg9e307aFtuYS5IVE1MXT1lKGcpO2hbbmEuQ1NTXT1lKGcpO2hbbmEuVVJMXT1lKGcpO2hbbmEuSlNdPWUoZyk7aFtuYS5SRVNPVVJDRV9VUkxdPWUoaFtuYS5VUkxdKTtyZXR1cm57dHJ1c3RBczpmdW5jdGlvbihhLGIpe3ZhciBjPWguaGFzT3duUHJvcGVydHkoYSk/aFthXTpudWxsO2lmKCFjKXRocm93IENhKFwiaWNvbnRleHRcIixhLGIpO2lmKG51bGw9PT1ifHxiPT09dHx8XCJcIj09PWIpcmV0dXJuIGI7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBiKXRocm93IENhKFwiaXR5cGVcIixhKTtyZXR1cm4gbmV3IGMoYil9LGdldFRydXN0ZWQ6ZnVuY3Rpb24oYyxlKXtpZihudWxsPT09XG5lfHxlPT09dHx8XCJcIj09PWUpcmV0dXJuIGU7dmFyIGc9aC5oYXNPd25Qcm9wZXJ0eShjKT9oW2NdOm51bGw7aWYoZyYmZSBpbnN0YW5jZW9mIGcpcmV0dXJuIGUuJCR1bndyYXBUcnVzdGVkVmFsdWUoKTtpZihjPT09bmEuUkVTT1VSQ0VfVVJMKXt2YXIgZz1CYShlLnRvU3RyaW5nKCkpLG4scSx1PSExO249MDtmb3IocT1iLmxlbmd0aDtuPHE7bisrKWlmKGQoYltuXSxnKSl7dT0hMDticmVha31pZih1KWZvcihuPTAscT1hLmxlbmd0aDtuPHE7bisrKWlmKGQoYVtuXSxnKSl7dT0hMTticmVha31pZih1KXJldHVybiBlO3Rocm93IENhKFwiaW5zZWN1cmxcIixlLnRvU3RyaW5nKCkpO31pZihjPT09bmEuSFRNTClyZXR1cm4gZihlKTt0aHJvdyBDYShcInVuc2FmZVwiKTt9LHZhbHVlT2Y6ZnVuY3Rpb24oYSl7cmV0dXJuIGEgaW5zdGFuY2VvZiBnP2EuJCR1bndyYXBUcnVzdGVkVmFsdWUoKTphfX19XX1mdW5jdGlvbiBTZSgpe3ZhciBiPSEwO3RoaXMuZW5hYmxlZD1mdW5jdGlvbihhKXthcmd1bWVudHMubGVuZ3RoJiZcbihiPSEhYSk7cmV0dXJuIGJ9O3RoaXMuJGdldD1bXCIkcGFyc2VcIixcIiRzY2VEZWxlZ2F0ZVwiLGZ1bmN0aW9uKGEsYyl7aWYoYiYmOD5SYSl0aHJvdyBDYShcImllcXVpcmtzXCIpO3ZhciBkPXJhKG5hKTtkLmlzRW5hYmxlZD1mdW5jdGlvbigpe3JldHVybiBifTtkLnRydXN0QXM9Yy50cnVzdEFzO2QuZ2V0VHJ1c3RlZD1jLmdldFRydXN0ZWQ7ZC52YWx1ZU9mPWMudmFsdWVPZjtifHwoZC50cnVzdEFzPWQuZ2V0VHJ1c3RlZD1mdW5jdGlvbihhLGIpe3JldHVybiBifSxkLnZhbHVlT2Y9cGEpO2QucGFyc2VBcz1mdW5jdGlvbihiLGMpe3ZhciBlPWEoYyk7cmV0dXJuIGUubGl0ZXJhbCYmZS5jb25zdGFudD9lOmEoYyxmdW5jdGlvbihhKXtyZXR1cm4gZC5nZXRUcnVzdGVkKGIsYSl9KX07dmFyIGU9ZC5wYXJzZUFzLGY9ZC5nZXRUcnVzdGVkLGc9ZC50cnVzdEFzO3MobmEsZnVuY3Rpb24oYSxiKXt2YXIgYz1RKGIpO2RbZGIoXCJwYXJzZV9hc19cIitjKV09ZnVuY3Rpb24oYil7cmV0dXJuIGUoYSxcbmIpfTtkW2RiKFwiZ2V0X3RydXN0ZWRfXCIrYyldPWZ1bmN0aW9uKGIpe3JldHVybiBmKGEsYil9O2RbZGIoXCJ0cnVzdF9hc19cIitjKV09ZnVuY3Rpb24oYil7cmV0dXJuIGcoYSxiKX19KTtyZXR1cm4gZH1dfWZ1bmN0aW9uIFVlKCl7dGhpcy4kZ2V0PVtcIiR3aW5kb3dcIixcIiRkb2N1bWVudFwiLGZ1bmN0aW9uKGIsYSl7dmFyIGM9e30sZD1iYSgoL2FuZHJvaWQgKFxcZCspLy5leGVjKFEoKGIubmF2aWdhdG9yfHx7fSkudXNlckFnZW50KSl8fFtdKVsxXSksZT0vQm94ZWUvaS50ZXN0KChiLm5hdmlnYXRvcnx8e30pLnVzZXJBZ2VudCksZj1hWzBdfHx7fSxnLGg9L14oTW96fHdlYmtpdHxtcykoPz1bQS1aXSkvLGw9Zi5ib2R5JiZmLmJvZHkuc3R5bGUsaz0hMSxtPSExO2lmKGwpe2Zvcih2YXIgbiBpbiBsKWlmKGs9aC5leGVjKG4pKXtnPWtbMF07Zz1nLnN1YnN0cigwLDEpLnRvVXBwZXJDYXNlKCkrZy5zdWJzdHIoMSk7YnJlYWt9Z3x8KGc9XCJXZWJraXRPcGFjaXR5XCJpbiBsJiZcIndlYmtpdFwiKTtcbms9ISEoXCJ0cmFuc2l0aW9uXCJpbiBsfHxnK1wiVHJhbnNpdGlvblwiaW4gbCk7bT0hIShcImFuaW1hdGlvblwiaW4gbHx8ZytcIkFuaW1hdGlvblwiaW4gbCk7IWR8fGsmJm18fChrPUYoZi5ib2R5LnN0eWxlLndlYmtpdFRyYW5zaXRpb24pLG09RihmLmJvZHkuc3R5bGUud2Via2l0QW5pbWF0aW9uKSl9cmV0dXJue2hpc3Rvcnk6ISghYi5oaXN0b3J5fHwhYi5oaXN0b3J5LnB1c2hTdGF0ZXx8ND5kfHxlKSxoYXNFdmVudDpmdW5jdGlvbihhKXtpZihcImlucHV0XCI9PT1hJiYxMT49UmEpcmV0dXJuITE7aWYoQihjW2FdKSl7dmFyIGI9Zi5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2NbYV09XCJvblwiK2EgaW4gYn1yZXR1cm4gY1thXX0sY3NwOmJiKCksdmVuZG9yUHJlZml4OmcsdHJhbnNpdGlvbnM6ayxhbmltYXRpb25zOm0sYW5kcm9pZDpkfX1dfWZ1bmN0aW9uIFdlKCl7dGhpcy4kZ2V0PVtcIiR0ZW1wbGF0ZUNhY2hlXCIsXCIkaHR0cFwiLFwiJHFcIixmdW5jdGlvbihiLGEsYyl7ZnVuY3Rpb24gZChlLGYpe2QudG90YWxQZW5kaW5nUmVxdWVzdHMrKztcbnZhciBnPWEuZGVmYXVsdHMmJmEuZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2U7SChnKT9nPWcuZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVybiBhIT09WmJ9KTpnPT09WmImJihnPW51bGwpO3JldHVybiBhLmdldChlLHtjYWNoZTpiLHRyYW5zZm9ybVJlc3BvbnNlOmd9KS5maW5hbGx5KGZ1bmN0aW9uKCl7ZC50b3RhbFBlbmRpbmdSZXF1ZXN0cy0tfSkudGhlbihmdW5jdGlvbihhKXtyZXR1cm4gYS5kYXRhfSxmdW5jdGlvbihhKXtpZighZil0aHJvdyBqYShcInRwbG9hZFwiLGUpO3JldHVybiBjLnJlamVjdChhKX0pfWQudG90YWxQZW5kaW5nUmVxdWVzdHM9MDtyZXR1cm4gZH1dfWZ1bmN0aW9uIFhlKCl7dGhpcy4kZ2V0PVtcIiRyb290U2NvcGVcIixcIiRicm93c2VyXCIsXCIkbG9jYXRpb25cIixmdW5jdGlvbihiLGEsYyl7cmV0dXJue2ZpbmRCaW5kaW5nczpmdW5jdGlvbihhLGIsYyl7YT1hLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJuZy1iaW5kaW5nXCIpO3ZhciBnPVtdO3MoYSxmdW5jdGlvbihhKXt2YXIgZD1cbmNhLmVsZW1lbnQoYSkuZGF0YShcIiRiaW5kaW5nXCIpO2QmJnMoZCxmdW5jdGlvbihkKXtjPyhuZXcgUmVnRXhwKFwiKF58XFxcXHMpXCIrZ2QoYikrXCIoXFxcXHN8XFxcXHx8JClcIikpLnRlc3QoZCkmJmcucHVzaChhKTotMSE9ZC5pbmRleE9mKGIpJiZnLnB1c2goYSl9KX0pO3JldHVybiBnfSxmaW5kTW9kZWxzOmZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGc9W1wibmctXCIsXCJkYXRhLW5nLVwiLFwibmdcXFxcOlwiXSxoPTA7aDxnLmxlbmd0aDsrK2gpe3ZhciBsPWEucXVlcnlTZWxlY3RvckFsbChcIltcIitnW2hdK1wibW9kZWxcIisoYz9cIj1cIjpcIio9XCIpKydcIicrYisnXCJdJyk7aWYobC5sZW5ndGgpcmV0dXJuIGx9fSxnZXRMb2NhdGlvbjpmdW5jdGlvbigpe3JldHVybiBjLnVybCgpfSxzZXRMb2NhdGlvbjpmdW5jdGlvbihhKXthIT09Yy51cmwoKSYmKGMudXJsKGEpLGIuJGRpZ2VzdCgpKX0sd2hlblN0YWJsZTpmdW5jdGlvbihiKXthLm5vdGlmeVdoZW5Ob091dHN0YW5kaW5nUmVxdWVzdHMoYil9fX1dfWZ1bmN0aW9uIFllKCl7dGhpcy4kZ2V0PVxuW1wiJHJvb3RTY29wZVwiLFwiJGJyb3dzZXJcIixcIiRxXCIsXCIkJHFcIixcIiRleGNlcHRpb25IYW5kbGVyXCIsZnVuY3Rpb24oYixhLGMsZCxlKXtmdW5jdGlvbiBmKGYsbCxrKXt2YXIgbT15KGspJiYhayxuPShtP2Q6YykuZGVmZXIoKSxxPW4ucHJvbWlzZTtsPWEuZGVmZXIoZnVuY3Rpb24oKXt0cnl7bi5yZXNvbHZlKGYoKSl9Y2F0Y2goYSl7bi5yZWplY3QoYSksZShhKX1maW5hbGx5e2RlbGV0ZSBnW3EuJCR0aW1lb3V0SWRdfW18fGIuJGFwcGx5KCl9LGwpO3EuJCR0aW1lb3V0SWQ9bDtnW2xdPW47cmV0dXJuIHF9dmFyIGc9e307Zi5jYW5jZWw9ZnVuY3Rpb24oYil7cmV0dXJuIGImJmIuJCR0aW1lb3V0SWQgaW4gZz8oZ1tiLiQkdGltZW91dElkXS5yZWplY3QoXCJjYW5jZWxlZFwiKSxkZWxldGUgZ1tiLiQkdGltZW91dElkXSxhLmRlZmVyLmNhbmNlbChiLiQkdGltZW91dElkKSk6ITF9O3JldHVybiBmfV19ZnVuY3Rpb24gQmEoYil7UmEmJihaLnNldEF0dHJpYnV0ZShcImhyZWZcIixiKSxiPVouaHJlZik7XG5aLnNldEF0dHJpYnV0ZShcImhyZWZcIixiKTtyZXR1cm57aHJlZjpaLmhyZWYscHJvdG9jb2w6Wi5wcm90b2NvbD9aLnByb3RvY29sLnJlcGxhY2UoLzokLyxcIlwiKTpcIlwiLGhvc3Q6Wi5ob3N0LHNlYXJjaDpaLnNlYXJjaD9aLnNlYXJjaC5yZXBsYWNlKC9eXFw/LyxcIlwiKTpcIlwiLGhhc2g6Wi5oYXNoP1ouaGFzaC5yZXBsYWNlKC9eIy8sXCJcIik6XCJcIixob3N0bmFtZTpaLmhvc3RuYW1lLHBvcnQ6Wi5wb3J0LHBhdGhuYW1lOlwiL1wiPT09Wi5wYXRobmFtZS5jaGFyQXQoMCk/Wi5wYXRobmFtZTpcIi9cIitaLnBhdGhuYW1lfX1mdW5jdGlvbiAkYyhiKXtiPUYoYik/QmEoYik6YjtyZXR1cm4gYi5wcm90b2NvbD09PWlkLnByb3RvY29sJiZiLmhvc3Q9PT1pZC5ob3N0fWZ1bmN0aW9uIFplKCl7dGhpcy4kZ2V0PWVhKE0pfWZ1bmN0aW9uIEVjKGIpe2Z1bmN0aW9uIGEoYyxkKXtpZihJKGMpKXt2YXIgZT17fTtzKGMsZnVuY3Rpb24oYixjKXtlW2NdPWEoYyxiKX0pO3JldHVybiBlfXJldHVybiBiLmZhY3RvcnkoYytcblwiRmlsdGVyXCIsZCl9dGhpcy5yZWdpc3Rlcj1hO3RoaXMuJGdldD1bXCIkaW5qZWN0b3JcIixmdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIGEuZ2V0KGIrXCJGaWx0ZXJcIil9fV07YShcImN1cnJlbmN5XCIsamQpO2EoXCJkYXRlXCIsa2QpO2EoXCJmaWx0ZXJcIixEZik7YShcImpzb25cIixFZik7YShcImxpbWl0VG9cIixGZik7YShcImxvd2VyY2FzZVwiLEdmKTthKFwibnVtYmVyXCIsbGQpO2EoXCJvcmRlckJ5XCIsbWQpO2EoXCJ1cHBlcmNhc2VcIixIZil9ZnVuY3Rpb24gRGYoKXtyZXR1cm4gZnVuY3Rpb24oYixhLGMpe2lmKCFIKGIpKXJldHVybiBiO3ZhciBkO3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImZ1bmN0aW9uXCI6YnJlYWs7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcInN0cmluZ1wiOmQ9ITA7Y2FzZSBcIm9iamVjdFwiOmE9SWYoYSxjLGQpO2JyZWFrO2RlZmF1bHQ6cmV0dXJuIGJ9cmV0dXJuIGIuZmlsdGVyKGEpfX1mdW5jdGlvbiBJZihiLGEsYyl7dmFyIGQ9SShiKSYmXCIkXCJpblxuYjshMD09PWE/YT1nYTpHKGEpfHwoYT1mdW5jdGlvbihhLGIpe2lmKEkoYSl8fEkoYikpcmV0dXJuITE7YT1RKFwiXCIrYSk7Yj1RKFwiXCIrYik7cmV0dXJuLTEhPT1hLmluZGV4T2YoYil9KTtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGQmJiFJKGUpP0lhKGUsYi4kLGEsITEpOklhKGUsYixhLGMpfX1mdW5jdGlvbiBJYShiLGEsYyxkLGUpe3ZhciBmPXR5cGVvZiBiLGc9dHlwZW9mIGE7aWYoXCJzdHJpbmdcIj09PWcmJlwiIVwiPT09YS5jaGFyQXQoMCkpcmV0dXJuIUlhKGIsYS5zdWJzdHJpbmcoMSksYyxkKTtpZihIKGIpKXJldHVybiBiLnNvbWUoZnVuY3Rpb24oYil7cmV0dXJuIElhKGIsYSxjLGQpfSk7c3dpdGNoKGYpe2Nhc2UgXCJvYmplY3RcIjp2YXIgaDtpZihkKXtmb3IoaCBpbiBiKWlmKFwiJFwiIT09aC5jaGFyQXQoMCkmJklhKGJbaF0sYSxjLCEwKSlyZXR1cm4hMDtyZXR1cm4gZT8hMTpJYShiLGEsYywhMSl9aWYoXCJvYmplY3RcIj09PWcpe2ZvcihoIGluIGEpaWYoZT1hW2hdLCFHKGUpJiZcbihmPVwiJFwiPT09aCwhSWEoZj9iOmJbaF0sZSxjLGYsZikpKXJldHVybiExO3JldHVybiEwfXJldHVybiBjKGIsYSk7Y2FzZSBcImZ1bmN0aW9uXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4gYyhiLGEpfX1mdW5jdGlvbiBqZChiKXt2YXIgYT1iLk5VTUJFUl9GT1JNQVRTO3JldHVybiBmdW5jdGlvbihiLGQsZSl7QihkKSYmKGQ9YS5DVVJSRU5DWV9TWU0pO0IoZSkmJihlPWEuUEFUVEVSTlNbMV0ubWF4RnJhYyk7cmV0dXJuIG51bGw9PWI/YjpuZChiLGEuUEFUVEVSTlNbMV0sYS5HUk9VUF9TRVAsYS5ERUNJTUFMX1NFUCxlKS5yZXBsYWNlKC9cXHUwMEE0L2csZCl9fWZ1bmN0aW9uIGxkKGIpe3ZhciBhPWIuTlVNQkVSX0ZPUk1BVFM7cmV0dXJuIGZ1bmN0aW9uKGIsZCl7cmV0dXJuIG51bGw9PWI/YjpuZChiLGEuUEFUVEVSTlNbMF0sYS5HUk9VUF9TRVAsYS5ERUNJTUFMX1NFUCxkKX19ZnVuY3Rpb24gbmQoYixhLGMsZCxlKXtpZighaXNGaW5pdGUoYil8fEkoYikpcmV0dXJuXCJcIjt2YXIgZj1cbjA+YjtiPU1hdGguYWJzKGIpO3ZhciBnPWIrXCJcIixoPVwiXCIsbD1bXSxrPSExO2lmKC0xIT09Zy5pbmRleE9mKFwiZVwiKSl7dmFyIG09Zy5tYXRjaCgvKFtcXGRcXC5dKyllKC0/KShcXGQrKS8pO20mJlwiLVwiPT1tWzJdJiZtWzNdPmUrMT9iPTA6KGg9ZyxrPSEwKX1pZihrKTA8ZSYmMT5iJiYoaD1iLnRvRml4ZWQoZSksYj1wYXJzZUZsb2F0KGgpKTtlbHNle2c9KGcuc3BsaXQob2QpWzFdfHxcIlwiKS5sZW5ndGg7QihlKSYmKGU9TWF0aC5taW4oTWF0aC5tYXgoYS5taW5GcmFjLGcpLGEubWF4RnJhYykpO2I9KyhNYXRoLnJvdW5kKCsoYi50b1N0cmluZygpK1wiZVwiK2UpKS50b1N0cmluZygpK1wiZVwiKy1lKTt2YXIgZz0oXCJcIitiKS5zcGxpdChvZCksaz1nWzBdLGc9Z1sxXXx8XCJcIixuPTAscT1hLmxnU2l6ZSx1PWEuZ1NpemU7aWYoay5sZW5ndGg+PXErdSlmb3Iobj1rLmxlbmd0aC1xLG09MDttPG47bSsrKTA9PT0obi1tKSV1JiYwIT09bSYmKGgrPWMpLGgrPWsuY2hhckF0KG0pO2ZvcihtPW47bTxrLmxlbmd0aDttKyspMD09PVxuKGsubGVuZ3RoLW0pJXEmJjAhPT1tJiYoaCs9YyksaCs9ay5jaGFyQXQobSk7Zm9yKDtnLmxlbmd0aDxlOylnKz1cIjBcIjtlJiZcIjBcIiE9PWUmJihoKz1kK2cuc3Vic3RyKDAsZSkpfTA9PT1iJiYoZj0hMSk7bC5wdXNoKGY/YS5uZWdQcmU6YS5wb3NQcmUsaCxmP2EubmVnU3VmOmEucG9zU3VmKTtyZXR1cm4gbC5qb2luKFwiXCIpfWZ1bmN0aW9uIEpiKGIsYSxjKXt2YXIgZD1cIlwiOzA+YiYmKGQ9XCItXCIsYj0tYik7Zm9yKGI9XCJcIitiO2IubGVuZ3RoPGE7KWI9XCIwXCIrYjtjJiYoYj1iLnN1YnN0cihiLmxlbmd0aC1hKSk7cmV0dXJuIGQrYn1mdW5jdGlvbiAkKGIsYSxjLGQpe2M9Y3x8MDtyZXR1cm4gZnVuY3Rpb24oZSl7ZT1lW1wiZ2V0XCIrYl0oKTtpZigwPGN8fGU+LWMpZSs9YzswPT09ZSYmLTEyPT1jJiYoZT0xMik7cmV0dXJuIEpiKGUsYSxkKX19ZnVuY3Rpb24gS2IoYixhKXtyZXR1cm4gZnVuY3Rpb24oYyxkKXt2YXIgZT1jW1wiZ2V0XCIrYl0oKSxmPXZiKGE/XCJTSE9SVFwiK2I6Yik7cmV0dXJuIGRbZl1bZV19fVxuZnVuY3Rpb24gcGQoYil7dmFyIGE9KG5ldyBEYXRlKGIsMCwxKSkuZ2V0RGF5KCk7cmV0dXJuIG5ldyBEYXRlKGIsMCwoND49YT81OjEyKS1hKX1mdW5jdGlvbiBxZChiKXtyZXR1cm4gZnVuY3Rpb24oYSl7dmFyIGM9cGQoYS5nZXRGdWxsWWVhcigpKTthPStuZXcgRGF0ZShhLmdldEZ1bGxZZWFyKCksYS5nZXRNb250aCgpLGEuZ2V0RGF0ZSgpKyg0LWEuZ2V0RGF5KCkpKS0rYzthPTErTWF0aC5yb3VuZChhLzYwNDhFNSk7cmV0dXJuIEpiKGEsYil9fWZ1bmN0aW9uIGtkKGIpe2Z1bmN0aW9uIGEoYSl7dmFyIGI7aWYoYj1hLm1hdGNoKGMpKXthPW5ldyBEYXRlKDApO3ZhciBmPTAsZz0wLGg9Yls4XT9hLnNldFVUQ0Z1bGxZZWFyOmEuc2V0RnVsbFllYXIsbD1iWzhdP2Euc2V0VVRDSG91cnM6YS5zZXRIb3VycztiWzldJiYoZj1iYShiWzldK2JbMTBdKSxnPWJhKGJbOV0rYlsxMV0pKTtoLmNhbGwoYSxiYShiWzFdKSxiYShiWzJdKS0xLGJhKGJbM10pKTtmPWJhKGJbNF18fDApLWY7XG5nPWJhKGJbNV18fDApLWc7aD1iYShiWzZdfHwwKTtiPU1hdGgucm91bmQoMUUzKnBhcnNlRmxvYXQoXCIwLlwiKyhiWzddfHwwKSkpO2wuY2FsbChhLGYsZyxoLGIpfXJldHVybiBhfXZhciBjPS9eKFxcZHs0fSktPyhcXGRcXGQpLT8oXFxkXFxkKSg/OlQoXFxkXFxkKSg/Ojo/KFxcZFxcZCkoPzo6PyhcXGRcXGQpKD86XFwuKFxcZCspKT8pPyk/KFp8KFsrLV0pKFxcZFxcZCk6PyhcXGRcXGQpKT8pPyQvO3JldHVybiBmdW5jdGlvbihjLGUsZil7dmFyIGc9XCJcIixoPVtdLGwsaztlPWV8fFwibWVkaXVtRGF0ZVwiO2U9Yi5EQVRFVElNRV9GT1JNQVRTW2VdfHxlO0YoYykmJihjPUpmLnRlc3QoYyk/YmEoYyk6YShjKSk7VihjKSYmKGM9bmV3IERhdGUoYykpO2lmKCFxYShjKSlyZXR1cm4gYztmb3IoO2U7KShrPUtmLmV4ZWMoZSkpPyhoPVlhKGgsaywxKSxlPWgucG9wKCkpOihoLnB1c2goZSksZT1udWxsKTtmJiZcIlVUQ1wiPT09ZiYmKGM9bmV3IERhdGUoYy5nZXRUaW1lKCkpLGMuc2V0TWludXRlcyhjLmdldE1pbnV0ZXMoKStcbmMuZ2V0VGltZXpvbmVPZmZzZXQoKSkpO3MoaCxmdW5jdGlvbihhKXtsPUxmW2FdO2crPWw/bChjLGIuREFURVRJTUVfRk9STUFUUyk6YS5yZXBsYWNlKC8oXid8JyQpL2csXCJcIikucmVwbGFjZSgvJycvZyxcIidcIil9KTtyZXR1cm4gZ319ZnVuY3Rpb24gRWYoKXtyZXR1cm4gZnVuY3Rpb24oYixhKXtCKGEpJiYoYT0yKTtyZXR1cm4gJGEoYixhKX19ZnVuY3Rpb24gRmYoKXtyZXR1cm4gZnVuY3Rpb24oYixhKXtWKGIpJiYoYj1iLnRvU3RyaW5nKCkpO3JldHVybiBIKGIpfHxGKGIpPyhhPUluZmluaXR5PT09TWF0aC5hYnMoTnVtYmVyKGEpKT9OdW1iZXIoYSk6YmEoYSkpPzA8YT9iLnNsaWNlKDAsYSk6Yi5zbGljZShhKTpGKGIpP1wiXCI6W106Yn19ZnVuY3Rpb24gbWQoYil7cmV0dXJuIGZ1bmN0aW9uKGEsYyxkKXtmdW5jdGlvbiBlKGEsYil7cmV0dXJuIGI/ZnVuY3Rpb24oYixjKXtyZXR1cm4gYShjLGIpfTphfWZ1bmN0aW9uIGYoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwibnVtYmVyXCI6Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwic3RyaW5nXCI6cmV0dXJuITA7XG5kZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBnKGEpe3JldHVybiBudWxsPT09YT9cIm51bGxcIjpcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS52YWx1ZU9mJiYoYT1hLnZhbHVlT2YoKSxmKGEpKXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGEudG9TdHJpbmcmJihhPWEudG9TdHJpbmcoKSxmKGEpKT9hOlwiXCJ9ZnVuY3Rpb24gaChhLGIpe3ZhciBjPXR5cGVvZiBhLGQ9dHlwZW9mIGI7Yz09PWQmJlwib2JqZWN0XCI9PT1jJiYoYT1nKGEpLGI9ZyhiKSk7cmV0dXJuIGM9PT1kPyhcInN0cmluZ1wiPT09YyYmKGE9YS50b0xvd2VyQ2FzZSgpLGI9Yi50b0xvd2VyQ2FzZSgpKSxhPT09Yj8wOmE8Yj8tMToxKTpjPGQ/LTE6MX1pZighVGEoYSkpcmV0dXJuIGE7Yz1IKGMpP2M6W2NdOzA9PT1jLmxlbmd0aCYmKGM9W1wiK1wiXSk7Yz1jLm1hcChmdW5jdGlvbihhKXt2YXIgYz0hMSxkPWF8fHBhO2lmKEYoYSkpe2lmKFwiK1wiPT1hLmNoYXJBdCgwKXx8XCItXCI9PWEuY2hhckF0KDApKWM9XCItXCI9PWEuY2hhckF0KDApLGE9YS5zdWJzdHJpbmcoMSk7XG5pZihcIlwiPT09YSlyZXR1cm4gZShoLGMpO2Q9YihhKTtpZihkLmNvbnN0YW50KXt2YXIgZj1kKCk7cmV0dXJuIGUoZnVuY3Rpb24oYSxiKXtyZXR1cm4gaChhW2ZdLGJbZl0pfSxjKX19cmV0dXJuIGUoZnVuY3Rpb24oYSxiKXtyZXR1cm4gaChkKGEpLGQoYikpfSxjKX0pO3JldHVybiBaYS5jYWxsKGEpLnNvcnQoZShmdW5jdGlvbihhLGIpe2Zvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdKGEsYik7aWYoMCE9PWUpcmV0dXJuIGV9cmV0dXJuIDB9LGQpKX19ZnVuY3Rpb24gSmEoYil7RyhiKSYmKGI9e2xpbms6Yn0pO2IucmVzdHJpY3Q9Yi5yZXN0cmljdHx8XCJBQ1wiO3JldHVybiBlYShiKX1mdW5jdGlvbiByZChiLGEsYyxkLGUpe3ZhciBmPXRoaXMsZz1bXSxoPWYuJCRwYXJlbnRGb3JtPWIucGFyZW50KCkuY29udHJvbGxlcihcImZvcm1cIil8fExiO2YuJGVycm9yPXt9O2YuJCRzdWNjZXNzPXt9O2YuJHBlbmRpbmc9dDtmLiRuYW1lPWUoYS5uYW1lfHxhLm5nRm9ybXx8XG5cIlwiKShjKTtmLiRkaXJ0eT0hMTtmLiRwcmlzdGluZT0hMDtmLiR2YWxpZD0hMDtmLiRpbnZhbGlkPSExO2YuJHN1Ym1pdHRlZD0hMTtoLiRhZGRDb250cm9sKGYpO2YuJHJvbGxiYWNrVmlld1ZhbHVlPWZ1bmN0aW9uKCl7cyhnLGZ1bmN0aW9uKGEpe2EuJHJvbGxiYWNrVmlld1ZhbHVlKCl9KX07Zi4kY29tbWl0Vmlld1ZhbHVlPWZ1bmN0aW9uKCl7cyhnLGZ1bmN0aW9uKGEpe2EuJGNvbW1pdFZpZXdWYWx1ZSgpfSl9O2YuJGFkZENvbnRyb2w9ZnVuY3Rpb24oYSl7TWEoYS4kbmFtZSxcImlucHV0XCIpO2cucHVzaChhKTthLiRuYW1lJiYoZlthLiRuYW1lXT1hKX07Zi4kJHJlbmFtZUNvbnRyb2w9ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLiRuYW1lO2ZbY109PT1hJiZkZWxldGUgZltjXTtmW2JdPWE7YS4kbmFtZT1ifTtmLiRyZW1vdmVDb250cm9sPWZ1bmN0aW9uKGEpe2EuJG5hbWUmJmZbYS4kbmFtZV09PT1hJiZkZWxldGUgZlthLiRuYW1lXTtzKGYuJHBlbmRpbmcsZnVuY3Rpb24oYixjKXtmLiRzZXRWYWxpZGl0eShjLFxubnVsbCxhKX0pO3MoZi4kZXJyb3IsZnVuY3Rpb24oYixjKXtmLiRzZXRWYWxpZGl0eShjLG51bGwsYSl9KTtzKGYuJCRzdWNjZXNzLGZ1bmN0aW9uKGIsYyl7Zi4kc2V0VmFsaWRpdHkoYyxudWxsLGEpfSk7WGEoZyxhKX07c2Qoe2N0cmw6dGhpcywkZWxlbWVudDpiLHNldDpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9YVtiXTtkPy0xPT09ZC5pbmRleE9mKGMpJiZkLnB1c2goYyk6YVtiXT1bY119LHVuc2V0OmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1hW2JdO2QmJihYYShkLGMpLDA9PT1kLmxlbmd0aCYmZGVsZXRlIGFbYl0pfSxwYXJlbnRGb3JtOmgsJGFuaW1hdGU6ZH0pO2YuJHNldERpcnR5PWZ1bmN0aW9uKCl7ZC5yZW1vdmVDbGFzcyhiLFNhKTtkLmFkZENsYXNzKGIsTWIpO2YuJGRpcnR5PSEwO2YuJHByaXN0aW5lPSExO2guJHNldERpcnR5KCl9O2YuJHNldFByaXN0aW5lPWZ1bmN0aW9uKCl7ZC5zZXRDbGFzcyhiLFNhLE1iK1wiIG5nLXN1Ym1pdHRlZFwiKTtmLiRkaXJ0eT0hMTtmLiRwcmlzdGluZT1cbiEwO2YuJHN1Ym1pdHRlZD0hMTtzKGcsZnVuY3Rpb24oYSl7YS4kc2V0UHJpc3RpbmUoKX0pfTtmLiRzZXRVbnRvdWNoZWQ9ZnVuY3Rpb24oKXtzKGcsZnVuY3Rpb24oYSl7YS4kc2V0VW50b3VjaGVkKCl9KX07Zi4kc2V0U3VibWl0dGVkPWZ1bmN0aW9uKCl7ZC5hZGRDbGFzcyhiLFwibmctc3VibWl0dGVkXCIpO2YuJHN1Ym1pdHRlZD0hMDtoLiRzZXRTdWJtaXR0ZWQoKX19ZnVuY3Rpb24gaWMoYil7Yi4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKGEpe3JldHVybiBiLiRpc0VtcHR5KGEpP2E6YS50b1N0cmluZygpfSl9ZnVuY3Rpb24gamIoYixhLGMsZCxlLGYpe3ZhciBnPVEoYVswXS50eXBlKTtpZighZS5hbmRyb2lkKXt2YXIgaD0hMTthLm9uKFwiY29tcG9zaXRpb25zdGFydFwiLGZ1bmN0aW9uKGEpe2g9ITB9KTthLm9uKFwiY29tcG9zaXRpb25lbmRcIixmdW5jdGlvbigpe2g9ITE7bCgpfSl9dmFyIGw9ZnVuY3Rpb24oYil7ayYmKGYuZGVmZXIuY2FuY2VsKGspLGs9bnVsbCk7aWYoIWgpe3ZhciBlPVxuYS52YWwoKTtiPWImJmIudHlwZTtcInBhc3N3b3JkXCI9PT1nfHxjLm5nVHJpbSYmXCJmYWxzZVwiPT09Yy5uZ1RyaW18fChlPVUoZSkpOyhkLiR2aWV3VmFsdWUhPT1lfHxcIlwiPT09ZSYmZC4kJGhhc05hdGl2ZVZhbGlkYXRvcnMpJiZkLiRzZXRWaWV3VmFsdWUoZSxiKX19O2lmKGUuaGFzRXZlbnQoXCJpbnB1dFwiKSlhLm9uKFwiaW5wdXRcIixsKTtlbHNle3ZhciBrLG09ZnVuY3Rpb24oYSxiLGMpe2t8fChrPWYuZGVmZXIoZnVuY3Rpb24oKXtrPW51bGw7YiYmYi52YWx1ZT09PWN8fGwoYSl9KSl9O2Eub24oXCJrZXlkb3duXCIsZnVuY3Rpb24oYSl7dmFyIGI9YS5rZXlDb2RlOzkxPT09Ynx8MTU8YiYmMTk+Ynx8Mzc8PWImJjQwPj1ifHxtKGEsdGhpcyx0aGlzLnZhbHVlKX0pO2lmKGUuaGFzRXZlbnQoXCJwYXN0ZVwiKSlhLm9uKFwicGFzdGUgY3V0XCIsbSl9YS5vbihcImNoYW5nZVwiLGwpO2QuJHJlbmRlcj1mdW5jdGlvbigpe2EudmFsKGQuJGlzRW1wdHkoZC4kdmlld1ZhbHVlKT9cIlwiOmQuJHZpZXdWYWx1ZSl9fVxuZnVuY3Rpb24gTmIoYixhKXtyZXR1cm4gZnVuY3Rpb24oYyxkKXt2YXIgZSxmO2lmKHFhKGMpKXJldHVybiBjO2lmKEYoYykpeydcIic9PWMuY2hhckF0KDApJiYnXCInPT1jLmNoYXJBdChjLmxlbmd0aC0xKSYmKGM9Yy5zdWJzdHJpbmcoMSxjLmxlbmd0aC0xKSk7aWYoTWYudGVzdChjKSlyZXR1cm4gbmV3IERhdGUoYyk7Yi5sYXN0SW5kZXg9MDtpZihlPWIuZXhlYyhjKSlyZXR1cm4gZS5zaGlmdCgpLGY9ZD97eXl5eTpkLmdldEZ1bGxZZWFyKCksTU06ZC5nZXRNb250aCgpKzEsZGQ6ZC5nZXREYXRlKCksSEg6ZC5nZXRIb3VycygpLG1tOmQuZ2V0TWludXRlcygpLHNzOmQuZ2V0U2Vjb25kcygpLHNzczpkLmdldE1pbGxpc2Vjb25kcygpLzFFM306e3l5eXk6MTk3MCxNTToxLGRkOjEsSEg6MCxtbTowLHNzOjAsc3NzOjB9LHMoZSxmdW5jdGlvbihiLGMpe2M8YS5sZW5ndGgmJihmW2FbY11dPStiKX0pLG5ldyBEYXRlKGYueXl5eSxmLk1NLTEsZi5kZCxmLkhILGYubW0sZi5zc3x8MCxcbjFFMypmLnNzc3x8MCl9cmV0dXJuIE5hTn19ZnVuY3Rpb24ga2IoYixhLGMsZCl7cmV0dXJuIGZ1bmN0aW9uKGUsZixnLGgsbCxrLG0pe2Z1bmN0aW9uIG4oYSl7cmV0dXJuIGEmJiEoYS5nZXRUaW1lJiZhLmdldFRpbWUoKSE9PWEuZ2V0VGltZSgpKX1mdW5jdGlvbiBxKGEpe3JldHVybiB5KGEpP3FhKGEpP2E6YyhhKTp0fXRkKGUsZixnLGgpO2piKGUsZixnLGgsbCxrKTt2YXIgdT1oJiZoLiRvcHRpb25zJiZoLiRvcHRpb25zLnRpbWV6b25lLHI7aC4kJHBhcnNlck5hbWU9YjtoLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24oYil7cmV0dXJuIGguJGlzRW1wdHkoYik/bnVsbDphLnRlc3QoYik/KGI9YyhiLHIpLFwiVVRDXCI9PT11JiZiLnNldE1pbnV0ZXMoYi5nZXRNaW51dGVzKCktYi5nZXRUaW1lem9uZU9mZnNldCgpKSxiKTp0fSk7aC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKGEpe2lmKGEmJiFxYShhKSl0aHJvdyBPYihcImRhdGVmbXRcIixhKTtpZihuKGEpKXtpZigocj1hKSYmXCJVVENcIj09PVxudSl7dmFyIGI9NkU0KnIuZ2V0VGltZXpvbmVPZmZzZXQoKTtyPW5ldyBEYXRlKHIuZ2V0VGltZSgpK2IpfXJldHVybiBtKFwiZGF0ZVwiKShhLGQsdSl9cj1udWxsO3JldHVyblwiXCJ9KTtpZih5KGcubWluKXx8Zy5uZ01pbil7dmFyIHM7aC4kdmFsaWRhdG9ycy5taW49ZnVuY3Rpb24oYSl7cmV0dXJuIW4oYSl8fEIocyl8fGMoYSk+PXN9O2cuJG9ic2VydmUoXCJtaW5cIixmdW5jdGlvbihhKXtzPXEoYSk7aC4kdmFsaWRhdGUoKX0pfWlmKHkoZy5tYXgpfHxnLm5nTWF4KXt2YXIgcDtoLiR2YWxpZGF0b3JzLm1heD1mdW5jdGlvbihhKXtyZXR1cm4hbihhKXx8QihwKXx8YyhhKTw9cH07Zy4kb2JzZXJ2ZShcIm1heFwiLGZ1bmN0aW9uKGEpe3A9cShhKTtoLiR2YWxpZGF0ZSgpfSl9fX1mdW5jdGlvbiB0ZChiLGEsYyxkKXsoZC4kJGhhc05hdGl2ZVZhbGlkYXRvcnM9SShhWzBdLnZhbGlkaXR5KSkmJmQuJHBhcnNlcnMucHVzaChmdW5jdGlvbihiKXt2YXIgYz1hLnByb3AoXCJ2YWxpZGl0eVwiKXx8e307XG5yZXR1cm4gYy5iYWRJbnB1dCYmIWMudHlwZU1pc21hdGNoP3Q6Yn0pfWZ1bmN0aW9uIHVkKGIsYSxjLGQsZSl7aWYoeShkKSl7Yj1iKGQpO2lmKCFiLmNvbnN0YW50KXRocm93IFMoXCJuZ01vZGVsXCIpKFwiY29uc3RleHByXCIsYyxkKTtyZXR1cm4gYihhKX1yZXR1cm4gZX1mdW5jdGlvbiBqYyhiLGEpe2I9XCJuZ0NsYXNzXCIrYjtyZXR1cm5bXCIkYW5pbWF0ZVwiLGZ1bmN0aW9uKGMpe2Z1bmN0aW9uIGQoYSxiKXt2YXIgYz1bXSxkPTA7YTpmb3IoO2Q8YS5sZW5ndGg7ZCsrKXtmb3IodmFyIGU9YVtkXSxtPTA7bTxiLmxlbmd0aDttKyspaWYoZT09YlttXSljb250aW51ZSBhO2MucHVzaChlKX1yZXR1cm4gY31mdW5jdGlvbiBlKGEpe2lmKCFIKGEpKXtpZihGKGEpKXJldHVybiBhLnNwbGl0KFwiIFwiKTtpZihJKGEpKXt2YXIgYj1bXTtzKGEsZnVuY3Rpb24oYSxjKXthJiYoYj1iLmNvbmNhdChjLnNwbGl0KFwiIFwiKSkpfSk7cmV0dXJuIGJ9fXJldHVybiBhfXJldHVybntyZXN0cmljdDpcIkFDXCIsbGluazpmdW5jdGlvbihmLFxuZyxoKXtmdW5jdGlvbiBsKGEsYil7dmFyIGM9Zy5kYXRhKFwiJGNsYXNzQ291bnRzXCIpfHx7fSxkPVtdO3MoYSxmdW5jdGlvbihhKXtpZigwPGJ8fGNbYV0pY1thXT0oY1thXXx8MCkrYixjW2FdPT09KygwPGIpJiZkLnB1c2goYSl9KTtnLmRhdGEoXCIkY2xhc3NDb3VudHNcIixjKTtyZXR1cm4gZC5qb2luKFwiIFwiKX1mdW5jdGlvbiBrKGIpe2lmKCEwPT09YXx8Zi4kaW5kZXglMj09PWEpe3ZhciBrPWUoYnx8W10pO2lmKCFtKXt2YXIgdT1sKGssMSk7aC4kYWRkQ2xhc3ModSl9ZWxzZSBpZighZ2EoYixtKSl7dmFyIHI9ZShtKSx1PWQoayxyKSxrPWQocixrKSx1PWwodSwxKSxrPWwoaywtMSk7dSYmdS5sZW5ndGgmJmMuYWRkQ2xhc3MoZyx1KTtrJiZrLmxlbmd0aCYmYy5yZW1vdmVDbGFzcyhnLGspfX1tPXJhKGIpfXZhciBtO2YuJHdhdGNoKGhbYl0saywhMCk7aC4kb2JzZXJ2ZShcImNsYXNzXCIsZnVuY3Rpb24oYSl7ayhmLiRldmFsKGhbYl0pKX0pO1wibmdDbGFzc1wiIT09YiYmZi4kd2F0Y2goXCIkaW5kZXhcIixcbmZ1bmN0aW9uKGMsZCl7dmFyIGc9YyYxO2lmKGchPT0oZCYxKSl7dmFyIGs9ZShmLiRldmFsKGhbYl0pKTtnPT09YT8oZz1sKGssMSksaC4kYWRkQ2xhc3MoZykpOihnPWwoaywtMSksaC4kcmVtb3ZlQ2xhc3MoZykpfX0pfX19XX1mdW5jdGlvbiBzZChiKXtmdW5jdGlvbiBhKGEsYil7YiYmIWZbYV0/KGsuYWRkQ2xhc3MoZSxhKSxmW2FdPSEwKTohYiYmZlthXSYmKGsucmVtb3ZlQ2xhc3MoZSxhKSxmW2FdPSExKX1mdW5jdGlvbiBjKGIsYyl7Yj1iP1wiLVwiK3VjKGIsXCItXCIpOlwiXCI7YShsYitiLCEwPT09Yyk7YSh2ZCtiLCExPT09Yyl9dmFyIGQ9Yi5jdHJsLGU9Yi4kZWxlbWVudCxmPXt9LGc9Yi5zZXQsaD1iLnVuc2V0LGw9Yi5wYXJlbnRGb3JtLGs9Yi4kYW5pbWF0ZTtmW3ZkXT0hKGZbbGJdPWUuaGFzQ2xhc3MobGIpKTtkLiRzZXRWYWxpZGl0eT1mdW5jdGlvbihiLGUsZil7ZT09PXQ/KGQuJHBlbmRpbmd8fChkLiRwZW5kaW5nPXt9KSxnKGQuJHBlbmRpbmcsYixmKSk6KGQuJHBlbmRpbmcmJlxuaChkLiRwZW5kaW5nLGIsZiksd2QoZC4kcGVuZGluZykmJihkLiRwZW5kaW5nPXQpKTtXYShlKT9lPyhoKGQuJGVycm9yLGIsZiksZyhkLiQkc3VjY2VzcyxiLGYpKTooZyhkLiRlcnJvcixiLGYpLGgoZC4kJHN1Y2Nlc3MsYixmKSk6KGgoZC4kZXJyb3IsYixmKSxoKGQuJCRzdWNjZXNzLGIsZikpO2QuJHBlbmRpbmc/KGEoeGQsITApLGQuJHZhbGlkPWQuJGludmFsaWQ9dCxjKFwiXCIsbnVsbCkpOihhKHhkLCExKSxkLiR2YWxpZD13ZChkLiRlcnJvciksZC4kaW52YWxpZD0hZC4kdmFsaWQsYyhcIlwiLGQuJHZhbGlkKSk7ZT1kLiRwZW5kaW5nJiZkLiRwZW5kaW5nW2JdP3Q6ZC4kZXJyb3JbYl0/ITE6ZC4kJHN1Y2Nlc3NbYl0/ITA6bnVsbDtjKGIsZSk7bC4kc2V0VmFsaWRpdHkoYixlLGQpfX1mdW5jdGlvbiB3ZChiKXtpZihiKWZvcih2YXIgYSBpbiBiKXJldHVybiExO3JldHVybiEwfXZhciBOZj0vXlxcLyguKylcXC8oW2Etel0qKSQvLFE9ZnVuY3Rpb24oYil7cmV0dXJuIEYoYik/Yi50b0xvd2VyQ2FzZSgpOlxuYn0sc2M9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSx2Yj1mdW5jdGlvbihiKXtyZXR1cm4gRihiKT9iLnRvVXBwZXJDYXNlKCk6Yn0sUmEsRCxzYSxaYT1bXS5zbGljZSxwZj1bXS5zcGxpY2UsT2Y9W10ucHVzaCxEYT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLEthPVMoXCJuZ1wiKSxjYT1NLmFuZ3VsYXJ8fChNLmFuZ3VsYXI9e30pLGNiLG9iPTA7UmE9WS5kb2N1bWVudE1vZGU7ei4kaW5qZWN0PVtdO3BhLiRpbmplY3Q9W107dmFyIEg9QXJyYXkuaXNBcnJheSxVPWZ1bmN0aW9uKGIpe3JldHVybiBGKGIpP2IudHJpbSgpOmJ9LGdkPWZ1bmN0aW9uKGIpe3JldHVybiBiLnJlcGxhY2UoLyhbLSgpXFxbXFxde30rPyouJFxcXnwsOiM8IVxcXFxdKS9nLFwiXFxcXCQxXCIpLnJlcGxhY2UoL1xceDA4L2csXCJcXFxceDA4XCIpfSxiYj1mdW5jdGlvbigpe2lmKHkoYmIuaXNBY3RpdmVfKSlyZXR1cm4gYmIuaXNBY3RpdmVfO3ZhciBiPSEoIVkucXVlcnlTZWxlY3RvcihcIltuZy1jc3BdXCIpJiYhWS5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtbmctY3NwXVwiKSk7XG5pZighYil0cnl7bmV3IEZ1bmN0aW9uKFwiXCIpfWNhdGNoKGEpe2I9ITB9cmV0dXJuIGJiLmlzQWN0aXZlXz1ifSxzYj1bXCJuZy1cIixcImRhdGEtbmctXCIsXCJuZzpcIixcIngtbmctXCJdLE1kPS9bQS1aXS9nLHZjPSExLFJiLG9hPTEscWI9MyxRZD17ZnVsbDpcIjEuMy4xM1wiLG1ham9yOjEsbWlub3I6Myxkb3Q6MTMsY29kZU5hbWU6XCJtZXRpY3Vsb3VzLXJpZmZsZXNodWZmbGVcIn07Ui5leHBhbmRvPVwibmczMzlcIjt2YXIgQWI9Ui5jYWNoZT17fSxoZj0xO1IuX2RhdGE9ZnVuY3Rpb24oYil7cmV0dXJuIHRoaXMuY2FjaGVbYlt0aGlzLmV4cGFuZG9dXXx8e319O3ZhciBjZj0vKFtcXDpcXC1cXF9dKyguKSkvZyxkZj0vXm1veihbQS1aXSkvLFBmPXttb3VzZWxlYXZlOlwibW91c2VvdXRcIixtb3VzZWVudGVyOlwibW91c2VvdmVyXCJ9LFViPVMoXCJqcUxpdGVcIiksZ2Y9L148KFxcdyspXFxzKlxcLz8+KD86PFxcL1xcMT58KSQvLFRiPS88fCYjP1xcdys7LyxlZj0vPChbXFx3Ol0rKS8sZmY9LzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW1xcdzpdKylbXj5dKilcXC8+L2dpLFxuaWE9e29wdGlvbjpbMSwnPHNlbGVjdCBtdWx0aXBsZT1cIm11bHRpcGxlXCI+JyxcIjwvc2VsZWN0PlwiXSx0aGVhZDpbMSxcIjx0YWJsZT5cIixcIjwvdGFibGU+XCJdLGNvbDpbMixcIjx0YWJsZT48Y29sZ3JvdXA+XCIsXCI8L2NvbGdyb3VwPjwvdGFibGU+XCJdLHRyOlsyLFwiPHRhYmxlPjx0Ym9keT5cIixcIjwvdGJvZHk+PC90YWJsZT5cIl0sdGQ6WzMsXCI8dGFibGU+PHRib2R5Pjx0cj5cIixcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiXSxfZGVmYXVsdDpbMCxcIlwiLFwiXCJdfTtpYS5vcHRncm91cD1pYS5vcHRpb247aWEudGJvZHk9aWEudGZvb3Q9aWEuY29sZ3JvdXA9aWEuY2FwdGlvbj1pYS50aGVhZDtpYS50aD1pYS50ZDt2YXIgTGE9Ui5wcm90b3R5cGU9e3JlYWR5OmZ1bmN0aW9uKGIpe2Z1bmN0aW9uIGEoKXtjfHwoYz0hMCxiKCkpfXZhciBjPSExO1wiY29tcGxldGVcIj09PVkucmVhZHlTdGF0ZT9zZXRUaW1lb3V0KGEpOih0aGlzLm9uKFwiRE9NQ29udGVudExvYWRlZFwiLGEpLFIoTSkub24oXCJsb2FkXCIsYSkpfSxcbnRvU3RyaW5nOmZ1bmN0aW9uKCl7dmFyIGI9W107cyh0aGlzLGZ1bmN0aW9uKGEpe2IucHVzaChcIlwiK2EpfSk7cmV0dXJuXCJbXCIrYi5qb2luKFwiLCBcIikrXCJdXCJ9LGVxOmZ1bmN0aW9uKGIpe3JldHVybiAwPD1iP0QodGhpc1tiXSk6RCh0aGlzW3RoaXMubGVuZ3RoK2JdKX0sbGVuZ3RoOjAscHVzaDpPZixzb3J0OltdLnNvcnQsc3BsaWNlOltdLnNwbGljZX0sRmI9e307cyhcIm11bHRpcGxlIHNlbGVjdGVkIGNoZWNrZWQgZGlzYWJsZWQgcmVhZE9ubHkgcmVxdWlyZWQgb3BlblwiLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihiKXtGYltRKGIpXT1ifSk7dmFyIE5jPXt9O3MoXCJpbnB1dCBzZWxlY3Qgb3B0aW9uIHRleHRhcmVhIGJ1dHRvbiBmb3JtIGRldGFpbHNcIi5zcGxpdChcIiBcIiksZnVuY3Rpb24oYil7TmNbYl09ITB9KTt2YXIgT2M9e25nTWlubGVuZ3RoOlwibWlubGVuZ3RoXCIsbmdNYXhsZW5ndGg6XCJtYXhsZW5ndGhcIixuZ01pbjpcIm1pblwiLG5nTWF4OlwibWF4XCIsbmdQYXR0ZXJuOlwicGF0dGVyblwifTtcbnMoe2RhdGE6V2IscmVtb3ZlRGF0YTp5Yn0sZnVuY3Rpb24oYixhKXtSW2FdPWJ9KTtzKHtkYXRhOldiLGluaGVyaXRlZERhdGE6RWIsc2NvcGU6ZnVuY3Rpb24oYil7cmV0dXJuIEQuZGF0YShiLFwiJHNjb3BlXCIpfHxFYihiLnBhcmVudE5vZGV8fGIsW1wiJGlzb2xhdGVTY29wZVwiLFwiJHNjb3BlXCJdKX0saXNvbGF0ZVNjb3BlOmZ1bmN0aW9uKGIpe3JldHVybiBELmRhdGEoYixcIiRpc29sYXRlU2NvcGVcIil8fEQuZGF0YShiLFwiJGlzb2xhdGVTY29wZU5vVGVtcGxhdGVcIil9LGNvbnRyb2xsZXI6SmMsaW5qZWN0b3I6ZnVuY3Rpb24oYil7cmV0dXJuIEViKGIsXCIkaW5qZWN0b3JcIil9LHJlbW92ZUF0dHI6ZnVuY3Rpb24oYixhKXtiLnJlbW92ZUF0dHJpYnV0ZShhKX0saGFzQ2xhc3M6QmIsY3NzOmZ1bmN0aW9uKGIsYSxjKXthPWRiKGEpO2lmKHkoYykpYi5zdHlsZVthXT1jO2Vsc2UgcmV0dXJuIGIuc3R5bGVbYV19LGF0dHI6ZnVuY3Rpb24oYixhLGMpe3ZhciBkPVEoYSk7aWYoRmJbZF0paWYoeShjKSljP1xuKGJbYV09ITAsYi5zZXRBdHRyaWJ1dGUoYSxkKSk6KGJbYV09ITEsYi5yZW1vdmVBdHRyaWJ1dGUoZCkpO2Vsc2UgcmV0dXJuIGJbYV18fChiLmF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKGEpfHx6KS5zcGVjaWZpZWQ/ZDp0O2Vsc2UgaWYoeShjKSliLnNldEF0dHJpYnV0ZShhLGMpO2Vsc2UgaWYoYi5nZXRBdHRyaWJ1dGUpcmV0dXJuIGI9Yi5nZXRBdHRyaWJ1dGUoYSwyKSxudWxsPT09Yj90OmJ9LHByb3A6ZnVuY3Rpb24oYixhLGMpe2lmKHkoYykpYlthXT1jO2Vsc2UgcmV0dXJuIGJbYV19LHRleHQ6ZnVuY3Rpb24oKXtmdW5jdGlvbiBiKGEsYil7aWYoQihiKSl7dmFyIGQ9YS5ub2RlVHlwZTtyZXR1cm4gZD09PW9hfHxkPT09cWI/YS50ZXh0Q29udGVudDpcIlwifWEudGV4dENvbnRlbnQ9Yn1iLiRkdj1cIlwiO3JldHVybiBifSgpLHZhbDpmdW5jdGlvbihiLGEpe2lmKEIoYSkpe2lmKGIubXVsdGlwbGUmJlwic2VsZWN0XCI9PT11YShiKSl7dmFyIGM9W107cyhiLm9wdGlvbnMsZnVuY3Rpb24oYSl7YS5zZWxlY3RlZCYmXG5jLnB1c2goYS52YWx1ZXx8YS50ZXh0KX0pO3JldHVybiAwPT09Yy5sZW5ndGg/bnVsbDpjfXJldHVybiBiLnZhbHVlfWIudmFsdWU9YX0saHRtbDpmdW5jdGlvbihiLGEpe2lmKEIoYSkpcmV0dXJuIGIuaW5uZXJIVE1MO3hiKGIsITApO2IuaW5uZXJIVE1MPWF9LGVtcHR5OktjfSxmdW5jdGlvbihiLGEpe1IucHJvdG90eXBlW2FdPWZ1bmN0aW9uKGEsZCl7dmFyIGUsZixnPXRoaXMubGVuZ3RoO2lmKGIhPT1LYyYmKDI9PWIubGVuZ3RoJiZiIT09QmImJmIhPT1KYz9hOmQpPT09dCl7aWYoSShhKSl7Zm9yKGU9MDtlPGc7ZSsrKWlmKGI9PT1XYiliKHRoaXNbZV0sYSk7ZWxzZSBmb3IoZiBpbiBhKWIodGhpc1tlXSxmLGFbZl0pO3JldHVybiB0aGlzfWU9Yi4kZHY7Zz1lPT09dD9NYXRoLm1pbihnLDEpOmc7Zm9yKGY9MDtmPGc7ZisrKXt2YXIgaD1iKHRoaXNbZl0sYSxkKTtlPWU/ZStoOmh9cmV0dXJuIGV9Zm9yKGU9MDtlPGc7ZSsrKWIodGhpc1tlXSxhLGQpO3JldHVybiB0aGlzfX0pO1xucyh7cmVtb3ZlRGF0YTp5YixvbjpmdW5jdGlvbiBhKGMsZCxlLGYpe2lmKHkoZikpdGhyb3cgVWIoXCJvbmFyZ3NcIik7aWYoRmMoYykpe3ZhciBnPXpiKGMsITApO2Y9Zy5ldmVudHM7dmFyIGg9Zy5oYW5kbGU7aHx8KGg9Zy5oYW5kbGU9bGYoYyxmKSk7Zm9yKHZhciBnPTA8PWQuaW5kZXhPZihcIiBcIik/ZC5zcGxpdChcIiBcIik6W2RdLGw9Zy5sZW5ndGg7bC0tOyl7ZD1nW2xdO3ZhciBrPWZbZF07a3x8KGZbZF09W10sXCJtb3VzZWVudGVyXCI9PT1kfHxcIm1vdXNlbGVhdmVcIj09PWQ/YShjLFBmW2RdLGZ1bmN0aW9uKGEpe3ZhciBjPWEucmVsYXRlZFRhcmdldDtjJiYoYz09PXRoaXN8fHRoaXMuY29udGFpbnMoYykpfHxoKGEsZCl9KTpcIiRkZXN0cm95XCIhPT1kJiZjLmFkZEV2ZW50TGlzdGVuZXIoZCxoLCExKSxrPWZbZF0pO2sucHVzaChlKX19fSxvZmY6SWMsb25lOmZ1bmN0aW9uKGEsYyxkKXthPUQoYSk7YS5vbihjLGZ1bmN0aW9uIGYoKXthLm9mZihjLGQpO2Eub2ZmKGMsZil9KTthLm9uKGMsXG5kKX0scmVwbGFjZVdpdGg6ZnVuY3Rpb24oYSxjKXt2YXIgZCxlPWEucGFyZW50Tm9kZTt4YihhKTtzKG5ldyBSKGMpLGZ1bmN0aW9uKGMpe2Q/ZS5pbnNlcnRCZWZvcmUoYyxkLm5leHRTaWJsaW5nKTplLnJlcGxhY2VDaGlsZChjLGEpO2Q9Y30pfSxjaGlsZHJlbjpmdW5jdGlvbihhKXt2YXIgYz1bXTtzKGEuY2hpbGROb2RlcyxmdW5jdGlvbihhKXthLm5vZGVUeXBlPT09b2EmJmMucHVzaChhKX0pO3JldHVybiBjfSxjb250ZW50czpmdW5jdGlvbihhKXtyZXR1cm4gYS5jb250ZW50RG9jdW1lbnR8fGEuY2hpbGROb2Rlc3x8W119LGFwcGVuZDpmdW5jdGlvbihhLGMpe3ZhciBkPWEubm9kZVR5cGU7aWYoZD09PW9hfHwxMT09PWQpe2M9bmV3IFIoYyk7Zm9yKHZhciBkPTAsZT1jLmxlbmd0aDtkPGU7ZCsrKWEuYXBwZW5kQ2hpbGQoY1tkXSl9fSxwcmVwZW5kOmZ1bmN0aW9uKGEsYyl7aWYoYS5ub2RlVHlwZT09PW9hKXt2YXIgZD1hLmZpcnN0Q2hpbGQ7cyhuZXcgUihjKSxmdW5jdGlvbihjKXthLmluc2VydEJlZm9yZShjLFxuZCl9KX19LHdyYXA6ZnVuY3Rpb24oYSxjKXtjPUQoYykuZXEoMCkuY2xvbmUoKVswXTt2YXIgZD1hLnBhcmVudE5vZGU7ZCYmZC5yZXBsYWNlQ2hpbGQoYyxhKTtjLmFwcGVuZENoaWxkKGEpfSxyZW1vdmU6TGMsZGV0YWNoOmZ1bmN0aW9uKGEpe0xjKGEsITApfSxhZnRlcjpmdW5jdGlvbihhLGMpe3ZhciBkPWEsZT1hLnBhcmVudE5vZGU7Yz1uZXcgUihjKTtmb3IodmFyIGY9MCxnPWMubGVuZ3RoO2Y8ZztmKyspe3ZhciBoPWNbZl07ZS5pbnNlcnRCZWZvcmUoaCxkLm5leHRTaWJsaW5nKTtkPWh9fSxhZGRDbGFzczpEYixyZW1vdmVDbGFzczpDYix0b2dnbGVDbGFzczpmdW5jdGlvbihhLGMsZCl7YyYmcyhjLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihjKXt2YXIgZj1kO0IoZikmJihmPSFCYihhLGMpKTsoZj9EYjpDYikoYSxjKX0pfSxwYXJlbnQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5wYXJlbnROb2RlKSYmMTEhPT1hLm5vZGVUeXBlP2E6bnVsbH0sbmV4dDpmdW5jdGlvbihhKXtyZXR1cm4gYS5uZXh0RWxlbWVudFNpYmxpbmd9LFxuZmluZDpmdW5jdGlvbihhLGMpe3JldHVybiBhLmdldEVsZW1lbnRzQnlUYWdOYW1lP2EuZ2V0RWxlbWVudHNCeVRhZ05hbWUoYyk6W119LGNsb25lOlZiLHRyaWdnZXJIYW5kbGVyOmZ1bmN0aW9uKGEsYyxkKXt2YXIgZSxmLGc9Yy50eXBlfHxjLGg9emIoYSk7aWYoaD0oaD1oJiZoLmV2ZW50cykmJmhbZ10pZT17cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITB9LGlzRGVmYXVsdFByZXZlbnRlZDpmdW5jdGlvbigpe3JldHVybiEwPT09dGhpcy5kZWZhdWx0UHJldmVudGVkfSxzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt0aGlzLmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZD0hMH0saXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMD09PXRoaXMuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkfSxzdG9wUHJvcGFnYXRpb246eix0eXBlOmcsdGFyZ2V0OmF9LGMudHlwZSYmKGU9eChlLFxuYykpLGM9cmEoaCksZj1kP1tlXS5jb25jYXQoZCk6W2VdLHMoYyxmdW5jdGlvbihjKXtlLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCl8fGMuYXBwbHkoYSxmKX0pfX0sZnVuY3Rpb24oYSxjKXtSLnByb3RvdHlwZVtjXT1mdW5jdGlvbihjLGUsZil7Zm9yKHZhciBnLGg9MCxsPXRoaXMubGVuZ3RoO2g8bDtoKyspQihnKT8oZz1hKHRoaXNbaF0sYyxlLGYpLHkoZykmJihnPUQoZykpKTpIYyhnLGEodGhpc1toXSxjLGUsZikpO3JldHVybiB5KGcpP2c6dGhpc307Ui5wcm90b3R5cGUuYmluZD1SLnByb3RvdHlwZS5vbjtSLnByb3RvdHlwZS51bmJpbmQ9Ui5wcm90b3R5cGUub2ZmfSk7ZWIucHJvdG90eXBlPXtwdXQ6ZnVuY3Rpb24oYSxjKXt0aGlzW05hKGEsdGhpcy5uZXh0VWlkKV09Y30sZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzW05hKGEsdGhpcy5uZXh0VWlkKV19LHJlbW92ZTpmdW5jdGlvbihhKXt2YXIgYz10aGlzW2E9TmEoYSx0aGlzLm5leHRVaWQpXTtkZWxldGUgdGhpc1thXTtcbnJldHVybiBjfX07dmFyIFFjPS9eZnVuY3Rpb25cXHMqW15cXChdKlxcKFxccyooW15cXCldKilcXCkvbSxRZj0vLC8sUmY9L15cXHMqKF8/KShcXFMrPylcXDFcXHMqJC8sUGM9LygoXFwvXFwvLiokKXwoXFwvXFwqW1xcc1xcU10qP1xcKlxcLykpL21nLEdhPVMoXCIkaW5qZWN0b3JcIik7YWIuJCRhbm5vdGF0ZT1mdW5jdGlvbihhLGMsZCl7dmFyIGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpe2lmKCEoZT1hLiRpbmplY3QpKXtlPVtdO2lmKGEubGVuZ3RoKXtpZihjKXRocm93IEYoZCkmJmR8fChkPWEubmFtZXx8bWYoYSkpLEdhKFwic3RyaWN0ZGlcIixkKTtjPWEudG9TdHJpbmcoKS5yZXBsYWNlKFBjLFwiXCIpO2M9Yy5tYXRjaChRYyk7cyhjWzFdLnNwbGl0KFFmKSxmdW5jdGlvbihhKXthLnJlcGxhY2UoUmYsZnVuY3Rpb24oYSxjLGQpe2UucHVzaChkKX0pfSl9YS4kaW5qZWN0PWV9fWVsc2UgSChhKT8oYz1hLmxlbmd0aC0xLHRiKGFbY10sXCJmblwiKSxlPWEuc2xpY2UoMCxjKSk6dGIoYSxcImZuXCIsITApO3JldHVybiBlfTtcbnZhciBTZj1TKFwiJGFuaW1hdGVcIiksQ2U9W1wiJHByb3ZpZGVcIixmdW5jdGlvbihhKXt0aGlzLiQkc2VsZWN0b3JzPXt9O3RoaXMucmVnaXN0ZXI9ZnVuY3Rpb24oYyxkKXt2YXIgZT1jK1wiLWFuaW1hdGlvblwiO2lmKGMmJlwiLlwiIT1jLmNoYXJBdCgwKSl0aHJvdyBTZihcIm5vdGNzZWxcIixjKTt0aGlzLiQkc2VsZWN0b3JzW2Muc3Vic3RyKDEpXT1lO2EuZmFjdG9yeShlLGQpfTt0aGlzLmNsYXNzTmFtZUZpbHRlcj1mdW5jdGlvbihhKXsxPT09YXJndW1lbnRzLmxlbmd0aCYmKHRoaXMuJCRjbGFzc05hbWVGaWx0ZXI9YSBpbnN0YW5jZW9mIFJlZ0V4cD9hOm51bGwpO3JldHVybiB0aGlzLiQkY2xhc3NOYW1lRmlsdGVyfTt0aGlzLiRnZXQ9W1wiJCRxXCIsXCIkJGFzeW5jQ2FsbGJhY2tcIixcIiRyb290U2NvcGVcIixmdW5jdGlvbihhLGQsZSl7ZnVuY3Rpb24gZihkKXt2YXIgZixnPWEuZGVmZXIoKTtnLnByb21pc2UuJCRjYW5jZWxGbj1mdW5jdGlvbigpe2YmJmYoKX07ZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24oKXtmPVxuZChmdW5jdGlvbigpe2cucmVzb2x2ZSgpfSl9KTtyZXR1cm4gZy5wcm9taXNlfWZ1bmN0aW9uIGcoYSxjKXt2YXIgZD1bXSxlPVtdLGY9aGEoKTtzKChhLmF0dHIoXCJjbGFzc1wiKXx8XCJcIikuc3BsaXQoL1xccysvKSxmdW5jdGlvbihhKXtmW2FdPSEwfSk7cyhjLGZ1bmN0aW9uKGEsYyl7dmFyIGc9ZltjXTshMT09PWEmJmc/ZS5wdXNoKGMpOiEwIT09YXx8Z3x8ZC5wdXNoKGMpfSk7cmV0dXJuIDA8ZC5sZW5ndGgrZS5sZW5ndGgmJltkLmxlbmd0aD9kOm51bGwsZS5sZW5ndGg/ZTpudWxsXX1mdW5jdGlvbiBoKGEsYyxkKXtmb3IodmFyIGU9MCxmPWMubGVuZ3RoO2U8ZjsrK2UpYVtjW2VdXT1kfWZ1bmN0aW9uIGwoKXttfHwobT1hLmRlZmVyKCksZChmdW5jdGlvbigpe20ucmVzb2x2ZSgpO209bnVsbH0pKTtyZXR1cm4gbS5wcm9taXNlfWZ1bmN0aW9uIGsoYSxjKXtpZihjYS5pc09iamVjdChjKSl7dmFyIGQ9eChjLmZyb218fHt9LGMudG98fHt9KTthLmNzcyhkKX19dmFyIG07cmV0dXJue2FuaW1hdGU6ZnVuY3Rpb24oYSxcbmMsZCl7ayhhLHtmcm9tOmMsdG86ZH0pO3JldHVybiBsKCl9LGVudGVyOmZ1bmN0aW9uKGEsYyxkLGUpe2soYSxlKTtkP2QuYWZ0ZXIoYSk6Yy5wcmVwZW5kKGEpO3JldHVybiBsKCl9LGxlYXZlOmZ1bmN0aW9uKGEsYyl7YS5yZW1vdmUoKTtyZXR1cm4gbCgpfSxtb3ZlOmZ1bmN0aW9uKGEsYyxkLGUpe3JldHVybiB0aGlzLmVudGVyKGEsYyxkLGUpfSxhZGRDbGFzczpmdW5jdGlvbihhLGMsZCl7cmV0dXJuIHRoaXMuc2V0Q2xhc3MoYSxjLFtdLGQpfSwkJGFkZENsYXNzSW1tZWRpYXRlbHk6ZnVuY3Rpb24oYSxjLGQpe2E9RChhKTtjPUYoYyk/YzpIKGMpP2Muam9pbihcIiBcIik6XCJcIjtzKGEsZnVuY3Rpb24oYSl7RGIoYSxjKX0pO2soYSxkKTtyZXR1cm4gbCgpfSxyZW1vdmVDbGFzczpmdW5jdGlvbihhLGMsZCl7cmV0dXJuIHRoaXMuc2V0Q2xhc3MoYSxbXSxjLGQpfSwkJHJlbW92ZUNsYXNzSW1tZWRpYXRlbHk6ZnVuY3Rpb24oYSxjLGQpe2E9RChhKTtjPUYoYyk/YzpIKGMpP2Muam9pbihcIiBcIik6XG5cIlwiO3MoYSxmdW5jdGlvbihhKXtDYihhLGMpfSk7ayhhLGQpO3JldHVybiBsKCl9LHNldENsYXNzOmZ1bmN0aW9uKGEsYyxkLGUpe3ZhciBrPXRoaXMsbD0hMTthPUQoYSk7dmFyIG09YS5kYXRhKFwiJCRhbmltYXRlQ2xhc3Nlc1wiKTttP2UmJm0ub3B0aW9ucyYmKG0ub3B0aW9ucz1jYS5leHRlbmQobS5vcHRpb25zfHx7fSxlKSk6KG09e2NsYXNzZXM6e30sb3B0aW9uczplfSxsPSEwKTtlPW0uY2xhc3NlcztjPUgoYyk/YzpjLnNwbGl0KFwiIFwiKTtkPUgoZCk/ZDpkLnNwbGl0KFwiIFwiKTtoKGUsYywhMCk7aChlLGQsITEpO2wmJihtLnByb21pc2U9ZihmdW5jdGlvbihjKXt2YXIgZD1hLmRhdGEoXCIkJGFuaW1hdGVDbGFzc2VzXCIpO2EucmVtb3ZlRGF0YShcIiQkYW5pbWF0ZUNsYXNzZXNcIik7aWYoZCl7dmFyIGU9ZyhhLGQuY2xhc3Nlcyk7ZSYmay4kJHNldENsYXNzSW1tZWRpYXRlbHkoYSxlWzBdLGVbMV0sZC5vcHRpb25zKX1jKCl9KSxhLmRhdGEoXCIkJGFuaW1hdGVDbGFzc2VzXCIsbSkpO1xucmV0dXJuIG0ucHJvbWlzZX0sJCRzZXRDbGFzc0ltbWVkaWF0ZWx5OmZ1bmN0aW9uKGEsYyxkLGUpe2MmJnRoaXMuJCRhZGRDbGFzc0ltbWVkaWF0ZWx5KGEsYyk7ZCYmdGhpcy4kJHJlbW92ZUNsYXNzSW1tZWRpYXRlbHkoYSxkKTtrKGEsZSk7cmV0dXJuIGwoKX0sZW5hYmxlZDp6LGNhbmNlbDp6fX1dfV0samE9UyhcIiRjb21waWxlXCIpO3hjLiRpbmplY3Q9W1wiJHByb3ZpZGVcIixcIiQkc2FuaXRpemVVcmlQcm92aWRlclwiXTt2YXIgU2M9L14oKD86eHxkYXRhKVtcXDpcXC1fXSkvaSxxZj1TKFwiJGNvbnRyb2xsZXJcIiksV2M9XCJhcHBsaWNhdGlvbi9qc29uXCIsJGI9e1wiQ29udGVudC1UeXBlXCI6V2MrXCI7Y2hhcnNldD11dGYtOFwifSxzZj0vXlxcW3xeXFx7KD8hXFx7KS8sdGY9e1wiW1wiOi9dJC8sXCJ7XCI6L30kL30scmY9L15cXClcXF1cXH0nLD9cXG4vLGFjPVMoXCIkaW50ZXJwb2xhdGVcIiksVGY9L14oW15cXD8jXSopKFxcPyhbXiNdKikpPygjKC4qKSk/JC8sd2Y9e2h0dHA6ODAsaHR0cHM6NDQzLGZ0cDoyMX0sSGI9XG5TKFwiJGxvY2F0aW9uXCIpLFVmPXskJGh0bWw1OiExLCQkcmVwbGFjZTohMSxhYnNVcmw6SWIoXCIkJGFic1VybFwiKSx1cmw6ZnVuY3Rpb24oYSl7aWYoQihhKSlyZXR1cm4gdGhpcy4kJHVybDt2YXIgYz1UZi5leGVjKGEpOyhjWzFdfHxcIlwiPT09YSkmJnRoaXMucGF0aChkZWNvZGVVUklDb21wb25lbnQoY1sxXSkpOyhjWzJdfHxjWzFdfHxcIlwiPT09YSkmJnRoaXMuc2VhcmNoKGNbM118fFwiXCIpO3RoaXMuaGFzaChjWzVdfHxcIlwiKTtyZXR1cm4gdGhpc30scHJvdG9jb2w6SWIoXCIkJHByb3RvY29sXCIpLGhvc3Q6SWIoXCIkJGhvc3RcIikscG9ydDpJYihcIiQkcG9ydFwiKSxwYXRoOmRkKFwiJCRwYXRoXCIsZnVuY3Rpb24oYSl7YT1udWxsIT09YT9hLnRvU3RyaW5nKCk6XCJcIjtyZXR1cm5cIi9cIj09YS5jaGFyQXQoMCk/YTpcIi9cIithfSksc2VhcmNoOmZ1bmN0aW9uKGEsYyl7c3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpe2Nhc2UgMDpyZXR1cm4gdGhpcy4kJHNlYXJjaDtjYXNlIDE6aWYoRihhKXx8VihhKSlhPVxuYS50b1N0cmluZygpLHRoaXMuJCRzZWFyY2g9cmMoYSk7ZWxzZSBpZihJKGEpKWE9RWEoYSx7fSkscyhhLGZ1bmN0aW9uKGMsZSl7bnVsbD09YyYmZGVsZXRlIGFbZV19KSx0aGlzLiQkc2VhcmNoPWE7ZWxzZSB0aHJvdyBIYihcImlzcmNoYXJnXCIpO2JyZWFrO2RlZmF1bHQ6QihjKXx8bnVsbD09PWM/ZGVsZXRlIHRoaXMuJCRzZWFyY2hbYV06dGhpcy4kJHNlYXJjaFthXT1jfXRoaXMuJCRjb21wb3NlKCk7cmV0dXJuIHRoaXN9LGhhc2g6ZGQoXCIkJGhhc2hcIixmdW5jdGlvbihhKXtyZXR1cm4gbnVsbCE9PWE/YS50b1N0cmluZygpOlwiXCJ9KSxyZXBsYWNlOmZ1bmN0aW9uKCl7dGhpcy4kJHJlcGxhY2U9ITA7cmV0dXJuIHRoaXN9fTtzKFtjZCxlYyxkY10sZnVuY3Rpb24oYSl7YS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShVZik7YS5wcm90b3R5cGUuc3RhdGU9ZnVuY3Rpb24oYyl7aWYoIWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHRoaXMuJCRzdGF0ZTtpZihhIT09ZGN8fCF0aGlzLiQkaHRtbDUpdGhyb3cgSGIoXCJub3N0YXRlXCIpO1xudGhpcy4kJHN0YXRlPUIoYyk/bnVsbDpjO3JldHVybiB0aGlzfX0pO3ZhciBsYT1TKFwiJHBhcnNlXCIpLFZmPUZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsLFdmPUZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSxYZj1GdW5jdGlvbi5wcm90b3R5cGUuYmluZCxtYj1oYSgpO3Moe1wibnVsbFwiOmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LFwidHJ1ZVwiOmZ1bmN0aW9uKCl7cmV0dXJuITB9LFwiZmFsc2VcIjpmdW5jdGlvbigpe3JldHVybiExfSx1bmRlZmluZWQ6ZnVuY3Rpb24oKXt9fSxmdW5jdGlvbihhLGMpe2EuY29uc3RhbnQ9YS5saXRlcmFsPWEuc2hhcmVkR2V0dGVyPSEwO21iW2NdPWF9KTttYltcInRoaXNcIl09ZnVuY3Rpb24oYSl7cmV0dXJuIGF9O21iW1widGhpc1wiXS5zaGFyZWRHZXR0ZXI9ITA7dmFyIG5iPXgoaGEoKSx7XCIrXCI6ZnVuY3Rpb24oYSxjLGQsZSl7ZD1kKGEsYyk7ZT1lKGEsYyk7cmV0dXJuIHkoZCk/eShlKT9kK2U6ZDp5KGUpP2U6dH0sXCItXCI6ZnVuY3Rpb24oYSxjLGQsZSl7ZD1kKGEsXG5jKTtlPWUoYSxjKTtyZXR1cm4oeShkKT9kOjApLSh5KGUpP2U6MCl9LFwiKlwiOmZ1bmN0aW9uKGEsYyxkLGUpe3JldHVybiBkKGEsYykqZShhLGMpfSxcIi9cIjpmdW5jdGlvbihhLGMsZCxlKXtyZXR1cm4gZChhLGMpL2UoYSxjKX0sXCIlXCI6ZnVuY3Rpb24oYSxjLGQsZSl7cmV0dXJuIGQoYSxjKSVlKGEsYyl9LFwiPT09XCI6ZnVuY3Rpb24oYSxjLGQsZSl7cmV0dXJuIGQoYSxjKT09PWUoYSxjKX0sXCIhPT1cIjpmdW5jdGlvbihhLGMsZCxlKXtyZXR1cm4gZChhLGMpIT09ZShhLGMpfSxcIj09XCI6ZnVuY3Rpb24oYSxjLGQsZSl7cmV0dXJuIGQoYSxjKT09ZShhLGMpfSxcIiE9XCI6ZnVuY3Rpb24oYSxjLGQsZSl7cmV0dXJuIGQoYSxjKSE9ZShhLGMpfSxcIjxcIjpmdW5jdGlvbihhLGMsZCxlKXtyZXR1cm4gZChhLGMpPGUoYSxjKX0sXCI+XCI6ZnVuY3Rpb24oYSxjLGQsZSl7cmV0dXJuIGQoYSxjKT5lKGEsYyl9LFwiPD1cIjpmdW5jdGlvbihhLGMsZCxlKXtyZXR1cm4gZChhLGMpPD1lKGEsYyl9LFwiPj1cIjpmdW5jdGlvbihhLFxuYyxkLGUpe3JldHVybiBkKGEsYyk+PWUoYSxjKX0sXCImJlwiOmZ1bmN0aW9uKGEsYyxkLGUpe3JldHVybiBkKGEsYykmJmUoYSxjKX0sXCJ8fFwiOmZ1bmN0aW9uKGEsYyxkLGUpe3JldHVybiBkKGEsYyl8fGUoYSxjKX0sXCIhXCI6ZnVuY3Rpb24oYSxjLGQpe3JldHVybiFkKGEsYyl9LFwiPVwiOiEwLFwifFwiOiEwfSksWWY9e246XCJcXG5cIixmOlwiXFxmXCIscjpcIlxcclwiLHQ6XCJcXHRcIix2OlwiXFx2XCIsXCInXCI6XCInXCIsJ1wiJzonXCInfSxoYz1mdW5jdGlvbihhKXt0aGlzLm9wdGlvbnM9YX07aGMucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpoYyxsZXg6ZnVuY3Rpb24oYSl7dGhpcy50ZXh0PWE7dGhpcy5pbmRleD0wO2Zvcih0aGlzLnRva2Vucz1bXTt0aGlzLmluZGV4PHRoaXMudGV4dC5sZW5ndGg7KWlmKGE9dGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4KSwnXCInPT09YXx8XCInXCI9PT1hKXRoaXMucmVhZFN0cmluZyhhKTtlbHNlIGlmKHRoaXMuaXNOdW1iZXIoYSl8fFwiLlwiPT09YSYmdGhpcy5pc051bWJlcih0aGlzLnBlZWsoKSkpdGhpcy5yZWFkTnVtYmVyKCk7XG5lbHNlIGlmKHRoaXMuaXNJZGVudChhKSl0aGlzLnJlYWRJZGVudCgpO2Vsc2UgaWYodGhpcy5pcyhhLFwiKCl7fVtdLiw7Oj9cIikpdGhpcy50b2tlbnMucHVzaCh7aW5kZXg6dGhpcy5pbmRleCx0ZXh0OmF9KSx0aGlzLmluZGV4Kys7ZWxzZSBpZih0aGlzLmlzV2hpdGVzcGFjZShhKSl0aGlzLmluZGV4Kys7ZWxzZXt2YXIgYz1hK3RoaXMucGVlaygpLGQ9Yyt0aGlzLnBlZWsoMiksZT1uYltjXSxmPW5iW2RdO25iW2FdfHxlfHxmPyhhPWY/ZDplP2M6YSx0aGlzLnRva2Vucy5wdXNoKHtpbmRleDp0aGlzLmluZGV4LHRleHQ6YSxvcGVyYXRvcjohMH0pLHRoaXMuaW5kZXgrPWEubGVuZ3RoKTp0aGlzLnRocm93RXJyb3IoXCJVbmV4cGVjdGVkIG5leHQgY2hhcmFjdGVyIFwiLHRoaXMuaW5kZXgsdGhpcy5pbmRleCsxKX1yZXR1cm4gdGhpcy50b2tlbnN9LGlzOmZ1bmN0aW9uKGEsYyl7cmV0dXJuLTEhPT1jLmluZGV4T2YoYSl9LHBlZWs6ZnVuY3Rpb24oYSl7YT1hfHwxO3JldHVybiB0aGlzLmluZGV4K1xuYTx0aGlzLnRleHQubGVuZ3RoP3RoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCthKTohMX0saXNOdW1iZXI6ZnVuY3Rpb24oYSl7cmV0dXJuXCIwXCI8PWEmJlwiOVwiPj1hJiZcInN0cmluZ1wiPT09dHlwZW9mIGF9LGlzV2hpdGVzcGFjZTpmdW5jdGlvbihhKXtyZXR1cm5cIiBcIj09PWF8fFwiXFxyXCI9PT1hfHxcIlxcdFwiPT09YXx8XCJcXG5cIj09PWF8fFwiXFx2XCI9PT1hfHxcIlxcdTAwYTBcIj09PWF9LGlzSWRlbnQ6ZnVuY3Rpb24oYSl7cmV0dXJuXCJhXCI8PWEmJlwielwiPj1hfHxcIkFcIjw9YSYmXCJaXCI+PWF8fFwiX1wiPT09YXx8XCIkXCI9PT1hfSxpc0V4cE9wZXJhdG9yOmZ1bmN0aW9uKGEpe3JldHVyblwiLVwiPT09YXx8XCIrXCI9PT1hfHx0aGlzLmlzTnVtYmVyKGEpfSx0aHJvd0Vycm9yOmZ1bmN0aW9uKGEsYyxkKXtkPWR8fHRoaXMuaW5kZXg7Yz15KGMpP1wicyBcIitjK1wiLVwiK3RoaXMuaW5kZXgrXCIgW1wiK3RoaXMudGV4dC5zdWJzdHJpbmcoYyxkKStcIl1cIjpcIiBcIitkO3Rocm93IGxhKFwibGV4ZXJyXCIsYSxjLHRoaXMudGV4dCk7XG59LHJlYWROdW1iZXI6ZnVuY3Rpb24oKXtmb3IodmFyIGE9XCJcIixjPXRoaXMuaW5kZXg7dGhpcy5pbmRleDx0aGlzLnRleHQubGVuZ3RoOyl7dmFyIGQ9USh0aGlzLnRleHQuY2hhckF0KHRoaXMuaW5kZXgpKTtpZihcIi5cIj09ZHx8dGhpcy5pc051bWJlcihkKSlhKz1kO2Vsc2V7dmFyIGU9dGhpcy5wZWVrKCk7aWYoXCJlXCI9PWQmJnRoaXMuaXNFeHBPcGVyYXRvcihlKSlhKz1kO2Vsc2UgaWYodGhpcy5pc0V4cE9wZXJhdG9yKGQpJiZlJiZ0aGlzLmlzTnVtYmVyKGUpJiZcImVcIj09YS5jaGFyQXQoYS5sZW5ndGgtMSkpYSs9ZDtlbHNlIGlmKCF0aGlzLmlzRXhwT3BlcmF0b3IoZCl8fGUmJnRoaXMuaXNOdW1iZXIoZSl8fFwiZVwiIT1hLmNoYXJBdChhLmxlbmd0aC0xKSlicmVhaztlbHNlIHRoaXMudGhyb3dFcnJvcihcIkludmFsaWQgZXhwb25lbnRcIil9dGhpcy5pbmRleCsrfXRoaXMudG9rZW5zLnB1c2goe2luZGV4OmMsdGV4dDphLGNvbnN0YW50OiEwLHZhbHVlOk51bWJlcihhKX0pfSxyZWFkSWRlbnQ6ZnVuY3Rpb24oKXtmb3IodmFyIGE9XG50aGlzLmluZGV4O3RoaXMuaW5kZXg8dGhpcy50ZXh0Lmxlbmd0aDspe3ZhciBjPXRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCk7aWYoIXRoaXMuaXNJZGVudChjKSYmIXRoaXMuaXNOdW1iZXIoYykpYnJlYWs7dGhpcy5pbmRleCsrfXRoaXMudG9rZW5zLnB1c2goe2luZGV4OmEsdGV4dDp0aGlzLnRleHQuc2xpY2UoYSx0aGlzLmluZGV4KSxpZGVudGlmaWVyOiEwfSl9LHJlYWRTdHJpbmc6ZnVuY3Rpb24oYSl7dmFyIGM9dGhpcy5pbmRleDt0aGlzLmluZGV4Kys7Zm9yKHZhciBkPVwiXCIsZT1hLGY9ITE7dGhpcy5pbmRleDx0aGlzLnRleHQubGVuZ3RoOyl7dmFyIGc9dGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4KSxlPWUrZztpZihmKVwidVwiPT09Zz8oZj10aGlzLnRleHQuc3Vic3RyaW5nKHRoaXMuaW5kZXgrMSx0aGlzLmluZGV4KzUpLGYubWF0Y2goL1tcXGRhLWZdezR9L2kpfHx0aGlzLnRocm93RXJyb3IoXCJJbnZhbGlkIHVuaWNvZGUgZXNjYXBlIFtcXFxcdVwiK2YrXCJdXCIpLHRoaXMuaW5kZXgrPVxuNCxkKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGYsMTYpKSk6ZCs9WWZbZ118fGcsZj0hMTtlbHNlIGlmKFwiXFxcXFwiPT09ZylmPSEwO2Vsc2V7aWYoZz09PWEpe3RoaXMuaW5kZXgrKzt0aGlzLnRva2Vucy5wdXNoKHtpbmRleDpjLHRleHQ6ZSxjb25zdGFudDohMCx2YWx1ZTpkfSk7cmV0dXJufWQrPWd9dGhpcy5pbmRleCsrfXRoaXMudGhyb3dFcnJvcihcIlVudGVybWluYXRlZCBxdW90ZVwiLGMpfX07dmFyIGliPWZ1bmN0aW9uKGEsYyxkKXt0aGlzLmxleGVyPWE7dGhpcy4kZmlsdGVyPWM7dGhpcy5vcHRpb25zPWR9O2liLlpFUk89eChmdW5jdGlvbigpe3JldHVybiAwfSx7c2hhcmVkR2V0dGVyOiEwLGNvbnN0YW50OiEwfSk7aWIucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjppYixwYXJzZTpmdW5jdGlvbihhKXt0aGlzLnRleHQ9YTt0aGlzLnRva2Vucz10aGlzLmxleGVyLmxleChhKTthPXRoaXMuc3RhdGVtZW50cygpOzAhPT10aGlzLnRva2Vucy5sZW5ndGgmJnRoaXMudGhyb3dFcnJvcihcImlzIGFuIHVuZXhwZWN0ZWQgdG9rZW5cIixcbnRoaXMudG9rZW5zWzBdKTthLmxpdGVyYWw9ISFhLmxpdGVyYWw7YS5jb25zdGFudD0hIWEuY29uc3RhbnQ7cmV0dXJuIGF9LHByaW1hcnk6ZnVuY3Rpb24oKXt2YXIgYTt0aGlzLmV4cGVjdChcIihcIik/KGE9dGhpcy5maWx0ZXJDaGFpbigpLHRoaXMuY29uc3VtZShcIilcIikpOnRoaXMuZXhwZWN0KFwiW1wiKT9hPXRoaXMuYXJyYXlEZWNsYXJhdGlvbigpOnRoaXMuZXhwZWN0KFwie1wiKT9hPXRoaXMub2JqZWN0KCk6dGhpcy5wZWVrKCkuaWRlbnRpZmllciYmdGhpcy5wZWVrKCkudGV4dCBpbiBtYj9hPW1iW3RoaXMuY29uc3VtZSgpLnRleHRdOnRoaXMucGVlaygpLmlkZW50aWZpZXI/YT10aGlzLmlkZW50aWZpZXIoKTp0aGlzLnBlZWsoKS5jb25zdGFudD9hPXRoaXMuY29uc3RhbnQoKTp0aGlzLnRocm93RXJyb3IoXCJub3QgYSBwcmltYXJ5IGV4cHJlc3Npb25cIix0aGlzLnBlZWsoKSk7Zm9yKHZhciBjLGQ7Yz10aGlzLmV4cGVjdChcIihcIixcIltcIixcIi5cIik7KVwiKFwiPT09Yy50ZXh0PyhhPXRoaXMuZnVuY3Rpb25DYWxsKGEsXG5kKSxkPW51bGwpOlwiW1wiPT09Yy50ZXh0PyhkPWEsYT10aGlzLm9iamVjdEluZGV4KGEpKTpcIi5cIj09PWMudGV4dD8oZD1hLGE9dGhpcy5maWVsZEFjY2VzcyhhKSk6dGhpcy50aHJvd0Vycm9yKFwiSU1QT1NTSUJMRVwiKTtyZXR1cm4gYX0sdGhyb3dFcnJvcjpmdW5jdGlvbihhLGMpe3Rocm93IGxhKFwic3ludGF4XCIsYy50ZXh0LGEsYy5pbmRleCsxLHRoaXMudGV4dCx0aGlzLnRleHQuc3Vic3RyaW5nKGMuaW5kZXgpKTt9LHBlZWtUb2tlbjpmdW5jdGlvbigpe2lmKDA9PT10aGlzLnRva2Vucy5sZW5ndGgpdGhyb3cgbGEoXCJ1ZW9lXCIsdGhpcy50ZXh0KTtyZXR1cm4gdGhpcy50b2tlbnNbMF19LHBlZWs6ZnVuY3Rpb24oYSxjLGQsZSl7cmV0dXJuIHRoaXMucGVla0FoZWFkKDAsYSxjLGQsZSl9LHBlZWtBaGVhZDpmdW5jdGlvbihhLGMsZCxlLGYpe2lmKHRoaXMudG9rZW5zLmxlbmd0aD5hKXthPXRoaXMudG9rZW5zW2FdO3ZhciBnPWEudGV4dDtpZihnPT09Y3x8Zz09PWR8fGc9PT1lfHxnPT09XG5mfHwhKGN8fGR8fGV8fGYpKXJldHVybiBhfXJldHVybiExfSxleHBlY3Q6ZnVuY3Rpb24oYSxjLGQsZSl7cmV0dXJuKGE9dGhpcy5wZWVrKGEsYyxkLGUpKT8odGhpcy50b2tlbnMuc2hpZnQoKSxhKTohMX0sY29uc3VtZTpmdW5jdGlvbihhKXtpZigwPT09dGhpcy50b2tlbnMubGVuZ3RoKXRocm93IGxhKFwidWVvZVwiLHRoaXMudGV4dCk7dmFyIGM9dGhpcy5leHBlY3QoYSk7Y3x8dGhpcy50aHJvd0Vycm9yKFwiaXMgdW5leHBlY3RlZCwgZXhwZWN0aW5nIFtcIithK1wiXVwiLHRoaXMucGVlaygpKTtyZXR1cm4gY30sdW5hcnlGbjpmdW5jdGlvbihhLGMpe3ZhciBkPW5iW2FdO3JldHVybiB4KGZ1bmN0aW9uKGEsZil7cmV0dXJuIGQoYSxmLGMpfSx7Y29uc3RhbnQ6Yy5jb25zdGFudCxpbnB1dHM6W2NdfSl9LGJpbmFyeUZuOmZ1bmN0aW9uKGEsYyxkLGUpe3ZhciBmPW5iW2NdO3JldHVybiB4KGZ1bmN0aW9uKGMsZSl7cmV0dXJuIGYoYyxlLGEsZCl9LHtjb25zdGFudDphLmNvbnN0YW50JiZcbmQuY29uc3RhbnQsaW5wdXRzOiFlJiZbYSxkXX0pfSxpZGVudGlmaWVyOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPXRoaXMuY29uc3VtZSgpLnRleHQ7dGhpcy5wZWVrKFwiLlwiKSYmdGhpcy5wZWVrQWhlYWQoMSkuaWRlbnRpZmllciYmIXRoaXMucGVla0FoZWFkKDIsXCIoXCIpOylhKz10aGlzLmNvbnN1bWUoKS50ZXh0K3RoaXMuY29uc3VtZSgpLnRleHQ7cmV0dXJuIHlmKGEsdGhpcy5vcHRpb25zLHRoaXMudGV4dCl9LGNvbnN0YW50OmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdW1lKCkudmFsdWU7cmV0dXJuIHgoZnVuY3Rpb24oKXtyZXR1cm4gYX0se2NvbnN0YW50OiEwLGxpdGVyYWw6ITB9KX0sc3RhdGVtZW50czpmdW5jdGlvbigpe2Zvcih2YXIgYT1bXTs7KWlmKDA8dGhpcy50b2tlbnMubGVuZ3RoJiYhdGhpcy5wZWVrKFwifVwiLFwiKVwiLFwiO1wiLFwiXVwiKSYmYS5wdXNoKHRoaXMuZmlsdGVyQ2hhaW4oKSksIXRoaXMuZXhwZWN0KFwiO1wiKSlyZXR1cm4gMT09PWEubGVuZ3RoP2FbMF06ZnVuY3Rpb24oYyxcbmQpe2Zvcih2YXIgZSxmPTAsZz1hLmxlbmd0aDtmPGc7ZisrKWU9YVtmXShjLGQpO3JldHVybiBlfX0sZmlsdGVyQ2hhaW46ZnVuY3Rpb24oKXtmb3IodmFyIGE9dGhpcy5leHByZXNzaW9uKCk7dGhpcy5leHBlY3QoXCJ8XCIpOylhPXRoaXMuZmlsdGVyKGEpO3JldHVybiBhfSxmaWx0ZXI6ZnVuY3Rpb24oYSl7dmFyIGM9dGhpcy4kZmlsdGVyKHRoaXMuY29uc3VtZSgpLnRleHQpLGQsZTtpZih0aGlzLnBlZWsoXCI6XCIpKWZvcihkPVtdLGU9W107dGhpcy5leHBlY3QoXCI6XCIpOylkLnB1c2godGhpcy5leHByZXNzaW9uKCkpO3ZhciBmPVthXS5jb25jYXQoZHx8W10pO3JldHVybiB4KGZ1bmN0aW9uKGYsaCl7dmFyIGw9YShmLGgpO2lmKGUpe2VbMF09bDtmb3IobD1kLmxlbmd0aDtsLS07KWVbbCsxXT1kW2xdKGYsaCk7cmV0dXJuIGMuYXBwbHkodCxlKX1yZXR1cm4gYyhsKX0se2NvbnN0YW50OiFjLiRzdGF0ZWZ1bCYmZi5ldmVyeShmYyksaW5wdXRzOiFjLiRzdGF0ZWZ1bCYmZn0pfSxleHByZXNzaW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYXNzaWdubWVudCgpfSxcbmFzc2lnbm1lbnQ6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLnRlcm5hcnkoKSxjLGQ7cmV0dXJuKGQ9dGhpcy5leHBlY3QoXCI9XCIpKT8oYS5hc3NpZ258fHRoaXMudGhyb3dFcnJvcihcImltcGxpZXMgYXNzaWdubWVudCBidXQgW1wiK3RoaXMudGV4dC5zdWJzdHJpbmcoMCxkLmluZGV4KStcIl0gY2FuIG5vdCBiZSBhc3NpZ25lZCB0b1wiLGQpLGM9dGhpcy50ZXJuYXJ5KCkseChmdW5jdGlvbihkLGYpe3JldHVybiBhLmFzc2lnbihkLGMoZCxmKSxmKX0se2lucHV0czpbYSxjXX0pKTphfSx0ZXJuYXJ5OmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5sb2dpY2FsT1IoKSxjO2lmKHRoaXMuZXhwZWN0KFwiP1wiKSYmKGM9dGhpcy5hc3NpZ25tZW50KCksdGhpcy5jb25zdW1lKFwiOlwiKSkpe3ZhciBkPXRoaXMuYXNzaWdubWVudCgpO3JldHVybiB4KGZ1bmN0aW9uKGUsZil7cmV0dXJuIGEoZSxmKT9jKGUsZik6ZChlLGYpfSx7Y29uc3RhbnQ6YS5jb25zdGFudCYmYy5jb25zdGFudCYmZC5jb25zdGFudH0pfXJldHVybiBhfSxcbmxvZ2ljYWxPUjpmdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzLmxvZ2ljYWxBTkQoKSxjO2M9dGhpcy5leHBlY3QoXCJ8fFwiKTspYT10aGlzLmJpbmFyeUZuKGEsYy50ZXh0LHRoaXMubG9naWNhbEFORCgpLCEwKTtyZXR1cm4gYX0sbG9naWNhbEFORDpmdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzLmVxdWFsaXR5KCksYztjPXRoaXMuZXhwZWN0KFwiJiZcIik7KWE9dGhpcy5iaW5hcnlGbihhLGMudGV4dCx0aGlzLmVxdWFsaXR5KCksITApO3JldHVybiBhfSxlcXVhbGl0eTpmdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzLnJlbGF0aW9uYWwoKSxjO2M9dGhpcy5leHBlY3QoXCI9PVwiLFwiIT1cIixcIj09PVwiLFwiIT09XCIpOylhPXRoaXMuYmluYXJ5Rm4oYSxjLnRleHQsdGhpcy5yZWxhdGlvbmFsKCkpO3JldHVybiBhfSxyZWxhdGlvbmFsOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPXRoaXMuYWRkaXRpdmUoKSxjO2M9dGhpcy5leHBlY3QoXCI8XCIsXCI+XCIsXCI8PVwiLFwiPj1cIik7KWE9dGhpcy5iaW5hcnlGbihhLGMudGV4dCxcbnRoaXMuYWRkaXRpdmUoKSk7cmV0dXJuIGF9LGFkZGl0aXZlOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPXRoaXMubXVsdGlwbGljYXRpdmUoKSxjO2M9dGhpcy5leHBlY3QoXCIrXCIsXCItXCIpOylhPXRoaXMuYmluYXJ5Rm4oYSxjLnRleHQsdGhpcy5tdWx0aXBsaWNhdGl2ZSgpKTtyZXR1cm4gYX0sbXVsdGlwbGljYXRpdmU6ZnVuY3Rpb24oKXtmb3IodmFyIGE9dGhpcy51bmFyeSgpLGM7Yz10aGlzLmV4cGVjdChcIipcIixcIi9cIixcIiVcIik7KWE9dGhpcy5iaW5hcnlGbihhLGMudGV4dCx0aGlzLnVuYXJ5KCkpO3JldHVybiBhfSx1bmFyeTpmdW5jdGlvbigpe3ZhciBhO3JldHVybiB0aGlzLmV4cGVjdChcIitcIik/dGhpcy5wcmltYXJ5KCk6KGE9dGhpcy5leHBlY3QoXCItXCIpKT90aGlzLmJpbmFyeUZuKGliLlpFUk8sYS50ZXh0LHRoaXMudW5hcnkoKSk6KGE9dGhpcy5leHBlY3QoXCIhXCIpKT90aGlzLnVuYXJ5Rm4oYS50ZXh0LHRoaXMudW5hcnkoKSk6dGhpcy5wcmltYXJ5KCl9LGZpZWxkQWNjZXNzOmZ1bmN0aW9uKGEpe3ZhciBjPVxudGhpcy5pZGVudGlmaWVyKCk7cmV0dXJuIHgoZnVuY3Rpb24oZCxlLGYpe2Q9Znx8YShkLGUpO3JldHVybiBudWxsPT1kP3Q6YyhkKX0se2Fzc2lnbjpmdW5jdGlvbihkLGUsZil7dmFyIGc9YShkLGYpO2d8fGEuYXNzaWduKGQsZz17fSxmKTtyZXR1cm4gYy5hc3NpZ24oZyxlKX19KX0sb2JqZWN0SW5kZXg6ZnVuY3Rpb24oYSl7dmFyIGM9dGhpcy50ZXh0LGQ9dGhpcy5leHByZXNzaW9uKCk7dGhpcy5jb25zdW1lKFwiXVwiKTtyZXR1cm4geChmdW5jdGlvbihlLGYpe3ZhciBnPWEoZSxmKSxoPWQoZSxmKTt0YShoLGMpO3JldHVybiBnP21hKGdbaF0sYyk6dH0se2Fzc2lnbjpmdW5jdGlvbihlLGYsZyl7dmFyIGg9dGEoZChlLGcpLGMpLGw9bWEoYShlLGcpLGMpO2x8fGEuYXNzaWduKGUsbD17fSxnKTtyZXR1cm4gbFtoXT1mfX0pfSxmdW5jdGlvbkNhbGw6ZnVuY3Rpb24oYSxjKXt2YXIgZD1bXTtpZihcIilcIiE9PXRoaXMucGVla1Rva2VuKCkudGV4dCl7ZG8gZC5wdXNoKHRoaXMuZXhwcmVzc2lvbigpKTtcbndoaWxlKHRoaXMuZXhwZWN0KFwiLFwiKSl9dGhpcy5jb25zdW1lKFwiKVwiKTt2YXIgZT10aGlzLnRleHQsZj1kLmxlbmd0aD9bXTpudWxsO3JldHVybiBmdW5jdGlvbihnLGgpe3ZhciBsPWM/YyhnLGgpOnkoYyk/dDpnLGs9YShnLGgsbCl8fHo7aWYoZilmb3IodmFyIG09ZC5sZW5ndGg7bS0tOylmW21dPW1hKGRbbV0oZyxoKSxlKTttYShsLGUpO2lmKGspe2lmKGsuY29uc3RydWN0b3I9PT1rKXRocm93IGxhKFwiaXNlY2ZuXCIsZSk7aWYoaz09PVZmfHxrPT09V2Z8fGs9PT1YZil0aHJvdyBsYShcImlzZWNmZlwiLGUpO31sPWsuYXBwbHk/ay5hcHBseShsLGYpOmsoZlswXSxmWzFdLGZbMl0sZlszXSxmWzRdKTtmJiYoZi5sZW5ndGg9MCk7cmV0dXJuIG1hKGwsZSl9fSxhcnJheURlY2xhcmF0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9W107aWYoXCJdXCIhPT10aGlzLnBlZWtUb2tlbigpLnRleHQpe2Rve2lmKHRoaXMucGVlayhcIl1cIikpYnJlYWs7YS5wdXNoKHRoaXMuZXhwcmVzc2lvbigpKX13aGlsZSh0aGlzLmV4cGVjdChcIixcIikpXG59dGhpcy5jb25zdW1lKFwiXVwiKTtyZXR1cm4geChmdW5jdGlvbihjLGQpe2Zvcih2YXIgZT1bXSxmPTAsZz1hLmxlbmd0aDtmPGc7ZisrKWUucHVzaChhW2ZdKGMsZCkpO3JldHVybiBlfSx7bGl0ZXJhbDohMCxjb25zdGFudDphLmV2ZXJ5KGZjKSxpbnB1dHM6YX0pfSxvYmplY3Q6ZnVuY3Rpb24oKXt2YXIgYT1bXSxjPVtdO2lmKFwifVwiIT09dGhpcy5wZWVrVG9rZW4oKS50ZXh0KXtkb3tpZih0aGlzLnBlZWsoXCJ9XCIpKWJyZWFrO3ZhciBkPXRoaXMuY29uc3VtZSgpO2QuY29uc3RhbnQ/YS5wdXNoKGQudmFsdWUpOmQuaWRlbnRpZmllcj9hLnB1c2goZC50ZXh0KTp0aGlzLnRocm93RXJyb3IoXCJpbnZhbGlkIGtleVwiLGQpO3RoaXMuY29uc3VtZShcIjpcIik7Yy5wdXNoKHRoaXMuZXhwcmVzc2lvbigpKX13aGlsZSh0aGlzLmV4cGVjdChcIixcIikpfXRoaXMuY29uc3VtZShcIn1cIik7cmV0dXJuIHgoZnVuY3Rpb24oZCxmKXtmb3IodmFyIGc9e30saD0wLGw9Yy5sZW5ndGg7aDxsO2grKylnW2FbaF1dPVxuY1toXShkLGYpO3JldHVybiBnfSx7bGl0ZXJhbDohMCxjb25zdGFudDpjLmV2ZXJ5KGZjKSxpbnB1dHM6Y30pfX07dmFyIEFmPWhhKCksemY9aGEoKSxCZj1PYmplY3QucHJvdG90eXBlLnZhbHVlT2YsQ2E9UyhcIiRzY2VcIiksbmE9e0hUTUw6XCJodG1sXCIsQ1NTOlwiY3NzXCIsVVJMOlwidXJsXCIsUkVTT1VSQ0VfVVJMOlwicmVzb3VyY2VVcmxcIixKUzpcImpzXCJ9LGphPVMoXCIkY29tcGlsZVwiKSxaPVkuY3JlYXRlRWxlbWVudChcImFcIiksaWQ9QmEoTS5sb2NhdGlvbi5ocmVmKTtFYy4kaW5qZWN0PVtcIiRwcm92aWRlXCJdO2pkLiRpbmplY3Q9W1wiJGxvY2FsZVwiXTtsZC4kaW5qZWN0PVtcIiRsb2NhbGVcIl07dmFyIG9kPVwiLlwiLExmPXt5eXl5OiQoXCJGdWxsWWVhclwiLDQpLHl5OiQoXCJGdWxsWWVhclwiLDIsMCwhMCkseTokKFwiRnVsbFllYXJcIiwxKSxNTU1NOktiKFwiTW9udGhcIiksTU1NOktiKFwiTW9udGhcIiwhMCksTU06JChcIk1vbnRoXCIsMiwxKSxNOiQoXCJNb250aFwiLDEsMSksZGQ6JChcIkRhdGVcIiwyKSxkOiQoXCJEYXRlXCIsXG4xKSxISDokKFwiSG91cnNcIiwyKSxIOiQoXCJIb3Vyc1wiLDEpLGhoOiQoXCJIb3Vyc1wiLDIsLTEyKSxoOiQoXCJIb3Vyc1wiLDEsLTEyKSxtbTokKFwiTWludXRlc1wiLDIpLG06JChcIk1pbnV0ZXNcIiwxKSxzczokKFwiU2Vjb25kc1wiLDIpLHM6JChcIlNlY29uZHNcIiwxKSxzc3M6JChcIk1pbGxpc2Vjb25kc1wiLDMpLEVFRUU6S2IoXCJEYXlcIiksRUVFOktiKFwiRGF5XCIsITApLGE6ZnVuY3Rpb24oYSxjKXtyZXR1cm4gMTI+YS5nZXRIb3VycygpP2MuQU1QTVNbMF06Yy5BTVBNU1sxXX0sWjpmdW5jdGlvbihhKXthPS0xKmEuZ2V0VGltZXpvbmVPZmZzZXQoKTtyZXR1cm4gYT0oMDw9YT9cIitcIjpcIlwiKSsoSmIoTWF0aFswPGE/XCJmbG9vclwiOlwiY2VpbFwiXShhLzYwKSwyKStKYihNYXRoLmFicyhhJTYwKSwyKSl9LHd3OnFkKDIpLHc6cWQoMSl9LEtmPS8oKD86W155TWRIaG1zYVpFdyddKyl8KD86Jyg/OlteJ118JycpKicpfCg/OkUrfHkrfE0rfGQrfEgrfGgrfG0rfHMrfGF8Wnx3KykpKC4qKS8sSmY9L15cXC0/XFxkKyQvO1xua2QuJGluamVjdD1bXCIkbG9jYWxlXCJdO3ZhciBHZj1lYShRKSxIZj1lYSh2Yik7bWQuJGluamVjdD1bXCIkcGFyc2VcIl07dmFyIFRkPWVhKHtyZXN0cmljdDpcIkVcIixjb21waWxlOmZ1bmN0aW9uKGEsYyl7aWYoIWMuaHJlZiYmIWMueGxpbmtIcmVmJiYhYy5uYW1lKXJldHVybiBmdW5jdGlvbihhLGMpe2lmKFwiYVwiPT09Y1swXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKXt2YXIgZj1cIltvYmplY3QgU1ZHQW5pbWF0ZWRTdHJpbmddXCI9PT1EYS5jYWxsKGMucHJvcChcImhyZWZcIikpP1wieGxpbms6aHJlZlwiOlwiaHJlZlwiO2Mub24oXCJjbGlja1wiLGZ1bmN0aW9uKGEpe2MuYXR0cihmKXx8YS5wcmV2ZW50RGVmYXVsdCgpfSl9fX19KSx3Yj17fTtzKEZiLGZ1bmN0aW9uKGEsYyl7aWYoXCJtdWx0aXBsZVwiIT1hKXt2YXIgZD15YShcIm5nLVwiK2MpO3diW2RdPWZ1bmN0aW9uKCl7cmV0dXJue3Jlc3RyaWN0OlwiQVwiLHByaW9yaXR5OjEwMCxsaW5rOmZ1bmN0aW9uKGEsZixnKXthLiR3YXRjaChnW2RdLGZ1bmN0aW9uKGEpe2cuJHNldChjLFxuISFhKX0pfX19fX0pO3MoT2MsZnVuY3Rpb24oYSxjKXt3YltjXT1mdW5jdGlvbigpe3JldHVybntwcmlvcml0eToxMDAsbGluazpmdW5jdGlvbihhLGUsZil7aWYoXCJuZ1BhdHRlcm5cIj09PWMmJlwiL1wiPT1mLm5nUGF0dGVybi5jaGFyQXQoMCkmJihlPWYubmdQYXR0ZXJuLm1hdGNoKE5mKSkpe2YuJHNldChcIm5nUGF0dGVyblwiLG5ldyBSZWdFeHAoZVsxXSxlWzJdKSk7cmV0dXJufWEuJHdhdGNoKGZbY10sZnVuY3Rpb24oYSl7Zi4kc2V0KGMsYSl9KX19fX0pO3MoW1wic3JjXCIsXCJzcmNzZXRcIixcImhyZWZcIl0sZnVuY3Rpb24oYSl7dmFyIGM9eWEoXCJuZy1cIithKTt3YltjXT1mdW5jdGlvbigpe3JldHVybntwcmlvcml0eTo5OSxsaW5rOmZ1bmN0aW9uKGQsZSxmKXt2YXIgZz1hLGg9YTtcImhyZWZcIj09PWEmJlwiW29iamVjdCBTVkdBbmltYXRlZFN0cmluZ11cIj09PURhLmNhbGwoZS5wcm9wKFwiaHJlZlwiKSkmJihoPVwieGxpbmtIcmVmXCIsZi4kYXR0cltoXT1cInhsaW5rOmhyZWZcIixnPW51bGwpO2YuJG9ic2VydmUoYyxcbmZ1bmN0aW9uKGMpe2M/KGYuJHNldChoLGMpLFJhJiZnJiZlLnByb3AoZyxmW2hdKSk6XCJocmVmXCI9PT1hJiZmLiRzZXQoaCxudWxsKX0pfX19fSk7dmFyIExiPXskYWRkQ29udHJvbDp6LCQkcmVuYW1lQ29udHJvbDpmdW5jdGlvbihhLGMpe2EuJG5hbWU9Y30sJHJlbW92ZUNvbnRyb2w6eiwkc2V0VmFsaWRpdHk6eiwkc2V0RGlydHk6eiwkc2V0UHJpc3RpbmU6eiwkc2V0U3VibWl0dGVkOnp9O3JkLiRpbmplY3Q9W1wiJGVsZW1lbnRcIixcIiRhdHRyc1wiLFwiJHNjb3BlXCIsXCIkYW5pbWF0ZVwiLFwiJGludGVycG9sYXRlXCJdO3ZhciB5ZD1mdW5jdGlvbihhKXtyZXR1cm5bXCIkdGltZW91dFwiLGZ1bmN0aW9uKGMpe3JldHVybntuYW1lOlwiZm9ybVwiLHJlc3RyaWN0OmE/XCJFQUNcIjpcIkVcIixjb250cm9sbGVyOnJkLGNvbXBpbGU6ZnVuY3Rpb24oYSl7YS5hZGRDbGFzcyhTYSkuYWRkQ2xhc3MobGIpO3JldHVybntwcmU6ZnVuY3Rpb24oYSxkLGcsaCl7aWYoIShcImFjdGlvblwiaW4gZykpe3ZhciBsPWZ1bmN0aW9uKGMpe2EuJGFwcGx5KGZ1bmN0aW9uKCl7aC4kY29tbWl0Vmlld1ZhbHVlKCk7XG5oLiRzZXRTdWJtaXR0ZWQoKX0pO2MucHJldmVudERlZmF1bHQoKX07ZFswXS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsbCwhMSk7ZC5vbihcIiRkZXN0cm95XCIsZnVuY3Rpb24oKXtjKGZ1bmN0aW9uKCl7ZFswXS5yZW1vdmVFdmVudExpc3RlbmVyKFwic3VibWl0XCIsbCwhMSl9LDAsITEpfSl9dmFyIGs9aC4kJHBhcmVudEZvcm0sbT1oLiRuYW1lO20mJihoYihhLG51bGwsbSxoLG0pLGcuJG9ic2VydmUoZy5uYW1lP1wibmFtZVwiOlwibmdGb3JtXCIsZnVuY3Rpb24oYyl7bSE9PWMmJihoYihhLG51bGwsbSx0LG0pLG09YyxoYihhLG51bGwsbSxoLG0pLGsuJCRyZW5hbWVDb250cm9sKGgsbSkpfSkpO2Qub24oXCIkZGVzdHJveVwiLGZ1bmN0aW9uKCl7ay4kcmVtb3ZlQ29udHJvbChoKTttJiZoYihhLG51bGwsbSx0LG0pO3goaCxMYil9KX19fX19XX0sVWQ9eWQoKSxnZT15ZCghMCksTWY9L1xcZHs0fS1bMDFdXFxkLVswLTNdXFxkVFswLTJdXFxkOlswLTVdXFxkOlswLTVdXFxkXFwuXFxkKyhbKy1dWzAtMl1cXGQ6WzAtNV1cXGR8WikvLFxuWmY9L14oZnRwfGh0dHB8aHR0cHMpOlxcL1xcLyhcXHcrOnswLDF9XFx3KkApPyhcXFMrKSg6WzAtOV0rKT8oXFwvfFxcLyhbXFx3IyE6Lj8rPSYlQCFcXC1cXC9dKSk/JC8sJGY9L15bYS16MC05ISMkJSYnKitcXC89P15fYHt8fX4uLV0rQFthLXowLTldKFthLXowLTktXSpbYS16MC05XSk/KFxcLlthLXowLTldKFthLXowLTktXSpbYS16MC05XSk/KSokL2ksYWc9L15cXHMqKFxcLXxcXCspPyhcXGQrfChcXGQqKFxcLlxcZCopKSlcXHMqJC8semQ9L14oXFxkezR9KS0oXFxkezJ9KS0oXFxkezJ9KSQvLEFkPS9eKFxcZHs0fSktKFxcZFxcZCktKFxcZFxcZClUKFxcZFxcZCk6KFxcZFxcZCkoPzo6KFxcZFxcZCkoXFwuXFxkezEsM30pPyk/JC8sa2M9L14oXFxkezR9KS1XKFxcZFxcZCkkLyxCZD0vXihcXGR7NH0pLShcXGRcXGQpJC8sQ2Q9L14oXFxkXFxkKTooXFxkXFxkKSg/OjooXFxkXFxkKShcXC5cXGR7MSwzfSk/KT8kLyxEZD17dGV4dDpmdW5jdGlvbihhLGMsZCxlLGYsZyl7amIoYSxjLGQsZSxmLGcpO2ljKGUpfSxkYXRlOmtiKFwiZGF0ZVwiLHpkLE5iKHpkLFtcInl5eXlcIixcblwiTU1cIixcImRkXCJdKSxcInl5eXktTU0tZGRcIiksXCJkYXRldGltZS1sb2NhbFwiOmtiKFwiZGF0ZXRpbWVsb2NhbFwiLEFkLE5iKEFkLFwieXl5eSBNTSBkZCBISCBtbSBzcyBzc3NcIi5zcGxpdChcIiBcIikpLFwieXl5eS1NTS1kZFRISDptbTpzcy5zc3NcIiksdGltZTprYihcInRpbWVcIixDZCxOYihDZCxbXCJISFwiLFwibW1cIixcInNzXCIsXCJzc3NcIl0pLFwiSEg6bW06c3Muc3NzXCIpLHdlZWs6a2IoXCJ3ZWVrXCIsa2MsZnVuY3Rpb24oYSxjKXtpZihxYShhKSlyZXR1cm4gYTtpZihGKGEpKXtrYy5sYXN0SW5kZXg9MDt2YXIgZD1rYy5leGVjKGEpO2lmKGQpe3ZhciBlPStkWzFdLGY9K2RbMl0sZz1kPTAsaD0wLGw9MCxrPXBkKGUpLGY9NyooZi0xKTtjJiYoZD1jLmdldEhvdXJzKCksZz1jLmdldE1pbnV0ZXMoKSxoPWMuZ2V0U2Vjb25kcygpLGw9Yy5nZXRNaWxsaXNlY29uZHMoKSk7cmV0dXJuIG5ldyBEYXRlKGUsMCxrLmdldERhdGUoKStmLGQsZyxoLGwpfX1yZXR1cm4gTmFOfSxcInl5eXktV3d3XCIpLG1vbnRoOmtiKFwibW9udGhcIixcbkJkLE5iKEJkLFtcInl5eXlcIixcIk1NXCJdKSxcInl5eXktTU1cIiksbnVtYmVyOmZ1bmN0aW9uKGEsYyxkLGUsZixnKXt0ZChhLGMsZCxlKTtqYihhLGMsZCxlLGYsZyk7ZS4kJHBhcnNlck5hbWU9XCJudW1iZXJcIjtlLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24oYSl7cmV0dXJuIGUuJGlzRW1wdHkoYSk/bnVsbDphZy50ZXN0KGEpP3BhcnNlRmxvYXQoYSk6dH0pO2UuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbihhKXtpZighZS4kaXNFbXB0eShhKSl7aWYoIVYoYSkpdGhyb3cgT2IoXCJudW1mbXRcIixhKTthPWEudG9TdHJpbmcoKX1yZXR1cm4gYX0pO2lmKGQubWlufHxkLm5nTWluKXt2YXIgaDtlLiR2YWxpZGF0b3JzLm1pbj1mdW5jdGlvbihhKXtyZXR1cm4gZS4kaXNFbXB0eShhKXx8QihoKXx8YT49aH07ZC4kb2JzZXJ2ZShcIm1pblwiLGZ1bmN0aW9uKGEpe3koYSkmJiFWKGEpJiYoYT1wYXJzZUZsb2F0KGEsMTApKTtoPVYoYSkmJiFpc05hTihhKT9hOnQ7ZS4kdmFsaWRhdGUoKX0pfWlmKGQubWF4fHxcbmQubmdNYXgpe3ZhciBsO2UuJHZhbGlkYXRvcnMubWF4PWZ1bmN0aW9uKGEpe3JldHVybiBlLiRpc0VtcHR5KGEpfHxCKGwpfHxhPD1sfTtkLiRvYnNlcnZlKFwibWF4XCIsZnVuY3Rpb24oYSl7eShhKSYmIVYoYSkmJihhPXBhcnNlRmxvYXQoYSwxMCkpO2w9VihhKSYmIWlzTmFOKGEpP2E6dDtlLiR2YWxpZGF0ZSgpfSl9fSx1cmw6ZnVuY3Rpb24oYSxjLGQsZSxmLGcpe2piKGEsYyxkLGUsZixnKTtpYyhlKTtlLiQkcGFyc2VyTmFtZT1cInVybFwiO2UuJHZhbGlkYXRvcnMudXJsPWZ1bmN0aW9uKGEsYyl7dmFyIGQ9YXx8YztyZXR1cm4gZS4kaXNFbXB0eShkKXx8WmYudGVzdChkKX19LGVtYWlsOmZ1bmN0aW9uKGEsYyxkLGUsZixnKXtqYihhLGMsZCxlLGYsZyk7aWMoZSk7ZS4kJHBhcnNlck5hbWU9XCJlbWFpbFwiO2UuJHZhbGlkYXRvcnMuZW1haWw9ZnVuY3Rpb24oYSxjKXt2YXIgZD1hfHxjO3JldHVybiBlLiRpc0VtcHR5KGQpfHwkZi50ZXN0KGQpfX0scmFkaW86ZnVuY3Rpb24oYSxjLFxuZCxlKXtCKGQubmFtZSkmJmMuYXR0cihcIm5hbWVcIiwrK29iKTtjLm9uKFwiY2xpY2tcIixmdW5jdGlvbihhKXtjWzBdLmNoZWNrZWQmJmUuJHNldFZpZXdWYWx1ZShkLnZhbHVlLGEmJmEudHlwZSl9KTtlLiRyZW5kZXI9ZnVuY3Rpb24oKXtjWzBdLmNoZWNrZWQ9ZC52YWx1ZT09ZS4kdmlld1ZhbHVlfTtkLiRvYnNlcnZlKFwidmFsdWVcIixlLiRyZW5kZXIpfSxjaGVja2JveDpmdW5jdGlvbihhLGMsZCxlLGYsZyxoLGwpe3ZhciBrPXVkKGwsYSxcIm5nVHJ1ZVZhbHVlXCIsZC5uZ1RydWVWYWx1ZSwhMCksbT11ZChsLGEsXCJuZ0ZhbHNlVmFsdWVcIixkLm5nRmFsc2VWYWx1ZSwhMSk7Yy5vbihcImNsaWNrXCIsZnVuY3Rpb24oYSl7ZS4kc2V0Vmlld1ZhbHVlKGNbMF0uY2hlY2tlZCxhJiZhLnR5cGUpfSk7ZS4kcmVuZGVyPWZ1bmN0aW9uKCl7Y1swXS5jaGVja2VkPWUuJHZpZXdWYWx1ZX07ZS4kaXNFbXB0eT1mdW5jdGlvbihhKXtyZXR1cm4hMT09PWF9O2UuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbihhKXtyZXR1cm4gZ2EoYSxcbmspfSk7ZS4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKGEpe3JldHVybiBhP2s6bX0pfSxoaWRkZW46eixidXR0b246eixzdWJtaXQ6eixyZXNldDp6LGZpbGU6en0seWM9W1wiJGJyb3dzZXJcIixcIiRzbmlmZmVyXCIsXCIkZmlsdGVyXCIsXCIkcGFyc2VcIixmdW5jdGlvbihhLGMsZCxlKXtyZXR1cm57cmVzdHJpY3Q6XCJFXCIscmVxdWlyZTpbXCI/bmdNb2RlbFwiXSxsaW5rOntwcmU6ZnVuY3Rpb24oZixnLGgsbCl7bFswXSYmKERkW1EoaC50eXBlKV18fERkLnRleHQpKGYsZyxoLGxbMF0sYyxhLGQsZSl9fX19XSxiZz0vXih0cnVlfGZhbHNlfFxcZCspJC8seWU9ZnVuY3Rpb24oKXtyZXR1cm57cmVzdHJpY3Q6XCJBXCIscHJpb3JpdHk6MTAwLGNvbXBpbGU6ZnVuY3Rpb24oYSxjKXtyZXR1cm4gYmcudGVzdChjLm5nVmFsdWUpP2Z1bmN0aW9uKGEsYyxmKXtmLiRzZXQoXCJ2YWx1ZVwiLGEuJGV2YWwoZi5uZ1ZhbHVlKSl9OmZ1bmN0aW9uKGEsYyxmKXthLiR3YXRjaChmLm5nVmFsdWUsZnVuY3Rpb24oYSl7Zi4kc2V0KFwidmFsdWVcIixcbmEpfSl9fX19LFpkPVtcIiRjb21waWxlXCIsZnVuY3Rpb24oYSl7cmV0dXJue3Jlc3RyaWN0OlwiQUNcIixjb21waWxlOmZ1bmN0aW9uKGMpe2EuJCRhZGRCaW5kaW5nQ2xhc3MoYyk7cmV0dXJuIGZ1bmN0aW9uKGMsZSxmKXthLiQkYWRkQmluZGluZ0luZm8oZSxmLm5nQmluZCk7ZT1lWzBdO2MuJHdhdGNoKGYubmdCaW5kLGZ1bmN0aW9uKGEpe2UudGV4dENvbnRlbnQ9YT09PXQ/XCJcIjphfSl9fX19XSxhZT1bXCIkaW50ZXJwb2xhdGVcIixcIiRjb21waWxlXCIsZnVuY3Rpb24oYSxjKXtyZXR1cm57Y29tcGlsZTpmdW5jdGlvbihkKXtjLiQkYWRkQmluZGluZ0NsYXNzKGQpO3JldHVybiBmdW5jdGlvbihkLGYsZyl7ZD1hKGYuYXR0cihnLiRhdHRyLm5nQmluZFRlbXBsYXRlKSk7Yy4kJGFkZEJpbmRpbmdJbmZvKGYsZC5leHByZXNzaW9ucyk7Zj1mWzBdO2cuJG9ic2VydmUoXCJuZ0JpbmRUZW1wbGF0ZVwiLGZ1bmN0aW9uKGEpe2YudGV4dENvbnRlbnQ9YT09PXQ/XCJcIjphfSl9fX19XSwkZD1bXCIkc2NlXCIsXG5cIiRwYXJzZVwiLFwiJGNvbXBpbGVcIixmdW5jdGlvbihhLGMsZCl7cmV0dXJue3Jlc3RyaWN0OlwiQVwiLGNvbXBpbGU6ZnVuY3Rpb24oZSxmKXt2YXIgZz1jKGYubmdCaW5kSHRtbCksaD1jKGYubmdCaW5kSHRtbCxmdW5jdGlvbihhKXtyZXR1cm4oYXx8XCJcIikudG9TdHJpbmcoKX0pO2QuJCRhZGRCaW5kaW5nQ2xhc3MoZSk7cmV0dXJuIGZ1bmN0aW9uKGMsZSxmKXtkLiQkYWRkQmluZGluZ0luZm8oZSxmLm5nQmluZEh0bWwpO2MuJHdhdGNoKGgsZnVuY3Rpb24oKXtlLmh0bWwoYS5nZXRUcnVzdGVkSHRtbChnKGMpKXx8XCJcIil9KX19fX1dLHhlPWVhKHtyZXN0cmljdDpcIkFcIixyZXF1aXJlOlwibmdNb2RlbFwiLGxpbms6ZnVuY3Rpb24oYSxjLGQsZSl7ZS4kdmlld0NoYW5nZUxpc3RlbmVycy5wdXNoKGZ1bmN0aW9uKCl7YS4kZXZhbChkLm5nQ2hhbmdlKX0pfX0pLGJlPWpjKFwiXCIsITApLGRlPWpjKFwiT2RkXCIsMCksY2U9amMoXCJFdmVuXCIsMSksZWU9SmEoe2NvbXBpbGU6ZnVuY3Rpb24oYSxjKXtjLiRzZXQoXCJuZ0Nsb2FrXCIsXG50KTthLnJlbW92ZUNsYXNzKFwibmctY2xvYWtcIil9fSksZmU9W2Z1bmN0aW9uKCl7cmV0dXJue3Jlc3RyaWN0OlwiQVwiLHNjb3BlOiEwLGNvbnRyb2xsZXI6XCJAXCIscHJpb3JpdHk6NTAwfX1dLERjPXt9LGNnPXtibHVyOiEwLGZvY3VzOiEwfTtzKFwiY2xpY2sgZGJsY2xpY2sgbW91c2Vkb3duIG1vdXNldXAgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlbW92ZSBtb3VzZWVudGVyIG1vdXNlbGVhdmUga2V5ZG93biBrZXl1cCBrZXlwcmVzcyBzdWJtaXQgZm9jdXMgYmx1ciBjb3B5IGN1dCBwYXN0ZVwiLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihhKXt2YXIgYz15YShcIm5nLVwiK2EpO0RjW2NdPVtcIiRwYXJzZVwiLFwiJHJvb3RTY29wZVwiLGZ1bmN0aW9uKGQsZSl7cmV0dXJue3Jlc3RyaWN0OlwiQVwiLGNvbXBpbGU6ZnVuY3Rpb24oZixnKXt2YXIgaD1kKGdbY10sbnVsbCwhMCk7cmV0dXJuIGZ1bmN0aW9uKGMsZCl7ZC5vbihhLGZ1bmN0aW9uKGQpe3ZhciBmPWZ1bmN0aW9uKCl7aChjLHskZXZlbnQ6ZH0pfTtcbmNnW2FdJiZlLiQkcGhhc2U/Yy4kZXZhbEFzeW5jKGYpOmMuJGFwcGx5KGYpfSl9fX19XX0pO3ZhciBpZT1bXCIkYW5pbWF0ZVwiLGZ1bmN0aW9uKGEpe3JldHVybnttdWx0aUVsZW1lbnQ6ITAsdHJhbnNjbHVkZTpcImVsZW1lbnRcIixwcmlvcml0eTo2MDAsdGVybWluYWw6ITAscmVzdHJpY3Q6XCJBXCIsJCR0bGI6ITAsbGluazpmdW5jdGlvbihjLGQsZSxmLGcpe3ZhciBoLGwsaztjLiR3YXRjaChlLm5nSWYsZnVuY3Rpb24oYyl7Yz9sfHxnKGZ1bmN0aW9uKGMsZil7bD1mO2NbYy5sZW5ndGgrK109WS5jcmVhdGVDb21tZW50KFwiIGVuZCBuZ0lmOiBcIitlLm5nSWYrXCIgXCIpO2g9e2Nsb25lOmN9O2EuZW50ZXIoYyxkLnBhcmVudCgpLGQpfSk6KGsmJihrLnJlbW92ZSgpLGs9bnVsbCksbCYmKGwuJGRlc3Ryb3koKSxsPW51bGwpLGgmJihrPXViKGguY2xvbmUpLGEubGVhdmUoaykudGhlbihmdW5jdGlvbigpe2s9bnVsbH0pLGg9bnVsbCkpfSl9fX1dLGplPVtcIiR0ZW1wbGF0ZVJlcXVlc3RcIixcIiRhbmNob3JTY3JvbGxcIixcblwiJGFuaW1hdGVcIixcIiRzY2VcIixmdW5jdGlvbihhLGMsZCxlKXtyZXR1cm57cmVzdHJpY3Q6XCJFQ0FcIixwcmlvcml0eTo0MDAsdGVybWluYWw6ITAsdHJhbnNjbHVkZTpcImVsZW1lbnRcIixjb250cm9sbGVyOmNhLm5vb3AsY29tcGlsZTpmdW5jdGlvbihmLGcpe3ZhciBoPWcubmdJbmNsdWRlfHxnLnNyYyxsPWcub25sb2FkfHxcIlwiLGs9Zy5hdXRvc2Nyb2xsO3JldHVybiBmdW5jdGlvbihmLGcscSxzLHIpe3ZhciB0PTAscCx2LHcsTD1mdW5jdGlvbigpe3YmJih2LnJlbW92ZSgpLHY9bnVsbCk7cCYmKHAuJGRlc3Ryb3koKSxwPW51bGwpO3cmJihkLmxlYXZlKHcpLnRoZW4oZnVuY3Rpb24oKXt2PW51bGx9KSx2PXcsdz1udWxsKX07Zi4kd2F0Y2goZS5wYXJzZUFzUmVzb3VyY2VVcmwoaCksZnVuY3Rpb24oZSl7dmFyIGg9ZnVuY3Rpb24oKXsheShrKXx8ayYmIWYuJGV2YWwoayl8fGMoKX0scT0rK3Q7ZT8oYShlLCEwKS50aGVuKGZ1bmN0aW9uKGEpe2lmKHE9PT10KXt2YXIgYz1mLiRuZXcoKTtcbnMudGVtcGxhdGU9YTthPXIoYyxmdW5jdGlvbihhKXtMKCk7ZC5lbnRlcihhLG51bGwsZykudGhlbihoKX0pO3A9Yzt3PWE7cC4kZW1pdChcIiRpbmNsdWRlQ29udGVudExvYWRlZFwiLGUpO2YuJGV2YWwobCl9fSxmdW5jdGlvbigpe3E9PT10JiYoTCgpLGYuJGVtaXQoXCIkaW5jbHVkZUNvbnRlbnRFcnJvclwiLGUpKX0pLGYuJGVtaXQoXCIkaW5jbHVkZUNvbnRlbnRSZXF1ZXN0ZWRcIixlKSk6KEwoKSxzLnRlbXBsYXRlPW51bGwpfSl9fX19XSxBZT1bXCIkY29tcGlsZVwiLGZ1bmN0aW9uKGEpe3JldHVybntyZXN0cmljdDpcIkVDQVwiLHByaW9yaXR5Oi00MDAscmVxdWlyZTpcIm5nSW5jbHVkZVwiLGxpbms6ZnVuY3Rpb24oYyxkLGUsZil7L1NWRy8udGVzdChkWzBdLnRvU3RyaW5nKCkpPyhkLmVtcHR5KCksYShHYyhmLnRlbXBsYXRlLFkpLmNoaWxkTm9kZXMpKGMsZnVuY3Rpb24oYSl7ZC5hcHBlbmQoYSl9LHtmdXR1cmVQYXJlbnRFbGVtZW50OmR9KSk6KGQuaHRtbChmLnRlbXBsYXRlKSxhKGQuY29udGVudHMoKSkoYykpfX19XSxcbmtlPUphKHtwcmlvcml0eTo0NTAsY29tcGlsZTpmdW5jdGlvbigpe3JldHVybntwcmU6ZnVuY3Rpb24oYSxjLGQpe2EuJGV2YWwoZC5uZ0luaXQpfX19fSksd2U9ZnVuY3Rpb24oKXtyZXR1cm57cmVzdHJpY3Q6XCJBXCIscHJpb3JpdHk6MTAwLHJlcXVpcmU6XCJuZ01vZGVsXCIsbGluazpmdW5jdGlvbihhLGMsZCxlKXt2YXIgZj1jLmF0dHIoZC4kYXR0ci5uZ0xpc3QpfHxcIiwgXCIsZz1cImZhbHNlXCIhPT1kLm5nVHJpbSxoPWc/VShmKTpmO2UuJHBhcnNlcnMucHVzaChmdW5jdGlvbihhKXtpZighQihhKSl7dmFyIGM9W107YSYmcyhhLnNwbGl0KGgpLGZ1bmN0aW9uKGEpe2EmJmMucHVzaChnP1UoYSk6YSl9KTtyZXR1cm4gY319KTtlLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24oYSl7cmV0dXJuIEgoYSk/YS5qb2luKGYpOnR9KTtlLiRpc0VtcHR5PWZ1bmN0aW9uKGEpe3JldHVybiFhfHwhYS5sZW5ndGh9fX19LGxiPVwibmctdmFsaWRcIix2ZD1cIm5nLWludmFsaWRcIixTYT1cIm5nLXByaXN0aW5lXCIsXG5NYj1cIm5nLWRpcnR5XCIseGQ9XCJuZy1wZW5kaW5nXCIsT2I9bmV3IFMoXCJuZ01vZGVsXCIpLGRnPVtcIiRzY29wZVwiLFwiJGV4Y2VwdGlvbkhhbmRsZXJcIixcIiRhdHRyc1wiLFwiJGVsZW1lbnRcIixcIiRwYXJzZVwiLFwiJGFuaW1hdGVcIixcIiR0aW1lb3V0XCIsXCIkcm9vdFNjb3BlXCIsXCIkcVwiLFwiJGludGVycG9sYXRlXCIsZnVuY3Rpb24oYSxjLGQsZSxmLGcsaCxsLGssbSl7dGhpcy4kbW9kZWxWYWx1ZT10aGlzLiR2aWV3VmFsdWU9TnVtYmVyLk5hTjt0aGlzLiQkcmF3TW9kZWxWYWx1ZT10O3RoaXMuJHZhbGlkYXRvcnM9e307dGhpcy4kYXN5bmNWYWxpZGF0b3JzPXt9O3RoaXMuJHBhcnNlcnM9W107dGhpcy4kZm9ybWF0dGVycz1bXTt0aGlzLiR2aWV3Q2hhbmdlTGlzdGVuZXJzPVtdO3RoaXMuJHVudG91Y2hlZD0hMDt0aGlzLiR0b3VjaGVkPSExO3RoaXMuJHByaXN0aW5lPSEwO3RoaXMuJGRpcnR5PSExO3RoaXMuJHZhbGlkPSEwO3RoaXMuJGludmFsaWQ9ITE7dGhpcy4kZXJyb3I9e307dGhpcy4kJHN1Y2Nlc3M9XG57fTt0aGlzLiRwZW5kaW5nPXQ7dGhpcy4kbmFtZT1tKGQubmFtZXx8XCJcIiwhMSkoYSk7dmFyIG49ZihkLm5nTW9kZWwpLHE9bi5hc3NpZ24sdT1uLHI9cSxQPW51bGwscD10aGlzO3RoaXMuJCRzZXRPcHRpb25zPWZ1bmN0aW9uKGEpe2lmKChwLiRvcHRpb25zPWEpJiZhLmdldHRlclNldHRlcil7dmFyIGM9ZihkLm5nTW9kZWwrXCIoKVwiKSxnPWYoZC5uZ01vZGVsK1wiKCQkJHApXCIpO3U9ZnVuY3Rpb24oYSl7dmFyIGQ9bihhKTtHKGQpJiYoZD1jKGEpKTtyZXR1cm4gZH07cj1mdW5jdGlvbihhLGMpe0cobihhKSk/ZyhhLHskJCRwOnAuJG1vZGVsVmFsdWV9KTpxKGEscC4kbW9kZWxWYWx1ZSl9fWVsc2UgaWYoIW4uYXNzaWduKXRocm93IE9iKFwibm9uYXNzaWduXCIsZC5uZ01vZGVsLHZhKGUpKTt9O3RoaXMuJHJlbmRlcj16O3RoaXMuJGlzRW1wdHk9ZnVuY3Rpb24oYSl7cmV0dXJuIEIoYSl8fFwiXCI9PT1hfHxudWxsPT09YXx8YSE9PWF9O3ZhciB2PWUuaW5oZXJpdGVkRGF0YShcIiRmb3JtQ29udHJvbGxlclwiKXx8XG5MYix3PTA7c2Qoe2N0cmw6dGhpcywkZWxlbWVudDplLHNldDpmdW5jdGlvbihhLGMpe2FbY109ITB9LHVuc2V0OmZ1bmN0aW9uKGEsYyl7ZGVsZXRlIGFbY119LHBhcmVudEZvcm06diwkYW5pbWF0ZTpnfSk7dGhpcy4kc2V0UHJpc3RpbmU9ZnVuY3Rpb24oKXtwLiRkaXJ0eT0hMTtwLiRwcmlzdGluZT0hMDtnLnJlbW92ZUNsYXNzKGUsTWIpO2cuYWRkQ2xhc3MoZSxTYSl9O3RoaXMuJHNldERpcnR5PWZ1bmN0aW9uKCl7cC4kZGlydHk9ITA7cC4kcHJpc3RpbmU9ITE7Zy5yZW1vdmVDbGFzcyhlLFNhKTtnLmFkZENsYXNzKGUsTWIpO3YuJHNldERpcnR5KCl9O3RoaXMuJHNldFVudG91Y2hlZD1mdW5jdGlvbigpe3AuJHRvdWNoZWQ9ITE7cC4kdW50b3VjaGVkPSEwO2cuc2V0Q2xhc3MoZSxcIm5nLXVudG91Y2hlZFwiLFwibmctdG91Y2hlZFwiKX07dGhpcy4kc2V0VG91Y2hlZD1mdW5jdGlvbigpe3AuJHRvdWNoZWQ9ITA7cC4kdW50b3VjaGVkPSExO2cuc2V0Q2xhc3MoZSxcIm5nLXRvdWNoZWRcIixcblwibmctdW50b3VjaGVkXCIpfTt0aGlzLiRyb2xsYmFja1ZpZXdWYWx1ZT1mdW5jdGlvbigpe2guY2FuY2VsKFApO3AuJHZpZXdWYWx1ZT1wLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZTtwLiRyZW5kZXIoKX07dGhpcy4kdmFsaWRhdGU9ZnVuY3Rpb24oKXtpZighVihwLiRtb2RlbFZhbHVlKXx8IWlzTmFOKHAuJG1vZGVsVmFsdWUpKXt2YXIgYT1wLiQkcmF3TW9kZWxWYWx1ZSxjPXAuJHZhbGlkLGQ9cC4kbW9kZWxWYWx1ZSxlPXAuJG9wdGlvbnMmJnAuJG9wdGlvbnMuYWxsb3dJbnZhbGlkO3AuJCRydW5WYWxpZGF0b3JzKHAuJGVycm9yW3AuJCRwYXJzZXJOYW1lfHxcInBhcnNlXCJdPyExOnQsYSxwLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSxmdW5jdGlvbihmKXtlfHxjPT09Znx8KHAuJG1vZGVsVmFsdWU9Zj9hOnQscC4kbW9kZWxWYWx1ZSE9PWQmJnAuJCR3cml0ZU1vZGVsVG9TY29wZSgpKX0pfX07dGhpcy4kJHJ1blZhbGlkYXRvcnM9ZnVuY3Rpb24oYSxjLGQsZSl7ZnVuY3Rpb24gZigpe3ZhciBhPVxuITA7cyhwLiR2YWxpZGF0b3JzLGZ1bmN0aW9uKGUsZil7dmFyIGc9ZShjLGQpO2E9YSYmZztoKGYsZyl9KTtyZXR1cm4gYT8hMDoocyhwLiRhc3luY1ZhbGlkYXRvcnMsZnVuY3Rpb24oYSxjKXtoKGMsbnVsbCl9KSwhMSl9ZnVuY3Rpb24gZygpe3ZhciBhPVtdLGU9ITA7cyhwLiRhc3luY1ZhbGlkYXRvcnMsZnVuY3Rpb24oZixnKXt2YXIgbD1mKGMsZCk7aWYoIWx8fCFHKGwudGhlbikpdGhyb3cgT2IoXCIkYXN5bmNWYWxpZGF0b3JzXCIsbCk7aChnLHQpO2EucHVzaChsLnRoZW4oZnVuY3Rpb24oKXtoKGcsITApfSxmdW5jdGlvbihhKXtlPSExO2goZywhMSl9KSl9KTthLmxlbmd0aD9rLmFsbChhKS50aGVuKGZ1bmN0aW9uKCl7bChlKX0seik6bCghMCl9ZnVuY3Rpb24gaChhLGMpe209PT13JiZwLiRzZXRWYWxpZGl0eShhLGMpfWZ1bmN0aW9uIGwoYSl7bT09PXcmJmUoYSl9dysrO3ZhciBtPXc7KGZ1bmN0aW9uKGEpe3ZhciBjPXAuJCRwYXJzZXJOYW1lfHxcInBhcnNlXCI7aWYoYT09PVxudCloKGMsbnVsbCk7ZWxzZSBpZihoKGMsYSksIWEpcmV0dXJuIHMocC4kdmFsaWRhdG9ycyxmdW5jdGlvbihhLGMpe2goYyxudWxsKX0pLHMocC4kYXN5bmNWYWxpZGF0b3JzLGZ1bmN0aW9uKGEsYyl7aChjLG51bGwpfSksITE7cmV0dXJuITB9KShhKT9mKCk/ZygpOmwoITEpOmwoITEpfTt0aGlzLiRjb21taXRWaWV3VmFsdWU9ZnVuY3Rpb24oKXt2YXIgYT1wLiR2aWV3VmFsdWU7aC5jYW5jZWwoUCk7aWYocC4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWUhPT1hfHxcIlwiPT09YSYmcC4kJGhhc05hdGl2ZVZhbGlkYXRvcnMpcC4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWU9YSxwLiRwcmlzdGluZSYmdGhpcy4kc2V0RGlydHkoKSx0aGlzLiQkcGFyc2VBbmRWYWxpZGF0ZSgpfTt0aGlzLiQkcGFyc2VBbmRWYWxpZGF0ZT1mdW5jdGlvbigpe3ZhciBjPXAuJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlLGQ9QihjKT90OiEwO2lmKGQpZm9yKHZhciBlPTA7ZTxwLiRwYXJzZXJzLmxlbmd0aDtlKyspaWYoYz1cbnAuJHBhcnNlcnNbZV0oYyksQihjKSl7ZD0hMTticmVha31WKHAuJG1vZGVsVmFsdWUpJiZpc05hTihwLiRtb2RlbFZhbHVlKSYmKHAuJG1vZGVsVmFsdWU9dShhKSk7dmFyIGY9cC4kbW9kZWxWYWx1ZSxnPXAuJG9wdGlvbnMmJnAuJG9wdGlvbnMuYWxsb3dJbnZhbGlkO3AuJCRyYXdNb2RlbFZhbHVlPWM7ZyYmKHAuJG1vZGVsVmFsdWU9YyxwLiRtb2RlbFZhbHVlIT09ZiYmcC4kJHdyaXRlTW9kZWxUb1Njb3BlKCkpO3AuJCRydW5WYWxpZGF0b3JzKGQsYyxwLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSxmdW5jdGlvbihhKXtnfHwocC4kbW9kZWxWYWx1ZT1hP2M6dCxwLiRtb2RlbFZhbHVlIT09ZiYmcC4kJHdyaXRlTW9kZWxUb1Njb3BlKCkpfSl9O3RoaXMuJCR3cml0ZU1vZGVsVG9TY29wZT1mdW5jdGlvbigpe3IoYSxwLiRtb2RlbFZhbHVlKTtzKHAuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMsZnVuY3Rpb24oYSl7dHJ5e2EoKX1jYXRjaChkKXtjKGQpfX0pfTt0aGlzLiRzZXRWaWV3VmFsdWU9XG5mdW5jdGlvbihhLGMpe3AuJHZpZXdWYWx1ZT1hO3AuJG9wdGlvbnMmJiFwLiRvcHRpb25zLnVwZGF0ZU9uRGVmYXVsdHx8cC4kJGRlYm91bmNlVmlld1ZhbHVlQ29tbWl0KGMpfTt0aGlzLiQkZGVib3VuY2VWaWV3VmFsdWVDb21taXQ9ZnVuY3Rpb24oYyl7dmFyIGQ9MCxlPXAuJG9wdGlvbnM7ZSYmeShlLmRlYm91bmNlKSYmKGU9ZS5kZWJvdW5jZSxWKGUpP2Q9ZTpWKGVbY10pP2Q9ZVtjXTpWKGVbXCJkZWZhdWx0XCJdKSYmKGQ9ZVtcImRlZmF1bHRcIl0pKTtoLmNhbmNlbChQKTtkP1A9aChmdW5jdGlvbigpe3AuJGNvbW1pdFZpZXdWYWx1ZSgpfSxkKTpsLiQkcGhhc2U/cC4kY29tbWl0Vmlld1ZhbHVlKCk6YS4kYXBwbHkoZnVuY3Rpb24oKXtwLiRjb21taXRWaWV3VmFsdWUoKX0pfTthLiR3YXRjaChmdW5jdGlvbigpe3ZhciBjPXUoYSk7aWYoYyE9PXAuJG1vZGVsVmFsdWUpe3AuJG1vZGVsVmFsdWU9cC4kJHJhd01vZGVsVmFsdWU9Yztmb3IodmFyIGQ9cC4kZm9ybWF0dGVycyxlPWQubGVuZ3RoLFxuZj1jO2UtLTspZj1kW2VdKGYpO3AuJHZpZXdWYWx1ZSE9PWYmJihwLiR2aWV3VmFsdWU9cC4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWU9ZixwLiRyZW5kZXIoKSxwLiQkcnVuVmFsaWRhdG9ycyh0LGMsZix6KSl9cmV0dXJuIGN9KX1dLHZlPVtcIiRyb290U2NvcGVcIixmdW5jdGlvbihhKXtyZXR1cm57cmVzdHJpY3Q6XCJBXCIscmVxdWlyZTpbXCJuZ01vZGVsXCIsXCJeP2Zvcm1cIixcIl4/bmdNb2RlbE9wdGlvbnNcIl0sY29udHJvbGxlcjpkZyxwcmlvcml0eToxLGNvbXBpbGU6ZnVuY3Rpb24oYyl7Yy5hZGRDbGFzcyhTYSkuYWRkQ2xhc3MoXCJuZy11bnRvdWNoZWRcIikuYWRkQ2xhc3MobGIpO3JldHVybntwcmU6ZnVuY3Rpb24oYSxjLGYsZyl7dmFyIGg9Z1swXSxsPWdbMV18fExiO2guJCRzZXRPcHRpb25zKGdbMl0mJmdbMl0uJG9wdGlvbnMpO2wuJGFkZENvbnRyb2woaCk7Zi4kb2JzZXJ2ZShcIm5hbWVcIixmdW5jdGlvbihhKXtoLiRuYW1lIT09YSYmbC4kJHJlbmFtZUNvbnRyb2woaCxhKX0pO2EuJG9uKFwiJGRlc3Ryb3lcIixcbmZ1bmN0aW9uKCl7bC4kcmVtb3ZlQ29udHJvbChoKX0pfSxwb3N0OmZ1bmN0aW9uKGMsZSxmLGcpe3ZhciBoPWdbMF07aWYoaC4kb3B0aW9ucyYmaC4kb3B0aW9ucy51cGRhdGVPbillLm9uKGguJG9wdGlvbnMudXBkYXRlT24sZnVuY3Rpb24oYSl7aC4kJGRlYm91bmNlVmlld1ZhbHVlQ29tbWl0KGEmJmEudHlwZSl9KTtlLm9uKFwiYmx1clwiLGZ1bmN0aW9uKGUpe2guJHRvdWNoZWR8fChhLiQkcGhhc2U/Yy4kZXZhbEFzeW5jKGguJHNldFRvdWNoZWQpOmMuJGFwcGx5KGguJHNldFRvdWNoZWQpKX0pfX19fX1dLGVnPS8oXFxzK3xeKWRlZmF1bHQoXFxzK3wkKS8semU9ZnVuY3Rpb24oKXtyZXR1cm57cmVzdHJpY3Q6XCJBXCIsY29udHJvbGxlcjpbXCIkc2NvcGVcIixcIiRhdHRyc1wiLGZ1bmN0aW9uKGEsYyl7dmFyIGQ9dGhpczt0aGlzLiRvcHRpb25zPWEuJGV2YWwoYy5uZ01vZGVsT3B0aW9ucyk7dGhpcy4kb3B0aW9ucy51cGRhdGVPbiE9PXQ/KHRoaXMuJG9wdGlvbnMudXBkYXRlT25EZWZhdWx0PVxuITEsdGhpcy4kb3B0aW9ucy51cGRhdGVPbj1VKHRoaXMuJG9wdGlvbnMudXBkYXRlT24ucmVwbGFjZShlZyxmdW5jdGlvbigpe2QuJG9wdGlvbnMudXBkYXRlT25EZWZhdWx0PSEwO3JldHVyblwiIFwifSkpKTp0aGlzLiRvcHRpb25zLnVwZGF0ZU9uRGVmYXVsdD0hMH1dfX0sbGU9SmEoe3Rlcm1pbmFsOiEwLHByaW9yaXR5OjFFM30pLG1lPVtcIiRsb2NhbGVcIixcIiRpbnRlcnBvbGF0ZVwiLGZ1bmN0aW9uKGEsYyl7dmFyIGQ9L3t9L2csZT0vXndoZW4oTWludXMpPyguKykkLztyZXR1cm57cmVzdHJpY3Q6XCJFQVwiLGxpbms6ZnVuY3Rpb24oZixnLGgpe2Z1bmN0aW9uIGwoYSl7Zy50ZXh0KGF8fFwiXCIpfXZhciBrPWguY291bnQsbT1oLiRhdHRyLndoZW4mJmcuYXR0cihoLiRhdHRyLndoZW4pLG49aC5vZmZzZXR8fDAscT1mLiRldmFsKG0pfHx7fSx1PXt9LG09Yy5zdGFydFN5bWJvbCgpLHI9Yy5lbmRTeW1ib2woKSx0PW0raytcIi1cIituK3IscD1jYS5ub29wLHY7cyhoLGZ1bmN0aW9uKGEsYyl7dmFyIGQ9XG5lLmV4ZWMoYyk7ZCYmKGQ9KGRbMV0/XCItXCI6XCJcIikrUShkWzJdKSxxW2RdPWcuYXR0cihoLiRhdHRyW2NdKSl9KTtzKHEsZnVuY3Rpb24oYSxlKXt1W2VdPWMoYS5yZXBsYWNlKGQsdCkpfSk7Zi4kd2F0Y2goayxmdW5jdGlvbihjKXtjPXBhcnNlRmxvYXQoYyk7dmFyIGQ9aXNOYU4oYyk7ZHx8YyBpbiBxfHwoYz1hLnBsdXJhbENhdChjLW4pKTtjPT09dnx8ZCYmaXNOYU4odil8fChwKCkscD1mLiR3YXRjaCh1W2NdLGwpLHY9Yyl9KX19fV0sbmU9W1wiJHBhcnNlXCIsXCIkYW5pbWF0ZVwiLGZ1bmN0aW9uKGEsYyl7dmFyIGQ9UyhcIm5nUmVwZWF0XCIpLGU9ZnVuY3Rpb24oYSxjLGQsZSxrLG0sbil7YVtkXT1lO2smJihhW2tdPW0pO2EuJGluZGV4PWM7YS4kZmlyc3Q9MD09PWM7YS4kbGFzdD1jPT09bi0xO2EuJG1pZGRsZT0hKGEuJGZpcnN0fHxhLiRsYXN0KTthLiRvZGQ9IShhLiRldmVuPTA9PT0oYyYxKSl9O3JldHVybntyZXN0cmljdDpcIkFcIixtdWx0aUVsZW1lbnQ6ITAsdHJhbnNjbHVkZTpcImVsZW1lbnRcIixcbnByaW9yaXR5OjFFMyx0ZXJtaW5hbDohMCwkJHRsYjohMCxjb21waWxlOmZ1bmN0aW9uKGYsZyl7dmFyIGg9Zy5uZ1JlcGVhdCxsPVkuY3JlYXRlQ29tbWVudChcIiBlbmQgbmdSZXBlYXQ6IFwiK2grXCIgXCIpLGs9aC5tYXRjaCgvXlxccyooW1xcc1xcU10rPylcXHMraW5cXHMrKFtcXHNcXFNdKz8pKD86XFxzK2FzXFxzKyhbXFxzXFxTXSs/KSk/KD86XFxzK3RyYWNrXFxzK2J5XFxzKyhbXFxzXFxTXSs/KSk/XFxzKiQvKTtpZighayl0aHJvdyBkKFwiaWV4cFwiLGgpO3ZhciBtPWtbMV0sbj1rWzJdLHE9a1szXSx1PWtbNF0saz1tLm1hdGNoKC9eKD86KFxccypbXFwkXFx3XSspfFxcKFxccyooW1xcJFxcd10rKVxccyosXFxzKihbXFwkXFx3XSspXFxzKlxcKSkkLyk7aWYoIWspdGhyb3cgZChcImlpZGV4cFwiLG0pO3ZhciByPWtbM118fGtbMV0seT1rWzJdO2lmKHEmJighL15bJGEtekEtWl9dWyRhLXpBLVowLTlfXSokLy50ZXN0KHEpfHwvXihudWxsfHVuZGVmaW5lZHx0aGlzfFxcJGluZGV4fFxcJGZpcnN0fFxcJG1pZGRsZXxcXCRsYXN0fFxcJGV2ZW58XFwkb2RkfFxcJHBhcmVudHxcXCRyb290fFxcJGlkKSQvLnRlc3QocSkpKXRocm93IGQoXCJiYWRpZGVudFwiLFxucSk7dmFyIHAsdix3LEIsej17JGlkOk5hfTt1P3A9YSh1KToodz1mdW5jdGlvbihhLGMpe3JldHVybiBOYShjKX0sQj1mdW5jdGlvbihhKXtyZXR1cm4gYX0pO3JldHVybiBmdW5jdGlvbihhLGYsZyxrLG0pe3AmJih2PWZ1bmN0aW9uKGMsZCxlKXt5JiYoelt5XT1jKTt6W3JdPWQ7ei4kaW5kZXg9ZTtyZXR1cm4gcChhLHopfSk7dmFyIHU9aGEoKTthLiR3YXRjaENvbGxlY3Rpb24obixmdW5jdGlvbihnKXt2YXIgayxwLG49ZlswXSxFLHo9aGEoKSx4LFQsTixHLEgsQyxJO3EmJihhW3FdPWcpO2lmKFRhKGcpKUg9ZyxwPXZ8fHc7ZWxzZXtwPXZ8fEI7SD1bXTtmb3IoSSBpbiBnKWcuaGFzT3duUHJvcGVydHkoSSkmJlwiJFwiIT1JLmNoYXJBdCgwKSYmSC5wdXNoKEkpO0guc29ydCgpfXg9SC5sZW5ndGg7ST1BcnJheSh4KTtmb3Ioaz0wO2s8eDtrKyspaWYoVD1nPT09SD9rOkhba10sTj1nW1RdLEc9cChULE4sayksdVtHXSlDPXVbR10sZGVsZXRlIHVbR10seltHXT1DLElba109QztlbHNle2lmKHpbR10pdGhyb3cgcyhJLFxuZnVuY3Rpb24oYSl7YSYmYS5zY29wZSYmKHVbYS5pZF09YSl9KSxkKFwiZHVwZXNcIixoLEcsTik7SVtrXT17aWQ6RyxzY29wZTp0LGNsb25lOnR9O3pbR109ITB9Zm9yKEUgaW4gdSl7Qz11W0VdO0c9dWIoQy5jbG9uZSk7Yy5sZWF2ZShHKTtpZihHWzBdLnBhcmVudE5vZGUpZm9yKGs9MCxwPUcubGVuZ3RoO2s8cDtrKyspR1trXS4kJE5HX1JFTU9WRUQ9ITA7Qy5zY29wZS4kZGVzdHJveSgpfWZvcihrPTA7azx4O2srKylpZihUPWc9PT1IP2s6SFtrXSxOPWdbVF0sQz1JW2tdLEMuc2NvcGUpe0U9bjtkbyBFPUUubmV4dFNpYmxpbmc7d2hpbGUoRSYmRS4kJE5HX1JFTU9WRUQpO0MuY2xvbmVbMF0hPUUmJmMubW92ZSh1YihDLmNsb25lKSxudWxsLEQobikpO249Qy5jbG9uZVtDLmNsb25lLmxlbmd0aC0xXTtlKEMuc2NvcGUsayxyLE4seSxULHgpfWVsc2UgbShmdW5jdGlvbihhLGQpe0Muc2NvcGU9ZDt2YXIgZj1sLmNsb25lTm9kZSghMSk7YVthLmxlbmd0aCsrXT1mO2MuZW50ZXIoYSxcbm51bGwsRChuKSk7bj1mO0MuY2xvbmU9YTt6W0MuaWRdPUM7ZShDLnNjb3BlLGsscixOLHksVCx4KX0pO3U9en0pfX19fV0sb2U9W1wiJGFuaW1hdGVcIixmdW5jdGlvbihhKXtyZXR1cm57cmVzdHJpY3Q6XCJBXCIsbXVsdGlFbGVtZW50OiEwLGxpbms6ZnVuY3Rpb24oYyxkLGUpe2MuJHdhdGNoKGUubmdTaG93LGZ1bmN0aW9uKGMpe2FbYz9cInJlbW92ZUNsYXNzXCI6XCJhZGRDbGFzc1wiXShkLFwibmctaGlkZVwiLHt0ZW1wQ2xhc3NlczpcIm5nLWhpZGUtYW5pbWF0ZVwifSl9KX19fV0saGU9W1wiJGFuaW1hdGVcIixmdW5jdGlvbihhKXtyZXR1cm57cmVzdHJpY3Q6XCJBXCIsbXVsdGlFbGVtZW50OiEwLGxpbms6ZnVuY3Rpb24oYyxkLGUpe2MuJHdhdGNoKGUubmdIaWRlLGZ1bmN0aW9uKGMpe2FbYz9cImFkZENsYXNzXCI6XCJyZW1vdmVDbGFzc1wiXShkLFwibmctaGlkZVwiLHt0ZW1wQ2xhc3NlczpcIm5nLWhpZGUtYW5pbWF0ZVwifSl9KX19fV0scGU9SmEoZnVuY3Rpb24oYSxjLGQpe2EuJHdhdGNoQ29sbGVjdGlvbihkLm5nU3R5bGUsXG5mdW5jdGlvbihhLGQpe2QmJmEhPT1kJiZzKGQsZnVuY3Rpb24oYSxkKXtjLmNzcyhkLFwiXCIpfSk7YSYmYy5jc3MoYSl9KX0pLHFlPVtcIiRhbmltYXRlXCIsZnVuY3Rpb24oYSl7cmV0dXJue3Jlc3RyaWN0OlwiRUFcIixyZXF1aXJlOlwibmdTd2l0Y2hcIixjb250cm9sbGVyOltcIiRzY29wZVwiLGZ1bmN0aW9uKCl7dGhpcy5jYXNlcz17fX1dLGxpbms6ZnVuY3Rpb24oYyxkLGUsZil7dmFyIGc9W10saD1bXSxsPVtdLGs9W10sbT1mdW5jdGlvbihhLGMpe3JldHVybiBmdW5jdGlvbigpe2Euc3BsaWNlKGMsMSl9fTtjLiR3YXRjaChlLm5nU3dpdGNofHxlLm9uLGZ1bmN0aW9uKGMpe3ZhciBkLGU7ZD0wO2ZvcihlPWwubGVuZ3RoO2Q8ZTsrK2QpYS5jYW5jZWwobFtkXSk7ZD1sLmxlbmd0aD0wO2ZvcihlPWsubGVuZ3RoO2Q8ZTsrK2Qpe3ZhciByPXViKGhbZF0uY2xvbmUpO2tbZF0uJGRlc3Ryb3koKTsobFtkXT1hLmxlYXZlKHIpKS50aGVuKG0obCxkKSl9aC5sZW5ndGg9MDtrLmxlbmd0aD0wOyhnPVxuZi5jYXNlc1tcIiFcIitjXXx8Zi5jYXNlc1tcIj9cIl0pJiZzKGcsZnVuY3Rpb24oYyl7Yy50cmFuc2NsdWRlKGZ1bmN0aW9uKGQsZSl7ay5wdXNoKGUpO3ZhciBmPWMuZWxlbWVudDtkW2QubGVuZ3RoKytdPVkuY3JlYXRlQ29tbWVudChcIiBlbmQgbmdTd2l0Y2hXaGVuOiBcIik7aC5wdXNoKHtjbG9uZTpkfSk7YS5lbnRlcihkLGYucGFyZW50KCksZil9KX0pfSl9fX1dLHJlPUphKHt0cmFuc2NsdWRlOlwiZWxlbWVudFwiLHByaW9yaXR5OjEyMDAscmVxdWlyZTpcIl5uZ1N3aXRjaFwiLG11bHRpRWxlbWVudDohMCxsaW5rOmZ1bmN0aW9uKGEsYyxkLGUsZil7ZS5jYXNlc1tcIiFcIitkLm5nU3dpdGNoV2hlbl09ZS5jYXNlc1tcIiFcIitkLm5nU3dpdGNoV2hlbl18fFtdO2UuY2FzZXNbXCIhXCIrZC5uZ1N3aXRjaFdoZW5dLnB1c2goe3RyYW5zY2x1ZGU6ZixlbGVtZW50OmN9KX19KSxzZT1KYSh7dHJhbnNjbHVkZTpcImVsZW1lbnRcIixwcmlvcml0eToxMjAwLHJlcXVpcmU6XCJebmdTd2l0Y2hcIixtdWx0aUVsZW1lbnQ6ITAsXG5saW5rOmZ1bmN0aW9uKGEsYyxkLGUsZil7ZS5jYXNlc1tcIj9cIl09ZS5jYXNlc1tcIj9cIl18fFtdO2UuY2FzZXNbXCI/XCJdLnB1c2goe3RyYW5zY2x1ZGU6ZixlbGVtZW50OmN9KX19KSx1ZT1KYSh7cmVzdHJpY3Q6XCJFQUNcIixsaW5rOmZ1bmN0aW9uKGEsYyxkLGUsZil7aWYoIWYpdGhyb3cgUyhcIm5nVHJhbnNjbHVkZVwiKShcIm9ycGhhblwiLHZhKGMpKTtmKGZ1bmN0aW9uKGEpe2MuZW1wdHkoKTtjLmFwcGVuZChhKX0pfX0pLFZkPVtcIiR0ZW1wbGF0ZUNhY2hlXCIsZnVuY3Rpb24oYSl7cmV0dXJue3Jlc3RyaWN0OlwiRVwiLHRlcm1pbmFsOiEwLGNvbXBpbGU6ZnVuY3Rpb24oYyxkKXtcInRleHQvbmctdGVtcGxhdGVcIj09ZC50eXBlJiZhLnB1dChkLmlkLGNbMF0udGV4dCl9fX1dLGZnPVMoXCJuZ09wdGlvbnNcIiksdGU9ZWEoe3Jlc3RyaWN0OlwiQVwiLHRlcm1pbmFsOiEwfSksV2Q9W1wiJGNvbXBpbGVcIixcIiRwYXJzZVwiLGZ1bmN0aW9uKGEsYyl7dmFyIGQ9L15cXHMqKFtcXHNcXFNdKz8pKD86XFxzK2FzXFxzKyhbXFxzXFxTXSs/KSk/KD86XFxzK2dyb3VwXFxzK2J5XFxzKyhbXFxzXFxTXSs/KSk/XFxzK2ZvclxccysoPzooW1xcJFxcd11bXFwkXFx3XSopfCg/OlxcKFxccyooW1xcJFxcd11bXFwkXFx3XSopXFxzKixcXHMqKFtcXCRcXHddW1xcJFxcd10qKVxccypcXCkpKVxccytpblxccysoW1xcc1xcU10rPykoPzpcXHMrdHJhY2tcXHMrYnlcXHMrKFtcXHNcXFNdKz8pKT8kLyxcbmU9eyRzZXRWaWV3VmFsdWU6en07cmV0dXJue3Jlc3RyaWN0OlwiRVwiLHJlcXVpcmU6W1wic2VsZWN0XCIsXCI/bmdNb2RlbFwiXSxjb250cm9sbGVyOltcIiRlbGVtZW50XCIsXCIkc2NvcGVcIixcIiRhdHRyc1wiLGZ1bmN0aW9uKGEsYyxkKXt2YXIgbD10aGlzLGs9e30sbT1lLG47bC5kYXRhYm91bmQ9ZC5uZ01vZGVsO2wuaW5pdD1mdW5jdGlvbihhLGMsZCl7bT1hO249ZH07bC5hZGRPcHRpb249ZnVuY3Rpb24oYyxkKXtNYShjLCdcIm9wdGlvbiB2YWx1ZVwiJyk7a1tjXT0hMDttLiR2aWV3VmFsdWU9PWMmJihhLnZhbChjKSxuLnBhcmVudCgpJiZuLnJlbW92ZSgpKTtkJiZkWzBdLmhhc0F0dHJpYnV0ZShcInNlbGVjdGVkXCIpJiYoZFswXS5zZWxlY3RlZD0hMCl9O2wucmVtb3ZlT3B0aW9uPWZ1bmN0aW9uKGEpe3RoaXMuaGFzT3B0aW9uKGEpJiYoZGVsZXRlIGtbYV0sbS4kdmlld1ZhbHVlPT09YSYmdGhpcy5yZW5kZXJVbmtub3duT3B0aW9uKGEpKX07bC5yZW5kZXJVbmtub3duT3B0aW9uPWZ1bmN0aW9uKGMpe2M9XG5cIj8gXCIrTmEoYykrXCIgP1wiO24udmFsKGMpO2EucHJlcGVuZChuKTthLnZhbChjKTtuLnByb3AoXCJzZWxlY3RlZFwiLCEwKX07bC5oYXNPcHRpb249ZnVuY3Rpb24oYSl7cmV0dXJuIGsuaGFzT3duUHJvcGVydHkoYSl9O2MuJG9uKFwiJGRlc3Ryb3lcIixmdW5jdGlvbigpe2wucmVuZGVyVW5rbm93bk9wdGlvbj16fSl9XSxsaW5rOmZ1bmN0aW9uKGUsZyxoLGwpe2Z1bmN0aW9uIGsoYSxjLGQsZSl7ZC4kcmVuZGVyPWZ1bmN0aW9uKCl7dmFyIGE9ZC4kdmlld1ZhbHVlO2UuaGFzT3B0aW9uKGEpPyhDLnBhcmVudCgpJiZDLnJlbW92ZSgpLGMudmFsKGEpLFwiXCI9PT1hJiZwLnByb3AoXCJzZWxlY3RlZFwiLCEwKSk6QihhKSYmcD9jLnZhbChcIlwiKTplLnJlbmRlclVua25vd25PcHRpb24oYSl9O2Mub24oXCJjaGFuZ2VcIixmdW5jdGlvbigpe2EuJGFwcGx5KGZ1bmN0aW9uKCl7Qy5wYXJlbnQoKSYmQy5yZW1vdmUoKTtkLiRzZXRWaWV3VmFsdWUoYy52YWwoKSl9KX0pfWZ1bmN0aW9uIG0oYSxjLGQpe3ZhciBlO1xuZC4kcmVuZGVyPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IGViKGQuJHZpZXdWYWx1ZSk7cyhjLmZpbmQoXCJvcHRpb25cIiksZnVuY3Rpb24oYyl7Yy5zZWxlY3RlZD15KGEuZ2V0KGMudmFsdWUpKX0pfTthLiR3YXRjaChmdW5jdGlvbigpe2dhKGUsZC4kdmlld1ZhbHVlKXx8KGU9cmEoZC4kdmlld1ZhbHVlKSxkLiRyZW5kZXIoKSl9KTtjLm9uKFwiY2hhbmdlXCIsZnVuY3Rpb24oKXthLiRhcHBseShmdW5jdGlvbigpe3ZhciBhPVtdO3MoYy5maW5kKFwib3B0aW9uXCIpLGZ1bmN0aW9uKGMpe2Muc2VsZWN0ZWQmJmEucHVzaChjLnZhbHVlKX0pO2QuJHNldFZpZXdWYWx1ZShhKX0pfSl9ZnVuY3Rpb24gbihlLGYsZyl7ZnVuY3Rpb24gaChhLGMsZCl7U1t4XT1kO0QmJihTW0RdPWMpO3JldHVybiBhKGUsUyl9ZnVuY3Rpb24gayhhKXt2YXIgYztpZih1KWlmKE0mJkgoYSkpe2M9bmV3IGViKFtdKTtmb3IodmFyIGQ9MDtkPGEubGVuZ3RoO2QrKyljLnB1dChoKE0sbnVsbCxhW2RdKSwhMCl9ZWxzZSBjPVxubmV3IGViKGEpO2Vsc2UgTSYmKGE9aChNLG51bGwsYSkpO3JldHVybiBmdW5jdGlvbihkLGUpe3ZhciBmO2Y9TT9NOkI/QjpGO3JldHVybiB1P3koYy5yZW1vdmUoaChmLGQsZSkpKTphPT09aChmLGQsZSl9fWZ1bmN0aW9uIGwoKXt2fHwoZS4kJHBvc3REaWdlc3QocCksdj0hMCl9ZnVuY3Rpb24gbShhLGMsZCl7YVtjXT1hW2NdfHwwO2FbY10rPWQ/MTotMX1mdW5jdGlvbiBwKCl7dj0hMTt2YXIgYT17XCJcIjpbXX0sYz1bXCJcIl0sZCxsLG4scix0O249Zy4kdmlld1ZhbHVlO3I9TyhlKXx8W107dmFyIEI9RD9PYmplY3Qua2V5cyhyKS5zb3J0KCk6cix4LEEsSCxGLE49e307dD1rKG4pO3ZhciBKPSExLFUsVjtRPXt9O2ZvcihGPTA7SD1CLmxlbmd0aCxGPEg7RisrKXt4PUY7aWYoRCYmKHg9QltGXSxcIiRcIj09PXguY2hhckF0KDApKSljb250aW51ZTtBPXJbeF07ZD1oKEkseCxBKXx8XCJcIjsobD1hW2RdKXx8KGw9YVtkXT1bXSxjLnB1c2goZCkpO2Q9dCh4LEEpO0o9Snx8ZDtBPWgoQyx4LEEpO1xuQT15KEEpP0E6XCJcIjtWPU0/TShlLFMpOkQ/QltGXTpGO00mJihRW1ZdPXgpO2wucHVzaCh7aWQ6VixsYWJlbDpBLHNlbGVjdGVkOmR9KX11fHwoenx8bnVsbD09PW4/YVtcIlwiXS51bnNoaWZ0KHtpZDpcIlwiLGxhYmVsOlwiXCIsc2VsZWN0ZWQ6IUp9KTpKfHxhW1wiXCJdLnVuc2hpZnQoe2lkOlwiP1wiLGxhYmVsOlwiXCIsc2VsZWN0ZWQ6ITB9KSk7eD0wO2ZvcihCPWMubGVuZ3RoO3g8Qjt4Kyspe2Q9Y1t4XTtsPWFbZF07Ui5sZW5ndGg8PXg/KG49e2VsZW1lbnQ6Ry5jbG9uZSgpLmF0dHIoXCJsYWJlbFwiLGQpLGxhYmVsOmwubGFiZWx9LHI9W25dLFIucHVzaChyKSxmLmFwcGVuZChuLmVsZW1lbnQpKToocj1SW3hdLG49clswXSxuLmxhYmVsIT1kJiZuLmVsZW1lbnQuYXR0cihcImxhYmVsXCIsbi5sYWJlbD1kKSk7Sj1udWxsO0Y9MDtmb3IoSD1sLmxlbmd0aDtGPEg7RisrKWQ9bFtGXSwodD1yW0YrMV0pPyhKPXQuZWxlbWVudCx0LmxhYmVsIT09ZC5sYWJlbCYmKG0oTix0LmxhYmVsLCExKSxtKE4sZC5sYWJlbCxcbiEwKSxKLnRleHQodC5sYWJlbD1kLmxhYmVsKSxKLnByb3AoXCJsYWJlbFwiLHQubGFiZWwpKSx0LmlkIT09ZC5pZCYmSi52YWwodC5pZD1kLmlkKSxKWzBdLnNlbGVjdGVkIT09ZC5zZWxlY3RlZCYmKEoucHJvcChcInNlbGVjdGVkXCIsdC5zZWxlY3RlZD1kLnNlbGVjdGVkKSxSYSYmSi5wcm9wKFwic2VsZWN0ZWRcIix0LnNlbGVjdGVkKSkpOihcIlwiPT09ZC5pZCYmej9VPXo6KFU9dy5jbG9uZSgpKS52YWwoZC5pZCkucHJvcChcInNlbGVjdGVkXCIsZC5zZWxlY3RlZCkuYXR0cihcInNlbGVjdGVkXCIsZC5zZWxlY3RlZCkucHJvcChcImxhYmVsXCIsZC5sYWJlbCkudGV4dChkLmxhYmVsKSxyLnB1c2godD17ZWxlbWVudDpVLGxhYmVsOmQubGFiZWwsaWQ6ZC5pZCxzZWxlY3RlZDpkLnNlbGVjdGVkfSksbShOLGQubGFiZWwsITApLEo/Si5hZnRlcihVKTpuLmVsZW1lbnQuYXBwZW5kKFUpLEo9VSk7Zm9yKEYrKztyLmxlbmd0aD5GOylkPXIucG9wKCksbShOLGQubGFiZWwsITEpLGQuZWxlbWVudC5yZW1vdmUoKX1mb3IoO1IubGVuZ3RoPlxueDspe2w9Ui5wb3AoKTtmb3IoRj0xO0Y8bC5sZW5ndGg7KytGKW0oTixsW0ZdLmxhYmVsLCExKTtsWzBdLmVsZW1lbnQucmVtb3ZlKCl9cyhOLGZ1bmN0aW9uKGEsYyl7MDxhP3EuYWRkT3B0aW9uKGMpOjA+YSYmcS5yZW1vdmVPcHRpb24oYyl9KX12YXIgbjtpZighKG49ci5tYXRjaChkKSkpdGhyb3cgZmcoXCJpZXhwXCIscix2YShmKSk7dmFyIEM9YyhuWzJdfHxuWzFdKSx4PW5bNF18fG5bNl0sQT0vIGFzIC8udGVzdChuWzBdKSYmblsxXSxCPUE/YyhBKTpudWxsLEQ9bls1XSxJPWMoblszXXx8XCJcIiksRj1jKG5bMl0/blsxXTp4KSxPPWMobls3XSksTT1uWzhdP2Mobls4XSk6bnVsbCxRPXt9LFI9W1t7ZWxlbWVudDpmLGxhYmVsOlwiXCJ9XV0sUz17fTt6JiYoYSh6KShlKSx6LnJlbW92ZUNsYXNzKFwibmctc2NvcGVcIiksei5yZW1vdmUoKSk7Zi5lbXB0eSgpO2Yub24oXCJjaGFuZ2VcIixmdW5jdGlvbigpe2UuJGFwcGx5KGZ1bmN0aW9uKCl7dmFyIGE9TyhlKXx8W10sYztpZih1KWM9W10scyhmLnZhbCgpLFxuZnVuY3Rpb24oZCl7ZD1NP1FbZF06ZDtjLnB1c2goXCI/XCI9PT1kP3Q6XCJcIj09PWQ/bnVsbDpoKEI/QjpGLGQsYVtkXSkpfSk7ZWxzZXt2YXIgZD1NP1FbZi52YWwoKV06Zi52YWwoKTtjPVwiP1wiPT09ZD90OlwiXCI9PT1kP251bGw6aChCP0I6RixkLGFbZF0pfWcuJHNldFZpZXdWYWx1ZShjKTtwKCl9KX0pO2cuJHJlbmRlcj1wO2UuJHdhdGNoQ29sbGVjdGlvbihPLGwpO2UuJHdhdGNoQ29sbGVjdGlvbihmdW5jdGlvbigpe3ZhciBhPU8oZSksYztpZihhJiZIKGEpKXtjPUFycmF5KGEubGVuZ3RoKTtmb3IodmFyIGQ9MCxmPWEubGVuZ3RoO2Q8ZjtkKyspY1tkXT1oKEMsZCxhW2RdKX1lbHNlIGlmKGEpZm9yKGQgaW4gYz17fSxhKWEuaGFzT3duUHJvcGVydHkoZCkmJihjW2RdPWgoQyxkLGFbZF0pKTtyZXR1cm4gY30sbCk7dSYmZS4kd2F0Y2hDb2xsZWN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGcuJG1vZGVsVmFsdWV9LGwpfWlmKGxbMV0pe3ZhciBxPWxbMF07bD1sWzFdO3ZhciB1PWgubXVsdGlwbGUsXG5yPWgubmdPcHRpb25zLHo9ITEscCx2PSExLHc9RChZLmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIikpLEc9RChZLmNyZWF0ZUVsZW1lbnQoXCJvcHRncm91cFwiKSksQz13LmNsb25lKCk7aD0wO2Zvcih2YXIgQT1nLmNoaWxkcmVuKCkseD1BLmxlbmd0aDtoPHg7aCsrKWlmKFwiXCI9PT1BW2hdLnZhbHVlKXtwPXo9QS5lcShoKTticmVha31xLmluaXQobCx6LEMpO3UmJihsLiRpc0VtcHR5PWZ1bmN0aW9uKGEpe3JldHVybiFhfHwwPT09YS5sZW5ndGh9KTtyP24oZSxnLGwpOnU/bShlLGcsbCk6ayhlLGcsbCxxKX19fX1dLFlkPVtcIiRpbnRlcnBvbGF0ZVwiLGZ1bmN0aW9uKGEpe3ZhciBjPXthZGRPcHRpb246eixyZW1vdmVPcHRpb246en07cmV0dXJue3Jlc3RyaWN0OlwiRVwiLHByaW9yaXR5OjEwMCxjb21waWxlOmZ1bmN0aW9uKGQsZSl7aWYoQihlLnZhbHVlKSl7dmFyIGY9YShkLnRleHQoKSwhMCk7Znx8ZS4kc2V0KFwidmFsdWVcIixkLnRleHQoKSl9cmV0dXJuIGZ1bmN0aW9uKGEsZCxlKXt2YXIgaz1cbmQucGFyZW50KCksbT1rLmRhdGEoXCIkc2VsZWN0Q29udHJvbGxlclwiKXx8ay5wYXJlbnQoKS5kYXRhKFwiJHNlbGVjdENvbnRyb2xsZXJcIik7bSYmbS5kYXRhYm91bmR8fChtPWMpO2Y/YS4kd2F0Y2goZixmdW5jdGlvbihhLGMpe2UuJHNldChcInZhbHVlXCIsYSk7YyE9PWEmJm0ucmVtb3ZlT3B0aW9uKGMpO20uYWRkT3B0aW9uKGEsZCl9KTptLmFkZE9wdGlvbihlLnZhbHVlLGQpO2Qub24oXCIkZGVzdHJveVwiLGZ1bmN0aW9uKCl7bS5yZW1vdmVPcHRpb24oZS52YWx1ZSl9KX19fX1dLFhkPWVhKHtyZXN0cmljdDpcIkVcIix0ZXJtaW5hbDohMX0pLEFjPWZ1bmN0aW9uKCl7cmV0dXJue3Jlc3RyaWN0OlwiQVwiLHJlcXVpcmU6XCI/bmdNb2RlbFwiLGxpbms6ZnVuY3Rpb24oYSxjLGQsZSl7ZSYmKGQucmVxdWlyZWQ9ITAsZS4kdmFsaWRhdG9ycy5yZXF1aXJlZD1mdW5jdGlvbihhLGMpe3JldHVybiFkLnJlcXVpcmVkfHwhZS4kaXNFbXB0eShjKX0sZC4kb2JzZXJ2ZShcInJlcXVpcmVkXCIsZnVuY3Rpb24oKXtlLiR2YWxpZGF0ZSgpfSkpfX19LFxuemM9ZnVuY3Rpb24oKXtyZXR1cm57cmVzdHJpY3Q6XCJBXCIscmVxdWlyZTpcIj9uZ01vZGVsXCIsbGluazpmdW5jdGlvbihhLGMsZCxlKXtpZihlKXt2YXIgZixnPWQubmdQYXR0ZXJufHxkLnBhdHRlcm47ZC4kb2JzZXJ2ZShcInBhdHRlcm5cIixmdW5jdGlvbihhKXtGKGEpJiYwPGEubGVuZ3RoJiYoYT1uZXcgUmVnRXhwKFwiXlwiK2ErXCIkXCIpKTtpZihhJiYhYS50ZXN0KXRocm93IFMoXCJuZ1BhdHRlcm5cIikoXCJub3JlZ2V4cFwiLGcsYSx2YShjKSk7Zj1hfHx0O2UuJHZhbGlkYXRlKCl9KTtlLiR2YWxpZGF0b3JzLnBhdHRlcm49ZnVuY3Rpb24oYSl7cmV0dXJuIGUuJGlzRW1wdHkoYSl8fEIoZil8fGYudGVzdChhKX19fX19LENjPWZ1bmN0aW9uKCl7cmV0dXJue3Jlc3RyaWN0OlwiQVwiLHJlcXVpcmU6XCI/bmdNb2RlbFwiLGxpbms6ZnVuY3Rpb24oYSxjLGQsZSl7aWYoZSl7dmFyIGY9LTE7ZC4kb2JzZXJ2ZShcIm1heGxlbmd0aFwiLGZ1bmN0aW9uKGEpe2E9YmEoYSk7Zj1pc05hTihhKT8tMTphO2UuJHZhbGlkYXRlKCl9KTtcbmUuJHZhbGlkYXRvcnMubWF4bGVuZ3RoPWZ1bmN0aW9uKGEsYyl7cmV0dXJuIDA+Znx8ZS4kaXNFbXB0eShjKXx8Yy5sZW5ndGg8PWZ9fX19fSxCYz1mdW5jdGlvbigpe3JldHVybntyZXN0cmljdDpcIkFcIixyZXF1aXJlOlwiP25nTW9kZWxcIixsaW5rOmZ1bmN0aW9uKGEsYyxkLGUpe2lmKGUpe3ZhciBmPTA7ZC4kb2JzZXJ2ZShcIm1pbmxlbmd0aFwiLGZ1bmN0aW9uKGEpe2Y9YmEoYSl8fDA7ZS4kdmFsaWRhdGUoKX0pO2UuJHZhbGlkYXRvcnMubWlubGVuZ3RoPWZ1bmN0aW9uKGEsYyl7cmV0dXJuIGUuJGlzRW1wdHkoYyl8fGMubGVuZ3RoPj1mfX19fX07TS5hbmd1bGFyLmJvb3RzdHJhcD9jb25zb2xlLmxvZyhcIldBUk5JTkc6IFRyaWVkIHRvIGxvYWQgYW5ndWxhciBtb3JlIHRoYW4gb25jZS5cIik6KE5kKCksUGQoY2EpLEQoWSkucmVhZHkoZnVuY3Rpb24oKXtKZChZLHRjKX0pKX0pKHdpbmRvdyxkb2N1bWVudCk7IXdpbmRvdy5hbmd1bGFyLiQkY3NwKCkmJndpbmRvdy5hbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLmZpbmQoXCJoZWFkXCIpLnByZXBlbmQoJzxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj5AY2hhcnNldCBcIlVURi04XCI7W25nXFxcXDpjbG9ha10sW25nLWNsb2FrXSxbZGF0YS1uZy1jbG9ha10sW3gtbmctY2xvYWtdLC5uZy1jbG9haywueC1uZy1jbG9haywubmctaGlkZTpub3QoLm5nLWhpZGUtYW5pbWF0ZSl7ZGlzcGxheTpub25lICFpbXBvcnRhbnQ7fW5nXFxcXDpmb3Jte2Rpc3BsYXk6YmxvY2s7fTwvc3R5bGU+Jyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbmd1bGFyLm1pbi5qcy5tYXBcbiIsIi8qXG4gQW5ndWxhckpTIHYxLjMuMFxuIChjKSAyMDEwLTIwMTQgR29vZ2xlLCBJbmMuIGh0dHA6Ly9hbmd1bGFyanMub3JnXG4gTGljZW5zZTogTUlUXG4qL1xuKGZ1bmN0aW9uKE0sZixTKXsndXNlIHN0cmljdCc7Zi5tb2R1bGUoXCJuZ0FuaW1hdGVcIixbXCJuZ1wiXSkuZGlyZWN0aXZlKFwibmdBbmltYXRlQ2hpbGRyZW5cIixmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihULEIsayl7az1rLm5nQW5pbWF0ZUNoaWxkcmVuO2YuaXNTdHJpbmcoaykmJjA9PT1rLmxlbmd0aD9CLmRhdGEoXCIkJG5nQW5pbWF0ZUNoaWxkcmVuXCIsITApOlQuJHdhdGNoKGssZnVuY3Rpb24oZil7Qi5kYXRhKFwiJCRuZ0FuaW1hdGVDaGlsZHJlblwiLCEhZil9KX19KS5mYWN0b3J5KFwiJCRhbmltYXRlUmVmbG93XCIsW1wiJCRyQUZcIixcIiRkb2N1bWVudFwiLGZ1bmN0aW9uKGYsQil7cmV0dXJuIGZ1bmN0aW9uKGspe3JldHVybiBmKGZ1bmN0aW9uKCl7aygpfSl9fV0pLmNvbmZpZyhbXCIkcHJvdmlkZVwiLFwiJGFuaW1hdGVQcm92aWRlclwiLGZ1bmN0aW9uKFQsQil7ZnVuY3Rpb24gayhmKXtmb3IodmFyIGc9MDtnPGYubGVuZ3RoO2crKyl7dmFyIGs9ZltnXTtpZigxPT1rLm5vZGVUeXBlKXJldHVybiBrfX1cbmZ1bmN0aW9uIE4oZixnKXtyZXR1cm4gayhmKT09ayhnKX12YXIgcz1mLm5vb3AsZz1mLmZvckVhY2gsYmE9Qi4kJHNlbGVjdG9ycywkPWYuaXNBcnJheSxjYT1mLmlzU3RyaW5nLGRhPWYuaXNPYmplY3QsdD17cnVubmluZzohMH07VC5kZWNvcmF0b3IoXCIkYW5pbWF0ZVwiLFtcIiRkZWxlZ2F0ZVwiLFwiJCRxXCIsXCIkaW5qZWN0b3JcIixcIiRzbmlmZmVyXCIsXCIkcm9vdEVsZW1lbnRcIixcIiQkYXN5bmNDYWxsYmFja1wiLFwiJHJvb3RTY29wZVwiLFwiJGRvY3VtZW50XCIsXCIkdGVtcGxhdGVSZXF1ZXN0XCIsZnVuY3Rpb24oTyxNLEksVSx4LEMsUCxTLFYpe2Z1bmN0aW9uIEEoYSxjKXt2YXIgYj1hLmRhdGEoXCIkJG5nQW5pbWF0ZVN0YXRlXCIpfHx7fTtjJiYoYi5ydW5uaW5nPSEwLGIuc3RydWN0dXJhbD0hMCxhLmRhdGEoXCIkJG5nQW5pbWF0ZVN0YXRlXCIsYikpO3JldHVybiBiLmRpc2FibGVkfHxiLnJ1bm5pbmcmJmIuc3RydWN0dXJhbH1mdW5jdGlvbiB6KGEpe3ZhciBjLGI9TS5kZWZlcigpO2IucHJvbWlzZS4kJGNhbmNlbEZuPVxuZnVuY3Rpb24oKXtjJiZjKCl9O1AuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCl7Yz1hKGZ1bmN0aW9uKCl7Yi5yZXNvbHZlKCl9KX0pO3JldHVybiBiLnByb21pc2V9ZnVuY3Rpb24gSihhKXtpZihkYShhKSlyZXR1cm4gYS50ZW1wQ2xhc3NlcyYmY2EoYS50ZW1wQ2xhc3NlcykmJihhLnRlbXBDbGFzc2VzPWEudGVtcENsYXNzZXMuc3BsaXQoL1xccysvKSksYX1mdW5jdGlvbiBXKGEsYyxiKXtiPWJ8fHt9O3ZhciBlPXt9O2coYixmdW5jdGlvbihhLGQpe2coZC5zcGxpdChcIiBcIiksZnVuY3Rpb24oZCl7ZVtkXT1hfSl9KTt2YXIgbT1PYmplY3QuY3JlYXRlKG51bGwpO2coKGEuYXR0cihcImNsYXNzXCIpfHxcIlwiKS5zcGxpdCgvXFxzKy8pLGZ1bmN0aW9uKGEpe21bYV09ITB9KTt2YXIgZj1bXSxrPVtdO2coYy5jbGFzc2VzLGZ1bmN0aW9uKGEsZCl7dmFyIGI9bVtkXSxjPWVbZF18fHt9OyExPT09YT8oYnx8XCJhZGRDbGFzc1wiPT1jLmV2ZW50KSYmay5wdXNoKGQpOiEwPT09YSYmKGImJlwicmVtb3ZlQ2xhc3NcIiE9XG5jLmV2ZW50fHxmLnB1c2goZCkpfSk7cmV0dXJuIDA8Zi5sZW5ndGgray5sZW5ndGgmJltmLmpvaW4oXCIgXCIpLGsuam9pbihcIiBcIildfWZ1bmN0aW9uIFEoYSl7aWYoYSl7dmFyIGM9W10sYj17fTthPWEuc3Vic3RyKDEpLnNwbGl0KFwiLlwiKTsoVS50cmFuc2l0aW9uc3x8VS5hbmltYXRpb25zKSYmYy5wdXNoKEkuZ2V0KGJhW1wiXCJdKSk7Zm9yKHZhciBlPTA7ZTxhLmxlbmd0aDtlKyspe3ZhciBmPWFbZV0saz1iYVtmXTtrJiYhYltmXSYmKGMucHVzaChJLmdldChrKSksYltmXT0hMCl9cmV0dXJuIGN9fWZ1bmN0aW9uIFIoYSxjLGIsZSl7ZnVuY3Rpb24gbShhLGQpe3ZhciBiPWFbZF0sYz1hW1wiYmVmb3JlXCIrZC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStkLnN1YnN0cigxKV07aWYoYnx8YylyZXR1cm5cImxlYXZlXCI9PWQmJihjPWIsYj1udWxsKSxsLnB1c2goe2V2ZW50OmQsZm46Yn0pLEgucHVzaCh7ZXZlbnQ6ZCxmbjpjfSksITB9ZnVuY3Rpb24gayhjLGgsRyl7dmFyIHc9W107ZyhjLGZ1bmN0aW9uKGEpe2EuZm4mJlxudy5wdXNoKGEpfSk7dmFyIGY9MDtnKHcsZnVuY3Rpb24oYyxuKXt2YXIgdT1mdW5jdGlvbigpe2E6e2lmKGgpeyhoW25dfHxzKSgpO2lmKCsrZjx3Lmxlbmd0aClicmVhayBhO2g9bnVsbH1HKCl9fTtzd2l0Y2goYy5ldmVudCl7Y2FzZSBcInNldENsYXNzXCI6aC5wdXNoKGMuZm4oYSxGLGQsdSxlKSk7YnJlYWs7Y2FzZSBcImFuaW1hdGVcIjpoLnB1c2goYy5mbihhLGIsZS5mcm9tLGUudG8sdSkpO2JyZWFrO2Nhc2UgXCJhZGRDbGFzc1wiOmgucHVzaChjLmZuKGEsRnx8Yix1LGUpKTticmVhaztjYXNlIFwicmVtb3ZlQ2xhc3NcIjpoLnB1c2goYy5mbihhLGR8fGIsdSxlKSk7YnJlYWs7ZGVmYXVsdDpoLnB1c2goYy5mbihhLHUsZSkpfX0pO2gmJjA9PT1oLmxlbmd0aCYmRygpfXZhciBwPWFbMF07aWYocCl7ZSYmKGUudG89ZS50b3x8e30sZS5mcm9tPWUuZnJvbXx8e30pO3ZhciBGLGQ7JChiKSYmKEY9YlswXSxkPWJbMV0sRj9kP2I9RitcIiBcIitkOihiPUYsYz1cImFkZENsYXNzXCIpOihiPWQsYz1cInJlbW92ZUNsYXNzXCIpKTtcbnZhciBoPVwic2V0Q2xhc3NcIj09YyxHPWh8fFwiYWRkQ2xhc3NcIj09Y3x8XCJyZW1vdmVDbGFzc1wiPT1jfHxcImFuaW1hdGVcIj09Yyx3PWEuYXR0cihcImNsYXNzXCIpK1wiIFwiK2I7aWYoWCh3KSl7dmFyIHU9cyxuPVtdLEg9W10scT1zLHI9W10sbD1bXSx3PShcIiBcIit3KS5yZXBsYWNlKC9cXHMrL2csXCIuXCIpO2coUSh3KSxmdW5jdGlvbihhKXshbShhLGMpJiZoJiYobShhLFwiYWRkQ2xhc3NcIiksbShhLFwicmVtb3ZlQ2xhc3NcIikpfSk7cmV0dXJue25vZGU6cCxldmVudDpjLGNsYXNzTmFtZTpiLGlzQ2xhc3NCYXNlZDpHLGlzU2V0Q2xhc3NPcGVyYXRpb246aCxhcHBseVN0eWxlczpmdW5jdGlvbigpe2UmJmEuY3NzKGYuZXh0ZW5kKGUuZnJvbXx8e30sZS50b3x8e30pKX0sYmVmb3JlOmZ1bmN0aW9uKGEpe3U9YTtrKEgsbixmdW5jdGlvbigpe3U9czthKCl9KX0sYWZ0ZXI6ZnVuY3Rpb24oYSl7cT1hO2sobCxyLGZ1bmN0aW9uKCl7cT1zO2EoKX0pfSxjYW5jZWw6ZnVuY3Rpb24oKXtuJiYoZyhuLGZ1bmN0aW9uKGEpeyhhfHxcbnMpKCEwKX0pLHUoITApKTtyJiYoZyhyLGZ1bmN0aW9uKGEpeyhhfHxzKSghMCl9KSxxKCEwKSl9fX19fWZ1bmN0aW9uIHkoYSxjLGIsZSxtLGsscCxGKXtmdW5jdGlvbiBkKGQpe3ZhciBoPVwiJGFuaW1hdGU6XCIrZDtIJiZIW2hdJiYwPEhbaF0ubGVuZ3RoJiZDKGZ1bmN0aW9uKCl7Yi50cmlnZ2VySGFuZGxlcihoLHtldmVudDphLGNsYXNzTmFtZTpjfSl9KX1mdW5jdGlvbiBoKCl7ZChcImJlZm9yZVwiKX1mdW5jdGlvbiBHKCl7ZChcImFmdGVyXCIpfWZ1bmN0aW9uIHcoKXt3Lmhhc0JlZW5SdW58fCh3Lmhhc0JlZW5SdW49ITAsaygpKX1mdW5jdGlvbiB1KCl7aWYoIXUuaGFzQmVlblJ1bil7biYmbi5hcHBseVN0eWxlcygpO3UuaGFzQmVlblJ1bj0hMDtwJiZwLnRlbXBDbGFzc2VzJiZnKHAudGVtcENsYXNzZXMsZnVuY3Rpb24oYSl7Yi5yZW1vdmVDbGFzcyhhKX0pO3ZhciBoPWIuZGF0YShcIiQkbmdBbmltYXRlU3RhdGVcIik7aCYmKG4mJm4uaXNDbGFzc0Jhc2VkP2woYixjKTooQyhmdW5jdGlvbigpe3ZhciBkPVxuYi5kYXRhKFwiJCRuZ0FuaW1hdGVTdGF0ZVwiKXx8e307dj09ZC5pbmRleCYmbChiLGMsYSl9KSxiLmRhdGEoXCIkJG5nQW5pbWF0ZVN0YXRlXCIsaCkpKTtkKFwiY2xvc2VcIik7RigpfX12YXIgbj1SKGIsYSxjLHApO2lmKCFuKXJldHVybiB3KCksaCgpLEcoKSx1KCksczthPW4uZXZlbnQ7Yz1uLmNsYXNzTmFtZTt2YXIgSD1mLmVsZW1lbnQuX2RhdGEobi5ub2RlKSxIPUgmJkguZXZlbnRzO2V8fChlPW0/bS5wYXJlbnQoKTpiLnBhcmVudCgpKTtpZihZKGIsZSkpcmV0dXJuIHcoKSxoKCksRygpLHUoKSxzO2U9Yi5kYXRhKFwiJCRuZ0FuaW1hdGVTdGF0ZVwiKXx8e307dmFyIHE9ZS5hY3RpdmV8fHt9LHI9ZS50b3RhbEFjdGl2ZXx8MCx0PWUubGFzdDttPSExO2lmKDA8cil7cj1bXTtpZihuLmlzQ2xhc3NCYXNlZClcInNldENsYXNzXCI9PXQuZXZlbnQ/KHIucHVzaCh0KSxsKGIsYykpOnFbY10mJihhYT1xW2NdLGFhLmV2ZW50PT1hP209ITA6KHIucHVzaChhYSksbChiLGMpKSk7ZWxzZSBpZihcImxlYXZlXCI9PVxuYSYmcVtcIm5nLWxlYXZlXCJdKW09ITA7ZWxzZXtmb3IodmFyIGFhIGluIHEpci5wdXNoKHFbYWFdKTtlPXt9O2woYiwhMCl9MDxyLmxlbmd0aCYmZyhyLGZ1bmN0aW9uKGEpe2EuY2FuY2VsKCl9KX0hbi5pc0NsYXNzQmFzZWR8fG4uaXNTZXRDbGFzc09wZXJhdGlvbnx8XCJhbmltYXRlXCI9PWF8fG18fChtPVwiYWRkQ2xhc3NcIj09YT09Yi5oYXNDbGFzcyhjKSk7aWYobSlyZXR1cm4gdygpLGgoKSxHKCksZChcImNsb3NlXCIpLEYoKSxzO3E9ZS5hY3RpdmV8fHt9O3I9ZS50b3RhbEFjdGl2ZXx8MDtpZihcImxlYXZlXCI9PWEpYi5vbmUoXCIkZGVzdHJveVwiLGZ1bmN0aW9uKGEpe2E9Zi5lbGVtZW50KHRoaXMpO3ZhciBkPWEuZGF0YShcIiQkbmdBbmltYXRlU3RhdGVcIik7ZCYmKGQ9ZC5hY3RpdmVbXCJuZy1sZWF2ZVwiXSkmJihkLmNhbmNlbCgpLGwoYSxcIm5nLWxlYXZlXCIpKX0pO2IuYWRkQ2xhc3MoXCJuZy1hbmltYXRlXCIpO3AmJnAudGVtcENsYXNzZXMmJmcocC50ZW1wQ2xhc3NlcyxmdW5jdGlvbihhKXtiLmFkZENsYXNzKGEpfSk7XG52YXIgdj1aKys7cisrO3FbY109bjtiLmRhdGEoXCIkJG5nQW5pbWF0ZVN0YXRlXCIse2xhc3Q6bixhY3RpdmU6cSxpbmRleDp2LHRvdGFsQWN0aXZlOnJ9KTtoKCk7bi5iZWZvcmUoZnVuY3Rpb24oZCl7dmFyIGg9Yi5kYXRhKFwiJCRuZ0FuaW1hdGVTdGF0ZVwiKTtkPWR8fCFofHwhaC5hY3RpdmVbY118fG4uaXNDbGFzc0Jhc2VkJiZoLmFjdGl2ZVtjXS5ldmVudCE9YTt3KCk7ITA9PT1kP3UoKTooRygpLG4uYWZ0ZXIodSkpfSk7cmV0dXJuIG4uY2FuY2VsfWZ1bmN0aW9uIEsoYSl7aWYoYT1rKGEpKWE9Zi5pc0Z1bmN0aW9uKGEuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSk/YS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwibmctYW5pbWF0ZVwiKTphLnF1ZXJ5U2VsZWN0b3JBbGwoXCIubmctYW5pbWF0ZVwiKSxnKGEsZnVuY3Rpb24oYSl7YT1mLmVsZW1lbnQoYSk7KGE9YS5kYXRhKFwiJCRuZ0FuaW1hdGVTdGF0ZVwiKSkmJmEuYWN0aXZlJiZnKGEuYWN0aXZlLGZ1bmN0aW9uKGEpe2EuY2FuY2VsKCl9KX0pfVxuZnVuY3Rpb24gbChhLGMpe2lmKE4oYSx4KSl0LmRpc2FibGVkfHwodC5ydW5uaW5nPSExLHQuc3RydWN0dXJhbD0hMSk7ZWxzZSBpZihjKXt2YXIgYj1hLmRhdGEoXCIkJG5nQW5pbWF0ZVN0YXRlXCIpfHx7fSxlPSEwPT09YzshZSYmYi5hY3RpdmUmJmIuYWN0aXZlW2NdJiYoYi50b3RhbEFjdGl2ZS0tLGRlbGV0ZSBiLmFjdGl2ZVtjXSk7aWYoZXx8IWIudG90YWxBY3RpdmUpYS5yZW1vdmVDbGFzcyhcIm5nLWFuaW1hdGVcIiksYS5yZW1vdmVEYXRhKFwiJCRuZ0FuaW1hdGVTdGF0ZVwiKX19ZnVuY3Rpb24gWShhLGMpe2lmKHQuZGlzYWJsZWQpcmV0dXJuITA7aWYoTihhLHgpKXJldHVybiB0LnJ1bm5pbmc7dmFyIGIsZSxrO2Rve2lmKDA9PT1jLmxlbmd0aClicmVhazt2YXIgZz1OKGMseCkscD1nP3Q6Yy5kYXRhKFwiJCRuZ0FuaW1hdGVTdGF0ZVwiKXx8e307aWYocC5kaXNhYmxlZClyZXR1cm4hMDtnJiYoaz0hMCk7ITEhPT1iJiYoZz1jLmRhdGEoXCIkJG5nQW5pbWF0ZUNoaWxkcmVuXCIpLGYuaXNEZWZpbmVkKGcpJiZcbihiPWcpKTtlPWV8fHAucnVubmluZ3x8cC5sYXN0JiYhcC5sYXN0LmlzQ2xhc3NCYXNlZH13aGlsZShjPWMucGFyZW50KCkpO3JldHVybiFrfHwhYiYmZX14LmRhdGEoXCIkJG5nQW5pbWF0ZVN0YXRlXCIsdCk7dmFyIEw9UC4kd2F0Y2goZnVuY3Rpb24oKXtyZXR1cm4gVi50b3RhbFBlbmRpbmdSZXF1ZXN0c30sZnVuY3Rpb24oYSxjKXswPT09YSYmKEwoKSxQLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpe1AuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCl7dC5ydW5uaW5nPSExfSl9KSl9KSxaPTAsRT1CLmNsYXNzTmFtZUZpbHRlcigpLFg9RT9mdW5jdGlvbihhKXtyZXR1cm4gRS50ZXN0KGEpfTpmdW5jdGlvbigpe3JldHVybiEwfTtyZXR1cm57YW5pbWF0ZTpmdW5jdGlvbihhLGMsYixlLGcpe2U9ZXx8XCJuZy1pbmxpbmUtYW5pbWF0ZVwiO2c9SihnKXx8e307Zy5mcm9tPWI/YzpudWxsO2cudG89Yj9iOmM7cmV0dXJuIHooZnVuY3Rpb24oYil7cmV0dXJuIHkoXCJhbmltYXRlXCIsZSxmLmVsZW1lbnQoayhhKSksXG5udWxsLG51bGwscyxnLGIpfSl9LGVudGVyOmZ1bmN0aW9uKGEsYyxiLGUpe2U9SihlKTthPWYuZWxlbWVudChhKTtjPWMmJmYuZWxlbWVudChjKTtiPWImJmYuZWxlbWVudChiKTtBKGEsITApO08uZW50ZXIoYSxjLGIpO3JldHVybiB6KGZ1bmN0aW9uKGcpe3JldHVybiB5KFwiZW50ZXJcIixcIm5nLWVudGVyXCIsZi5lbGVtZW50KGsoYSkpLGMsYixzLGUsZyl9KX0sbGVhdmU6ZnVuY3Rpb24oYSxjKXtjPUooYyk7YT1mLmVsZW1lbnQoYSk7SyhhKTtBKGEsITApO3JldHVybiB6KGZ1bmN0aW9uKGIpe3JldHVybiB5KFwibGVhdmVcIixcIm5nLWxlYXZlXCIsZi5lbGVtZW50KGsoYSkpLG51bGwsbnVsbCxmdW5jdGlvbigpe08ubGVhdmUoYSl9LGMsYil9KX0sbW92ZTpmdW5jdGlvbihhLGMsYixlKXtlPUooZSk7YT1mLmVsZW1lbnQoYSk7Yz1jJiZmLmVsZW1lbnQoYyk7Yj1iJiZmLmVsZW1lbnQoYik7SyhhKTtBKGEsITApO08ubW92ZShhLGMsYik7cmV0dXJuIHooZnVuY3Rpb24oZyl7cmV0dXJuIHkoXCJtb3ZlXCIsXG5cIm5nLW1vdmVcIixmLmVsZW1lbnQoayhhKSksYyxiLHMsZSxnKX0pfSxhZGRDbGFzczpmdW5jdGlvbihhLGMsYil7cmV0dXJuIHRoaXMuc2V0Q2xhc3MoYSxjLFtdLGIpfSxyZW1vdmVDbGFzczpmdW5jdGlvbihhLGMsYil7cmV0dXJuIHRoaXMuc2V0Q2xhc3MoYSxbXSxjLGIpfSxzZXRDbGFzczpmdW5jdGlvbihhLGMsYixlKXtlPUooZSk7YT1mLmVsZW1lbnQoYSk7YT1mLmVsZW1lbnQoayhhKSk7aWYoQShhKSlyZXR1cm4gTy4kJHNldENsYXNzSW1tZWRpYXRlbHkoYSxjLGIsZSk7dmFyIG0sbD1hLmRhdGEoXCIkJGFuaW1hdGVDbGFzc2VzXCIpLHA9ISFsO2x8fChsPXtjbGFzc2VzOnt9fSk7bT1sLmNsYXNzZXM7Yz0kKGMpP2M6Yy5zcGxpdChcIiBcIik7ZyhjLGZ1bmN0aW9uKGEpe2EmJmEubGVuZ3RoJiYobVthXT0hMCl9KTtiPSQoYik/YjpiLnNwbGl0KFwiIFwiKTtnKGIsZnVuY3Rpb24oYSl7YSYmYS5sZW5ndGgmJihtW2FdPSExKX0pO2lmKHApcmV0dXJuIGUmJmwub3B0aW9ucyYmKGwub3B0aW9ucz1cbmYuZXh0ZW5kKGwub3B0aW9uc3x8e30sZSkpLGwucHJvbWlzZTthLmRhdGEoXCIkJGFuaW1hdGVDbGFzc2VzXCIsbD17Y2xhc3NlczptLG9wdGlvbnM6ZX0pO3JldHVybiBsLnByb21pc2U9eihmdW5jdGlvbihiKXt2YXIgZD1hLnBhcmVudCgpLGg9ayhhKSxjPWgucGFyZW50Tm9kZTtpZighY3x8Yy4kJE5HX1JFTU9WRUR8fGguJCROR19SRU1PVkVEKWIoKTtlbHNle2g9YS5kYXRhKFwiJCRhbmltYXRlQ2xhc3Nlc1wiKTthLnJlbW92ZURhdGEoXCIkJGFuaW1hdGVDbGFzc2VzXCIpO3ZhciBjPWEuZGF0YShcIiQkbmdBbmltYXRlU3RhdGVcIil8fHt9LGU9VyhhLGgsYy5hY3RpdmUpO3JldHVybiBlP3koXCJzZXRDbGFzc1wiLGUsYSxkLG51bGwsZnVuY3Rpb24oKXtlWzBdJiZPLiQkYWRkQ2xhc3NJbW1lZGlhdGVseShhLGVbMF0pO2VbMV0mJk8uJCRyZW1vdmVDbGFzc0ltbWVkaWF0ZWx5KGEsZVsxXSl9LGgub3B0aW9ucyxiKTpiKCl9fSl9LGNhbmNlbDpmdW5jdGlvbihhKXthLiQkY2FuY2VsRm4oKX0sXG5lbmFibGVkOmZ1bmN0aW9uKGEsYyl7c3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpe2Nhc2UgMjppZihhKWwoYyk7ZWxzZXt2YXIgYj1jLmRhdGEoXCIkJG5nQW5pbWF0ZVN0YXRlXCIpfHx7fTtiLmRpc2FibGVkPSEwO2MuZGF0YShcIiQkbmdBbmltYXRlU3RhdGVcIixiKX1icmVhaztjYXNlIDE6dC5kaXNhYmxlZD0hYTticmVhaztkZWZhdWx0OmE9IXQuZGlzYWJsZWR9cmV0dXJuISFhfX19XSk7Qi5yZWdpc3RlcihcIlwiLFtcIiR3aW5kb3dcIixcIiRzbmlmZmVyXCIsXCIkdGltZW91dFwiLFwiJCRhbmltYXRlUmVmbG93XCIsZnVuY3Rpb24odCxCLEksVSl7ZnVuY3Rpb24geCgpe2V8fChlPVUoZnVuY3Rpb24oKXtiPVtdO2U9bnVsbDthPXt9fSkpfWZ1bmN0aW9uIEMoYyxkKXtlJiZlKCk7Yi5wdXNoKGQpO2U9VShmdW5jdGlvbigpe2coYixmdW5jdGlvbihhKXthKCl9KTtiPVtdO2U9bnVsbDthPXt9fSl9ZnVuY3Rpb24gUChhLGQpe3ZhciBoPWsoYSk7YT1mLmVsZW1lbnQoaCk7cC5wdXNoKGEpO2g9RGF0ZS5ub3coKStcbmQ7aDw9Tnx8KEkuY2FuY2VsKG0pLE49aCxtPUkoZnVuY3Rpb24oKXtUKHApO3A9W119LGQsITEpKX1mdW5jdGlvbiBUKGEpe2coYSxmdW5jdGlvbihhKXsoYT1hLmRhdGEoXCIkJG5nQW5pbWF0ZUNTUzNEYXRhXCIpKSYmZyhhLmNsb3NlQW5pbWF0aW9uRm5zLGZ1bmN0aW9uKGEpe2EoKX0pfSl9ZnVuY3Rpb24gVihiLGQpe3ZhciBoPWQ/YVtkXTpudWxsO2lmKCFoKXt2YXIgYz0wLGU9MCxmPTAsaz0wO2coYixmdW5jdGlvbihhKXtpZigxPT1hLm5vZGVUeXBlKXthPXQuZ2V0Q29tcHV0ZWRTdHlsZShhKXx8e307Yz1NYXRoLm1heChBKGFbTCtcIkR1cmF0aW9uXCJdKSxjKTtlPU1hdGgubWF4KEEoYVtMK1wiRGVsYXlcIl0pLGUpO2s9TWF0aC5tYXgoQShhW0UrXCJEZWxheVwiXSksayk7dmFyIGQ9QShhW0UrXCJEdXJhdGlvblwiXSk7MDxkJiYoZCo9cGFyc2VJbnQoYVtFK1wiSXRlcmF0aW9uQ291bnRcIl0sMTApfHwxKTtmPU1hdGgubWF4KGQsZil9fSk7aD17dG90YWw6MCx0cmFuc2l0aW9uRGVsYXk6ZSxcbnRyYW5zaXRpb25EdXJhdGlvbjpjLGFuaW1hdGlvbkRlbGF5OmssYW5pbWF0aW9uRHVyYXRpb246Zn07ZCYmKGFbZF09aCl9cmV0dXJuIGh9ZnVuY3Rpb24gQShhKXt2YXIgZD0wO2E9Y2EoYSk/YS5zcGxpdCgvXFxzKixcXHMqLyk6W107ZyhhLGZ1bmN0aW9uKGEpe2Q9TWF0aC5tYXgocGFyc2VGbG9hdChhKXx8MCxkKX0pO3JldHVybiBkfWZ1bmN0aW9uIHooYixkLGgsZSl7Yj0wPD1bXCJuZy1lbnRlclwiLFwibmctbGVhdmVcIixcIm5nLW1vdmVcIl0uaW5kZXhPZihoKTt2YXIgZixnPWQucGFyZW50KCksbj1nLmRhdGEoXCIkJG5nQW5pbWF0ZUtleVwiKTtufHwoZy5kYXRhKFwiJCRuZ0FuaW1hdGVLZXlcIiwrK2MpLG49Yyk7Zj1uK1wiLVwiK2soZCkuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIik7dmFyIGc9ZitcIiBcIitoLG49YVtnXT8rK2FbZ10udG90YWw6MCxsPXt9O2lmKDA8bil7dmFyIHE9aCtcIi1zdGFnZ2VyXCIsbD1mK1wiIFwiK3E7KGY9IWFbbF0pJiZkLmFkZENsYXNzKHEpO2w9VihkLGwpO2YmJmQucmVtb3ZlQ2xhc3MocSl9ZC5hZGRDbGFzcyhoKTtcbnZhciBxPWQuZGF0YShcIiQkbmdBbmltYXRlQ1NTM0RhdGFcIil8fHt9LHI9VihkLGcpO2Y9ci50cmFuc2l0aW9uRHVyYXRpb247cj1yLmFuaW1hdGlvbkR1cmF0aW9uO2lmKGImJjA9PT1mJiYwPT09cilyZXR1cm4gZC5yZW1vdmVDbGFzcyhoKSwhMTtoPWV8fGImJjA8ZjtiPTA8ciYmMDxsLmFuaW1hdGlvbkRlbGF5JiYwPT09bC5hbmltYXRpb25EdXJhdGlvbjtkLmRhdGEoXCIkJG5nQW5pbWF0ZUNTUzNEYXRhXCIse3N0YWdnZXI6bCxjYWNoZUtleTpnLHJ1bm5pbmc6cS5ydW5uaW5nfHwwLGl0ZW1JbmRleDpuLGJsb2NrVHJhbnNpdGlvbjpoLGNsb3NlQW5pbWF0aW9uRm5zOnEuY2xvc2VBbmltYXRpb25GbnN8fFtdfSk7Zz1rKGQpO2gmJihXKGcsITApLGUmJmQuY3NzKGUpKTtiJiYoZy5zdHlsZVtFK1wiUGxheVN0YXRlXCJdPVwicGF1c2VkXCIpO3JldHVybiEwfWZ1bmN0aW9uIEooYSxkLGIsYyxlKXtmdW5jdGlvbiBmKCl7ZC5vZmYoQyxsKTtkLnJlbW92ZUNsYXNzKHEpO2QucmVtb3ZlQ2xhc3Mocik7XG56JiZJLmNhbmNlbCh6KTtLKGQsYik7dmFyIGE9ayhkKSxjO2ZvcihjIGluIHApYS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShwW2NdKX1mdW5jdGlvbiBsKGEpe2Euc3RvcFByb3BhZ2F0aW9uKCk7dmFyIGQ9YS5vcmlnaW5hbEV2ZW50fHxhO2E9ZC4kbWFudWFsVGltZVN0YW1wfHxkLnRpbWVTdGFtcHx8RGF0ZS5ub3coKTtkPXBhcnNlRmxvYXQoZC5lbGFwc2VkVGltZS50b0ZpeGVkKDMpKTtNYXRoLm1heChhLUIsMCk+PUEmJmQ+PXgmJmMoKX12YXIgbT1rKGQpO2E9ZC5kYXRhKFwiJCRuZ0FuaW1hdGVDU1MzRGF0YVwiKTtpZigtMSE9bS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKS5pbmRleE9mKGIpJiZhKXt2YXIgcT1cIlwiLHI9XCJcIjtnKGIuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKGEsZCl7dmFyIGI9KDA8ZD9cIiBcIjpcIlwiKSthO3ErPWIrXCItYWN0aXZlXCI7cis9YitcIi1wZW5kaW5nXCJ9KTt2YXIgcD1bXSx0PWEuaXRlbUluZGV4LHY9YS5zdGFnZ2VyLHM9MDtpZigwPHQpe3M9MDswPHYudHJhbnNpdGlvbkRlbGF5JiZcbjA9PT12LnRyYW5zaXRpb25EdXJhdGlvbiYmKHM9di50cmFuc2l0aW9uRGVsYXkqdCk7dmFyIHk9MDswPHYuYW5pbWF0aW9uRGVsYXkmJjA9PT12LmFuaW1hdGlvbkR1cmF0aW9uJiYoeT12LmFuaW1hdGlvbkRlbGF5KnQscC5wdXNoKFkrXCJhbmltYXRpb24tcGxheS1zdGF0ZVwiKSk7cz1NYXRoLnJvdW5kKDEwMCpNYXRoLm1heChzLHkpKS8xMDB9c3x8KGQuYWRkQ2xhc3MocSksYS5ibG9ja1RyYW5zaXRpb24mJlcobSwhMSkpO3ZhciBEPVYoZCxhLmNhY2hlS2V5K1wiIFwiK3EpLHg9TWF0aC5tYXgoRC50cmFuc2l0aW9uRHVyYXRpb24sRC5hbmltYXRpb25EdXJhdGlvbik7aWYoMD09PXgpZC5yZW1vdmVDbGFzcyhxKSxLKGQsYiksYygpO2Vsc2V7IXMmJmUmJihELnRyYW5zaXRpb25EdXJhdGlvbnx8KGQuY3NzKFwidHJhbnNpdGlvblwiLEQuYW5pbWF0aW9uRHVyYXRpb24rXCJzIGxpbmVhciBhbGxcIikscC5wdXNoKFwidHJhbnNpdGlvblwiKSksZC5jc3MoZSkpO3ZhciB0PU1hdGgubWF4KEQudHJhbnNpdGlvbkRlbGF5LFxuRC5hbmltYXRpb25EZWxheSksQT0xRTMqdDswPHAubGVuZ3RoJiYodj1tLmdldEF0dHJpYnV0ZShcInN0eWxlXCIpfHxcIlwiLFwiO1wiIT09di5jaGFyQXQodi5sZW5ndGgtMSkmJih2Kz1cIjtcIiksbS5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLHYrXCIgXCIpKTt2YXIgQj1EYXRlLm5vdygpLEM9WCtcIiBcIitaLHQ9MUUzKihzKzEuNSoodCt4KSksejswPHMmJihkLmFkZENsYXNzKHIpLHo9SShmdW5jdGlvbigpe3o9bnVsbDswPEQudHJhbnNpdGlvbkR1cmF0aW9uJiZXKG0sITEpOzA8RC5hbmltYXRpb25EdXJhdGlvbiYmKG0uc3R5bGVbRStcIlBsYXlTdGF0ZVwiXT1cIlwiKTtkLmFkZENsYXNzKHEpO2QucmVtb3ZlQ2xhc3Mocik7ZSYmKDA9PT1ELnRyYW5zaXRpb25EdXJhdGlvbiYmZC5jc3MoXCJ0cmFuc2l0aW9uXCIsRC5hbmltYXRpb25EdXJhdGlvbitcInMgbGluZWFyIGFsbFwiKSxkLmNzcyhlKSxwLnB1c2goXCJ0cmFuc2l0aW9uXCIpKX0sMUUzKnMsITEpKTtkLm9uKEMsbCk7YS5jbG9zZUFuaW1hdGlvbkZucy5wdXNoKGZ1bmN0aW9uKCl7ZigpO1xuYygpfSk7YS5ydW5uaW5nKys7UChkLHQpO3JldHVybiBmfX1lbHNlIGMoKX1mdW5jdGlvbiBXKGEsZCl7YS5zdHlsZVtMK1wiUHJvcGVydHlcIl09ZD9cIm5vbmVcIjpcIlwifWZ1bmN0aW9uIFEoYSxkLGIsYyl7aWYoeihhLGQsYixjKSlyZXR1cm4gZnVuY3Rpb24oYSl7YSYmSyhkLGIpfX1mdW5jdGlvbiBSKGEsZCxiLGMsZSl7aWYoZC5kYXRhKFwiJCRuZ0FuaW1hdGVDU1MzRGF0YVwiKSlyZXR1cm4gSihhLGQsYixjLGUpO0soZCxiKTtjKCl9ZnVuY3Rpb24geShhLGQsYixjLGUpe3ZhciBmPVEoYSxkLGIsZS5mcm9tKTtpZihmKXt2YXIgZz1mO0MoZCxmdW5jdGlvbigpe2c9UihhLGQsYixjLGUudG8pfSk7cmV0dXJuIGZ1bmN0aW9uKGEpeyhnfHxzKShhKX19eCgpO2MoKX1mdW5jdGlvbiBLKGEsZCl7YS5yZW1vdmVDbGFzcyhkKTt2YXIgYj1hLmRhdGEoXCIkJG5nQW5pbWF0ZUNTUzNEYXRhXCIpO2ImJihiLnJ1bm5pbmcmJmIucnVubmluZy0tLGIucnVubmluZyYmMCE9PWIucnVubmluZ3x8YS5yZW1vdmVEYXRhKFwiJCRuZ0FuaW1hdGVDU1MzRGF0YVwiKSl9XG5mdW5jdGlvbiBsKGEsZCl7dmFyIGI9XCJcIjthPSQoYSk/YTphLnNwbGl0KC9cXHMrLyk7ZyhhLGZ1bmN0aW9uKGEsYyl7YSYmMDxhLmxlbmd0aCYmKGIrPSgwPGM/XCIgXCI6XCJcIikrYStkKX0pO3JldHVybiBifXZhciBZPVwiXCIsTCxaLEUsWDtNLm9udHJhbnNpdGlvbmVuZD09PVMmJk0ub253ZWJraXR0cmFuc2l0aW9uZW5kIT09Uz8oWT1cIi13ZWJraXQtXCIsTD1cIldlYmtpdFRyYW5zaXRpb25cIixaPVwid2Via2l0VHJhbnNpdGlvbkVuZCB0cmFuc2l0aW9uZW5kXCIpOihMPVwidHJhbnNpdGlvblwiLFo9XCJ0cmFuc2l0aW9uZW5kXCIpO00ub25hbmltYXRpb25lbmQ9PT1TJiZNLm9ud2Via2l0YW5pbWF0aW9uZW5kIT09Uz8oWT1cIi13ZWJraXQtXCIsRT1cIldlYmtpdEFuaW1hdGlvblwiLFg9XCJ3ZWJraXRBbmltYXRpb25FbmQgYW5pbWF0aW9uZW5kXCIpOihFPVwiYW5pbWF0aW9uXCIsWD1cImFuaW1hdGlvbmVuZFwiKTt2YXIgYT17fSxjPTAsYj1bXSxlLG09bnVsbCxOPTAscD1bXTtyZXR1cm57YW5pbWF0ZTpmdW5jdGlvbihhLFxuZCxiLGMsZSxmKXtmPWZ8fHt9O2YuZnJvbT1iO2YudG89YztyZXR1cm4geShcImFuaW1hdGVcIixhLGQsZSxmKX0sZW50ZXI6ZnVuY3Rpb24oYSxiLGMpe2M9Y3x8e307cmV0dXJuIHkoXCJlbnRlclwiLGEsXCJuZy1lbnRlclwiLGIsYyl9LGxlYXZlOmZ1bmN0aW9uKGEsYixjKXtjPWN8fHt9O3JldHVybiB5KFwibGVhdmVcIixhLFwibmctbGVhdmVcIixiLGMpfSxtb3ZlOmZ1bmN0aW9uKGEsYixjKXtjPWN8fHt9O3JldHVybiB5KFwibW92ZVwiLGEsXCJuZy1tb3ZlXCIsYixjKX0sYmVmb3JlU2V0Q2xhc3M6ZnVuY3Rpb24oYSxiLGMsZSxmKXtmPWZ8fHt9O2I9bChjLFwiLXJlbW92ZVwiKStcIiBcIitsKGIsXCItYWRkXCIpO2lmKGY9UShcInNldENsYXNzXCIsYSxiLGYuZnJvbSkpcmV0dXJuIEMoYSxlKSxmO3goKTtlKCl9LGJlZm9yZUFkZENsYXNzOmZ1bmN0aW9uKGEsYixjLGUpe2U9ZXx8e307aWYoYj1RKFwiYWRkQ2xhc3NcIixhLGwoYixcIi1hZGRcIiksZS5mcm9tKSlyZXR1cm4gQyhhLGMpLGI7eCgpO2MoKX0sYmVmb3JlUmVtb3ZlQ2xhc3M6ZnVuY3Rpb24oYSxcbmIsYyxlKXtlPWV8fHt9O2lmKGI9UShcInJlbW92ZUNsYXNzXCIsYSxsKGIsXCItcmVtb3ZlXCIpLGUuZnJvbSkpcmV0dXJuIEMoYSxjKSxiO3goKTtjKCl9LHNldENsYXNzOmZ1bmN0aW9uKGEsYixjLGUsZil7Zj1mfHx7fTtjPWwoYyxcIi1yZW1vdmVcIik7Yj1sKGIsXCItYWRkXCIpO3JldHVybiBSKFwic2V0Q2xhc3NcIixhLGMrXCIgXCIrYixlLGYudG8pfSxhZGRDbGFzczpmdW5jdGlvbihhLGIsYyxlKXtlPWV8fHt9O3JldHVybiBSKFwiYWRkQ2xhc3NcIixhLGwoYixcIi1hZGRcIiksYyxlLnRvKX0scmVtb3ZlQ2xhc3M6ZnVuY3Rpb24oYSxiLGMsZSl7ZT1lfHx7fTtyZXR1cm4gUihcInJlbW92ZUNsYXNzXCIsYSxsKGIsXCItcmVtb3ZlXCIpLGMsZS50byl9fX1dKX1dKX0pKHdpbmRvdyx3aW5kb3cuYW5ndWxhcik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbmd1bGFyLWFuaW1hdGUubWluLmpzLm1hcFxuIiwiLyohIDMuMS4yICovXG4hZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGEsYil7d2luZG93LlhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZVthXT1iKHdpbmRvdy5YTUxIdHRwUmVxdWVzdC5wcm90b3R5cGVbYV0pfWZ1bmN0aW9uIGIoYSxiLGMpe3RyeXtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtnZXQ6Y30pfWNhdGNoKGQpe319dmFyIGM9ZnVuY3Rpb24oKXt0cnl7dmFyIGE9bmV3IEFjdGl2ZVhPYmplY3QoXCJTaG9ja3dhdmVGbGFzaC5TaG9ja3dhdmVGbGFzaFwiKTtpZihhKXJldHVybiEwfWNhdGNoKGIpe2lmKHZvaWQgMCE9bmF2aWdhdG9yLm1pbWVUeXBlc1tcImFwcGxpY2F0aW9uL3gtc2hvY2t3YXZlLWZsYXNoXCJdKXJldHVybiEwfXJldHVybiExfTtpZih3aW5kb3cuWE1MSHR0cFJlcXVlc3QmJiF3aW5kb3cuRm9ybURhdGF8fHdpbmRvdy5GaWxlQVBJJiZGaWxlQVBJLmZvcmNlTG9hZCl7dmFyIGQ9ZnVuY3Rpb24oYSl7aWYoIWEuX19saXN0ZW5lcnMpe2EudXBsb2FkfHwoYS51cGxvYWQ9e30pLGEuX19saXN0ZW5lcnM9W107dmFyIGI9YS51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcjthLnVwbG9hZC5hZGRFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGMsZCl7YS5fX2xpc3RlbmVyc1tjXT1kLGImJmIuYXBwbHkodGhpcyxhcmd1bWVudHMpfX19O2EoXCJvcGVuXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIsYyxlKXtkKHRoaXMpLHRoaXMuX191cmw9Yzt0cnl7YS5hcHBseSh0aGlzLFtiLGMsZV0pfWNhdGNoKGYpe2YubWVzc2FnZS5pbmRleE9mKFwiQWNjZXNzIGlzIGRlbmllZFwiKT4tMSYmKHRoaXMuX19vcmlnRXJyb3I9ZixhLmFwcGx5KHRoaXMsW2IsXCJfZml4X2Zvcl9pZV9jcm9zc2RvbWFpbl9fXCIsZV0pKX19fSksYShcImdldFJlc3BvbnNlSGVhZGVyXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVybiB0aGlzLl9fZmlsZUFwaVhIUiYmdGhpcy5fX2ZpbGVBcGlYSFIuZ2V0UmVzcG9uc2VIZWFkZXI/dGhpcy5fX2ZpbGVBcGlYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoYik6bnVsbD09YT9udWxsOmEuYXBwbHkodGhpcyxbYl0pfX0pLGEoXCJnZXRBbGxSZXNwb25zZUhlYWRlcnNcIixmdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fX2ZpbGVBcGlYSFImJnRoaXMuX19maWxlQXBpWEhSLmdldEFsbFJlc3BvbnNlSGVhZGVycz90aGlzLl9fZmlsZUFwaVhIUi5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKTpudWxsPT1hP251bGw6YS5hcHBseSh0aGlzKX19KSxhKFwiYWJvcnRcIixmdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fX2ZpbGVBcGlYSFImJnRoaXMuX19maWxlQXBpWEhSLmFib3J0P3RoaXMuX19maWxlQXBpWEhSLmFib3J0KCk6bnVsbD09YT9udWxsOmEuYXBwbHkodGhpcyl9fSksYShcInNldFJlcXVlc3RIZWFkZXJcIixmdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oYixjKXtpZihcIl9fc2V0WEhSX1wiPT09Yil7ZCh0aGlzKTt2YXIgZT1jKHRoaXMpO2UgaW5zdGFuY2VvZiBGdW5jdGlvbiYmZSh0aGlzKX1lbHNlIHRoaXMuX19yZXF1ZXN0SGVhZGVycz10aGlzLl9fcmVxdWVzdEhlYWRlcnN8fHt9LHRoaXMuX19yZXF1ZXN0SGVhZGVyc1tiXT1jLGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfX0pLGEoXCJzZW5kXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGQ9dGhpcztpZihhcmd1bWVudHNbMF0mJmFyZ3VtZW50c1swXS5fX2lzRmlsZUFQSVNoaW0pe3ZhciBlPWFyZ3VtZW50c1swXSxmPXt1cmw6ZC5fX3VybCxqc29ucDohMSxjYWNoZTohMCxjb21wbGV0ZTpmdW5jdGlvbihhLGMpe2QuX19jb21wbGV0ZWQ9ITAsIWEmJmQuX19saXN0ZW5lcnMubG9hZCYmZC5fX2xpc3RlbmVycy5sb2FkKHt0eXBlOlwibG9hZFwiLGxvYWRlZDpkLl9fbG9hZGVkLHRvdGFsOmQuX190b3RhbCx0YXJnZXQ6ZCxsZW5ndGhDb21wdXRhYmxlOiEwfSksIWEmJmQuX19saXN0ZW5lcnMubG9hZGVuZCYmZC5fX2xpc3RlbmVycy5sb2FkZW5kKHt0eXBlOlwibG9hZGVuZFwiLGxvYWRlZDpkLl9fbG9hZGVkLHRvdGFsOmQuX190b3RhbCx0YXJnZXQ6ZCxsZW5ndGhDb21wdXRhYmxlOiEwfSksXCJhYm9ydFwiPT09YSYmZC5fX2xpc3RlbmVycy5hYm9ydCYmZC5fX2xpc3RlbmVycy5hYm9ydCh7dHlwZTpcImFib3J0XCIsbG9hZGVkOmQuX19sb2FkZWQsdG90YWw6ZC5fX3RvdGFsLHRhcmdldDpkLGxlbmd0aENvbXB1dGFibGU6ITB9KSx2b2lkIDAhPT1jLnN0YXR1cyYmYihkLFwic3RhdHVzXCIsZnVuY3Rpb24oKXtyZXR1cm4gMD09Yy5zdGF0dXMmJmEmJlwiYWJvcnRcIiE9PWE/NTAwOmMuc3RhdHVzfSksdm9pZCAwIT09Yy5zdGF0dXNUZXh0JiZiKGQsXCJzdGF0dXNUZXh0XCIsZnVuY3Rpb24oKXtyZXR1cm4gYy5zdGF0dXNUZXh0fSksYihkLFwicmVhZHlTdGF0ZVwiLGZ1bmN0aW9uKCl7cmV0dXJuIDR9KSx2b2lkIDAhPT1jLnJlc3BvbnNlJiZiKGQsXCJyZXNwb25zZVwiLGZ1bmN0aW9uKCl7cmV0dXJuIGMucmVzcG9uc2V9KTt2YXIgZT1jLnJlc3BvbnNlVGV4dHx8KGEmJjA9PWMuc3RhdHVzJiZcImFib3J0XCIhPT1hP2E6dm9pZCAwKTtiKGQsXCJyZXNwb25zZVRleHRcIixmdW5jdGlvbigpe3JldHVybiBlfSksYihkLFwicmVzcG9uc2VcIixmdW5jdGlvbigpe3JldHVybiBlfSksYSYmYihkLFwiZXJyXCIsZnVuY3Rpb24oKXtyZXR1cm4gYX0pLGQuX19maWxlQXBpWEhSPWMsZC5vbnJlYWR5c3RhdGVjaGFuZ2UmJmQub25yZWFkeXN0YXRlY2hhbmdlKCksZC5vbmxvYWQmJmQub25sb2FkKCl9LGZpbGVwcm9ncmVzczpmdW5jdGlvbihhKXtpZihhLnRhcmdldD1kLGQuX19saXN0ZW5lcnMucHJvZ3Jlc3MmJmQuX19saXN0ZW5lcnMucHJvZ3Jlc3MoYSksZC5fX3RvdGFsPWEudG90YWwsZC5fX2xvYWRlZD1hLmxvYWRlZCxhLnRvdGFsPT09YS5sb2FkZWQpe3ZhciBiPXRoaXM7c2V0VGltZW91dChmdW5jdGlvbigpe2QuX19jb21wbGV0ZWR8fChkLmdldEFsbFJlc3BvbnNlSGVhZGVycz1mdW5jdGlvbigpe30sYi5jb21wbGV0ZShudWxsLHtzdGF0dXM6MjA0LHN0YXR1c1RleHQ6XCJObyBDb250ZW50XCJ9KSl9LEZpbGVBUEkubm9Db250ZW50VGltZW91dHx8MWU0KX19LGhlYWRlcnM6ZC5fX3JlcXVlc3RIZWFkZXJzfTtmLmRhdGE9e30sZi5maWxlcz17fTtmb3IodmFyIGc9MDtnPGUuZGF0YS5sZW5ndGg7ZysrKXt2YXIgaD1lLmRhdGFbZ107bnVsbCE9aC52YWwmJm51bGwhPWgudmFsLm5hbWUmJm51bGwhPWgudmFsLnNpemUmJm51bGwhPWgudmFsLnR5cGU/Zi5maWxlc1toLmtleV09aC52YWw6Zi5kYXRhW2gua2V5XT1oLnZhbH1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7aWYoIWMoKSl0aHJvdydBZG9kZSBGbGFzaCBQbGF5ZXIgbmVlZCB0byBiZSBpbnN0YWxsZWQuIFRvIGNoZWNrIGFoZWFkIHVzZSBcIkZpbGVBUEkuaGFzRmxhc2hcIic7ZC5fX2ZpbGVBcGlYSFI9RmlsZUFQSS51cGxvYWQoZil9LDEpfWVsc2V7aWYodGhpcy5fX29yaWdFcnJvcil0aHJvdyB0aGlzLl9fb3JpZ0Vycm9yO2EuYXBwbHkoZCxhcmd1bWVudHMpfX19KSx3aW5kb3cuWE1MSHR0cFJlcXVlc3QuX19pc0ZpbGVBUElTaGltPSEwO3ZhciBlPWZ1bmN0aW9uKGEpe2lmKCFjKCkpdGhyb3cnQWRvZGUgRmxhc2ggUGxheWVyIG5lZWQgdG8gYmUgaW5zdGFsbGVkLiBUbyBjaGVjayBhaGVhZCB1c2UgXCJGaWxlQVBJLmhhc0ZsYXNoXCInO3ZhciBiPWFuZ3VsYXIuZWxlbWVudChhKTtpZighYi5hdHRyKFwiZGlzYWJsZWRcIikpe2Zvcih2YXIgZD0hMSxlPTA7ZTxiWzBdLmF0dHJpYnV0ZXMubGVuZ3RoO2UrKyl7dmFyIGY9YlswXS5hdHRyaWJ1dGVzW2VdO2lmKC0xIT09Zi5uYW1lLmluZGV4T2YoXCJmaWxlLXNlbGVjdFwiKSl7ZD0hMDticmVha319aWYoIWIuaGFzQ2xhc3MoXCJqcy1maWxlYXBpLXdyYXBwZXJcIikmJihkfHxudWxsIT1iLmF0dHIoXCJfX2FmdV9nZW5fX1wiKSkmJihiLmFkZENsYXNzKFwianMtZmlsZWFwaS13cmFwcGVyXCIpLG51bGwhPWIuYXR0cihcIl9fYWZ1X2dlbl9fXCIpKSl7Zm9yKHZhciBnPWJbMF0uX19yZWZFbGVtX18mJmFuZ3VsYXIuZWxlbWVudChiWzBdLl9fcmVmRWxlbV9fKXx8YjtnJiYhZy5hdHRyKFwiX19yZWZFbGVtX19cIik7KWc9YW5ndWxhci5lbGVtZW50KGdbMF0ubmV4dFNpYmxpbmcpO2cuYmluZChcIm1vdXNlb3ZlclwiLGZ1bmN0aW9uKCl7KFwiXCI9PT1iLnBhcmVudCgpLmNzcyhcInBvc2l0aW9uXCIpfHxcInN0YXRpY1wiPT09Yi5wYXJlbnQoKS5jc3MoXCJwb3NpdGlvblwiKSkmJmIucGFyZW50KCkuY3NzKFwicG9zaXRpb25cIixcInJlbGF0aXZlXCIpLGIuY3NzKFwicG9zaXRpb25cIixcImFic29sdXRlXCIpLmNzcyhcInRvcFwiLGdbMF0ub2Zmc2V0VG9wK1wicHhcIikuY3NzKFwibGVmdFwiLGdbMF0ub2Zmc2V0TGVmdCtcInB4XCIpLmNzcyhcIndpZHRoXCIsZ1swXS5vZmZzZXRXaWR0aCtcInB4XCIpLmNzcyhcImhlaWdodFwiLGdbMF0ub2Zmc2V0SGVpZ2h0K1wicHhcIikuY3NzKFwicGFkZGluZ1wiLGcuY3NzKFwicGFkZGluZ1wiKSkuY3NzKFwibWFyZ2luXCIsZy5jc3MoXCJtYXJnaW5cIikpLmNzcyhcImZpbHRlclwiLFwiYWxwaGEob3BhY2l0eT0wKVwiKSxnLmF0dHIoXCJvbmNsaWNrXCIsXCJcIiksYi5jc3MoXCJ6LWluZGV4XCIsXCIxMDAwXCIpfSl9fX0sZj1mdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oYil7Zm9yKHZhciBjPUZpbGVBUEkuZ2V0RmlsZXMoYiksZD0wO2Q8Yy5sZW5ndGg7ZCsrKXZvaWQgMD09PWNbZF0uc2l6ZSYmKGNbZF0uc2l6ZT0wKSx2b2lkIDA9PT1jW2RdLm5hbWUmJihjW2RdLm5hbWU9XCJmaWxlXCIpLHZvaWQgMD09PWNbZF0udHlwZSYmKGNbZF0udHlwZT1cInVuZGVmaW5lZFwiKTtiLnRhcmdldHx8KGIudGFyZ2V0PXt9KSxiLnRhcmdldC5maWxlcz1jLGIudGFyZ2V0LmZpbGVzIT1jJiYoYi5fX2ZpbGVzXz1jKSwoYi5fX2ZpbGVzX3x8Yi50YXJnZXQuZmlsZXMpLml0ZW09ZnVuY3Rpb24oYSl7cmV0dXJuKGIuX19maWxlc198fGIudGFyZ2V0LmZpbGVzKVthXXx8bnVsbH0sYSYmYS5hcHBseSh0aGlzLFtiXSl9fSxnPWZ1bmN0aW9uKGEsYil7cmV0dXJuKFwiY2hhbmdlXCI9PT1iLnRvTG93ZXJDYXNlKCl8fFwib25jaGFuZ2VcIj09PWIudG9Mb3dlckNhc2UoKSkmJlwiZmlsZVwiPT1hLmdldEF0dHJpYnV0ZShcInR5cGVcIil9O0hUTUxJbnB1dEVsZW1lbnQucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXImJihIVE1MSW5wdXRFbGVtZW50LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiLGMsZCxoKXtnKHRoaXMsYik/KGUodGhpcyksYS5hcHBseSh0aGlzLFtiLGYoYyksZCxoXSkpOmEuYXBwbHkodGhpcyxbYixjLGQsaF0pfX0oSFRNTElucHV0RWxlbWVudC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcikpLEhUTUxJbnB1dEVsZW1lbnQucHJvdG90eXBlLmF0dGFjaEV2ZW50JiYoSFRNTElucHV0RWxlbWVudC5wcm90b3R5cGUuYXR0YWNoRXZlbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7Zyh0aGlzLGIpPyhlKHRoaXMpLHdpbmRvdy5qUXVlcnk/YW5ndWxhci5lbGVtZW50KHRoaXMpLmJpbmQoXCJjaGFuZ2VcIixmKG51bGwpKTphLmFwcGx5KHRoaXMsW2IsZihjKV0pKTphLmFwcGx5KHRoaXMsW2IsY10pfX0oSFRNTElucHV0RWxlbWVudC5wcm90b3R5cGUuYXR0YWNoRXZlbnQpKSx3aW5kb3cuRm9ybURhdGE9Rm9ybURhdGE9ZnVuY3Rpb24oKXtyZXR1cm57YXBwZW5kOmZ1bmN0aW9uKGEsYixjKXtiLl9faXNGaWxlQVBJQmxvYlNoaW0mJihiPWIuZGF0YVswXSksdGhpcy5kYXRhLnB1c2goe2tleTphLHZhbDpiLG5hbWU6Y30pfSxkYXRhOltdLF9faXNGaWxlQVBJU2hpbTohMH19LHdpbmRvdy5CbG9iPUJsb2I9ZnVuY3Rpb24oYSl7cmV0dXJue2RhdGE6YSxfX2lzRmlsZUFQSUJsb2JTaGltOiEwfX0sZnVuY3Rpb24oKXtpZih3aW5kb3cuRmlsZUFQSXx8KHdpbmRvdy5GaWxlQVBJPXt9KSxGaWxlQVBJLmZvcmNlTG9hZCYmKEZpbGVBUEkuaHRtbDU9ITEpLCFGaWxlQVBJLnVwbG9hZCl7dmFyIGEsYixkLGUsZixnPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIiksaD1kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtpZih3aW5kb3cuRmlsZUFQSS5qc1VybClhPXdpbmRvdy5GaWxlQVBJLmpzVXJsO2Vsc2UgaWYod2luZG93LkZpbGVBUEkuanNQYXRoKWI9d2luZG93LkZpbGVBUEkuanNQYXRoO2Vsc2UgZm9yKGQ9MDtkPGgubGVuZ3RoO2QrKylpZihmPWhbZF0uc3JjLGU9Zi5zZWFyY2goL1xcL2FuZ3VsYXJcXC1maWxlXFwtdXBsb2FkW1xcLWEtekEtejAtOVxcLl0qXFwuanMvKSxlPi0xKXtiPWYuc3Vic3RyaW5nKDAsZSsxKTticmVha31udWxsPT1GaWxlQVBJLnN0YXRpY1BhdGgmJihGaWxlQVBJLnN0YXRpY1BhdGg9YiksZy5zZXRBdHRyaWJ1dGUoXCJzcmNcIixhfHxiK1wiRmlsZUFQSS5taW4uanNcIiksZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdLmFwcGVuZENoaWxkKGcpLEZpbGVBUEkuaGFzRmxhc2g9YygpfX0oKSxGaWxlQVBJLmRpc2FibGVGaWxlSW5wdXQ9ZnVuY3Rpb24oYSxiKXtiP2EucmVtb3ZlQ2xhc3MoXCJqcy1maWxlYXBpLXdyYXBwZXJcIik6YS5hZGRDbGFzcyhcImpzLWZpbGVhcGktd3JhcHBlclwiKX19d2luZG93LkZpbGVSZWFkZXJ8fCh3aW5kb3cuRmlsZVJlYWRlcj1mdW5jdGlvbigpe3ZhciBhPXRoaXMsYj0hMTt0aGlzLmxpc3RlbmVycz17fSx0aGlzLmFkZEV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oYixjKXthLmxpc3RlbmVyc1tiXT1hLmxpc3RlbmVyc1tiXXx8W10sYS5saXN0ZW5lcnNbYl0ucHVzaChjKX0sdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGIsYyl7YS5saXN0ZW5lcnNbYl0mJmEubGlzdGVuZXJzW2JdLnNwbGljZShhLmxpc3RlbmVyc1tiXS5pbmRleE9mKGMpLDEpfSx0aGlzLmRpc3BhdGNoRXZlbnQ9ZnVuY3Rpb24oYil7dmFyIGM9YS5saXN0ZW5lcnNbYi50eXBlXTtpZihjKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKWNbZF0uY2FsbChhLGIpfSx0aGlzLm9uYWJvcnQ9dGhpcy5vbmVycm9yPXRoaXMub25sb2FkPXRoaXMub25sb2Fkc3RhcnQ9dGhpcy5vbmxvYWRlbmQ9dGhpcy5vbnByb2dyZXNzPW51bGw7dmFyIGM9ZnVuY3Rpb24oYixjKXt2YXIgZD17dHlwZTpiLHRhcmdldDphLGxvYWRlZDpjLmxvYWRlZCx0b3RhbDpjLnRvdGFsLGVycm9yOmMuZXJyb3J9O3JldHVybiBudWxsIT1jLnJlc3VsdCYmKGQudGFyZ2V0LnJlc3VsdD1jLnJlc3VsdCksZH0sZD1mdW5jdGlvbihkKXtpZihifHwoYj0hMCxhLm9ubG9hZHN0YXJ0JiZhLm9ubG9hZHN0YXJ0KGMoXCJsb2Fkc3RhcnRcIixkKSkpLFwibG9hZFwiPT09ZC50eXBlKXthLm9ubG9hZGVuZCYmYS5vbmxvYWRlbmQoYyhcImxvYWRlbmRcIixkKSk7dmFyIGU9YyhcImxvYWRcIixkKTthLm9ubG9hZCYmYS5vbmxvYWQoZSksYS5kaXNwYXRjaEV2ZW50KGUpfWVsc2UgaWYoXCJwcm9ncmVzc1wiPT09ZC50eXBlKXt2YXIgZT1jKFwicHJvZ3Jlc3NcIixkKTthLm9ucHJvZ3Jlc3MmJmEub25wcm9ncmVzcyhlKSxhLmRpc3BhdGNoRXZlbnQoZSl9ZWxzZXt2YXIgZT1jKFwiZXJyb3JcIixkKTthLm9uZXJyb3ImJmEub25lcnJvcihlKSxhLmRpc3BhdGNoRXZlbnQoZSl9fTt0aGlzLnJlYWRBc0FycmF5QnVmZmVyPWZ1bmN0aW9uKGEpe0ZpbGVBUEkucmVhZEFzQmluYXJ5U3RyaW5nKGEsZCl9LHRoaXMucmVhZEFzQmluYXJ5U3RyaW5nPWZ1bmN0aW9uKGEpe0ZpbGVBUEkucmVhZEFzQmluYXJ5U3RyaW5nKGEsZCl9LHRoaXMucmVhZEFzRGF0YVVSTD1mdW5jdGlvbihhKXtGaWxlQVBJLnJlYWRBc0RhdGFVUkwoYSxkKX0sdGhpcy5yZWFkQXNUZXh0PWZ1bmN0aW9uKGEpe0ZpbGVBUEkucmVhZEFzVGV4dChhLGQpfX0pfSgpOyIsIi8qISAzLjEuMiAqL1xuIWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShhLGIpe3dpbmRvdy5YTUxIdHRwUmVxdWVzdC5wcm90b3R5cGVbYV09Yih3aW5kb3cuWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlW2FdKX1mdW5jdGlvbiBiKGEsYixjLGQsZixnLGgpe2Z1bmN0aW9uIGkoKXtyZXR1cm5cImlucHV0XCI9PT1iWzBdLnRhZ05hbWUudG9Mb3dlckNhc2UoKSYmYi5hdHRyKFwidHlwZVwiKSYmXCJmaWxlXCI9PT1iLmF0dHIoXCJ0eXBlXCIpLnRvTG93ZXJDYXNlKCl9ZnVuY3Rpb24gaihjKXtnKGZ1bmN0aW9uKCl7Yi5wYXJlbnQoKS5sZW5ndGgmJnAucHVzaChhLiR3YXRjaChjLGZ1bmN0aW9uKGEsYil7YSE9YiYmaygpfSkpfSl9ZnVuY3Rpb24gaygpe3ZhciBjPWIuY2xvbmUoKTtpZihiLmF0dHIoXCJfX2FmdV9nZW5fX1wiKSYmYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGIuYXR0cihcImlkXCIpLnN1YnN0cmluZygxKSkpLnJlbW92ZSgpLGIucGFyZW50KCkubGVuZ3RoKXtmb3IodmFyIGQ9MDtkPHAubGVuZ3RoO2QrKylwW2RdKCk7Yi5yZXBsYWNlV2l0aChjKSxoKGMpKGEpfXJldHVybiBjfWZ1bmN0aW9uIGwoZCxlKXtpZihkKXtqKGQpO3ZhciBnPWYoZCkoYSk7Zz8oYi5hdHRyKGUsZyksY1tlXT1nKTooYi5hdHRyKGUsbnVsbCksZGVsZXRlIGNbZV0pfX1mdW5jdGlvbiBtKGIpe3ZhciBlO2U9Yi5fX2ZpbGVzX3x8Yi50YXJnZXQmJmIudGFyZ2V0LmZpbGVzLG8oZSxjLGQsYSxiKX1mdW5jdGlvbiBuKGEpe2lmKG51bGwhPXFbMF0udmFsdWUmJlwiXCIhPXFbMF0udmFsdWUmJihxWzBdLnZhbHVlPW51bGwsLTE9PT1uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoXCJUcmlkZW50LzdcIikmJm0oe3RhcmdldDp7ZmlsZXM6W119fSkpLGIuYXR0cihcIl9fYWZ1X2Nsb25lX19cIikpYi5hdHRyKFwiX19hZnVfY2xvbmVfX1wiLG51bGwpO2Vsc2UgaWYoLTEhPT1uYXZpZ2F0b3IuYXBwVmVyc2lvbi5pbmRleE9mKFwiTVNJRSAxMFwiKXx8LTEhPT1uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoXCJUcmlkZW50LzdcIikpe3ZhciBjPWsoKTtyZXR1cm4gYy5hdHRyKFwiX19hZnVfY2xvbmVfX1wiLCEwKSxjWzBdLmNsaWNrKCksYS5wcmV2ZW50RGVmYXVsdCgpLGEuc3RvcFByb3BhZ2F0aW9uKCksITB9fWZ1bmN0aW9uIG8oYSxiLGMsZCxoKXtmb3IodmFyIGk9W10saj1bXSxrPWYoYi5uZ0FjY2VwdCkoZCksbD1hbmd1bGFyLmlzU3RyaW5nKGspJiZrP25ldyBSZWdFeHAoZShrKSxcImdpXCIpOm51bGwsbT1sP251bGw6Yi5uZ0FjY2VwdCxuPTA7bjxhLmxlbmd0aDtuKyspe3ZhciBvPWEuaXRlbShuKTshKCFsfHxvLnR5cGUubWF0Y2gobCl8fG51bGwhPW8ubmFtZSYmby5uYW1lLm1hdGNoKGwpKXx8bSYmIWYobSkoZCx7JGZpbGU6bywkZXZlbnQ6aH0pP2oucHVzaChvKTppLnB1c2gobyl9ZyhmdW5jdGlvbigpe2MmJihmKGIubmdNb2RlbCkuYXNzaWduKGQsaSksYyYmYy4kc2V0Vmlld1ZhbHVlKG51bGwhPWkmJjA9PWkubGVuZ3RoP1wiXCI6aSksYi5uZ01vZGVsUmVqZWN0ZWQmJmYoYi5uZ01vZGVsUmVqZWN0ZWQpLmFzc2lnbihkLGopKSxiLm5nRmlsZUNoYW5nZSYmXCJcIiE9Yi5uZ0ZpbGVDaGFuZ2UmJmYoYi5uZ0ZpbGVDaGFuZ2UpKGQseyRmaWxlczppLCRyZWplY3RlZEZpbGVzOmosJGV2ZW50Omh9KX0pfXZhciBwPVtdO2woYy5uZ011bHRpcGxlLFwibXVsdGlwbGVcIiksbChjLm5nQWNjZXB0LFwibmctYWNjZXB0XCIpLGwoYy5uZ0NhcHR1cmUsXCJjYXB0dXJlXCIpLFwiXCIhPWMubmdGaWxlU2VsZWN0JiYoYy5uZ0ZpbGVDaGFuZ2U9Yy5uZ0ZpbGVTZWxlY3QpO3ZhciBxPWI7aWYoaSgpKWIuYmluZChcImNsaWNrXCIsbik7ZWxzZXtxPWFuZ3VsYXIuZWxlbWVudCgnPGlucHV0IHR5cGU9XCJmaWxlXCI+JyksYi5hdHRyKFwibXVsdGlwbGVcIikmJnEuYXR0cihcIm11bHRpcGxlXCIsYi5hdHRyKFwibXVsdGlwbGVcIikpLGIuYXR0cihcImFjY2VwdFwiKSYmcS5hdHRyKFwiYWNjZXB0XCIsYi5hdHRyKFwiYWNjZXB0XCIpKSxiLmF0dHIoXCJjYXB0dXJlXCIpJiZxLmF0dHIoXCJjYXB0dXJlXCIsYi5hdHRyKFwiY2FwdHVyZVwiKSk7Zm9yKHZhciByIGluIGMpaWYoMD09ci5pbmRleE9mKFwiaW5wdXRGaWxlXCIpKXt2YXIgcz1yLnN1YnN0cmluZyhcImlucHV0RmlsZVwiLmxlbmd0aCk7cz1zWzBdLnRvTG93ZXJDYXNlKCkrcy5zdWJzdHJpbmcoMSkscS5hdHRyKHMsY1tyXSl9cS5jc3MoXCJ3aWR0aFwiLFwiMHB4XCIpLmNzcyhcImhlaWdodFwiLFwiMHB4XCIpLmNzcyhcInBvc2l0aW9uXCIsXCJhYnNvbHV0ZVwiKS5jc3MoXCJwYWRkaW5nXCIsMCkuY3NzKFwibWFyZ2luXCIsMCkuY3NzKFwib3ZlcmZsb3dcIixcImhpZGRlblwiKS5hdHRyKFwidGFiaW5kZXhcIixcIi0xXCIpLmNzcyhcIm9wYWNpdHlcIiwwKS5hdHRyKFwiX19hZnVfZ2VuX19cIiwhMCksYi5hdHRyKFwiX19yZWZFbGVtX19cIiwhMCkscVswXS5fX3JlZkVsZW1fXz1iWzBdLGIucGFyZW50KClbMF0uaW5zZXJ0QmVmb3JlKHFbMF0sYlswXSksYi5jc3MoXCJvdmVyZmxvd1wiLFwiaGlkZGVuXCIpLGIuYmluZChcImNsaWNrXCIsZnVuY3Rpb24oYSl7bihhKXx8cVswXS5jbGljaygpfSl9cS5iaW5kKFwiY2hhbmdlXCIsbSksYi5vbihcIiRkZXN0cm95XCIsZnVuY3Rpb24oKXtmb3IodmFyIGE9MDthPHAubGVuZ3RoO2ErKylwW2FdKCk7YlswXSE9cVswXSYmcS5yZW1vdmUoKX0pLHAucHVzaChhLiR3YXRjaChjLm5nTW9kZWwsZnVuY3Rpb24oYSxiKXthPT1ifHxudWxsIT1hJiZhLmxlbmd0aHx8KC0xIT09bmF2aWdhdG9yLmFwcFZlcnNpb24uaW5kZXhPZihcIk1TSUUgMTBcIik/aygpOnFbMF0udmFsdWU9bnVsbCl9KSl9ZnVuY3Rpb24gYyhhLGIsYyxmLGcsaCxpKXtmdW5jdGlvbiBqKGEsYixjKXt2YXIgZD0hMDtpZihyfHxzKXt2YXIgZT1jLmRhdGFUcmFuc2Zlci5pdGVtcztpZihudWxsIT1lKWZvcih2YXIgZj0wO2Y8ZS5sZW5ndGgmJmQ7ZisrKWQ9ZCYmKFwiZmlsZVwiPT1lW2ZdLmtpbmR8fFwiXCI9PWVbZl0ua2luZCkmJihzJiZnKHMpKGEseyRmaWxlOmVbZl0sJGV2ZW50OmN9KXx8ciYmbnVsbCE9ZVtmXS50eXBlJiZlW2ZdLnR5cGUubWF0Y2gocil8fG51bGwhPWVbZl0ubmFtZSYmZVtmXS5uYW1lLm1hdGNoKHIpKX12YXIgaD1nKGIuZHJhZ092ZXJDbGFzcykoYSx7JGV2ZW50OmN9KTtyZXR1cm4gaCYmKGguZGVsYXkmJihwPWguZGVsYXkpLGguYWNjZXB0JiYoaD1kP2guYWNjZXB0OmgucmVqZWN0KSksaHx8Yi5kcmFnT3ZlckNsYXNzfHxcImRyYWdvdmVyXCJ9ZnVuY3Rpb24gayhiLGMsZCxlKXtmdW5jdGlvbiBmKGMpeyEoIXJ8fGMudHlwZS5tYXRjaChyKXx8bnVsbCE9Yy5uYW1lJiZjLm5hbWUubWF0Y2gocikpfHxzJiYhZyhzKShhLHskZmlsZTpjLCRldmVudDpifSk/bC5wdXNoKGMpOmsucHVzaChjKX1mdW5jdGlvbiBqKGEsYixjKXtpZihudWxsIT1iKWlmKGIuaXNEaXJlY3Rvcnkpe3ZhciBkPShjfHxcIlwiKStiLm5hbWU7Zih7bmFtZTpiLm5hbWUsdHlwZTpcImRpcmVjdG9yeVwiLHBhdGg6ZH0pO3ZhciBlPWIuY3JlYXRlUmVhZGVyKCksZz1bXTtuKys7dmFyIGg9ZnVuY3Rpb24oKXtlLnJlYWRFbnRyaWVzKGZ1bmN0aW9uKGQpe3RyeXtpZihkLmxlbmd0aClnPWcuY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGR8fFtdLDApKSxoKCk7ZWxzZXtmb3IodmFyIGU9MDtlPGcubGVuZ3RoO2UrKylqKGEsZ1tlXSwoYz9jOlwiXCIpK2IubmFtZStcIi9cIik7bi0tfX1jYXRjaChmKXtuLS0sY29uc29sZS5lcnJvcihmKX19LGZ1bmN0aW9uKCl7bi0tfSl9O2goKX1lbHNlIG4rKyxiLmZpbGUoZnVuY3Rpb24oYSl7dHJ5e24tLSxhLnBhdGg9KGM/YzpcIlwiKSthLm5hbWUsZihhKX1jYXRjaChiKXtuLS0sY29uc29sZS5lcnJvcihiKX19LGZ1bmN0aW9uKCl7bi0tfSl9dmFyIGs9W10sbD1bXSxtPWIuZGF0YVRyYW5zZmVyLml0ZW1zLG49MDtpZihtJiZtLmxlbmd0aD4wJiZcImZpbGVcIiE9aS5wcm90b2NvbCgpKWZvcih2YXIgbz0wO288bS5sZW5ndGg7bysrKXtpZihtW29dLndlYmtpdEdldEFzRW50cnkmJm1bb10ud2Via2l0R2V0QXNFbnRyeSgpJiZtW29dLndlYmtpdEdldEFzRW50cnkoKS5pc0RpcmVjdG9yeSl7dmFyIHA9bVtvXS53ZWJraXRHZXRBc0VudHJ5KCk7aWYocC5pc0RpcmVjdG9yeSYmIWQpY29udGludWU7bnVsbCE9cCYmaihrLHApfWVsc2V7dmFyIHE9bVtvXS5nZXRBc0ZpbGUoKTtudWxsIT1xJiZmKHEpfWlmKCFlJiZrLmxlbmd0aD4wKWJyZWFrfWVsc2V7dmFyIHQ9Yi5kYXRhVHJhbnNmZXIuZmlsZXM7aWYobnVsbCE9dClmb3IodmFyIG89MDtvPHQubGVuZ3RoJiYoZih0Lml0ZW0obykpLGV8fCEoay5sZW5ndGg+MCkpO28rKyk7fXZhciB1PTA7IWZ1bmN0aW9uIHYoYSl7aChmdW5jdGlvbigpe2lmKG4pMTAqdSsrPDJlNCYmdigxMCk7ZWxzZXtpZighZSYmay5sZW5ndGg+MSl7Zm9yKHZhciBhPTA7XCJkaXJlY3RvcnlcIj09a1thXS50eXBlOylhKys7az1ba1thXV19YyhrLGwpfX0sYXx8MCl9KCl9dmFyIGw9ZCgpO2lmKGMuZHJvcEF2YWlsYWJsZSYmaChmdW5jdGlvbigpe2EuZHJvcEF2YWlsYWJsZT9hLmRyb3BBdmFpbGFibGUudmFsdWU9bDphLmRyb3BBdmFpbGFibGU9bH0pLCFsKXJldHVybiAwIT1nKGMuaGlkZU9uRHJvcE5vdEF2YWlsYWJsZSkoYSkmJmIuY3NzKFwiZGlzcGxheVwiLFwibm9uZVwiKSx2b2lkIDA7dmFyIG0sbj1udWxsLG89ZyhjLnN0b3BQcm9wYWdhdGlvbikoYSkscD0xLHE9ZyhjLm5nQWNjZXB0KShhKXx8Yy5hY2NlcHQscj1hbmd1bGFyLmlzU3RyaW5nKHEpJiZxP25ldyBSZWdFeHAoZShxKSxcImdpXCIpOm51bGwscz1yP251bGw6Yy5uZ0FjY2VwdDtiWzBdLmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnb3ZlclwiLGZ1bmN0aW9uKGQpe2lmKGQucHJldmVudERlZmF1bHQoKSxvJiZkLnN0b3BQcm9wYWdhdGlvbigpLG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIkNocm9tZVwiKT4tMSl7dmFyIGU9ZC5kYXRhVHJhbnNmZXIuZWZmZWN0QWxsb3dlZDtkLmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0PVwibW92ZVwiPT09ZXx8XCJsaW5rTW92ZVwiPT09ZT9cIm1vdmVcIjpcImNvcHlcIn1oLmNhbmNlbChuKSxhLmFjdHVhbERyYWdPdmVyQ2xhc3N8fChtPWooYSxjLGQpKSxiLmFkZENsYXNzKG0pfSwhMSksYlswXS5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ2VudGVyXCIsZnVuY3Rpb24oYSl7YS5wcmV2ZW50RGVmYXVsdCgpLG8mJmEuc3RvcFByb3BhZ2F0aW9uKCl9LCExKSxiWzBdLmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnbGVhdmVcIixmdW5jdGlvbigpe249aChmdW5jdGlvbigpe2IucmVtb3ZlQ2xhc3MobSksbT1udWxsfSxwfHwxKX0sITEpLFwiXCIhPWMubmdGaWxlRHJvcCYmKGMubmdGaWxlQ2hhbmdlPWEubmdGaWxlRHJvcCksYlswXS5hZGRFdmVudExpc3RlbmVyKFwiZHJvcFwiLGZ1bmN0aW9uKGQpe2QucHJldmVudERlZmF1bHQoKSxvJiZkLnN0b3BQcm9wYWdhdGlvbigpLGIucmVtb3ZlQ2xhc3MobSksbT1udWxsLGsoZCxmdW5jdGlvbihiLGUpe2goZnVuY3Rpb24oKXtmJiYoZyhjLm5nTW9kZWwpLmFzc2lnbihhLGIpLGYmJmYuJHNldFZpZXdWYWx1ZShudWxsIT1iJiYwPT1iLmxlbmd0aD9cIlwiOmIpKSxjLm5nTW9kZWxSZWplY3RlZCYmYVtjLm5nTW9kZWxSZWplY3RlZF0mJmcoYy5uZ01vZGVsUmVqZWN0ZWQpLmFzc2lnbihhLGUpfSksaChmdW5jdGlvbigpe2coYy5uZ0ZpbGVDaGFuZ2UpKGEseyRmaWxlczpiLCRyZWplY3RlZEZpbGVzOmUsJGV2ZW50OmR9KX0pfSwwIT1nKGMuYWxsb3dEaXIpKGEpLGMubXVsdGlwbGV8fGcoYy5uZ011bHRpcGxlKShhKSl9LCExKX1mdW5jdGlvbiBkKCl7dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtyZXR1cm5cImRyYWdnYWJsZVwiaW4gYSYmXCJvbmRyb3BcImluIGF9ZnVuY3Rpb24gZShhKXtpZihhLmxlbmd0aD4yJiZcIi9cIj09PWFbMF0mJlwiL1wiPT09YVthLmxlbmd0aC0xXSlyZXR1cm4gYS5zdWJzdHJpbmcoMSxhLmxlbmd0aC0xKTt2YXIgYj1hLnNwbGl0KFwiLFwiKSxjPVwiXCI7aWYoYi5sZW5ndGg+MSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyljKz1cIihcIitlKGJbZF0pK1wiKVwiLGQ8Yi5sZW5ndGgtMSYmKGMrPVwifFwiKTtlbHNlIDA9PWEuaW5kZXhPZihcIi5cIikmJihhPVwiKlwiK2EpLGM9XCJeXCIrYS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJbLlxcXFxcXFxcKyo/XFxcXFtcXFxcXlxcXFxdJCgpe309ITw+fDpcXFxcLV1cIixcImdcIiksXCJcXFxcJCZcIikrXCIkXCIsYz1jLnJlcGxhY2UoL1xcXFxcXCovZyxcIi4qXCIpLnJlcGxhY2UoL1xcXFxcXD8vZyxcIi5cIik7cmV0dXJuIGN9d2luZG93LlhNTEh0dHBSZXF1ZXN0JiYhd2luZG93LlhNTEh0dHBSZXF1ZXN0Ll9faXNGaWxlQVBJU2hpbSYmYShcInNldFJlcXVlc3RIZWFkZXJcIixmdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oYixjKXtpZihcIl9fc2V0WEhSX1wiPT09Yil7dmFyIGQ9Yyh0aGlzKTtkIGluc3RhbmNlb2YgRnVuY3Rpb24mJmQodGhpcyl9ZWxzZSBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KTt2YXIgZj1hbmd1bGFyLm1vZHVsZShcImFuZ3VsYXJGaWxlVXBsb2FkXCIsW10pO2YudmVyc2lvbj1cIjMuMS4yXCIsZi5zZXJ2aWNlKFwiJHVwbG9hZFwiLFtcIiRodHRwXCIsXCIkcVwiLFwiJHRpbWVvdXRcIixmdW5jdGlvbihhLGIsYyl7ZnVuY3Rpb24gZChkKXtkLm1ldGhvZD1kLm1ldGhvZHx8XCJQT1NUXCIsZC5oZWFkZXJzPWQuaGVhZGVyc3x8e30sZC50cmFuc2Zvcm1SZXF1ZXN0PWQudHJhbnNmb3JtUmVxdWVzdHx8ZnVuY3Rpb24oYixjKXtyZXR1cm4gd2luZG93LkFycmF5QnVmZmVyJiZiIGluc3RhbmNlb2Ygd2luZG93LkFycmF5QnVmZmVyP2I6YS5kZWZhdWx0cy50cmFuc2Zvcm1SZXF1ZXN0WzBdKGIsYyl9O3ZhciBlPWIuZGVmZXIoKSxmPWUucHJvbWlzZTtyZXR1cm4gZC5oZWFkZXJzLl9fc2V0WEhSXz1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhKXthJiYoZC5fX1hIUj1hLGQueGhyRm4mJmQueGhyRm4oYSksYS51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcihcInByb2dyZXNzXCIsZnVuY3Rpb24oYSl7YS5jb25maWc9ZCxlLm5vdGlmeT9lLm5vdGlmeShhKTpmLnByb2dyZXNzX2ZuJiZjKGZ1bmN0aW9uKCl7Zi5wcm9ncmVzc19mbihhKX0pfSwhMSksYS51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIixmdW5jdGlvbihhKXthLmxlbmd0aENvbXB1dGFibGUmJihhLmNvbmZpZz1kLGUubm90aWZ5P2Uubm90aWZ5KGEpOmYucHJvZ3Jlc3NfZm4mJmMoZnVuY3Rpb24oKXtmLnByb2dyZXNzX2ZuKGEpfSkpfSwhMSkpfX0sYShkKS50aGVuKGZ1bmN0aW9uKGEpe2UucmVzb2x2ZShhKX0sZnVuY3Rpb24oYSl7ZS5yZWplY3QoYSl9LGZ1bmN0aW9uKGEpe2Uubm90aWZ5KGEpfSksZi5zdWNjZXNzPWZ1bmN0aW9uKGEpe3JldHVybiBmLnRoZW4oZnVuY3Rpb24oYil7YShiLmRhdGEsYi5zdGF0dXMsYi5oZWFkZXJzLGQpfSksZn0sZi5lcnJvcj1mdW5jdGlvbihhKXtyZXR1cm4gZi50aGVuKG51bGwsZnVuY3Rpb24oYil7YShiLmRhdGEsYi5zdGF0dXMsYi5oZWFkZXJzLGQpfSksZn0sZi5wcm9ncmVzcz1mdW5jdGlvbihhKXtyZXR1cm4gZi5wcm9ncmVzc19mbj1hLGYudGhlbihudWxsLG51bGwsZnVuY3Rpb24oYil7YShiKX0pLGZ9LGYuYWJvcnQ9ZnVuY3Rpb24oKXtyZXR1cm4gZC5fX1hIUiYmYyhmdW5jdGlvbigpe2QuX19YSFIuYWJvcnQoKX0pLGZ9LGYueGhyPWZ1bmN0aW9uKGEpe3JldHVybiBkLnhockZuPWZ1bmN0aW9uKGIpe3JldHVybiBmdW5jdGlvbigpe2ImJmIuYXBwbHkoZixhcmd1bWVudHMpLGEuYXBwbHkoZixhcmd1bWVudHMpfX0oZC54aHJGbiksZn0sZn10aGlzLnVwbG9hZD1mdW5jdGlvbihhKXthLmhlYWRlcnM9YS5oZWFkZXJzfHx7fSxhLmhlYWRlcnNbXCJDb250ZW50LVR5cGVcIl09dm9pZCAwO2EudHJhbnNmb3JtUmVxdWVzdDtyZXR1cm4gYS50cmFuc2Zvcm1SZXF1ZXN0PWEudHJhbnNmb3JtUmVxdWVzdD9cIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYS50cmFuc2Zvcm1SZXF1ZXN0KT9hLnRyYW5zZm9ybVJlcXVlc3Q6W2EudHJhbnNmb3JtUmVxdWVzdF06W10sYS50cmFuc2Zvcm1SZXF1ZXN0LnB1c2goZnVuY3Rpb24oYil7dmFyIGM9bmV3IEZvcm1EYXRhLGQ9e307Zm9yKHZhciBlIGluIGEuZmllbGRzKWRbZV09YS5maWVsZHNbZV07aWYoYiYmKGQuZGF0YT1iKSxhLmZvcm1EYXRhQXBwZW5kZXIpZm9yKHZhciBlIGluIGQpYS5mb3JtRGF0YUFwcGVuZGVyKGMsZSxkW2VdKTtlbHNlIGZvcih2YXIgZSBpbiBkKXt2YXIgZj1kW2VdO3ZvaWQgMCE9PWYmJihcIltvYmplY3QgU3RyaW5nXVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGYpP2MuYXBwZW5kKGUsZik6YS5zZW5kT2JqZWN0c0FzSnNvbkJsb2ImJlwib2JqZWN0XCI9PXR5cGVvZiBmP2MuYXBwZW5kKGUsbmV3IEJsb2IoW2ZdLHt0eXBlOlwiYXBwbGljYXRpb24vanNvblwifSkpOmMuYXBwZW5kKGUsSlNPTi5zdHJpbmdpZnkoZikpKX1pZihudWxsIT1hLmZpbGUpe3ZhciBnPWEuZmlsZUZvcm1EYXRhTmFtZXx8XCJmaWxlXCI7aWYoXCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGEuZmlsZSkpZm9yKHZhciBoPVwiW29iamVjdCBTdHJpbmddXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZyksaT0wO2k8YS5maWxlLmxlbmd0aDtpKyspYy5hcHBlbmQoaD9nOmdbaV0sYS5maWxlW2ldLGEuZmlsZU5hbWUmJmEuZmlsZU5hbWVbaV18fGEuZmlsZVtpXS5uYW1lKTtlbHNlIGMuYXBwZW5kKGcsYS5maWxlLGEuZmlsZU5hbWV8fGEuZmlsZS5uYW1lKX1yZXR1cm4gY30pLGQoYSl9LHRoaXMuaHR0cD1mdW5jdGlvbihhKXtyZXR1cm4gZChhKX19XSksZi5kaXJlY3RpdmUoXCJuZ0ZpbGVTZWxlY3RcIixbXCIkcGFyc2VcIixcIiR0aW1lb3V0XCIsXCIkY29tcGlsZVwiLGZ1bmN0aW9uKGEsYyxkKXtyZXR1cm57cmVzdHJpY3Q6XCJBRUNcIixyZXF1aXJlOlwiP25nTW9kZWxcIixsaW5rOmZ1bmN0aW9uKGUsZixnLGgpe2IoZSxmLGcsaCxhLGMsZCl9fX1dKSxmLmRpcmVjdGl2ZShcIm5nRmlsZURyb3BcIixbXCIkcGFyc2VcIixcIiR0aW1lb3V0XCIsXCIkbG9jYXRpb25cIixmdW5jdGlvbihhLGIsZCl7cmV0dXJue3Jlc3RyaWN0OlwiQUVDXCIscmVxdWlyZTpcIj9uZ01vZGVsXCIsbGluazpmdW5jdGlvbihlLGYsZyxoKXtjKGUsZixnLGgsYSxiLGQpfX19XSksZi5kaXJlY3RpdmUoXCJuZ05vRmlsZURyb3BcIixmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhLGIpe2QoKSYmYi5jc3MoXCJkaXNwbGF5XCIsXCJub25lXCIpfX0pLGYuZGlyZWN0aXZlKFwibmdGaWxlRHJvcEF2YWlsYWJsZVwiLFtcIiRwYXJzZVwiLFwiJHRpbWVvdXRcIixmdW5jdGlvbihhLGIpe3JldHVybiBmdW5jdGlvbihjLGUsZil7aWYoZCgpKXt2YXIgZz1hKGYubmdGaWxlRHJvcEF2YWlsYWJsZSk7YihmdW5jdGlvbigpe2coYyl9KX19fV0pO3ZhciBnPWFuZ3VsYXIubW9kdWxlKFwibmdGaWxlVXBsb2FkXCIsW10pO2Zvcih2YXIgaCBpbiBmKWdbaF09ZltoXX0oKTsiLCJhbmd1bGFyLm1vZHVsZShcIm5nRmFiRm9ybVwiLFtcIm5nTWVzc2FnZXNcIl0pLGFuZ3VsYXIubW9kdWxlKFwibmdGYWJGb3JtXCIpLmRpcmVjdGl2ZShcImZvcm1cIixbXCJuZ0ZhYkZvcm1EaXJlY3RpdmVcIixmdW5jdGlvbihhKXtcInVzZSBzdHJpY3RcIjtyZXR1cm4gYX1dKSxhbmd1bGFyLm1vZHVsZShcIm5nRmFiRm9ybVwiKS5kaXJlY3RpdmUoXCJpbnB1dFwiLFtcIm5nRmFiRm9ybVZhbGlkYXRpb25zRGlyZWN0aXZlXCIsZnVuY3Rpb24oYSl7XCJ1c2Ugc3RyaWN0XCI7cmV0dXJuIGF9XSksYW5ndWxhci5tb2R1bGUoXCJuZ0ZhYkZvcm1cIikuZGlyZWN0aXZlKFwidGV4dGFyZWFcIixbXCJuZ0ZhYkZvcm1WYWxpZGF0aW9uc0RpcmVjdGl2ZVwiLGZ1bmN0aW9uKGEpe1widXNlIHN0cmljdFwiO3JldHVybiBhfV0pLGFuZ3VsYXIubW9kdWxlKFwibmdGYWJGb3JtXCIpLmRpcmVjdGl2ZShcInNlbGVjdFwiLFtcIm5nRmFiRm9ybVZhbGlkYXRpb25zRGlyZWN0aXZlXCIsZnVuY3Rpb24oYSl7XCJ1c2Ugc3RyaWN0XCI7cmV0dXJuIGF9XSksYW5ndWxhci5tb2R1bGUoXCJuZ0ZhYkZvcm1cIikucHJvdmlkZXIoXCJuZ0ZhYkZvcm1cIixmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGEoYSxiKXt2YXIgZD1hbmd1bGFyLmVsZW1lbnQoYW5ndWxhci5lbGVtZW50KFwiPGRpdi8+XCIpLmh0bWwoYSkpO3JldHVybiBhbmd1bGFyLmZvckVhY2goYixmdW5jdGlvbihhLGIpe3ZhciBlPW5ldyBSZWdFeHAoYy52YWxpZGF0aW9uTXNnUHJlZml4KTtpZihiLm1hdGNoKGUpKXt2YXIgZj1iLnJlcGxhY2UoYy52YWxpZGF0aW9uTXNnUHJlZml4LFwiXCIpO2Y9Zi5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKStmLnNsaWNlKDEpO3ZhciBnPWRbMF0ucXVlcnlTZWxlY3RvcignW25nLW1lc3NhZ2U9XCInK2YrJ1wiXScpO2FuZ3VsYXIuZWxlbWVudChnKS5odG1sKGEpfX0pLGR9dmFyIGIsYz17dmFsaWRhdGlvbnNUZW1wbGF0ZTpcImRlZmF1bHQtdmFsaWRhdGlvbi1tc2dzLmh0bWxcIixwcmV2ZW50SW52YWxpZFN1Ym1pdDohMCxwcmV2ZW50RG91YmxlU3VibWl0OiEwLHByZXZlbnREb3VibGVTdWJtaXRUaW1lb3V0TGVuZ3RoOjFlMyxzZXRGb3JtRGlydHlPblN1Ym1pdDohMCxzY3JvbGxUb0FuZEZvY3VzRmlyc3RFcnJvck9uU3VibWl0OiEwLHNjcm9sbEFuaW1hdGlvblRpbWU6NTAwLHNjcm9sbE9mZnNldDotMTAwLGRpc2FibGVkRm9ybXM6ITAsZ2xvYmFsRmFiRm9ybURpc2FibGU6ITEsc2V0Tm92YWxpZGF0ZTohMCxzZXROYW1lc0J5TmdNb2RlbDohMCxzZXRBc3Rlcmlza0ZvclJlcXVpcmVkTGFiZWw6ITEsYXN0ZXJpc2tTdHI6XCIqXCIsdmFsaWRhdGlvbk1zZ1ByZWZpeDpcInZhbGlkYXRpb25Nc2dcIixlbWFpbFJlZ2V4Oi9bYS16MC05ISMkJSYnKisvPT9eX2B7fH1+LV0rKD86XFwuW2EtejAtOSEjJCUmJyorLz0/Xl9ge3x9fi1dKykqQCg/OlthLXowLTldKD86W2EtejAtOS1dKlthLXowLTldKT9cXC4pK1thLXowLTldKD86W2EtejAtOS1dKlthLXowLTldKT8vLHdhdGNoRm9yRm9ybUN0cmw6ITEsZm9ybUNoYW5nZUV2ZW50OlwiTkdfRkFCX0ZPUk1fT1BUSU9OU19DSEFOR0VEXCJ9LGQ9ZnVuY3Rpb24oYSxiLGMpe1wiY2hlY2tib3hcIj09PWMudHlwZXx8XCJyYWRpb1wiPT09Yy50eXBlP2IucGFyZW50KCkuYWZ0ZXIoYSk6Yi5hZnRlcihhKX0sZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoYSxiLGMsZCl7cmV0dXJuKGEvPWQvMik8MT9jLzIqYSphK2I6LWMvMiooLS1hKihhLTIpLTEpK2J9ZnVuY3Rpb24gYihhLGIpe3ZhciBjPTUwMCxkPU1hdGguYWJzKGEpLGU9Yi8xMDtyZXR1cm4gYipkL2MrZX1yZXR1cm4gZnVuY3Rpb24oYyxkLGUpe2Z1bmN0aW9uIGYoKXtsKz1tO3ZhciBiPWEobCxqLGssaSk7d2luZG93LnNjcm9sbFRvKGgsYiksaT5sP3NldFRpbWVvdXQoZixtKTpjLmZvY3VzKCl9dmFyIGc9Yy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3ArcGFyc2VJbnQoZSksaD1jLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQsaT1iKGcsZCksaj13aW5kb3cucGFnZVlPZmZzZXQsaz1nLGw9MCxtPTIwO3JldHVybiAwPT09az92b2lkIGMuZm9jdXMoKTp2b2lkIGYoKX19KCk7cmV0dXJue2V4dGVuZENvbmZpZzpmdW5jdGlvbihhKXtjPWFuZ3VsYXIuZXh0ZW5kKGMsYSl9LHNldEluc2VydEVycm9yVHBsRm46ZnVuY3Rpb24oYSl7ZD1hfSxzZXRTY3JvbGxUb0ZuOmZ1bmN0aW9uKGEpe2U9YX0sc2V0Q3VzdG9tVmFsaWRhdG9yc0ZuOmZ1bmN0aW9uKGEpe2I9YX0sJGdldDpmdW5jdGlvbigpe3JldHVybntpbnNlcnRFcnJvclRwbDpkLGFkZEN1c3RvbVZhbGlkYXRpb25zOmEsY3VzdG9tVmFsaWRhdG9yczpiLHNjcm9sbFRvOmUsY29uZmlnOmN9fX19KSxhbmd1bGFyLm1vZHVsZShcIm5nRmFiRm9ybVwiKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIixmdW5jdGlvbihhKXtcInVzZSBzdHJpY3RcIjthLnB1dChcImRlZmF1bHQtdmFsaWRhdGlvbi1tc2dzLmh0bWxcIiwnPGRpdiBuZy1tZXNzYWdlcz1cImZpZWxkLiRlcnJvclwiIGNsYXNzPVwidmFsaWRhdGlvblwiIG5nLXNob3c9XCJhdHRycy5yZXF1aXJlZD09XFwnXFwnfHwgYXR0cnMucmVxdWlyZWRcIj48dWwgY2xhc3M9XCJsaXN0LXVuc3R5bGVkIHZhbGlkYXRpb24tZXJyb3JzXCIgbmctc2hvdz1cImZpZWxkLiRpbnZhbGlkICYmIChmaWVsZC4kdG91Y2hlZCB8fCBmaWVsZC4kZGlydHkgfHwgZm9ybS4kdHJpZWRTdWJtaXQpXCI+PGxpIG5nLW1lc3NhZ2U9XCJyZXF1aXJlZFwiPlRoaXMgZmllbGQgaXMgcmVxdWlyZWQ8L2xpPjxsaSBuZy1tZXNzYWdlPVwibmdGYWJFbnN1cmVFeHByZXNzaW9uXCI+Tm90IHZhbGlkIGNvbmRpdGlvbjwvbGk+PGxpIG5nLW1lc3NhZ2U9XCJwYXNzd29yZFwiPlBsZWFzZSBlbnRlciBhIHZhbGlkIHBhc3N3b3JkPC9saT48bGkgbmctbWVzc2FnZT1cImVtYWlsXCI+UGxlYXNlIGVudGVyIGEgdmFsaWQgZS1tYWlsPC9saT48bGkgbmctbWVzc2FnZT1cInBhdHRlcm5cIj5JbnZhbGlkIGlucHV0IGZvcm1hdDwvbGk+PGxpIG5nLW1lc3NhZ2U9XCJkYXRlXCI+UGxlYXNlIGVudGVyIGEgdmFsaWQgZGF0ZTwvbGk+PGxpIG5nLW1lc3NhZ2U9XCJ0aW1lXCI+UGxlYXNlIGVudGVyIGEgdmFsaWQgdGltZTwvbGk+PGxpIG5nLW1lc3NhZ2U9XCJkYXRldGltZVwiPlBsZWFzZSBlbnRlciBhIHZhbGlkIGRhdGUgYW5kIHRpbWU8L2xpPjxsaSBuZy1tZXNzYWdlPVwiZGF0ZXRpbWUtbG9jYWxcIj5QbGVhc2UgZW50ZXIgYSB2YWxpZCBkYXRlIGFuZCB0aW1lPC9saT48bGkgbmctbWVzc2FnZT1cIm51bWJlclwiPlRoaXMgZmllbGQgbXVzdCBiZSBudW1lcmljPC9saT48bGkgbmctbWVzc2FnZT1cImNvbG9yXCI+UGxlYXNlIGVudGVyIGEgdmFsaWQgY29sb3I8L2xpPjxsaSBuZy1tZXNzYWdlPVwicmFuZ2VcIj5QbGVhc2UgZW50ZXIgYSB2YWxpZCByYW5nZTwvbGk+PGxpIG5nLW1lc3NhZ2U9XCJtb250aFwiPlBsZWFzZSBlbnRlciBhIHZhbGlkIG1vbnRoPC9saT48bGkgbmctbWVzc2FnZT1cInVybFwiPlBsZWFzZSBlbnRlciBhIHZhbGlkIFVSTDwvbGk+PGxpIG5nLW1lc3NhZ2U9XCJmaWxlXCI+SW52YWxpZCBmaWxlPC9saT48bGkgbmctbWVzc2FnZT1cIm1pbmxlbmd0aFwiPlBsZWFzZSB1c2UgYXQgbGVhc3Qge3sgYXR0cnMubWlubGVuZ3RoIH19IGNoYXJhY3RlcnM8L2xpPjxsaSBuZy1tZXNzYWdlPVwibWF4bGVuZ3RoXCI+UGxlYXNlIGRvIG5vdCBleGNlZWQge3sgYXR0cnMubWF4bGVuZ3RoIH19IGNoYXJhY3RlcnM8L2xpPjxsaSBuZy1tZXNzYWdlPVwibmdGYWJNYXRjaFwiPlRoZSB7eyBhdHRycy50eXBlID09PVxcJ3Bhc3N3b3JkXFwnPyBcXCdwYXNzd29yZHNcXCcgOiBcXCd2YWx1ZXNcXCcgfX0gc2hvdWxkIG1hdGNoPC9saT48bGkgbmctaWY9XCJhdHRycy50eXBlID09IFxcJ3RpbWVcXCcgXCIgbmctbWVzc2FnZT1cIm1pblwiPlRoZSB0aW1lIHByb3ZpZGVkIHNob3VsZCBhZnRlciB7eyBhdHRycy5taW4gfGRhdGU6IFxcJ0hIOk1NXFwnIH19PC9saT48bGkgbmctbWVzc2FnZT1cIm1heFwiIG5nLWlmPVwiYXR0cnMudHlwZSA9PSBcXCd0aW1lXFwnIFwiPlRoZSB0aW1lIHByb3ZpZGVkIHNob3VsZCBiZSBiZWZvcmUge3thdHRycy5tYXggfGRhdGU6IFxcJ0hIOk1NXFwnfX08L2xpPjxsaSBuZy1tZXNzYWdlPVwibWluXCIgbmctaWY9XCJhdHRycy50eXBlID09IFxcJ2RhdGVcXCcgXCI+VGhlIGRhdGUgcHJvdmlkZWQgc2hvdWxkIGJlIGFmdGVyIHt7YXR0cnMubWluIHxkYXRlOlxcJ2RkLk1NLnl5XFwnfX08L2xpPjxsaSBuZy1tZXNzYWdlPVwibWF4XCIgbmctaWY9XCJhdHRycy50eXBlID09IFxcJ2RhdGVcXCcgXCI+VGhlIGRhdGUgcHJvdmlkZWQgc2hvdWxkIGJlIGJlZm9yZSB7e2F0dHJzLm1heCB8ZGF0ZTogXFwnZGQuTU0ueXlcXCd9fTwvbGk+PC91bD48ZGl2IGNsYXNzPVwidmFsaWRhdGlvbi1zdWNjZXNzXCIgbmctc2hvdz1cImZpZWxkLiR2YWxpZCAmJiAhZmllbGQuJGludmFsaWRcIj48L2Rpdj48L2Rpdj4nKX1dKSxhbmd1bGFyLm1vZHVsZShcIm5nRmFiRm9ybVwiKS5mYWN0b3J5KFwibmdGYWJGb3JtVmFsaWRhdGlvbnNEaXJlY3RpdmVcIixbXCJuZ0ZhYkZvcm1cIixcIiRjb21waWxlXCIsXCIkdGVtcGxhdGVSZXF1ZXN0XCIsXCIkcm9vdFNjb3BlXCIsXCIkdGltZW91dFwiLGZ1bmN0aW9uKGEsYixjLGQsZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gZihlKXt2YXIgZj1lLmVsLGc9ZS5jZmcsaD1lLmZvcm1DdHJsLGk9ZS5uZ01vZGVsQ3RybCxqPWUuYXR0cnM7ZS5jdXJyZW50VmFsaWRhdGlvblZhcnMudHBsJiYwIT09T2JqZWN0LmtleXMoZS5jdXJyZW50VmFsaWRhdGlvblZhcnMudHBsKS5sZW5ndGgmJmFuZ3VsYXIuZWxlbWVudChlLmN1cnJlbnRWYWxpZGF0aW9uVmFycy50cGwpLnJlbW92ZSgpLGMoZy52YWxpZGF0aW9uc1RlbXBsYXRlKS50aGVuKGZ1bmN0aW9uKGMpe3ZhciBnPWQuJG5ldyghMCk7ZS5jdXJyZW50VmFsaWRhdGlvblZhcnMucHJpdmF0ZVNjb3BlPWcsYz1hLmFkZEN1c3RvbVZhbGlkYXRpb25zKGMsaiksZy5hdHRycz1qLGcuZm9ybT1oLGcuZmllbGQ9aTt2YXIgaz1iKGMuY2hpbGRyZW4oKSkoZyk7ZS5jdXJyZW50VmFsaWRhdGlvblZhcnMudHBsPWtbMF0sYS5pbnNlcnRFcnJvclRwbChrWzBdLGYsail9KX1mdW5jdGlvbiBnKGEsYixjKXt2YXIgZD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdsYWJlbFtmb3I9XCInK2IubmFtZSsnXCJdJyk7aWYoIWR8fGQubGVuZ3RoPDEpe3ZhciBlPWFbMF0ucHJldmlvdXNFbGVtZW50U2libGluZztlJiZcIkxBQkVMXCI9PT1lLnRhZ05hbWUmJihkPVtlXSl9aWYoZCYmZC5sZW5ndGg+MCYmXCJyYWRpb1wiIT09Yi50eXBlJiZcImNoZWNrYm94XCIhPT1iLnR5cGUpZm9yKHZhciBmPTA7ZjxkLmxlbmd0aDtmKyspe3ZhciBnPWRbZl07Zy50ZXh0Q29udGVudC5zbGljZSgtYy5hc3Rlcmlza1N0ci5sZW5ndGgpIT09Yy5hc3Rlcmlza1N0ciYmKGcudGV4dENvbnRlbnQ9Zy50ZXh0Q29udGVudCtjLmFzdGVyaXNrU3RyKX19cmV0dXJue3Jlc3RyaWN0OlwiRVwiLHJlcXVpcmU6XCI/bmdNb2RlbFwiLGNvbXBpbGU6ZnVuY3Rpb24oYixjKXtyZXR1cm4hYy50eXBlfHxcInN1Ym1pdFwiIT09Yy50eXBlLnRvTG93ZXJDYXNlKCkmJlwiYnV0dG9uXCIhPT1jLnR5cGUudG9Mb3dlckNhc2UoKT8oYS5jb25maWcuc2V0TmFtZXNCeU5nTW9kZWwmJmMubmdNb2RlbCYmIWMubmFtZSYmIWEuY29uZmlnLmdsb2JhbEZhYkZvcm1EaXNhYmxlJiYoYi5hdHRyKFwibmFtZVwiLGMubmdNb2RlbCksYy5uYW1lPWMubmdNb2RlbCksZnVuY3Rpb24oYixjLGQsaCl7ZnVuY3Rpb24gaShhKXshaHx8IWsudmFsaWRhdGlvbnNUZW1wbGF0ZXx8MD09PU9iamVjdC5rZXlzKGguJHZhbGlkYXRvcnMpLmxlbmd0aCYmMD09PU9iamVjdC5rZXlzKGguJGFzeW5jVmFsaWRhdG9ycykubGVuZ3RofHxhJiZrLnZhbGlkYXRpb25zVGVtcGxhdGU9PT1hLnZhbGlkYXRpb25zVGVtcGxhdGU/IWsudmFsaWRhdGlvbnNUZW1wbGF0ZSYmby50cGwmJjAhPT1PYmplY3Qua2V5cyhvLnRwbCkubGVuZ3RoJiYoby5wcml2YXRlU2NvcGUuJGRlc3Ryb3koKSxhbmd1bGFyLmVsZW1lbnQoby50cGwpLnJlbW92ZSgpKTpmKHtlbDpjLGNmZzprLGZvcm1DdHJsOmwsbmdNb2RlbEN0cmw6aCxhdHRyczpkLGN1cnJlbnRWYWxpZGF0aW9uVmFyczpvfSksIWsuc2V0QXN0ZXJpc2tGb3JSZXF1aXJlZExhYmVsfHxkLnJlcXVpcmVkIT09ITB8fGEmJmsuc2V0QXN0ZXJpc2tGb3JSZXF1aXJlZExhYmVsPT09YS5zZXRBc3Rlcmlza0ZvclJlcXVpcmVkTGFiZWwmJmsuYXN0ZXJpc2tTdHI9PT1hLmFzdGVyaXNrU3RyfHxnKGMsZCxrKX1mdW5jdGlvbiBqKCl7ZShmdW5jdGlvbigpe2lmKGw9Yy5jb250cm9sbGVyKFwiZm9ybVwiKSxsJiZoKXtpZihrfHwoaz1sLm5nRmFiRm9ybUNvbmZpZyksIWspcmV0dXJuO2suZW1haWxSZWdleCYmXCJlbWFpbFwiPT09ZC50eXBlJiYoaC4kdmFsaWRhdG9ycy5lbWFpbD1mdW5jdGlvbihhKXtyZXR1cm4gaC4kaXNFbXB0eShhKXx8ay5lbWFpbFJlZ2V4LnRlc3QoYSl9KSxhLmN1c3RvbVZhbGlkYXRvcnMmJmEuY3VzdG9tVmFsaWRhdG9ycyhoLGQpLGkoKSxtPWIuJG9uKGEuZm9ybUNoYW5nZUV2ZW50LGZ1bmN0aW9uKGEsYixjKXtrPWIsaShjKX0pfX0sMCl9dmFyIGssbCxtLG4sbz17dHBsOnZvaWQgMCxwcml2YXRlU2NvcGU6dm9pZCAwfTthLmNvbmZpZy53YXRjaEZvckZvcm1DdHJsP249Yi4kd2F0Y2goZnVuY3Rpb24oKXtyZXR1cm4gYy5jb250cm9sbGVyKFwiZm9ybVwiKX0sZnVuY3Rpb24oYSl7YSYmKG4oKSxqKCkpfSk6aigpLGIuJG9uKFwiJGRlc3Ryb3lcIixmdW5jdGlvbigpe28mJm8ucHJpdmF0ZVNjb3BlJiZvLnByaXZhdGVTY29wZS4kZGVzdHJveSgpfSl9KTp2b2lkIDB9fX1dKSxhbmd1bGFyLm1vZHVsZShcIm5nRmFiRm9ybVwiKS5kaXJlY3RpdmUoXCJuZ0ZhYkVuc3VyZUV4cHJlc3Npb25cIixbXCIkaHR0cFwiLFwiJHBhcnNlXCIsZnVuY3Rpb24oYSxiKXtcInVzZSBzdHJpY3RcIjtyZXR1cm57cmVxdWlyZTpcIm5nTW9kZWxcIixsaW5rOmZ1bmN0aW9uKGEsYyxkLGUpe2EuJHdhdGNoKGQubmdNb2RlbCxmdW5jdGlvbigpe3ZhciBjPWIoZC5uZ0ZhYkVuc3VyZUV4cHJlc3Npb24pKGEpO2UuJHNldFZhbGlkaXR5KFwibmdGYWJFbnN1cmVFeHByZXNzaW9uXCIsYyksZS4kdmFsaWRhdGUoKX0pfX19XSksYW5ndWxhci5tb2R1bGUoXCJuZ0ZhYkZvcm1cIikuZGlyZWN0aXZlKFwibmdGYWJNYXRjaFwiLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7cmV0dXJue3JlcXVpcmU6XCJuZ01vZGVsXCIscmVzdHJpY3Q6XCJBXCIsc2NvcGU6e25nRmFiTWF0Y2g6XCI9XCJ9LGxpbms6ZnVuY3Rpb24oYSxiLGMsZCl7ZC4kdmFsaWRhdG9ycy5uZ0ZhYk1hdGNoPWZ1bmN0aW9uKGIpe3JldHVybiBCb29sZWFuKGIpJiZiPT1hLm5nRmFiTWF0Y2h9LGEuJHdhdGNoKFwibmdGYWJNYXRjaFwiLGZ1bmN0aW9uKCl7ZC4kdmFsaWRhdGUoKX0pfX19KSxhbmd1bGFyLm1vZHVsZShcIm5nRmFiRm9ybVwiKS5kaXJlY3RpdmUoXCJuZ0ZhYlJlc2V0Rm9ybU9uXCIsZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtyZXR1cm57cmVxdWlyZTpcIl5mb3JtXCIscmVzdHJpY3Q6XCJBXCIsc2NvcGU6e25nRmFiUmVzZXRGb3JtT246XCJAXCIsZG9Ob3RDbGVhcklucHV0czpcIkBcIn0sbGluazpmdW5jdGlvbihhLGIsYyxkKXtjLm5nRmFiUmVzZXRGb3JtT258fChjLm5nRmFiUmVzZXRGb3JtT249XCJjbGlja1wiKSxiLm9uKGMubmdGYWJSZXNldEZvcm1PbixmdW5jdGlvbigpe2MuZG9Ob3RDbGVhcklucHV0cz9kLiRyZXNldEZvcm0oKTpkLiRyZXNldEZvcm0oITApLGEuJGFwcGx5KCl9KX19fSksYW5ndWxhci5tb2R1bGUoXCJuZ0ZhYkZvcm1cIikuZmFjdG9yeShcIm5nRmFiRm9ybURpcmVjdGl2ZVwiLFtcIiRjb21waWxlXCIsXCIkdGltZW91dFwiLFwibmdGYWJGb3JtXCIsZnVuY3Rpb24oYSxiLGMpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGQoYSl7YS5wcmV2ZW50RGVmYXVsdCgpLGEuc3RvcFByb3BhZ2F0aW9uKCksYS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKX1mdW5jdGlvbiBlKGEsYil7aWYoYi5kaXNhYmxlRm9ybSl7YS5jb250ZW50cygpLndyYXAoXCI8ZmllbGRzZXQ+XCIpO3ZhciBjPWEuY2hpbGRyZW4oKTtiLiRvYnNlcnZlKFwiZGlzYWJsZUZvcm1cIixmdW5jdGlvbigpe1widHJ1ZVwiPT09Yi5kaXNhYmxlRm9ybXx8Yi5kaXNhYmxlRm9ybT09PSEwP2MuYXR0cihcImRpc2FibGVkXCIsITApOmMuYXR0cihcImRpc2FibGVkXCIsITEpfSl9fWZ1bmN0aW9uIGYoYSxiLGQsZSl7dmFyIGY9YVswXS5xdWVyeVNlbGVjdG9yKFwiLm5nLWludmFsaWRcIik7ZiYmYi4kaW52YWxpZCYmYy5zY3JvbGxUbyhmLHBhcnNlSW50KGQpLGUpfXJldHVybntyZXN0cmljdDpcIkVBQ1wiLHNjb3BlOiExLHJlcXVpcmU6XCJmb3JtXCIsY29tcGlsZTpmdW5jdGlvbihhLGcpe3ZhciBoLGk9YW5ndWxhci5jb3B5KGMuY29uZmlnKTtpZihpLmdsb2JhbEZhYkZvcm1EaXNhYmxlIT09ITB8fCFhbmd1bGFyLmlzVW5kZWZpbmVkKGcubmdGYWJGb3JtKSlyZXR1cm4hZy5ub3ZhbGlkYXRlJiZpLnNldE5vdmFsaWRhdGUmJihhLmF0dHIoXCJub3ZhbGlkYXRlXCIsITApLGcubm92YWxpZGF0ZT0hMCkse3ByZTpmdW5jdGlvbihhLGMsZSxnKXtjLmJpbmQoXCJzdWJtaXRcIixmdW5jdGlvbihlKXtpLnNldEZvcm1EaXJ0eU9uU3VibWl0JiZhLiRhcHBseShmdW5jdGlvbigpe2cuJHRyaWVkU3VibWl0PSEwfSksaS5wcmV2ZW50SW52YWxpZFN1Ym1pdCYmIWcuJHZhbGlkP2QoZSk6aS5wcmV2ZW50RG91YmxlU3VibWl0JiYoZy4kcHJldmVudERvdWJsZVN1Ym1pdCYmZChlKSxoJiZiLmNhbmNlbChoKSxnLiRwcmV2ZW50RG91YmxlU3VibWl0PSEwLGg9YihmdW5jdGlvbigpe2cuJHByZXZlbnREb3VibGVTdWJtaXQ9ITF9LGkucHJldmVudERvdWJsZVN1Ym1pdFRpbWVvdXRMZW5ndGgpKSxpLnNjcm9sbFRvQW5kRm9jdXNGaXJzdEVycm9yT25TdWJtaXQmJmYoYyxnLGkuc2Nyb2xsQW5pbWF0aW9uVGltZSxpLnNjcm9sbE9mZnNldCl9KX0scG9zdDpmdW5jdGlvbihhLGQsZixnKXtnLiR0cmllZFN1Ym1pdD0hMSxnLiRwcmV2ZW50RG91YmxlU3VibWl0PSExLGcubmdGYWJGb3JtQ29uZmlnPWksZy4kcmVzZXRGb3JtPWZ1bmN0aW9uKGEpe2lmKGE9PT0hMClmb3IodmFyIGI9ZC5maW5kKFwiaW5wdXRcIiksYz0wO2M8Yi5sZW5ndGg7YysrKXt2YXIgZT1hbmd1bGFyLmVsZW1lbnQoYltjXSksZj1lLmNvbnRyb2xsZXIoXCJuZ01vZGVsXCIpO2YmJihmLiRzZXRWaWV3VmFsdWUoXCJcIiksZi4kcmVuZGVyKCkpfWcuJHRyaWVkU3VibWl0PSExLGcuJHNldFByaXN0aW5lKCksZy4kc2V0VW50b3VjaGVkKCl9LGkuZGlzYWJsZWRGb3JtcyYmZShkLGYpLGYubmdGYWJGb3JtT3B0aW9ucyYmYS4kd2F0Y2goZi5uZ0ZhYkZvcm1PcHRpb25zLGZ1bmN0aW9uKGIpe2lmKGIpe3ZhciBkPWFuZ3VsYXIuY29weShpKTtpPWcubmdGYWJGb3JtQ29uZmlnPWFuZ3VsYXIuZXh0ZW5kKGksYiksYS4kYnJvYWRjYXN0KGMuZm9ybUNoYW5nZUV2ZW50LGksZCl9fSwhMCksYS4kb24oXCIkZGVzdHJveVwiLGZ1bmN0aW9uKCl7aCYmYi5jYW5jZWwoaCl9KX19fX19XSksYW5ndWxhci5tb2R1bGUoXCJuZ0ZhYkZvcm1cIikuZGlyZWN0aXZlKFwibmdGb3JtXCIsW1wibmdGYWJGb3JtRGlyZWN0aXZlXCIsZnVuY3Rpb24oYSl7XCJ1c2Ugc3RyaWN0XCI7cmV0dXJuIGF9XSk7IiwiIWZ1bmN0aW9uKGEsYil7YltcInRydWVcIl09YSwvKipcbiAqIEBsaWNlbnNlIFJhbmd5LCBhIGNyb3NzLWJyb3dzZXIgSmF2YVNjcmlwdCByYW5nZSBhbmQgc2VsZWN0aW9uIGxpYnJhcnlcbiAqIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9yYW5neS9cbiAqXG4gKiBDb3B5cmlnaHQgMjAxMiwgVGltIERvd25cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIFZlcnNpb246IDEuMi4zXG4gKiBCdWlsZCBkYXRlOiAyNiBGZWJydWFyeSAyMDEyXG4gKi9cbndpbmRvdy5yYW5neT1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoYSxiKXt2YXIgYz10eXBlb2YgYVtiXTtyZXR1cm4gYz09bHx8IShjIT1rfHwhYVtiXSl8fFwidW5rbm93blwiPT1jfWZ1bmN0aW9uIGIoYSxiKXtyZXR1cm4hKHR5cGVvZiBhW2JdIT1rfHwhYVtiXSl9ZnVuY3Rpb24gYyhhLGIpe3JldHVybiB0eXBlb2YgYVtiXSE9bX1mdW5jdGlvbiBkKGEpe3JldHVybiBmdW5jdGlvbihiLGMpe2Zvcih2YXIgZD1jLmxlbmd0aDtkLS07KWlmKCFhKGIsY1tkXSkpcmV0dXJuITE7cmV0dXJuITB9fWZ1bmN0aW9uIGUoYSl7cmV0dXJuIGEmJnIoYSxxKSYmdChhLHApfWZ1bmN0aW9uIGYoYSl7d2luZG93LmFsZXJ0KFwiUmFuZ3kgbm90IHN1cHBvcnRlZCBpbiB5b3VyIGJyb3dzZXIuIFJlYXNvbjogXCIrYSksdS5pbml0aWFsaXplZD0hMCx1LnN1cHBvcnRlZD0hMX1mdW5jdGlvbiBnKGEpe3ZhciBiPVwiUmFuZ3kgd2FybmluZzogXCIrYTt1LmNvbmZpZy5hbGVydE9uV2Fybj93aW5kb3cuYWxlcnQoYik6dHlwZW9mIHdpbmRvdy5jb25zb2xlIT1tJiZ0eXBlb2Ygd2luZG93LmNvbnNvbGUubG9nIT1tJiZ3aW5kb3cuY29uc29sZS5sb2coYil9ZnVuY3Rpb24gaCgpe2lmKCF1LmluaXRpYWxpemVkKXt2YXIgYyxkPSExLGc9ITE7YShkb2N1bWVudCxcImNyZWF0ZVJhbmdlXCIpJiYoYz1kb2N1bWVudC5jcmVhdGVSYW5nZSgpLHIoYyxvKSYmdChjLG4pJiYoZD0hMCksYy5kZXRhY2goKSk7dmFyIGg9Yihkb2N1bWVudCxcImJvZHlcIik/ZG9jdW1lbnQuYm9keTpkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJvZHlcIilbMF07aCYmYShoLFwiY3JlYXRlVGV4dFJhbmdlXCIpJiYoYz1oLmNyZWF0ZVRleHRSYW5nZSgpLGUoYykmJihnPSEwKSksZHx8Z3x8ZihcIk5laXRoZXIgUmFuZ2Ugbm9yIFRleHRSYW5nZSBhcmUgaW1wbGVtZW50ZWRcIiksdS5pbml0aWFsaXplZD0hMCx1LmZlYXR1cmVzPXtpbXBsZW1lbnRzRG9tUmFuZ2U6ZCxpbXBsZW1lbnRzVGV4dFJhbmdlOmd9O2Zvcih2YXIgaT13LmNvbmNhdCh2KSxqPTAsaz1pLmxlbmd0aDtrPmo7KytqKXRyeXtpW2pdKHUpfWNhdGNoKGwpe2Iod2luZG93LFwiY29uc29sZVwiKSYmYSh3aW5kb3cuY29uc29sZSxcImxvZ1wiKSYmd2luZG93LmNvbnNvbGUubG9nKFwiSW5pdCBsaXN0ZW5lciB0aHJldyBhbiBleGNlcHRpb24uIENvbnRpbnVpbmcuXCIsbCl9fX1mdW5jdGlvbiBpKGEpe2E9YXx8d2luZG93LGgoKTtmb3IodmFyIGI9MCxjPXgubGVuZ3RoO2M+YjsrK2IpeFtiXShhKX1mdW5jdGlvbiBqKGEpe3RoaXMubmFtZT1hLHRoaXMuaW5pdGlhbGl6ZWQ9ITEsdGhpcy5zdXBwb3J0ZWQ9ITF9dmFyIGs9XCJvYmplY3RcIixsPVwiZnVuY3Rpb25cIixtPVwidW5kZWZpbmVkXCIsbj1bXCJzdGFydENvbnRhaW5lclwiLFwic3RhcnRPZmZzZXRcIixcImVuZENvbnRhaW5lclwiLFwiZW5kT2Zmc2V0XCIsXCJjb2xsYXBzZWRcIixcImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyXCIsXCJTVEFSVF9UT19TVEFSVFwiLFwiU1RBUlRfVE9fRU5EXCIsXCJFTkRfVE9fU1RBUlRcIixcIkVORF9UT19FTkRcIl0sbz1bXCJzZXRTdGFydFwiLFwic2V0U3RhcnRCZWZvcmVcIixcInNldFN0YXJ0QWZ0ZXJcIixcInNldEVuZFwiLFwic2V0RW5kQmVmb3JlXCIsXCJzZXRFbmRBZnRlclwiLFwiY29sbGFwc2VcIixcInNlbGVjdE5vZGVcIixcInNlbGVjdE5vZGVDb250ZW50c1wiLFwiY29tcGFyZUJvdW5kYXJ5UG9pbnRzXCIsXCJkZWxldGVDb250ZW50c1wiLFwiZXh0cmFjdENvbnRlbnRzXCIsXCJjbG9uZUNvbnRlbnRzXCIsXCJpbnNlcnROb2RlXCIsXCJzdXJyb3VuZENvbnRlbnRzXCIsXCJjbG9uZVJhbmdlXCIsXCJ0b1N0cmluZ1wiLFwiZGV0YWNoXCJdLHA9W1wiYm91bmRpbmdIZWlnaHRcIixcImJvdW5kaW5nTGVmdFwiLFwiYm91bmRpbmdUb3BcIixcImJvdW5kaW5nV2lkdGhcIixcImh0bWxUZXh0XCIsXCJ0ZXh0XCJdLHE9W1wiY29sbGFwc2VcIixcImNvbXBhcmVFbmRQb2ludHNcIixcImR1cGxpY2F0ZVwiLFwiZ2V0Qm9va21hcmtcIixcIm1vdmVUb0Jvb2ttYXJrXCIsXCJtb3ZlVG9FbGVtZW50VGV4dFwiLFwicGFyZW50RWxlbWVudFwiLFwicGFzdGVIVE1MXCIsXCJzZWxlY3RcIixcInNldEVuZFBvaW50XCIsXCJnZXRCb3VuZGluZ0NsaWVudFJlY3RcIl0scj1kKGEpLHM9ZChiKSx0PWQoYyksdT17dmVyc2lvbjpcIjEuMi4zXCIsaW5pdGlhbGl6ZWQ6ITEsc3VwcG9ydGVkOiEwLHV0aWw6e2lzSG9zdE1ldGhvZDphLGlzSG9zdE9iamVjdDpiLGlzSG9zdFByb3BlcnR5OmMsYXJlSG9zdE1ldGhvZHM6cixhcmVIb3N0T2JqZWN0czpzLGFyZUhvc3RQcm9wZXJ0aWVzOnQsaXNUZXh0UmFuZ2U6ZX0sZmVhdHVyZXM6e30sbW9kdWxlczp7fSxjb25maWc6e2FsZXJ0T25XYXJuOiExLHByZWZlclRleHRSYW5nZTohMX19O3UuZmFpbD1mLHUud2Fybj1nLHt9Lmhhc093blByb3BlcnR5P3UudXRpbC5leHRlbmQ9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGMgaW4gYiliLmhhc093blByb3BlcnR5KGMpJiYoYVtjXT1iW2NdKX06ZihcImhhc093blByb3BlcnR5IG5vdCBzdXBwb3J0ZWRcIik7dmFyIHY9W10sdz1bXTt1LmluaXQ9aCx1LmFkZEluaXRMaXN0ZW5lcj1mdW5jdGlvbihhKXt1LmluaXRpYWxpemVkP2EodSk6di5wdXNoKGEpfTt2YXIgeD1bXTt1LmFkZENyZWF0ZU1pc3NpbmdOYXRpdmVBcGlMaXN0ZW5lcj1mdW5jdGlvbihhKXt4LnB1c2goYSl9LHUuY3JlYXRlTWlzc2luZ05hdGl2ZUFwaT1pLGoucHJvdG90eXBlLmZhaWw9ZnVuY3Rpb24oYSl7dGhyb3cgdGhpcy5pbml0aWFsaXplZD0hMCx0aGlzLnN1cHBvcnRlZD0hMSxuZXcgRXJyb3IoXCJNb2R1bGUgJ1wiK3RoaXMubmFtZStcIicgZmFpbGVkIHRvIGxvYWQ6IFwiK2EpfSxqLnByb3RvdHlwZS53YXJuPWZ1bmN0aW9uKGEpe3Uud2FybihcIk1vZHVsZSBcIit0aGlzLm5hbWUrXCI6IFwiK2EpfSxqLnByb3RvdHlwZS5jcmVhdGVFcnJvcj1mdW5jdGlvbihhKXtyZXR1cm4gbmV3IEVycm9yKFwiRXJyb3IgaW4gUmFuZ3kgXCIrdGhpcy5uYW1lK1wiIG1vZHVsZTogXCIrYSl9LHUuY3JlYXRlTW9kdWxlPWZ1bmN0aW9uKGEsYil7dmFyIGM9bmV3IGooYSk7dS5tb2R1bGVzW2FdPWMsdy5wdXNoKGZ1bmN0aW9uKGEpe2IoYSxjKSxjLmluaXRpYWxpemVkPSEwLGMuc3VwcG9ydGVkPSEwfSl9LHUucmVxdWlyZU1vZHVsZXM9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiLGMsZD0wLGU9YS5sZW5ndGg7ZT5kOysrZCl7aWYoYz1hW2RdLGI9dS5tb2R1bGVzW2NdLCEoYiYmYiBpbnN0YW5jZW9mIGopKXRocm93IG5ldyBFcnJvcihcIk1vZHVsZSAnXCIrYytcIicgbm90IGZvdW5kXCIpO2lmKCFiLnN1cHBvcnRlZCl0aHJvdyBuZXcgRXJyb3IoXCJNb2R1bGUgJ1wiK2MrXCInIG5vdCBzdXBwb3J0ZWRcIil9fTt2YXIgeT0hMSx6PWZ1bmN0aW9uKCl7eXx8KHk9ITAsdS5pbml0aWFsaXplZHx8aCgpKX07cmV0dXJuIHR5cGVvZiB3aW5kb3c9PW0/dm9pZCBmKFwiTm8gd2luZG93IGZvdW5kXCIpOnR5cGVvZiBkb2N1bWVudD09bT92b2lkIGYoXCJObyBkb2N1bWVudCBmb3VuZFwiKTooYShkb2N1bWVudCxcImFkZEV2ZW50TGlzdGVuZXJcIikmJmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIseiwhMSksYSh3aW5kb3csXCJhZGRFdmVudExpc3RlbmVyXCIpP3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLHosITEpOmEod2luZG93LFwiYXR0YWNoRXZlbnRcIik/d2luZG93LmF0dGFjaEV2ZW50KFwib25sb2FkXCIseik6ZihcIldpbmRvdyBkb2VzIG5vdCBoYXZlIHJlcXVpcmVkIGFkZEV2ZW50TGlzdGVuZXIgb3IgYXR0YWNoRXZlbnQgbWV0aG9kXCIpLHUpfSgpLHJhbmd5LmNyZWF0ZU1vZHVsZShcIkRvbVV0aWxcIixmdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoYSl7dmFyIGI7cmV0dXJuIHR5cGVvZiBhLm5hbWVzcGFjZVVSST09enx8bnVsbD09PShiPWEubmFtZXNwYWNlVVJJKXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PWJ9ZnVuY3Rpb24gZChhKXt2YXIgYj1hLnBhcmVudE5vZGU7cmV0dXJuIDE9PWIubm9kZVR5cGU/YjpudWxsfWZ1bmN0aW9uIGUoYSl7Zm9yKHZhciBiPTA7YT1hLnByZXZpb3VzU2libGluZzspYisrO3JldHVybiBifWZ1bmN0aW9uIGYoYSl7dmFyIGI7cmV0dXJuIGooYSk/YS5sZW5ndGg6KGI9YS5jaGlsZE5vZGVzKT9iLmxlbmd0aDowfWZ1bmN0aW9uIGcoYSxiKXt2YXIgYyxkPVtdO2ZvcihjPWE7YztjPWMucGFyZW50Tm9kZSlkLnB1c2goYyk7Zm9yKGM9YjtjO2M9Yy5wYXJlbnROb2RlKWlmKEQoZCxjKSlyZXR1cm4gYztyZXR1cm4gbnVsbH1mdW5jdGlvbiBoKGEsYixjKXtmb3IodmFyIGQ9Yz9iOmIucGFyZW50Tm9kZTtkOyl7aWYoZD09PWEpcmV0dXJuITA7ZD1kLnBhcmVudE5vZGV9cmV0dXJuITF9ZnVuY3Rpb24gaShhLGIsYyl7Zm9yKHZhciBkLGU9Yz9hOmEucGFyZW50Tm9kZTtlOyl7aWYoZD1lLnBhcmVudE5vZGUsZD09PWIpcmV0dXJuIGU7ZT1kfXJldHVybiBudWxsfWZ1bmN0aW9uIGooYSl7dmFyIGI9YS5ub2RlVHlwZTtyZXR1cm4gMz09Ynx8ND09Ynx8OD09Yn1mdW5jdGlvbiBrKGEsYil7dmFyIGM9Yi5uZXh0U2libGluZyxkPWIucGFyZW50Tm9kZTtyZXR1cm4gYz9kLmluc2VydEJlZm9yZShhLGMpOmQuYXBwZW5kQ2hpbGQoYSksYX1mdW5jdGlvbiBsKGEsYil7dmFyIGM9YS5jbG9uZU5vZGUoITEpO3JldHVybiBjLmRlbGV0ZURhdGEoMCxiKSxhLmRlbGV0ZURhdGEoYixhLmxlbmd0aC1iKSxrKGMsYSksY31mdW5jdGlvbiBtKGEpe2lmKDk9PWEubm9kZVR5cGUpcmV0dXJuIGE7aWYodHlwZW9mIGEub3duZXJEb2N1bWVudCE9eilyZXR1cm4gYS5vd25lckRvY3VtZW50O2lmKHR5cGVvZiBhLmRvY3VtZW50IT16KXJldHVybiBhLmRvY3VtZW50O2lmKGEucGFyZW50Tm9kZSlyZXR1cm4gbShhLnBhcmVudE5vZGUpO3Rocm93IG5ldyBFcnJvcihcImdldERvY3VtZW50OiBubyBkb2N1bWVudCBmb3VuZCBmb3Igbm9kZVwiKX1mdW5jdGlvbiBuKGEpe3ZhciBiPW0oYSk7aWYodHlwZW9mIGIuZGVmYXVsdFZpZXchPXopcmV0dXJuIGIuZGVmYXVsdFZpZXc7aWYodHlwZW9mIGIucGFyZW50V2luZG93IT16KXJldHVybiBiLnBhcmVudFdpbmRvdzt0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZ2V0IGEgd2luZG93IG9iamVjdCBmb3Igbm9kZVwiKX1mdW5jdGlvbiBvKGEpe2lmKHR5cGVvZiBhLmNvbnRlbnREb2N1bWVudCE9eilyZXR1cm4gYS5jb250ZW50RG9jdW1lbnQ7aWYodHlwZW9mIGEuY29udGVudFdpbmRvdyE9eilyZXR1cm4gYS5jb250ZW50V2luZG93LmRvY3VtZW50O3Rocm93IG5ldyBFcnJvcihcImdldElmcmFtZVdpbmRvdzogTm8gRG9jdW1lbnQgb2JqZWN0IGZvdW5kIGZvciBpZnJhbWUgZWxlbWVudFwiKX1mdW5jdGlvbiBwKGEpe2lmKHR5cGVvZiBhLmNvbnRlbnRXaW5kb3chPXopcmV0dXJuIGEuY29udGVudFdpbmRvdztpZih0eXBlb2YgYS5jb250ZW50RG9jdW1lbnQhPXopcmV0dXJuIGEuY29udGVudERvY3VtZW50LmRlZmF1bHRWaWV3O3Rocm93IG5ldyBFcnJvcihcImdldElmcmFtZVdpbmRvdzogTm8gV2luZG93IG9iamVjdCBmb3VuZCBmb3IgaWZyYW1lIGVsZW1lbnRcIil9ZnVuY3Rpb24gcShhKXtyZXR1cm4gQS5pc0hvc3RPYmplY3QoYSxcImJvZHlcIik/YS5ib2R5OmEuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJib2R5XCIpWzBdfWZ1bmN0aW9uIHIoYSl7Zm9yKHZhciBiO2I9YS5wYXJlbnROb2RlOylhPWI7cmV0dXJuIGF9ZnVuY3Rpb24gcyhhLGIsYyxkKXt2YXIgZixoLGosayxsO2lmKGE9PWMpcmV0dXJuIGI9PT1kPzA6ZD5iPy0xOjE7aWYoZj1pKGMsYSwhMCkpcmV0dXJuIGI8PWUoZik/LTE6MTtpZihmPWkoYSxjLCEwKSlyZXR1cm4gZShmKTxkPy0xOjE7aWYoaD1nKGEsYyksaj1hPT09aD9oOmkoYSxoLCEwKSxrPWM9PT1oP2g6aShjLGgsITApLGo9PT1rKXRocm93IG5ldyBFcnJvcihcImNvbXBhcmVQb2ludHMgZ290IHRvIGNhc2UgNCBhbmQgY2hpbGRBIGFuZCBjaGlsZEIgYXJlIHRoZSBzYW1lIVwiKTtmb3IobD1oLmZpcnN0Q2hpbGQ7bDspe2lmKGw9PT1qKXJldHVybi0xO2lmKGw9PT1rKXJldHVybiAxO2w9bC5uZXh0U2libGluZ310aHJvdyBuZXcgRXJyb3IoXCJTaG91bGQgbm90IGJlIGhlcmUhXCIpfWZ1bmN0aW9uIHQoYSl7Zm9yKHZhciBiLGM9bShhKS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7Yj1hLmZpcnN0Q2hpbGQ7KWMuYXBwZW5kQ2hpbGQoYik7cmV0dXJuIGN9ZnVuY3Rpb24gdShhKXtpZighYSlyZXR1cm5cIltObyBub2RlXVwiO2lmKGooYSkpcmV0dXJuJ1wiJythLmRhdGErJ1wiJztpZigxPT1hLm5vZGVUeXBlKXt2YXIgYj1hLmlkPycgaWQ9XCInK2EuaWQrJ1wiJzpcIlwiO3JldHVyblwiPFwiK2Eubm9kZU5hbWUrYitcIj5bXCIrYS5jaGlsZE5vZGVzLmxlbmd0aCtcIl1cIn1yZXR1cm4gYS5ub2RlTmFtZX1mdW5jdGlvbiB2KGEpe3RoaXMucm9vdD1hLHRoaXMuX25leHQ9YX1mdW5jdGlvbiB3KGEpe3JldHVybiBuZXcgdihhKX1mdW5jdGlvbiB4KGEsYil7dGhpcy5ub2RlPWEsdGhpcy5vZmZzZXQ9Yn1mdW5jdGlvbiB5KGEpe3RoaXMuY29kZT10aGlzW2FdLHRoaXMuY29kZU5hbWU9YSx0aGlzLm1lc3NhZ2U9XCJET01FeGNlcHRpb246IFwiK3RoaXMuY29kZU5hbWV9dmFyIHo9XCJ1bmRlZmluZWRcIixBPWEudXRpbDtBLmFyZUhvc3RNZXRob2RzKGRvY3VtZW50LFtcImNyZWF0ZURvY3VtZW50RnJhZ21lbnRcIixcImNyZWF0ZUVsZW1lbnRcIixcImNyZWF0ZVRleHROb2RlXCJdKXx8Yi5mYWlsKFwiZG9jdW1lbnQgbWlzc2luZyBhIE5vZGUgY3JlYXRpb24gbWV0aG9kXCIpLEEuaXNIb3N0TWV0aG9kKGRvY3VtZW50LFwiZ2V0RWxlbWVudHNCeVRhZ05hbWVcIil8fGIuZmFpbChcImRvY3VtZW50IG1pc3NpbmcgZ2V0RWxlbWVudHNCeVRhZ05hbWUgbWV0aG9kXCIpO3ZhciBCPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7QS5hcmVIb3N0TWV0aG9kcyhCLFtcImluc2VydEJlZm9yZVwiLFwiYXBwZW5kQ2hpbGRcIixcImNsb25lTm9kZVwiXXx8IUEuYXJlSG9zdE9iamVjdHMoQixbXCJwcmV2aW91c1NpYmxpbmdcIixcIm5leHRTaWJsaW5nXCIsXCJjaGlsZE5vZGVzXCIsXCJwYXJlbnROb2RlXCJdKSl8fGIuZmFpbChcIkluY29tcGxldGUgRWxlbWVudCBpbXBsZW1lbnRhdGlvblwiKSxBLmlzSG9zdFByb3BlcnR5KEIsXCJpbm5lckhUTUxcIil8fGIuZmFpbChcIkVsZW1lbnQgaXMgbWlzc2luZyBpbm5lckhUTUwgcHJvcGVydHlcIik7dmFyIEM9ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJ0ZXN0XCIpO0EuYXJlSG9zdE1ldGhvZHMoQyxbXCJzcGxpdFRleHRcIixcImRlbGV0ZURhdGFcIixcImluc2VydERhdGFcIixcImFwcGVuZERhdGFcIixcImNsb25lTm9kZVwiXXx8IUEuYXJlSG9zdE9iamVjdHMoQixbXCJwcmV2aW91c1NpYmxpbmdcIixcIm5leHRTaWJsaW5nXCIsXCJjaGlsZE5vZGVzXCIsXCJwYXJlbnROb2RlXCJdKXx8IUEuYXJlSG9zdFByb3BlcnRpZXMoQyxbXCJkYXRhXCJdKSl8fGIuZmFpbChcIkluY29tcGxldGUgVGV4dCBOb2RlIGltcGxlbWVudGF0aW9uXCIpO3ZhciBEPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWEubGVuZ3RoO2MtLTspaWYoYVtjXT09PWIpcmV0dXJuITA7cmV0dXJuITF9O3YucHJvdG90eXBlPXtfY3VycmVudDpudWxsLGhhc05leHQ6ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMuX25leHR9LG5leHQ6ZnVuY3Rpb24oKXt2YXIgYSxiLGM9dGhpcy5fY3VycmVudD10aGlzLl9uZXh0O2lmKHRoaXMuX2N1cnJlbnQpaWYoYT1jLmZpcnN0Q2hpbGQpdGhpcy5fbmV4dD1hO2Vsc2V7Zm9yKGI9bnVsbDtjIT09dGhpcy5yb290JiYhKGI9Yy5uZXh0U2libGluZyk7KWM9Yy5wYXJlbnROb2RlO3RoaXMuX25leHQ9Yn1yZXR1cm4gdGhpcy5fY3VycmVudH0sZGV0YWNoOmZ1bmN0aW9uKCl7dGhpcy5fY3VycmVudD10aGlzLl9uZXh0PXRoaXMucm9vdD1udWxsfX0seC5wcm90b3R5cGU9e2VxdWFsczpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5ub2RlPT09YS5ub2RlJnRoaXMub2Zmc2V0PT1hLm9mZnNldH0saW5zcGVjdDpmdW5jdGlvbigpe3JldHVyblwiW0RvbVBvc2l0aW9uKFwiK3UodGhpcy5ub2RlKStcIjpcIit0aGlzLm9mZnNldCtcIildXCJ9fSx5LnByb3RvdHlwZT17SU5ERVhfU0laRV9FUlI6MSxISUVSQVJDSFlfUkVRVUVTVF9FUlI6MyxXUk9OR19ET0NVTUVOVF9FUlI6NCxOT19NT0RJRklDQVRJT05fQUxMT1dFRF9FUlI6NyxOT1RfRk9VTkRfRVJSOjgsTk9UX1NVUFBPUlRFRF9FUlI6OSxJTlZBTElEX1NUQVRFX0VSUjoxMX0seS5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tZXNzYWdlfSxhLmRvbT17YXJyYXlDb250YWluczpELGlzSHRtbE5hbWVzcGFjZTpjLHBhcmVudEVsZW1lbnQ6ZCxnZXROb2RlSW5kZXg6ZSxnZXROb2RlTGVuZ3RoOmYsZ2V0Q29tbW9uQW5jZXN0b3I6Zyxpc0FuY2VzdG9yT2Y6aCxnZXRDbG9zZXN0QW5jZXN0b3JJbjppLGlzQ2hhcmFjdGVyRGF0YU5vZGU6aixpbnNlcnRBZnRlcjprLHNwbGl0RGF0YU5vZGU6bCxnZXREb2N1bWVudDptLGdldFdpbmRvdzpuLGdldElmcmFtZVdpbmRvdzpwLGdldElmcmFtZURvY3VtZW50Om8sZ2V0Qm9keTpxLGdldFJvb3RDb250YWluZXI6cixjb21wYXJlUG9pbnRzOnMsaW5zcGVjdE5vZGU6dSxmcmFnbWVudEZyb21Ob2RlQ2hpbGRyZW46dCxjcmVhdGVJdGVyYXRvcjp3LERvbVBvc2l0aW9uOnh9LGEuRE9NRXhjZXB0aW9uPXl9KSxyYW5neS5jcmVhdGVNb2R1bGUoXCJEb21SYW5nZVwiLGZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYSxiKXtyZXR1cm4gMyE9YS5ub2RlVHlwZSYmKEwuaXNBbmNlc3Rvck9mKGEsYi5zdGFydENvbnRhaW5lciwhMCl8fEwuaXNBbmNlc3Rvck9mKGEsYi5lbmRDb250YWluZXIsITApKX1mdW5jdGlvbiBjKGEpe3JldHVybiBMLmdldERvY3VtZW50KGEuc3RhcnRDb250YWluZXIpfWZ1bmN0aW9uIGQoYSxiLGMpe3ZhciBkPWEuX2xpc3RlbmVyc1tiXTtpZihkKWZvcih2YXIgZT0wLGY9ZC5sZW5ndGg7Zj5lOysrZSlkW2VdLmNhbGwoYSx7dGFyZ2V0OmEsYXJnczpjfSl9ZnVuY3Rpb24gZShhKXtyZXR1cm4gbmV3IE0oYS5wYXJlbnROb2RlLEwuZ2V0Tm9kZUluZGV4KGEpKX1mdW5jdGlvbiBmKGEpe3JldHVybiBuZXcgTShhLnBhcmVudE5vZGUsTC5nZXROb2RlSW5kZXgoYSkrMSl9ZnVuY3Rpb24gZyhhLGIsYyl7dmFyIGQ9MTE9PWEubm9kZVR5cGU/YS5maXJzdENoaWxkOmE7cmV0dXJuIEwuaXNDaGFyYWN0ZXJEYXRhTm9kZShiKT9jPT1iLmxlbmd0aD9MLmluc2VydEFmdGVyKGEsYik6Yi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLDA9PWM/YjpMLnNwbGl0RGF0YU5vZGUoYixjKSk6Yz49Yi5jaGlsZE5vZGVzLmxlbmd0aD9iLmFwcGVuZENoaWxkKGEpOmIuaW5zZXJ0QmVmb3JlKGEsYi5jaGlsZE5vZGVzW2NdKSxkfWZ1bmN0aW9uIGgoYSl7Zm9yKHZhciBiLGQsZSxmPWMoYS5yYW5nZSkuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO2Q9YS5uZXh0KCk7KXtpZihiPWEuaXNQYXJ0aWFsbHlTZWxlY3RlZFN1YnRyZWUoKSxkPWQuY2xvbmVOb2RlKCFiKSxiJiYoZT1hLmdldFN1YnRyZWVJdGVyYXRvcigpLGQuYXBwZW5kQ2hpbGQoaChlKSksZS5kZXRhY2goITApKSwxMD09ZC5ub2RlVHlwZSl0aHJvdyBuZXcgTihcIkhJRVJBUkNIWV9SRVFVRVNUX0VSUlwiKTtmLmFwcGVuZENoaWxkKGQpfXJldHVybiBmfWZ1bmN0aW9uIGkoYSxiLGMpe3ZhciBkLGU7Yz1jfHx7c3RvcDohMX07Zm9yKHZhciBmLGc7Zj1hLm5leHQoKTspaWYoYS5pc1BhcnRpYWxseVNlbGVjdGVkU3VidHJlZSgpKXtpZihiKGYpPT09ITEpcmV0dXJuIHZvaWQoYy5zdG9wPSEwKTtpZihnPWEuZ2V0U3VidHJlZUl0ZXJhdG9yKCksaShnLGIsYyksZy5kZXRhY2goITApLGMuc3RvcClyZXR1cm59ZWxzZSBmb3IoZD1MLmNyZWF0ZUl0ZXJhdG9yKGYpO2U9ZC5uZXh0KCk7KWlmKGIoZSk9PT0hMSlyZXR1cm4gdm9pZChjLnN0b3A9ITApfWZ1bmN0aW9uIGooYSl7Zm9yKHZhciBiO2EubmV4dCgpOylhLmlzUGFydGlhbGx5U2VsZWN0ZWRTdWJ0cmVlKCk/KGI9YS5nZXRTdWJ0cmVlSXRlcmF0b3IoKSxqKGIpLGIuZGV0YWNoKCEwKSk6YS5yZW1vdmUoKX1mdW5jdGlvbiBrKGEpe2Zvcih2YXIgYixkLGU9YyhhLnJhbmdlKS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7Yj1hLm5leHQoKTspe2lmKGEuaXNQYXJ0aWFsbHlTZWxlY3RlZFN1YnRyZWUoKT8oYj1iLmNsb25lTm9kZSghMSksZD1hLmdldFN1YnRyZWVJdGVyYXRvcigpLGIuYXBwZW5kQ2hpbGQoayhkKSksZC5kZXRhY2goITApKTphLnJlbW92ZSgpLDEwPT1iLm5vZGVUeXBlKXRocm93IG5ldyBOKFwiSElFUkFSQ0hZX1JFUVVFU1RfRVJSXCIpO2UuYXBwZW5kQ2hpbGQoYil9cmV0dXJuIGV9ZnVuY3Rpb24gbChhLGIsYyl7dmFyIGQsZT0hKCFifHwhYi5sZW5ndGgpLGY9ISFjO2UmJihkPW5ldyBSZWdFeHAoXCJeKFwiK2Iuam9pbihcInxcIikrXCIpJFwiKSk7dmFyIGc9W107cmV0dXJuIGkobmV3IG4oYSwhMSksZnVuY3Rpb24oYSl7ZSYmIWQudGVzdChhLm5vZGVUeXBlKXx8ZiYmIWMoYSl8fGcucHVzaChhKX0pLGd9ZnVuY3Rpb24gbShhKXt2YXIgYj1cInVuZGVmaW5lZFwiPT10eXBlb2YgYS5nZXROYW1lP1wiUmFuZ2VcIjphLmdldE5hbWUoKTtyZXR1cm5cIltcIitiK1wiKFwiK0wuaW5zcGVjdE5vZGUoYS5zdGFydENvbnRhaW5lcikrXCI6XCIrYS5zdGFydE9mZnNldCtcIiwgXCIrTC5pbnNwZWN0Tm9kZShhLmVuZENvbnRhaW5lcikrXCI6XCIrYS5lbmRPZmZzZXQrXCIpXVwifWZ1bmN0aW9uIG4oYSxiKXtpZih0aGlzLnJhbmdlPWEsdGhpcy5jbG9uZVBhcnRpYWxseVNlbGVjdGVkVGV4dE5vZGVzPWIsIWEuY29sbGFwc2VkKXt0aGlzLnNjPWEuc3RhcnRDb250YWluZXIsdGhpcy5zbz1hLnN0YXJ0T2Zmc2V0LHRoaXMuZWM9YS5lbmRDb250YWluZXIsdGhpcy5lbz1hLmVuZE9mZnNldDt2YXIgYz1hLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO3RoaXMuc2M9PT10aGlzLmVjJiZMLmlzQ2hhcmFjdGVyRGF0YU5vZGUodGhpcy5zYyk/KHRoaXMuaXNTaW5nbGVDaGFyYWN0ZXJEYXRhTm9kZT0hMCx0aGlzLl9maXJzdD10aGlzLl9sYXN0PXRoaXMuX25leHQ9dGhpcy5zYyk6KHRoaXMuX2ZpcnN0PXRoaXMuX25leHQ9dGhpcy5zYyE9PWN8fEwuaXNDaGFyYWN0ZXJEYXRhTm9kZSh0aGlzLnNjKT9MLmdldENsb3Nlc3RBbmNlc3RvckluKHRoaXMuc2MsYywhMCk6dGhpcy5zYy5jaGlsZE5vZGVzW3RoaXMuc29dLHRoaXMuX2xhc3Q9dGhpcy5lYyE9PWN8fEwuaXNDaGFyYWN0ZXJEYXRhTm9kZSh0aGlzLmVjKT9MLmdldENsb3Nlc3RBbmNlc3RvckluKHRoaXMuZWMsYywhMCk6dGhpcy5lYy5jaGlsZE5vZGVzW3RoaXMuZW8tMV0pfX1mdW5jdGlvbiBvKGEpe3RoaXMuY29kZT10aGlzW2FdLHRoaXMuY29kZU5hbWU9YSx0aGlzLm1lc3NhZ2U9XCJSYW5nZUV4Y2VwdGlvbjogXCIrdGhpcy5jb2RlTmFtZX1mdW5jdGlvbiBwKGEsYixjKXt0aGlzLm5vZGVzPWwoYSxiLGMpLHRoaXMuX25leHQ9dGhpcy5ub2Rlc1swXSx0aGlzLl9wb3NpdGlvbj0wfWZ1bmN0aW9uIHEoYSl7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7Zm9yKHZhciBkLGU9Yz9iOmIucGFyZW50Tm9kZTtlOyl7aWYoZD1lLm5vZGVUeXBlLEwuYXJyYXlDb250YWlucyhhLGQpKXJldHVybiBlO2U9ZS5wYXJlbnROb2RlfXJldHVybiBudWxsfX1mdW5jdGlvbiByKGEsYil7aWYoVyhhLGIpKXRocm93IG5ldyBvKFwiSU5WQUxJRF9OT0RFX1RZUEVfRVJSXCIpfWZ1bmN0aW9uIHMoYSl7aWYoIWEuc3RhcnRDb250YWluZXIpdGhyb3cgbmV3IE4oXCJJTlZBTElEX1NUQVRFX0VSUlwiKX1mdW5jdGlvbiB0KGEsYil7aWYoIUwuYXJyYXlDb250YWlucyhiLGEubm9kZVR5cGUpKXRocm93IG5ldyBvKFwiSU5WQUxJRF9OT0RFX1RZUEVfRVJSXCIpfWZ1bmN0aW9uIHUoYSxiKXtpZigwPmJ8fGI+KEwuaXNDaGFyYWN0ZXJEYXRhTm9kZShhKT9hLmxlbmd0aDphLmNoaWxkTm9kZXMubGVuZ3RoKSl0aHJvdyBuZXcgTihcIklOREVYX1NJWkVfRVJSXCIpfWZ1bmN0aW9uIHYoYSxiKXtpZihVKGEsITApIT09VShiLCEwKSl0aHJvdyBuZXcgTihcIldST05HX0RPQ1VNRU5UX0VSUlwiKX1mdW5jdGlvbiB3KGEpe2lmKFYoYSwhMCkpdGhyb3cgbmV3IE4oXCJOT19NT0RJRklDQVRJT05fQUxMT1dFRF9FUlJcIil9ZnVuY3Rpb24geChhLGIpe2lmKCFhKXRocm93IG5ldyBOKGIpfWZ1bmN0aW9uIHkoYSl7cmV0dXJuIUwuYXJyYXlDb250YWlucyhQLGEubm9kZVR5cGUpJiYhVShhLCEwKX1mdW5jdGlvbiB6KGEsYil7cmV0dXJuIGI8PShMLmlzQ2hhcmFjdGVyRGF0YU5vZGUoYSk/YS5sZW5ndGg6YS5jaGlsZE5vZGVzLmxlbmd0aCl9ZnVuY3Rpb24gQShhKXtyZXR1cm4hIWEuc3RhcnRDb250YWluZXImJiEhYS5lbmRDb250YWluZXImJiF5KGEuc3RhcnRDb250YWluZXIpJiYheShhLmVuZENvbnRhaW5lcikmJnooYS5zdGFydENvbnRhaW5lcixhLnN0YXJ0T2Zmc2V0KSYmeihhLmVuZENvbnRhaW5lcixhLmVuZE9mZnNldCl9ZnVuY3Rpb24gQihhKXtpZihzKGEpLCFBKGEpKXRocm93IG5ldyBFcnJvcihcIlJhbmdlIGVycm9yOiBSYW5nZSBpcyBubyBsb25nZXIgdmFsaWQgYWZ0ZXIgRE9NIG11dGF0aW9uIChcIithLmluc3BlY3QoKStcIilcIil9ZnVuY3Rpb24gQygpe31mdW5jdGlvbiBEKGEpe2EuU1RBUlRfVE9fU1RBUlQ9YWIsYS5TVEFSVF9UT19FTkQ9YmIsYS5FTkRfVE9fRU5EPWNiLGEuRU5EX1RPX1NUQVJUPWRiLGEuTk9ERV9CRUZPUkU9ZWIsYS5OT0RFX0FGVEVSPWZiLGEuTk9ERV9CRUZPUkVfQU5EX0FGVEVSPWdiLGEuTk9ERV9JTlNJREU9aGJ9ZnVuY3Rpb24gRShhKXtEKGEpLEQoYS5wcm90b3R5cGUpfWZ1bmN0aW9uIEYoYSxiKXtyZXR1cm4gZnVuY3Rpb24oKXtCKHRoaXMpO3ZhciBjLGQsZT10aGlzLnN0YXJ0Q29udGFpbmVyLGc9dGhpcy5zdGFydE9mZnNldCxoPXRoaXMuY29tbW9uQW5jZXN0b3JDb250YWluZXIsaj1uZXcgbih0aGlzLCEwKTtlIT09aCYmKGM9TC5nZXRDbG9zZXN0QW5jZXN0b3JJbihlLGgsITApLGQ9ZihjKSxlPWQubm9kZSxnPWQub2Zmc2V0KSxpKGosdyksai5yZXNldCgpO3ZhciBrPWEoaik7cmV0dXJuIGouZGV0YWNoKCksYih0aGlzLGUsZyxlLGcpLGt9fWZ1bmN0aW9uIEcoYyxkLGcpe2Z1bmN0aW9uIGgoYSxiKXtyZXR1cm4gZnVuY3Rpb24oYyl7cyh0aGlzKSx0KGMsTyksdChUKGMpLFApO3ZhciBkPShhP2U6ZikoYyk7KGI/aTpsKSh0aGlzLGQubm9kZSxkLm9mZnNldCl9fWZ1bmN0aW9uIGkoYSxiLGMpe3ZhciBlPWEuZW5kQ29udGFpbmVyLGY9YS5lbmRPZmZzZXQ7KGIhPT1hLnN0YXJ0Q29udGFpbmVyfHxjIT09YS5zdGFydE9mZnNldCkmJigoVChiKSE9VChlKXx8MT09TC5jb21wYXJlUG9pbnRzKGIsYyxlLGYpKSYmKGU9YixmPWMpLGQoYSxiLGMsZSxmKSl9ZnVuY3Rpb24gbChhLGIsYyl7dmFyIGU9YS5zdGFydENvbnRhaW5lcixmPWEuc3RhcnRPZmZzZXQ7KGIhPT1hLmVuZENvbnRhaW5lcnx8YyE9PWEuZW5kT2Zmc2V0KSYmKChUKGIpIT1UKGUpfHwtMT09TC5jb21wYXJlUG9pbnRzKGIsYyxlLGYpKSYmKGU9YixmPWMpLGQoYSxlLGYsYixjKSl9ZnVuY3Rpb24gbShhLGIsYyl7KGIhPT1hLnN0YXJ0Q29udGFpbmVyfHxjIT09YS5zdGFydE9mZnNldHx8YiE9PWEuZW5kQ29udGFpbmVyfHxjIT09YS5lbmRPZmZzZXQpJiZkKGEsYixjLGIsYyl9Yy5wcm90b3R5cGU9bmV3IEMsYS51dGlsLmV4dGVuZChjLnByb3RvdHlwZSx7c2V0U3RhcnQ6ZnVuY3Rpb24oYSxiKXtzKHRoaXMpLHIoYSwhMCksdShhLGIpLGkodGhpcyxhLGIpfSxzZXRFbmQ6ZnVuY3Rpb24oYSxiKXtzKHRoaXMpLHIoYSwhMCksdShhLGIpLGwodGhpcyxhLGIpfSxzZXRTdGFydEJlZm9yZTpoKCEwLCEwKSxzZXRTdGFydEFmdGVyOmgoITEsITApLHNldEVuZEJlZm9yZTpoKCEwLCExKSxzZXRFbmRBZnRlcjpoKCExLCExKSxjb2xsYXBzZTpmdW5jdGlvbihhKXtCKHRoaXMpLGE/ZCh0aGlzLHRoaXMuc3RhcnRDb250YWluZXIsdGhpcy5zdGFydE9mZnNldCx0aGlzLnN0YXJ0Q29udGFpbmVyLHRoaXMuc3RhcnRPZmZzZXQpOmQodGhpcyx0aGlzLmVuZENvbnRhaW5lcix0aGlzLmVuZE9mZnNldCx0aGlzLmVuZENvbnRhaW5lcix0aGlzLmVuZE9mZnNldCl9LHNlbGVjdE5vZGVDb250ZW50czpmdW5jdGlvbihhKXtzKHRoaXMpLHIoYSwhMCksZCh0aGlzLGEsMCxhLEwuZ2V0Tm9kZUxlbmd0aChhKSl9LHNlbGVjdE5vZGU6ZnVuY3Rpb24oYSl7cyh0aGlzKSxyKGEsITEpLHQoYSxPKTt2YXIgYj1lKGEpLGM9ZihhKTtkKHRoaXMsYi5ub2RlLGIub2Zmc2V0LGMubm9kZSxjLm9mZnNldCl9LGV4dHJhY3RDb250ZW50czpGKGssZCksZGVsZXRlQ29udGVudHM6RihqLGQpLGNhblN1cnJvdW5kQ29udGVudHM6ZnVuY3Rpb24oKXtCKHRoaXMpLHcodGhpcy5zdGFydENvbnRhaW5lciksdyh0aGlzLmVuZENvbnRhaW5lcik7dmFyIGE9bmV3IG4odGhpcywhMCksYz1hLl9maXJzdCYmYihhLl9maXJzdCx0aGlzKXx8YS5fbGFzdCYmYihhLl9sYXN0LHRoaXMpO3JldHVybiBhLmRldGFjaCgpLCFjfSxkZXRhY2g6ZnVuY3Rpb24oKXtnKHRoaXMpfSxzcGxpdEJvdW5kYXJpZXM6ZnVuY3Rpb24oKXtCKHRoaXMpO3ZhciBhPXRoaXMuc3RhcnRDb250YWluZXIsYj10aGlzLnN0YXJ0T2Zmc2V0LGM9dGhpcy5lbmRDb250YWluZXIsZT10aGlzLmVuZE9mZnNldCxmPWE9PT1jO0wuaXNDaGFyYWN0ZXJEYXRhTm9kZShjKSYmZT4wJiZlPGMubGVuZ3RoJiZMLnNwbGl0RGF0YU5vZGUoYyxlKSxMLmlzQ2hhcmFjdGVyRGF0YU5vZGUoYSkmJmI+MCYmYjxhLmxlbmd0aCYmKGE9TC5zcGxpdERhdGFOb2RlKGEsYiksZj8oZS09YixjPWEpOmM9PWEucGFyZW50Tm9kZSYmZT49TC5nZXROb2RlSW5kZXgoYSkmJmUrKyxiPTApLGQodGhpcyxhLGIsYyxlKX0sbm9ybWFsaXplQm91bmRhcmllczpmdW5jdGlvbigpe0IodGhpcyk7dmFyIGE9dGhpcy5zdGFydENvbnRhaW5lcixiPXRoaXMuc3RhcnRPZmZzZXQsYz10aGlzLmVuZENvbnRhaW5lcixlPXRoaXMuZW5kT2Zmc2V0LGY9ZnVuY3Rpb24oYSl7dmFyIGI9YS5uZXh0U2libGluZztiJiZiLm5vZGVUeXBlPT1hLm5vZGVUeXBlJiYoYz1hLGU9YS5sZW5ndGgsYS5hcHBlbmREYXRhKGIuZGF0YSksYi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpKX0sZz1mdW5jdGlvbihkKXt2YXIgZj1kLnByZXZpb3VzU2libGluZztpZihmJiZmLm5vZGVUeXBlPT1kLm5vZGVUeXBlKXthPWQ7dmFyIGc9ZC5sZW5ndGg7aWYoYj1mLmxlbmd0aCxkLmluc2VydERhdGEoMCxmLmRhdGEpLGYucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChmKSxhPT1jKWUrPWIsYz1hO2Vsc2UgaWYoYz09ZC5wYXJlbnROb2RlKXt2YXIgaD1MLmdldE5vZGVJbmRleChkKTtlPT1oPyhjPWQsZT1nKTplPmgmJmUtLX19fSxoPSEwO2lmKEwuaXNDaGFyYWN0ZXJEYXRhTm9kZShjKSljLmxlbmd0aD09ZSYmZihjKTtlbHNle2lmKGU+MCl7dmFyIGk9Yy5jaGlsZE5vZGVzW2UtMV07aSYmTC5pc0NoYXJhY3RlckRhdGFOb2RlKGkpJiZmKGkpfWg9IXRoaXMuY29sbGFwc2VkfWlmKGgpe2lmKEwuaXNDaGFyYWN0ZXJEYXRhTm9kZShhKSkwPT1iJiZnKGEpO2Vsc2UgaWYoYjxhLmNoaWxkTm9kZXMubGVuZ3RoKXt2YXIgaj1hLmNoaWxkTm9kZXNbYl07aiYmTC5pc0NoYXJhY3RlckRhdGFOb2RlKGopJiZnKGopfX1lbHNlIGE9YyxiPWU7ZCh0aGlzLGEsYixjLGUpfSxjb2xsYXBzZVRvUG9pbnQ6ZnVuY3Rpb24oYSxiKXtzKHRoaXMpLHIoYSwhMCksdShhLGIpLG0odGhpcyxhLGIpfX0pLEUoYyl9ZnVuY3Rpb24gSChhKXthLmNvbGxhcHNlZD1hLnN0YXJ0Q29udGFpbmVyPT09YS5lbmRDb250YWluZXImJmEuc3RhcnRPZmZzZXQ9PT1hLmVuZE9mZnNldCxhLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyPWEuY29sbGFwc2VkP2Euc3RhcnRDb250YWluZXI6TC5nZXRDb21tb25BbmNlc3RvcihhLnN0YXJ0Q29udGFpbmVyLGEuZW5kQ29udGFpbmVyKX1mdW5jdGlvbiBJKGEsYixjLGUsZil7dmFyIGc9YS5zdGFydENvbnRhaW5lciE9PWJ8fGEuc3RhcnRPZmZzZXQhPT1jLGg9YS5lbmRDb250YWluZXIhPT1lfHxhLmVuZE9mZnNldCE9PWY7YS5zdGFydENvbnRhaW5lcj1iLGEuc3RhcnRPZmZzZXQ9YyxhLmVuZENvbnRhaW5lcj1lLGEuZW5kT2Zmc2V0PWYsSChhKSxkKGEsXCJib3VuZGFyeWNoYW5nZVwiLHtzdGFydE1vdmVkOmcsZW5kTW92ZWQ6aH0pfWZ1bmN0aW9uIEooYSl7cyhhKSxhLnN0YXJ0Q29udGFpbmVyPWEuc3RhcnRPZmZzZXQ9YS5lbmRDb250YWluZXI9YS5lbmRPZmZzZXQ9bnVsbCxhLmNvbGxhcHNlZD1hLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyPW51bGwsZChhLFwiZGV0YWNoXCIsbnVsbCksYS5fbGlzdGVuZXJzPW51bGx9ZnVuY3Rpb24gSyhhKXt0aGlzLnN0YXJ0Q29udGFpbmVyPWEsdGhpcy5zdGFydE9mZnNldD0wLHRoaXMuZW5kQ29udGFpbmVyPWEsdGhpcy5lbmRPZmZzZXQ9MCx0aGlzLl9saXN0ZW5lcnM9e2JvdW5kYXJ5Y2hhbmdlOltdLGRldGFjaDpbXX0sSCh0aGlzKX1hLnJlcXVpcmVNb2R1bGVzKFtcIkRvbVV0aWxcIl0pO3ZhciBMPWEuZG9tLE09TC5Eb21Qb3NpdGlvbixOPWEuRE9NRXhjZXB0aW9uO24ucHJvdG90eXBlPXtfY3VycmVudDpudWxsLF9uZXh0Om51bGwsX2ZpcnN0Om51bGwsX2xhc3Q6bnVsbCxpc1NpbmdsZUNoYXJhY3RlckRhdGFOb2RlOiExLHJlc2V0OmZ1bmN0aW9uKCl7dGhpcy5fY3VycmVudD1udWxsLHRoaXMuX25leHQ9dGhpcy5fZmlyc3R9LGhhc05leHQ6ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMuX25leHR9LG5leHQ6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9jdXJyZW50PXRoaXMuX25leHQ7cmV0dXJuIGEmJih0aGlzLl9uZXh0PWEhPT10aGlzLl9sYXN0P2EubmV4dFNpYmxpbmc6bnVsbCxMLmlzQ2hhcmFjdGVyRGF0YU5vZGUoYSkmJnRoaXMuY2xvbmVQYXJ0aWFsbHlTZWxlY3RlZFRleHROb2RlcyYmKGE9PT10aGlzLmVjJiYoYT1hLmNsb25lTm9kZSghMCkpLmRlbGV0ZURhdGEodGhpcy5lbyxhLmxlbmd0aC10aGlzLmVvKSx0aGlzLl9jdXJyZW50PT09dGhpcy5zYyYmKGE9YS5jbG9uZU5vZGUoITApKS5kZWxldGVEYXRhKDAsdGhpcy5zbykpKSxhfSxyZW1vdmU6ZnVuY3Rpb24oKXt2YXIgYSxiLGM9dGhpcy5fY3VycmVudDshTC5pc0NoYXJhY3RlckRhdGFOb2RlKGMpfHxjIT09dGhpcy5zYyYmYyE9PXRoaXMuZWM/Yy5wYXJlbnROb2RlJiZjLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYyk6KGE9Yz09PXRoaXMuc2M/dGhpcy5zbzowLGI9Yz09PXRoaXMuZWM/dGhpcy5lbzpjLmxlbmd0aCxhIT1iJiZjLmRlbGV0ZURhdGEoYSxiLWEpKX0saXNQYXJ0aWFsbHlTZWxlY3RlZFN1YnRyZWU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9jdXJyZW50O3JldHVybiBiKGEsdGhpcy5yYW5nZSl9LGdldFN1YnRyZWVJdGVyYXRvcjpmdW5jdGlvbigpe3ZhciBhO2lmKHRoaXMuaXNTaW5nbGVDaGFyYWN0ZXJEYXRhTm9kZSlhPXRoaXMucmFuZ2UuY2xvbmVSYW5nZSgpLGEuY29sbGFwc2UoKTtlbHNle2E9bmV3IEsoYyh0aGlzLnJhbmdlKSk7dmFyIGI9dGhpcy5fY3VycmVudCxkPWIsZT0wLGY9YixnPUwuZ2V0Tm9kZUxlbmd0aChiKTtMLmlzQW5jZXN0b3JPZihiLHRoaXMuc2MsITApJiYoZD10aGlzLnNjLGU9dGhpcy5zbyksTC5pc0FuY2VzdG9yT2YoYix0aGlzLmVjLCEwKSYmKGY9dGhpcy5lYyxnPXRoaXMuZW8pLEkoYSxkLGUsZixnKX1yZXR1cm4gbmV3IG4oYSx0aGlzLmNsb25lUGFydGlhbGx5U2VsZWN0ZWRUZXh0Tm9kZXMpfSxkZXRhY2g6ZnVuY3Rpb24oYSl7YSYmdGhpcy5yYW5nZS5kZXRhY2goKSx0aGlzLnJhbmdlPXRoaXMuX2N1cnJlbnQ9dGhpcy5fbmV4dD10aGlzLl9maXJzdD10aGlzLl9sYXN0PXRoaXMuc2M9dGhpcy5zbz10aGlzLmVjPXRoaXMuZW89bnVsbH19LG8ucHJvdG90eXBlPXtCQURfQk9VTkRBUllQT0lOVFNfRVJSOjEsSU5WQUxJRF9OT0RFX1RZUEVfRVJSOjJ9LG8ucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWVzc2FnZX0scC5wcm90b3R5cGU9e19jdXJyZW50Om51bGwsaGFzTmV4dDpmdW5jdGlvbigpe3JldHVybiEhdGhpcy5fbmV4dH0sbmV4dDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9jdXJyZW50PXRoaXMuX25leHQsdGhpcy5fbmV4dD10aGlzLm5vZGVzWysrdGhpcy5fcG9zaXRpb25dLHRoaXMuX2N1cnJlbnR9LGRldGFjaDpmdW5jdGlvbigpe3RoaXMuX2N1cnJlbnQ9dGhpcy5fbmV4dD10aGlzLm5vZGVzPW51bGx9fTt2YXIgTz1bMSwzLDQsNSw3LDgsMTBdLFA9WzIsOSwxMV0sUT1bNSw2LDEwLDEyXSxSPVsxLDMsNCw1LDcsOCwxMCwxMV0sUz1bMSwzLDQsNSw3LDhdLFQ9TC5nZXRSb290Q29udGFpbmVyLFU9cShbOSwxMV0pLFY9cShRKSxXPXEoWzYsMTAsMTJdKSxYPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSxZPSExO3RyeXtYLmlubmVySFRNTD1cIjxiPng8L2I+XCIsWT0zPT1YLmZpcnN0Q2hpbGQubm9kZVR5cGV9Y2F0Y2goWil7fWEuZmVhdHVyZXMuaHRtbFBhcnNpbmdDb25mb3Jtcz1ZO3ZhciAkPVk/ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5zdGFydENvbnRhaW5lcixjPUwuZ2V0RG9jdW1lbnQoYik7aWYoIWIpdGhyb3cgbmV3IE4oXCJJTlZBTElEX1NUQVRFX0VSUlwiKTt2YXIgZD1udWxsO3JldHVybiAxPT1iLm5vZGVUeXBlP2Q9YjpMLmlzQ2hhcmFjdGVyRGF0YU5vZGUoYikmJihkPUwucGFyZW50RWxlbWVudChiKSksZD1udWxsPT09ZHx8XCJIVE1MXCI9PWQubm9kZU5hbWUmJkwuaXNIdG1sTmFtZXNwYWNlKEwuZ2V0RG9jdW1lbnQoZCkuZG9jdW1lbnRFbGVtZW50KSYmTC5pc0h0bWxOYW1lc3BhY2UoZCk/Yy5jcmVhdGVFbGVtZW50KFwiYm9keVwiKTpkLmNsb25lTm9kZSghMSksZC5pbm5lckhUTUw9YSxMLmZyYWdtZW50RnJvbU5vZGVDaGlsZHJlbihkKX06ZnVuY3Rpb24oYSl7cyh0aGlzKTt2YXIgYj1jKHRoaXMpLGQ9Yi5jcmVhdGVFbGVtZW50KFwiYm9keVwiKTtyZXR1cm4gZC5pbm5lckhUTUw9YSxMLmZyYWdtZW50RnJvbU5vZGVDaGlsZHJlbihkKX0sXz1bXCJzdGFydENvbnRhaW5lclwiLFwic3RhcnRPZmZzZXRcIixcImVuZENvbnRhaW5lclwiLFwiZW5kT2Zmc2V0XCIsXCJjb2xsYXBzZWRcIixcImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyXCJdLGFiPTAsYmI9MSxjYj0yLGRiPTMsZWI9MCxmYj0xLGdiPTIsaGI9MztDLnByb3RvdHlwZT17YXR0YWNoTGlzdGVuZXI6ZnVuY3Rpb24oYSxiKXt0aGlzLl9saXN0ZW5lcnNbYV0ucHVzaChiKX0sY29tcGFyZUJvdW5kYXJ5UG9pbnRzOmZ1bmN0aW9uKGEsYil7Qih0aGlzKSx2KHRoaXMuc3RhcnRDb250YWluZXIsYi5zdGFydENvbnRhaW5lcik7dmFyIGMsZCxlLGYsZz1hPT1kYnx8YT09YWI/XCJzdGFydFwiOlwiZW5kXCIsaD1hPT1iYnx8YT09YWI/XCJzdGFydFwiOlwiZW5kXCI7cmV0dXJuIGM9dGhpc1tnK1wiQ29udGFpbmVyXCJdLGQ9dGhpc1tnK1wiT2Zmc2V0XCJdLGU9YltoK1wiQ29udGFpbmVyXCJdLGY9YltoK1wiT2Zmc2V0XCJdLEwuY29tcGFyZVBvaW50cyhjLGQsZSxmKX0saW5zZXJ0Tm9kZTpmdW5jdGlvbihhKXtpZihCKHRoaXMpLHQoYSxSKSx3KHRoaXMuc3RhcnRDb250YWluZXIpLEwuaXNBbmNlc3Rvck9mKGEsdGhpcy5zdGFydENvbnRhaW5lciwhMCkpdGhyb3cgbmV3IE4oXCJISUVSQVJDSFlfUkVRVUVTVF9FUlJcIik7dmFyIGI9ZyhhLHRoaXMuc3RhcnRDb250YWluZXIsdGhpcy5zdGFydE9mZnNldCk7dGhpcy5zZXRTdGFydEJlZm9yZShiKX0sY2xvbmVDb250ZW50czpmdW5jdGlvbigpe0IodGhpcyk7dmFyIGEsYjtpZih0aGlzLmNvbGxhcHNlZClyZXR1cm4gYyh0aGlzKS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7aWYodGhpcy5zdGFydENvbnRhaW5lcj09PXRoaXMuZW5kQ29udGFpbmVyJiZMLmlzQ2hhcmFjdGVyRGF0YU5vZGUodGhpcy5zdGFydENvbnRhaW5lcikpcmV0dXJuIGE9dGhpcy5zdGFydENvbnRhaW5lci5jbG9uZU5vZGUoITApLGEuZGF0YT1hLmRhdGEuc2xpY2UodGhpcy5zdGFydE9mZnNldCx0aGlzLmVuZE9mZnNldCksYj1jKHRoaXMpLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxiLmFwcGVuZENoaWxkKGEpLGI7dmFyIGQ9bmV3IG4odGhpcywhMCk7cmV0dXJuIGE9aChkKSxkLmRldGFjaCgpLGF9LGNhblN1cnJvdW5kQ29udGVudHM6ZnVuY3Rpb24oKXtCKHRoaXMpLHcodGhpcy5zdGFydENvbnRhaW5lciksdyh0aGlzLmVuZENvbnRhaW5lcik7dmFyIGE9bmV3IG4odGhpcywhMCksYz1hLl9maXJzdCYmYihhLl9maXJzdCx0aGlzKXx8YS5fbGFzdCYmYihhLl9sYXN0LHRoaXMpO3JldHVybiBhLmRldGFjaCgpLCFjfSxzdXJyb3VuZENvbnRlbnRzOmZ1bmN0aW9uKGEpe2lmKHQoYSxTKSwhdGhpcy5jYW5TdXJyb3VuZENvbnRlbnRzKCkpdGhyb3cgbmV3IG8oXCJCQURfQk9VTkRBUllQT0lOVFNfRVJSXCIpO3ZhciBiPXRoaXMuZXh0cmFjdENvbnRlbnRzKCk7aWYoYS5oYXNDaGlsZE5vZGVzKCkpZm9yKDthLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmxhc3RDaGlsZCk7ZyhhLHRoaXMuc3RhcnRDb250YWluZXIsdGhpcy5zdGFydE9mZnNldCksYS5hcHBlbmRDaGlsZChiKSx0aGlzLnNlbGVjdE5vZGUoYSl9LGNsb25lUmFuZ2U6ZnVuY3Rpb24oKXtCKHRoaXMpO2Zvcih2YXIgYSxiPW5ldyBLKGModGhpcykpLGQ9Xy5sZW5ndGg7ZC0tOylhPV9bZF0sYlthXT10aGlzW2FdO3JldHVybiBifSx0b1N0cmluZzpmdW5jdGlvbigpe0IodGhpcyk7dmFyIGE9dGhpcy5zdGFydENvbnRhaW5lcjtpZihhPT09dGhpcy5lbmRDb250YWluZXImJkwuaXNDaGFyYWN0ZXJEYXRhTm9kZShhKSlyZXR1cm4gMz09YS5ub2RlVHlwZXx8ND09YS5ub2RlVHlwZT9hLmRhdGEuc2xpY2UodGhpcy5zdGFydE9mZnNldCx0aGlzLmVuZE9mZnNldCk6XCJcIjt2YXIgYj1bXSxjPW5ldyBuKHRoaXMsITApO3JldHVybiBpKGMsZnVuY3Rpb24oYSl7KDM9PWEubm9kZVR5cGV8fDQ9PWEubm9kZVR5cGUpJiZiLnB1c2goYS5kYXRhKX0pLGMuZGV0YWNoKCksYi5qb2luKFwiXCIpfSxjb21wYXJlTm9kZTpmdW5jdGlvbihhKXtCKHRoaXMpO3ZhciBiPWEucGFyZW50Tm9kZSxjPUwuZ2V0Tm9kZUluZGV4KGEpO2lmKCFiKXRocm93IG5ldyBOKFwiTk9UX0ZPVU5EX0VSUlwiKTt2YXIgZD10aGlzLmNvbXBhcmVQb2ludChiLGMpLGU9dGhpcy5jb21wYXJlUG9pbnQoYixjKzEpO3JldHVybiAwPmQ/ZT4wP2diOmViOmU+MD9mYjpoYn0sY29tcGFyZVBvaW50OmZ1bmN0aW9uKGEsYil7cmV0dXJuIEIodGhpcykseChhLFwiSElFUkFSQ0hZX1JFUVVFU1RfRVJSXCIpLHYoYSx0aGlzLnN0YXJ0Q29udGFpbmVyKSxMLmNvbXBhcmVQb2ludHMoYSxiLHRoaXMuc3RhcnRDb250YWluZXIsdGhpcy5zdGFydE9mZnNldCk8MD8tMTpMLmNvbXBhcmVQb2ludHMoYSxiLHRoaXMuZW5kQ29udGFpbmVyLHRoaXMuZW5kT2Zmc2V0KT4wPzE6MH0sY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50OiQsdG9IdG1sOmZ1bmN0aW9uKCl7Qih0aGlzKTt2YXIgYT1jKHRoaXMpLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7cmV0dXJuIGEuYXBwZW5kQ2hpbGQodGhpcy5jbG9uZUNvbnRlbnRzKCkpLGEuaW5uZXJIVE1MfSxpbnRlcnNlY3RzTm9kZTpmdW5jdGlvbihhLGIpe2lmKEIodGhpcykseChhLFwiTk9UX0ZPVU5EX0VSUlwiKSxMLmdldERvY3VtZW50KGEpIT09Yyh0aGlzKSlyZXR1cm4hMTt2YXIgZD1hLnBhcmVudE5vZGUsZT1MLmdldE5vZGVJbmRleChhKTt4KGQsXCJOT1RfRk9VTkRfRVJSXCIpO3ZhciBmPUwuY29tcGFyZVBvaW50cyhkLGUsdGhpcy5lbmRDb250YWluZXIsdGhpcy5lbmRPZmZzZXQpLGc9TC5jb21wYXJlUG9pbnRzKGQsZSsxLHRoaXMuc3RhcnRDb250YWluZXIsdGhpcy5zdGFydE9mZnNldCk7cmV0dXJuIGI/MD49ZiYmZz49MDowPmYmJmc+MH0saXNQb2ludEluUmFuZ2U6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gQih0aGlzKSx4KGEsXCJISUVSQVJDSFlfUkVRVUVTVF9FUlJcIiksdihhLHRoaXMuc3RhcnRDb250YWluZXIpLEwuY29tcGFyZVBvaW50cyhhLGIsdGhpcy5zdGFydENvbnRhaW5lcix0aGlzLnN0YXJ0T2Zmc2V0KT49MCYmTC5jb21wYXJlUG9pbnRzKGEsYix0aGlzLmVuZENvbnRhaW5lcix0aGlzLmVuZE9mZnNldCk8PTB9LGludGVyc2VjdHNSYW5nZTpmdW5jdGlvbihhLGIpe2lmKEIodGhpcyksYyhhKSE9Yyh0aGlzKSl0aHJvdyBuZXcgTihcIldST05HX0RPQ1VNRU5UX0VSUlwiKTt2YXIgZD1MLmNvbXBhcmVQb2ludHModGhpcy5zdGFydENvbnRhaW5lcix0aGlzLnN0YXJ0T2Zmc2V0LGEuZW5kQ29udGFpbmVyLGEuZW5kT2Zmc2V0KSxlPUwuY29tcGFyZVBvaW50cyh0aGlzLmVuZENvbnRhaW5lcix0aGlzLmVuZE9mZnNldCxhLnN0YXJ0Q29udGFpbmVyLGEuc3RhcnRPZmZzZXQpO3JldHVybiBiPzA+PWQmJmU+PTA6MD5kJiZlPjB9LGludGVyc2VjdGlvbjpmdW5jdGlvbihhKXtpZih0aGlzLmludGVyc2VjdHNSYW5nZShhKSl7dmFyIGI9TC5jb21wYXJlUG9pbnRzKHRoaXMuc3RhcnRDb250YWluZXIsdGhpcy5zdGFydE9mZnNldCxhLnN0YXJ0Q29udGFpbmVyLGEuc3RhcnRPZmZzZXQpLGM9TC5jb21wYXJlUG9pbnRzKHRoaXMuZW5kQ29udGFpbmVyLHRoaXMuZW5kT2Zmc2V0LGEuZW5kQ29udGFpbmVyLGEuZW5kT2Zmc2V0KSxkPXRoaXMuY2xvbmVSYW5nZSgpO3JldHVybi0xPT1iJiZkLnNldFN0YXJ0KGEuc3RhcnRDb250YWluZXIsYS5zdGFydE9mZnNldCksMT09YyYmZC5zZXRFbmQoYS5lbmRDb250YWluZXIsYS5lbmRPZmZzZXQpLGR9cmV0dXJuIG51bGx9LHVuaW9uOmZ1bmN0aW9uKGEpe2lmKHRoaXMuaW50ZXJzZWN0c1JhbmdlKGEsITApKXt2YXIgYj10aGlzLmNsb25lUmFuZ2UoKTtyZXR1cm4tMT09TC5jb21wYXJlUG9pbnRzKGEuc3RhcnRDb250YWluZXIsYS5zdGFydE9mZnNldCx0aGlzLnN0YXJ0Q29udGFpbmVyLHRoaXMuc3RhcnRPZmZzZXQpJiZiLnNldFN0YXJ0KGEuc3RhcnRDb250YWluZXIsYS5zdGFydE9mZnNldCksMT09TC5jb21wYXJlUG9pbnRzKGEuZW5kQ29udGFpbmVyLGEuZW5kT2Zmc2V0LHRoaXMuZW5kQ29udGFpbmVyLHRoaXMuZW5kT2Zmc2V0KSYmYi5zZXRFbmQoYS5lbmRDb250YWluZXIsYS5lbmRPZmZzZXQpLGJ9dGhyb3cgbmV3IG8oXCJSYW5nZXMgZG8gbm90IGludGVyc2VjdFwiKX0sY29udGFpbnNOb2RlOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGI/dGhpcy5pbnRlcnNlY3RzTm9kZShhLCExKTp0aGlzLmNvbXBhcmVOb2RlKGEpPT1oYn0sY29udGFpbnNOb2RlQ29udGVudHM6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuY29tcGFyZVBvaW50KGEsMCk+PTAmJnRoaXMuY29tcGFyZVBvaW50KGEsTC5nZXROb2RlTGVuZ3RoKGEpKTw9MH0sY29udGFpbnNSYW5nZTpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5pbnRlcnNlY3Rpb24oYSkuZXF1YWxzKGEpfSxjb250YWluc05vZGVUZXh0OmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuY2xvbmVSYW5nZSgpO2Iuc2VsZWN0Tm9kZShhKTt2YXIgYz1iLmdldE5vZGVzKFszXSk7aWYoYy5sZW5ndGg+MCl7Yi5zZXRTdGFydChjWzBdLDApO3ZhciBkPWMucG9wKCk7Yi5zZXRFbmQoZCxkLmxlbmd0aCk7dmFyIGU9dGhpcy5jb250YWluc1JhbmdlKGIpO3JldHVybiBiLmRldGFjaCgpLGV9cmV0dXJuIHRoaXMuY29udGFpbnNOb2RlQ29udGVudHMoYSl9LGNyZWF0ZU5vZGVJdGVyYXRvcjpmdW5jdGlvbihhLGIpe3JldHVybiBCKHRoaXMpLG5ldyBwKHRoaXMsYSxiKX0sZ2V0Tm9kZXM6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gQih0aGlzKSxsKHRoaXMsYSxiKX0sZ2V0RG9jdW1lbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gYyh0aGlzKX0sY29sbGFwc2VCZWZvcmU6ZnVuY3Rpb24oYSl7cyh0aGlzKSx0aGlzLnNldEVuZEJlZm9yZShhKSx0aGlzLmNvbGxhcHNlKCExKX0sY29sbGFwc2VBZnRlcjpmdW5jdGlvbihhKXtzKHRoaXMpLHRoaXMuc2V0U3RhcnRBZnRlcihhKSx0aGlzLmNvbGxhcHNlKCEwKX0sZ2V0TmFtZTpmdW5jdGlvbigpe3JldHVyblwiRG9tUmFuZ2VcIn0sZXF1YWxzOmZ1bmN0aW9uKGEpe3JldHVybiBLLnJhbmdlc0VxdWFsKHRoaXMsYSl9LGlzVmFsaWQ6ZnVuY3Rpb24oKXtyZXR1cm4gQSh0aGlzKX0saW5zcGVjdDpmdW5jdGlvbigpe3JldHVybiBtKHRoaXMpfX0sRyhLLEksSiksYS5yYW5nZVByb3RvdHlwZT1DLnByb3RvdHlwZSxLLnJhbmdlUHJvcGVydGllcz1fLEsuUmFuZ2VJdGVyYXRvcj1uLEsuY29weUNvbXBhcmlzb25Db25zdGFudHM9RSxLLmNyZWF0ZVByb3RvdHlwZVJhbmdlPUcsSy5pbnNwZWN0PW0sSy5nZXRSYW5nZURvY3VtZW50PWMsSy5yYW5nZXNFcXVhbD1mdW5jdGlvbihhLGIpe3JldHVybiBhLnN0YXJ0Q29udGFpbmVyPT09Yi5zdGFydENvbnRhaW5lciYmYS5zdGFydE9mZnNldD09PWIuc3RhcnRPZmZzZXQmJmEuZW5kQ29udGFpbmVyPT09Yi5lbmRDb250YWluZXImJmEuZW5kT2Zmc2V0PT09Yi5lbmRPZmZzZXR9LGEuRG9tUmFuZ2U9SyxhLlJhbmdlRXhjZXB0aW9uPW99KSxyYW5neS5jcmVhdGVNb2R1bGUoXCJXcmFwcGVkUmFuZ2VcIixmdW5jdGlvbihhKXtmdW5jdGlvbiBiKGEpe3ZhciBiPWEucGFyZW50RWxlbWVudCgpLGM9YS5kdXBsaWNhdGUoKTtjLmNvbGxhcHNlKCEwKTt2YXIgZD1jLnBhcmVudEVsZW1lbnQoKTtjPWEuZHVwbGljYXRlKCksYy5jb2xsYXBzZSghMSk7dmFyIGU9Yy5wYXJlbnRFbGVtZW50KCksZj1kPT1lP2Q6Zy5nZXRDb21tb25BbmNlc3RvcihkLGUpO3JldHVybiBmPT1iP2Y6Zy5nZXRDb21tb25BbmNlc3RvcihiLGYpfWZ1bmN0aW9uIGMoYSl7cmV0dXJuIDA9PWEuY29tcGFyZUVuZFBvaW50cyhcIlN0YXJ0VG9FbmRcIixhKX1mdW5jdGlvbiBkKGEsYixjLGQpe3ZhciBlPWEuZHVwbGljYXRlKCk7ZS5jb2xsYXBzZShjKTt2YXIgZj1lLnBhcmVudEVsZW1lbnQoKTtpZihnLmlzQW5jZXN0b3JPZihiLGYsITApfHwoZj1iKSwhZi5jYW5IYXZlSFRNTClyZXR1cm4gbmV3IGgoZi5wYXJlbnROb2RlLGcuZ2V0Tm9kZUluZGV4KGYpKTt2YXIgaSxqLGssbCxtLG49Zy5nZXREb2N1bWVudChmKS5jcmVhdGVFbGVtZW50KFwic3BhblwiKSxvPWM/XCJTdGFydFRvU3RhcnRcIjpcIlN0YXJ0VG9FbmRcIjtkbyBmLmluc2VydEJlZm9yZShuLG4ucHJldmlvdXNTaWJsaW5nKSxlLm1vdmVUb0VsZW1lbnRUZXh0KG4pO3doaWxlKChpPWUuY29tcGFyZUVuZFBvaW50cyhvLGEpKT4wJiZuLnByZXZpb3VzU2libGluZyk7aWYobT1uLm5leHRTaWJsaW5nLC0xPT1pJiZtJiZnLmlzQ2hhcmFjdGVyRGF0YU5vZGUobSkpe2Uuc2V0RW5kUG9pbnQoYz9cIkVuZFRvU3RhcnRcIjpcIkVuZFRvRW5kXCIsYSk7dmFyIHA7aWYoL1tcXHJcXG5dLy50ZXN0KG0uZGF0YSkpe3ZhciBxPWUuZHVwbGljYXRlKCkscj1xLnRleHQucmVwbGFjZSgvXFxyXFxuL2csXCJcXHJcIikubGVuZ3RoO2ZvcihwPXEubW92ZVN0YXJ0KFwiY2hhcmFjdGVyXCIscik7LTE9PShpPXEuY29tcGFyZUVuZFBvaW50cyhcIlN0YXJ0VG9FbmRcIixxKSk7KXArKyxxLm1vdmVTdGFydChcImNoYXJhY3RlclwiLDEpfWVsc2UgcD1lLnRleHQubGVuZ3RoO2w9bmV3IGgobSxwKX1lbHNlIGo9KGR8fCFjKSYmbi5wcmV2aW91c1NpYmxpbmcsaz0oZHx8YykmJm4ubmV4dFNpYmxpbmcsbD1rJiZnLmlzQ2hhcmFjdGVyRGF0YU5vZGUoayk/bmV3IGgoaywwKTpqJiZnLmlzQ2hhcmFjdGVyRGF0YU5vZGUoaik/bmV3IGgoaixqLmxlbmd0aCk6bmV3IGgoZixnLmdldE5vZGVJbmRleChuKSk7cmV0dXJuIG4ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChuKSxsfWZ1bmN0aW9uIGUoYSxiKXt2YXIgYyxkLGUsZixoPWEub2Zmc2V0LGk9Zy5nZXREb2N1bWVudChhLm5vZGUpLGo9aS5ib2R5LmNyZWF0ZVRleHRSYW5nZSgpLGs9Zy5pc0NoYXJhY3RlckRhdGFOb2RlKGEubm9kZSk7cmV0dXJuIGs/KGM9YS5ub2RlLGQ9Yy5wYXJlbnROb2RlKTooZj1hLm5vZGUuY2hpbGROb2RlcyxjPWg8Zi5sZW5ndGg/ZltoXTpudWxsLGQ9YS5ub2RlKSxlPWkuY3JlYXRlRWxlbWVudChcInNwYW5cIiksZS5pbm5lckhUTUw9XCImI2ZlZmY7XCIsYz9kLmluc2VydEJlZm9yZShlLGMpOmQuYXBwZW5kQ2hpbGQoZSksai5tb3ZlVG9FbGVtZW50VGV4dChlKSxqLmNvbGxhcHNlKCFiKSxkLnJlbW92ZUNoaWxkKGUpLGsmJmpbYj9cIm1vdmVTdGFydFwiOlwibW92ZUVuZFwiXShcImNoYXJhY3RlclwiLGgpLGp9YS5yZXF1aXJlTW9kdWxlcyhbXCJEb21VdGlsXCIsXCJEb21SYW5nZVwiXSk7dmFyIGYsZz1hLmRvbSxoPWcuRG9tUG9zaXRpb24saT1hLkRvbVJhbmdlO2lmKCFhLmZlYXR1cmVzLmltcGxlbWVudHNEb21SYW5nZXx8YS5mZWF0dXJlcy5pbXBsZW1lbnRzVGV4dFJhbmdlJiZhLmNvbmZpZy5wcmVmZXJUZXh0UmFuZ2Upe2lmKGEuZmVhdHVyZXMuaW1wbGVtZW50c1RleHRSYW5nZSl7Zj1mdW5jdGlvbihhKXt0aGlzLnRleHRSYW5nZT1hLHRoaXMucmVmcmVzaCgpfSxmLnByb3RvdHlwZT1uZXcgaShkb2N1bWVudCksZi5wcm90b3R5cGUucmVmcmVzaD1mdW5jdGlvbigpe3ZhciBhLGUsZj1iKHRoaXMudGV4dFJhbmdlKTtjKHRoaXMudGV4dFJhbmdlKT9lPWE9ZCh0aGlzLnRleHRSYW5nZSxmLCEwLCEwKTooYT1kKHRoaXMudGV4dFJhbmdlLGYsITAsITEpLGU9ZCh0aGlzLnRleHRSYW5nZSxmLCExLCExKSksdGhpcy5zZXRTdGFydChhLm5vZGUsYS5vZmZzZXQpLHRoaXMuc2V0RW5kKGUubm9kZSxlLm9mZnNldCl9LGkuY29weUNvbXBhcmlzb25Db25zdGFudHMoZik7dmFyIGo9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30oKTtcInVuZGVmaW5lZFwiPT10eXBlb2Ygai5SYW5nZSYmKGouUmFuZ2U9ZiksYS5jcmVhdGVOYXRpdmVSYW5nZT1mdW5jdGlvbihhKXtyZXR1cm4gYT1hfHxkb2N1bWVudCxhLmJvZHkuY3JlYXRlVGV4dFJhbmdlKCl9fX1lbHNlIWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYihhKXtmb3IodmFyIGIsYz1rLmxlbmd0aDtjLS07KWI9a1tjXSxhW2JdPWEubmF0aXZlUmFuZ2VbYl19ZnVuY3Rpb24gYyhhLGIsYyxkLGUpe3ZhciBmPWEuc3RhcnRDb250YWluZXIhPT1ifHxhLnN0YXJ0T2Zmc2V0IT1jLGc9YS5lbmRDb250YWluZXIhPT1kfHxhLmVuZE9mZnNldCE9ZTsoZnx8ZykmJihhLnNldEVuZChkLGUpLGEuc2V0U3RhcnQoYixjKSl9ZnVuY3Rpb24gZChhKXthLm5hdGl2ZVJhbmdlLmRldGFjaCgpLGEuZGV0YWNoZWQ9ITA7Zm9yKHZhciBiLGM9ay5sZW5ndGg7Yy0tOyliPWtbY10sYVtiXT1udWxsfXZhciBlLGgsaixrPWkucmFuZ2VQcm9wZXJ0aWVzO2Y9ZnVuY3Rpb24oYSl7aWYoIWEpdGhyb3cgbmV3IEVycm9yKFwiUmFuZ2UgbXVzdCBiZSBzcGVjaWZpZWRcIik7dGhpcy5uYXRpdmVSYW5nZT1hLGIodGhpcyl9LGkuY3JlYXRlUHJvdG90eXBlUmFuZ2UoZixjLGQpLGU9Zi5wcm90b3R5cGUsZS5zZWxlY3ROb2RlPWZ1bmN0aW9uKGEpe3RoaXMubmF0aXZlUmFuZ2Uuc2VsZWN0Tm9kZShhKSxiKHRoaXMpfSxlLmRlbGV0ZUNvbnRlbnRzPWZ1bmN0aW9uKCl7dGhpcy5uYXRpdmVSYW5nZS5kZWxldGVDb250ZW50cygpLGIodGhpcyl9LGUuZXh0cmFjdENvbnRlbnRzPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVSYW5nZS5leHRyYWN0Q29udGVudHMoKTtyZXR1cm4gYih0aGlzKSxhfSxlLmNsb25lQ29udGVudHM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5uYXRpdmVSYW5nZS5jbG9uZUNvbnRlbnRzKCl9LGUuc3Vycm91bmRDb250ZW50cz1mdW5jdGlvbihhKXt0aGlzLm5hdGl2ZVJhbmdlLnN1cnJvdW5kQ29udGVudHMoYSksYih0aGlzKX0sZS5jb2xsYXBzZT1mdW5jdGlvbihhKXt0aGlzLm5hdGl2ZVJhbmdlLmNvbGxhcHNlKGEpLGIodGhpcyl9LGUuY2xvbmVSYW5nZT1mdW5jdGlvbigpe3JldHVybiBuZXcgZih0aGlzLm5hdGl2ZVJhbmdlLmNsb25lUmFuZ2UoKSl9LGUucmVmcmVzaD1mdW5jdGlvbigpe2IodGhpcyl9LGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5uYXRpdmVSYW5nZS50b1N0cmluZygpfTt2YXIgbD1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcInRlc3RcIik7Zy5nZXRCb2R5KGRvY3VtZW50KS5hcHBlbmRDaGlsZChsKTt2YXIgbT1kb2N1bWVudC5jcmVhdGVSYW5nZSgpO20uc2V0U3RhcnQobCwwKSxtLnNldEVuZChsLDApO3RyeXttLnNldFN0YXJ0KGwsMSksaD0hMCxlLnNldFN0YXJ0PWZ1bmN0aW9uKGEsYyl7dGhpcy5uYXRpdmVSYW5nZS5zZXRTdGFydChhLGMpLGIodGhpcyl9LGUuc2V0RW5kPWZ1bmN0aW9uKGEsYyl7dGhpcy5uYXRpdmVSYW5nZS5zZXRFbmQoYSxjKSxiKHRoaXMpfSxqPWZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihjKXt0aGlzLm5hdGl2ZVJhbmdlW2FdKGMpLGIodGhpcyl9fX1jYXRjaChuKXtoPSExLGUuc2V0U3RhcnQ9ZnVuY3Rpb24oYSxjKXt0cnl7dGhpcy5uYXRpdmVSYW5nZS5zZXRTdGFydChhLGMpfWNhdGNoKGQpe3RoaXMubmF0aXZlUmFuZ2Uuc2V0RW5kKGEsYyksdGhpcy5uYXRpdmVSYW5nZS5zZXRTdGFydChhLGMpfWIodGhpcyl9LGUuc2V0RW5kPWZ1bmN0aW9uKGEsYyl7dHJ5e3RoaXMubmF0aXZlUmFuZ2Uuc2V0RW5kKGEsYyl9Y2F0Y2goZCl7dGhpcy5uYXRpdmVSYW5nZS5zZXRTdGFydChhLGMpLHRoaXMubmF0aXZlUmFuZ2Uuc2V0RW5kKGEsYyl9Yih0aGlzKX0saj1mdW5jdGlvbihhLGMpe3JldHVybiBmdW5jdGlvbihkKXt0cnl7dGhpcy5uYXRpdmVSYW5nZVthXShkKX1jYXRjaChlKXt0aGlzLm5hdGl2ZVJhbmdlW2NdKGQpLHRoaXMubmF0aXZlUmFuZ2VbYV0oZCl9Yih0aGlzKX19fWUuc2V0U3RhcnRCZWZvcmU9aihcInNldFN0YXJ0QmVmb3JlXCIsXCJzZXRFbmRCZWZvcmVcIiksZS5zZXRTdGFydEFmdGVyPWooXCJzZXRTdGFydEFmdGVyXCIsXCJzZXRFbmRBZnRlclwiKSxlLnNldEVuZEJlZm9yZT1qKFwic2V0RW5kQmVmb3JlXCIsXCJzZXRTdGFydEJlZm9yZVwiKSxlLnNldEVuZEFmdGVyPWooXCJzZXRFbmRBZnRlclwiLFwic2V0U3RhcnRBZnRlclwiKSxtLnNlbGVjdE5vZGVDb250ZW50cyhsKSxlLnNlbGVjdE5vZGVDb250ZW50cz1tLnN0YXJ0Q29udGFpbmVyPT1sJiZtLmVuZENvbnRhaW5lcj09bCYmMD09bS5zdGFydE9mZnNldCYmbS5lbmRPZmZzZXQ9PWwubGVuZ3RoP2Z1bmN0aW9uKGEpe3RoaXMubmF0aXZlUmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKGEpLGIodGhpcyl9OmZ1bmN0aW9uKGEpe3RoaXMuc2V0U3RhcnQoYSwwKSx0aGlzLnNldEVuZChhLGkuZ2V0RW5kT2Zmc2V0KGEpKX0sbS5zZWxlY3ROb2RlQ29udGVudHMobCksbS5zZXRFbmQobCwzKTt2YXIgbz1kb2N1bWVudC5jcmVhdGVSYW5nZSgpO28uc2VsZWN0Tm9kZUNvbnRlbnRzKGwpLG8uc2V0RW5kKGwsNCksby5zZXRTdGFydChsLDIpLGUuY29tcGFyZUJvdW5kYXJ5UG9pbnRzPS0xPT1tLmNvbXBhcmVCb3VuZGFyeVBvaW50cyhtLlNUQVJUX1RPX0VORCxvKSYxPT1tLmNvbXBhcmVCb3VuZGFyeVBvaW50cyhtLkVORF9UT19TVEFSVCxvKT9mdW5jdGlvbihhLGIpe3JldHVybiBiPWIubmF0aXZlUmFuZ2V8fGIsYT09Yi5TVEFSVF9UT19FTkQ/YT1iLkVORF9UT19TVEFSVDphPT1iLkVORF9UT19TVEFSVCYmKGE9Yi5TVEFSVF9UT19FTkQpLHRoaXMubmF0aXZlUmFuZ2UuY29tcGFyZUJvdW5kYXJ5UG9pbnRzKGEsYil9OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMubmF0aXZlUmFuZ2UuY29tcGFyZUJvdW5kYXJ5UG9pbnRzKGEsYi5uYXRpdmVSYW5nZXx8Yil9LGEudXRpbC5pc0hvc3RNZXRob2QobSxcImNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudFwiKSYmKGUuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLm5hdGl2ZVJhbmdlLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudChhKX0pLGcuZ2V0Qm9keShkb2N1bWVudCkucmVtb3ZlQ2hpbGQobCksbS5kZXRhY2goKSxvLmRldGFjaCgpfSgpLGEuY3JlYXRlTmF0aXZlUmFuZ2U9ZnVuY3Rpb24oYSl7cmV0dXJuIGE9YXx8ZG9jdW1lbnQsYS5jcmVhdGVSYW5nZSgpfTthLmZlYXR1cmVzLmltcGxlbWVudHNUZXh0UmFuZ2UmJihmLnJhbmdlVG9UZXh0UmFuZ2U9ZnVuY3Rpb24oYSl7aWYoYS5jb2xsYXBzZWQpe3ZhciBiPWUobmV3IGgoYS5zdGFydENvbnRhaW5lcixhLnN0YXJ0T2Zmc2V0KSwhMCk7cmV0dXJuIGJ9dmFyIGM9ZShuZXcgaChhLnN0YXJ0Q29udGFpbmVyLGEuc3RhcnRPZmZzZXQpLCEwKSxkPWUobmV3IGgoYS5lbmRDb250YWluZXIsYS5lbmRPZmZzZXQpLCExKSxmPWcuZ2V0RG9jdW1lbnQoYS5zdGFydENvbnRhaW5lcikuYm9keS5jcmVhdGVUZXh0UmFuZ2UoKTtyZXR1cm4gZi5zZXRFbmRQb2ludChcIlN0YXJ0VG9TdGFydFwiLGMpLGYuc2V0RW5kUG9pbnQoXCJFbmRUb0VuZFwiLGQpLGZ9KSxmLnByb3RvdHlwZS5nZXROYW1lPWZ1bmN0aW9uKCl7cmV0dXJuXCJXcmFwcGVkUmFuZ2VcIn0sYS5XcmFwcGVkUmFuZ2U9ZixhLmNyZWF0ZVJhbmdlPWZ1bmN0aW9uKGIpe3JldHVybiBiPWJ8fGRvY3VtZW50LG5ldyBmKGEuY3JlYXRlTmF0aXZlUmFuZ2UoYikpfSxhLmNyZWF0ZVJhbmd5UmFuZ2U9ZnVuY3Rpb24oYSl7cmV0dXJuIGE9YXx8ZG9jdW1lbnQsbmV3IGkoYSl9LGEuY3JlYXRlSWZyYW1lUmFuZ2U9ZnVuY3Rpb24oYil7cmV0dXJuIGEuY3JlYXRlUmFuZ2UoZy5nZXRJZnJhbWVEb2N1bWVudChiKSl9LGEuY3JlYXRlSWZyYW1lUmFuZ3lSYW5nZT1mdW5jdGlvbihiKXtyZXR1cm4gYS5jcmVhdGVSYW5neVJhbmdlKGcuZ2V0SWZyYW1lRG9jdW1lbnQoYikpfSxhLmFkZENyZWF0ZU1pc3NpbmdOYXRpdmVBcGlMaXN0ZW5lcihmdW5jdGlvbihiKXt2YXIgYz1iLmRvY3VtZW50O1widW5kZWZpbmVkXCI9PXR5cGVvZiBjLmNyZWF0ZVJhbmdlJiYoYy5jcmVhdGVSYW5nZT1mdW5jdGlvbigpe3JldHVybiBhLmNyZWF0ZVJhbmdlKHRoaXMpfSksYz1iPW51bGx9KX0pLHJhbmd5LmNyZWF0ZU1vZHVsZShcIldyYXBwZWRTZWxlY3Rpb25cIixmdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoYSl7cmV0dXJuKGF8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCl9ZnVuY3Rpb24gZChhKXtyZXR1cm4oYXx8d2luZG93KS5kb2N1bWVudC5zZWxlY3Rpb259ZnVuY3Rpb24gZShhLGIsYyl7dmFyIGQ9Yz9cImVuZFwiOlwic3RhcnRcIixlPWM/XCJzdGFydFwiOlwiZW5kXCI7YS5hbmNob3JOb2RlPWJbZCtcIkNvbnRhaW5lclwiXSxhLmFuY2hvck9mZnNldD1iW2QrXCJPZmZzZXRcIl0sYS5mb2N1c05vZGU9YltlK1wiQ29udGFpbmVyXCJdLGEuZm9jdXNPZmZzZXQ9YltlK1wiT2Zmc2V0XCJdfWZ1bmN0aW9uIGYoYSl7dmFyIGI9YS5uYXRpdmVTZWxlY3Rpb247YS5hbmNob3JOb2RlPWIuYW5jaG9yTm9kZSxhLmFuY2hvck9mZnNldD1iLmFuY2hvck9mZnNldCxhLmZvY3VzTm9kZT1iLmZvY3VzTm9kZSxhLmZvY3VzT2Zmc2V0PWIuZm9jdXNPZmZzZXR9ZnVuY3Rpb24gZyhhKXthLmFuY2hvck5vZGU9YS5mb2N1c05vZGU9bnVsbCxhLmFuY2hvck9mZnNldD1hLmZvY3VzT2Zmc2V0PTAsYS5yYW5nZUNvdW50PTAsYS5pc0NvbGxhcHNlZD0hMCxhLl9yYW5nZXMubGVuZ3RoPTB9ZnVuY3Rpb24gaChiKXt2YXIgYztyZXR1cm4gYiBpbnN0YW5jZW9mIHk/KGM9Yi5fc2VsZWN0aW9uTmF0aXZlUmFuZ2UsY3x8KGM9YS5jcmVhdGVOYXRpdmVSYW5nZSh3LmdldERvY3VtZW50KGIuc3RhcnRDb250YWluZXIpKSxjLnNldEVuZChiLmVuZENvbnRhaW5lcixiLmVuZE9mZnNldCksYy5zZXRTdGFydChiLnN0YXJ0Q29udGFpbmVyLGIuc3RhcnRPZmZzZXQpLGIuX3NlbGVjdGlvbk5hdGl2ZVJhbmdlPWMsYi5hdHRhY2hMaXN0ZW5lcihcImRldGFjaFwiLGZ1bmN0aW9uKCl7dGhpcy5fc2VsZWN0aW9uTmF0aXZlUmFuZ2U9bnVsbH0pKSk6YiBpbnN0YW5jZW9mIHo/Yz1iLm5hdGl2ZVJhbmdlOmEuZmVhdHVyZXMuaW1wbGVtZW50c0RvbVJhbmdlJiZiIGluc3RhbmNlb2Ygdy5nZXRXaW5kb3coYi5zdGFydENvbnRhaW5lcikuUmFuZ2UmJihjPWIpLGN9ZnVuY3Rpb24gaShhKXtpZighYS5sZW5ndGh8fDEhPWFbMF0ubm9kZVR5cGUpcmV0dXJuITE7Zm9yKHZhciBiPTEsYz1hLmxlbmd0aDtjPmI7KytiKWlmKCF3LmlzQW5jZXN0b3JPZihhWzBdLGFbYl0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIGooYSl7dmFyIGI9YS5nZXROb2RlcygpO2lmKCFpKGIpKXRocm93IG5ldyBFcnJvcihcImdldFNpbmdsZUVsZW1lbnRGcm9tUmFuZ2U6IHJhbmdlIFwiK2EuaW5zcGVjdCgpK1wiIGRpZCBub3QgY29uc2lzdCBvZiBhIHNpbmdsZSBlbGVtZW50XCIpO3JldHVybiBiWzBdfWZ1bmN0aW9uIGsoYSl7cmV0dXJuISFhJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgYS50ZXh0fWZ1bmN0aW9uIGwoYSxiKXt2YXIgYz1uZXcgeihiKTthLl9yYW5nZXM9W2NdLGUoYSxjLCExKSxhLnJhbmdlQ291bnQ9MSxhLmlzQ29sbGFwc2VkPWMuY29sbGFwc2VkfWZ1bmN0aW9uIG0oYil7aWYoYi5fcmFuZ2VzLmxlbmd0aD0wLFwiTm9uZVwiPT1iLmRvY1NlbGVjdGlvbi50eXBlKWcoYik7ZWxzZXt2YXIgYz1iLmRvY1NlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO2lmKGsoYykpbChiLGMpO2Vsc2V7Yi5yYW5nZUNvdW50PWMubGVuZ3RoO2Zvcih2YXIgZCxmPXcuZ2V0RG9jdW1lbnQoYy5pdGVtKDApKSxoPTA7aDxiLnJhbmdlQ291bnQ7KytoKWQ9YS5jcmVhdGVSYW5nZShmKSxkLnNlbGVjdE5vZGUoYy5pdGVtKGgpKSxiLl9yYW5nZXMucHVzaChkKTtcbmIuaXNDb2xsYXBzZWQ9MT09Yi5yYW5nZUNvdW50JiZiLl9yYW5nZXNbMF0uY29sbGFwc2VkLGUoYixiLl9yYW5nZXNbYi5yYW5nZUNvdW50LTFdLCExKX19fWZ1bmN0aW9uIG4oYSxiKXtmb3IodmFyIGM9YS5kb2NTZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKSxkPWooYiksZT13LmdldERvY3VtZW50KGMuaXRlbSgwKSksZj13LmdldEJvZHkoZSkuY3JlYXRlQ29udHJvbFJhbmdlKCksZz0wLGg9Yy5sZW5ndGg7aD5nOysrZylmLmFkZChjLml0ZW0oZykpO3RyeXtmLmFkZChkKX1jYXRjaChpKXt0aHJvdyBuZXcgRXJyb3IoXCJhZGRSYW5nZSgpOiBFbGVtZW50IHdpdGhpbiB0aGUgc3BlY2lmaWVkIFJhbmdlIGNvdWxkIG5vdCBiZSBhZGRlZCB0byBjb250cm9sIHNlbGVjdGlvbiAoZG9lcyBpdCBoYXZlIGxheW91dD8pXCIpfWYuc2VsZWN0KCksbShhKX1mdW5jdGlvbiBvKGEsYixjKXt0aGlzLm5hdGl2ZVNlbGVjdGlvbj1hLHRoaXMuZG9jU2VsZWN0aW9uPWIsdGhpcy5fcmFuZ2VzPVtdLHRoaXMud2luPWMsdGhpcy5yZWZyZXNoKCl9ZnVuY3Rpb24gcChhLGIpe2Zvcih2YXIgYyxkPXcuZ2V0RG9jdW1lbnQoYlswXS5zdGFydENvbnRhaW5lciksZT13LmdldEJvZHkoZCkuY3JlYXRlQ29udHJvbFJhbmdlKCksZj0wO2Y8cmFuZ2VDb3VudDsrK2Ype2M9aihiW2ZdKTt0cnl7ZS5hZGQoYyl9Y2F0Y2goZyl7dGhyb3cgbmV3IEVycm9yKFwic2V0UmFuZ2VzKCk6IEVsZW1lbnQgd2l0aGluIHRoZSBvbmUgb2YgdGhlIHNwZWNpZmllZCBSYW5nZXMgY291bGQgbm90IGJlIGFkZGVkIHRvIGNvbnRyb2wgc2VsZWN0aW9uIChkb2VzIGl0IGhhdmUgbGF5b3V0PylcIil9fWUuc2VsZWN0KCksbShhKX1mdW5jdGlvbiBxKGEsYil7aWYoYS5hbmNob3JOb2RlJiZ3LmdldERvY3VtZW50KGEuYW5jaG9yTm9kZSkhPT13LmdldERvY3VtZW50KGIpKXRocm93IG5ldyBBKFwiV1JPTkdfRE9DVU1FTlRfRVJSXCIpfWZ1bmN0aW9uIHIoYSl7dmFyIGI9W10sYz1uZXcgQihhLmFuY2hvck5vZGUsYS5hbmNob3JPZmZzZXQpLGQ9bmV3IEIoYS5mb2N1c05vZGUsYS5mb2N1c09mZnNldCksZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBhLmdldE5hbWU/YS5nZXROYW1lKCk6XCJTZWxlY3Rpb25cIjtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgYS5yYW5nZUNvdW50KWZvcih2YXIgZj0wLGc9YS5yYW5nZUNvdW50O2c+ZjsrK2YpYltmXT15Lmluc3BlY3QoYS5nZXRSYW5nZUF0KGYpKTtyZXR1cm5cIltcIitlK1wiKFJhbmdlczogXCIrYi5qb2luKFwiLCBcIikrXCIpKGFuY2hvcjogXCIrYy5pbnNwZWN0KCkrXCIsIGZvY3VzOiBcIitkLmluc3BlY3QoKStcIl1cIn1hLnJlcXVpcmVNb2R1bGVzKFtcIkRvbVV0aWxcIixcIkRvbVJhbmdlXCIsXCJXcmFwcGVkUmFuZ2VcIl0pLGEuY29uZmlnLmNoZWNrU2VsZWN0aW9uUmFuZ2VzPSEwO3ZhciBzLHQsdT1cImJvb2xlYW5cIix2PVwiX3Jhbmd5U2VsZWN0aW9uXCIsdz1hLmRvbSx4PWEudXRpbCx5PWEuRG9tUmFuZ2Usej1hLldyYXBwZWRSYW5nZSxBPWEuRE9NRXhjZXB0aW9uLEI9dy5Eb21Qb3NpdGlvbixDPVwiQ29udHJvbFwiLEQ9YS51dGlsLmlzSG9zdE1ldGhvZCh3aW5kb3csXCJnZXRTZWxlY3Rpb25cIiksRT1hLnV0aWwuaXNIb3N0T2JqZWN0KGRvY3VtZW50LFwic2VsZWN0aW9uXCIpLEY9RSYmKCFEfHxhLmNvbmZpZy5wcmVmZXJUZXh0UmFuZ2UpO0Y/KHM9ZCxhLmlzU2VsZWN0aW9uVmFsaWQ9ZnVuY3Rpb24oYSl7dmFyIGI9KGF8fHdpbmRvdykuZG9jdW1lbnQsYz1iLnNlbGVjdGlvbjtyZXR1cm5cIk5vbmVcIiE9Yy50eXBlfHx3LmdldERvY3VtZW50KGMuY3JlYXRlUmFuZ2UoKS5wYXJlbnRFbGVtZW50KCkpPT1ifSk6RD8ocz1jLGEuaXNTZWxlY3Rpb25WYWxpZD1mdW5jdGlvbigpe3JldHVybiEwfSk6Yi5mYWlsKFwiTmVpdGhlciBkb2N1bWVudC5zZWxlY3Rpb24gb3Igd2luZG93LmdldFNlbGVjdGlvbigpIGRldGVjdGVkLlwiKSxhLmdldE5hdGl2ZVNlbGVjdGlvbj1zO3ZhciBHPXMoKSxIPWEuY3JlYXRlTmF0aXZlUmFuZ2UoZG9jdW1lbnQpLEk9dy5nZXRCb2R5KGRvY3VtZW50KSxKPXguYXJlSG9zdE9iamVjdHMoRyxbXCJhbmNob3JOb2RlXCIsXCJmb2N1c05vZGVcIl0mJnguYXJlSG9zdFByb3BlcnRpZXMoRyxbXCJhbmNob3JPZmZzZXRcIixcImZvY3VzT2Zmc2V0XCJdKSk7YS5mZWF0dXJlcy5zZWxlY3Rpb25IYXNBbmNob3JBbmRGb2N1cz1KO3ZhciBLPXguaXNIb3N0TWV0aG9kKEcsXCJleHRlbmRcIik7YS5mZWF0dXJlcy5zZWxlY3Rpb25IYXNFeHRlbmQ9Szt2YXIgTD1cIm51bWJlclwiPT10eXBlb2YgRy5yYW5nZUNvdW50O2EuZmVhdHVyZXMuc2VsZWN0aW9uSGFzUmFuZ2VDb3VudD1MO3ZhciBNPSExLE49ITA7eC5hcmVIb3N0TWV0aG9kcyhHLFtcImFkZFJhbmdlXCIsXCJnZXRSYW5nZUF0XCIsXCJyZW1vdmVBbGxSYW5nZXNcIl0pJiZcIm51bWJlclwiPT10eXBlb2YgRy5yYW5nZUNvdW50JiZhLmZlYXR1cmVzLmltcGxlbWVudHNEb21SYW5nZSYmIWZ1bmN0aW9uKCl7dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTthLmZyYW1lQm9yZGVyPTAsYS5zdHlsZS5wb3NpdGlvbj1cImFic29sdXRlXCIsYS5zdHlsZS5sZWZ0PVwiLTEwMDAwcHhcIixJLmFwcGVuZENoaWxkKGEpO3ZhciBiPXcuZ2V0SWZyYW1lRG9jdW1lbnQoYSk7Yi5vcGVuKCksYi53cml0ZShcIjxodG1sPjxoZWFkPjwvaGVhZD48Ym9keT4xMjwvYm9keT48L2h0bWw+XCIpLGIuY2xvc2UoKTt2YXIgYz13LmdldElmcmFtZVdpbmRvdyhhKS5nZXRTZWxlY3Rpb24oKSxkPWIuZG9jdW1lbnRFbGVtZW50LGU9ZC5sYXN0Q2hpbGQsZj1lLmZpcnN0Q2hpbGQsZz1iLmNyZWF0ZVJhbmdlKCk7Zy5zZXRTdGFydChmLDEpLGcuY29sbGFwc2UoITApLGMuYWRkUmFuZ2UoZyksTj0xPT1jLnJhbmdlQ291bnQsYy5yZW1vdmVBbGxSYW5nZXMoKTt2YXIgaD1nLmNsb25lUmFuZ2UoKTtnLnNldFN0YXJ0KGYsMCksaC5zZXRFbmQoZiwyKSxjLmFkZFJhbmdlKGcpLGMuYWRkUmFuZ2UoaCksTT0yPT1jLnJhbmdlQ291bnQsZy5kZXRhY2goKSxoLmRldGFjaCgpLEkucmVtb3ZlQ2hpbGQoYSl9KCksYS5mZWF0dXJlcy5zZWxlY3Rpb25TdXBwb3J0c011bHRpcGxlUmFuZ2VzPU0sYS5mZWF0dXJlcy5jb2xsYXBzZWROb25FZGl0YWJsZVNlbGVjdGlvbnNTdXBwb3J0ZWQ9Tjt2YXIgTyxQPSExO0kmJnguaXNIb3N0TWV0aG9kKEksXCJjcmVhdGVDb250cm9sUmFuZ2VcIikmJihPPUkuY3JlYXRlQ29udHJvbFJhbmdlKCkseC5hcmVIb3N0UHJvcGVydGllcyhPLFtcIml0ZW1cIixcImFkZFwiXSkmJihQPSEwKSksYS5mZWF0dXJlcy5pbXBsZW1lbnRzQ29udHJvbFJhbmdlPVAsdD1KP2Z1bmN0aW9uKGEpe3JldHVybiBhLmFuY2hvck5vZGU9PT1hLmZvY3VzTm9kZSYmYS5hbmNob3JPZmZzZXQ9PT1hLmZvY3VzT2Zmc2V0fTpmdW5jdGlvbihhKXtyZXR1cm4gYS5yYW5nZUNvdW50P2EuZ2V0UmFuZ2VBdChhLnJhbmdlQ291bnQtMSkuY29sbGFwc2VkOiExfTt2YXIgUTt4LmlzSG9zdE1ldGhvZChHLFwiZ2V0UmFuZ2VBdFwiKT9RPWZ1bmN0aW9uKGEsYil7dHJ5e3JldHVybiBhLmdldFJhbmdlQXQoYil9Y2F0Y2goYyl7cmV0dXJuIG51bGx9fTpKJiYoUT1mdW5jdGlvbihiKXt2YXIgYz13LmdldERvY3VtZW50KGIuYW5jaG9yTm9kZSksZD1hLmNyZWF0ZVJhbmdlKGMpO3JldHVybiBkLnNldFN0YXJ0KGIuYW5jaG9yTm9kZSxiLmFuY2hvck9mZnNldCksZC5zZXRFbmQoYi5mb2N1c05vZGUsYi5mb2N1c09mZnNldCksZC5jb2xsYXBzZWQhPT10aGlzLmlzQ29sbGFwc2VkJiYoZC5zZXRTdGFydChiLmZvY3VzTm9kZSxiLmZvY3VzT2Zmc2V0KSxkLnNldEVuZChiLmFuY2hvck5vZGUsYi5hbmNob3JPZmZzZXQpKSxkfSksYS5nZXRTZWxlY3Rpb249ZnVuY3Rpb24oYSl7YT1hfHx3aW5kb3c7dmFyIGI9YVt2XSxjPXMoYSksZT1FP2QoYSk6bnVsbDtyZXR1cm4gYj8oYi5uYXRpdmVTZWxlY3Rpb249YyxiLmRvY1NlbGVjdGlvbj1lLGIucmVmcmVzaChhKSk6KGI9bmV3IG8oYyxlLGEpLGFbdl09YiksYn0sYS5nZXRJZnJhbWVTZWxlY3Rpb249ZnVuY3Rpb24oYil7cmV0dXJuIGEuZ2V0U2VsZWN0aW9uKHcuZ2V0SWZyYW1lV2luZG93KGIpKX07dmFyIFI9by5wcm90b3R5cGU7aWYoIUYmJkomJnguYXJlSG9zdE1ldGhvZHMoRyxbXCJyZW1vdmVBbGxSYW5nZXNcIixcImFkZFJhbmdlXCJdKSl7Ui5yZW1vdmVBbGxSYW5nZXM9ZnVuY3Rpb24oKXt0aGlzLm5hdGl2ZVNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKSxnKHRoaXMpfTt2YXIgUz1mdW5jdGlvbihiLGMpe3ZhciBkPXkuZ2V0UmFuZ2VEb2N1bWVudChjKSxlPWEuY3JlYXRlUmFuZ2UoZCk7ZS5jb2xsYXBzZVRvUG9pbnQoYy5lbmRDb250YWluZXIsYy5lbmRPZmZzZXQpLGIubmF0aXZlU2VsZWN0aW9uLmFkZFJhbmdlKGgoZSkpLGIubmF0aXZlU2VsZWN0aW9uLmV4dGVuZChjLnN0YXJ0Q29udGFpbmVyLGMuc3RhcnRPZmZzZXQpLGIucmVmcmVzaCgpfTtSLmFkZFJhbmdlPUw/ZnVuY3Rpb24oYixjKXtpZihQJiZFJiZ0aGlzLmRvY1NlbGVjdGlvbi50eXBlPT1DKW4odGhpcyxiKTtlbHNlIGlmKGMmJkspUyh0aGlzLGIpO2Vsc2V7dmFyIGQ7aWYoTT9kPXRoaXMucmFuZ2VDb3VudDoodGhpcy5yZW1vdmVBbGxSYW5nZXMoKSxkPTApLHRoaXMubmF0aXZlU2VsZWN0aW9uLmFkZFJhbmdlKGgoYikpLHRoaXMucmFuZ2VDb3VudD10aGlzLm5hdGl2ZVNlbGVjdGlvbi5yYW5nZUNvdW50LHRoaXMucmFuZ2VDb3VudD09ZCsxKXtpZihhLmNvbmZpZy5jaGVja1NlbGVjdGlvblJhbmdlcyl7dmFyIGY9USh0aGlzLm5hdGl2ZVNlbGVjdGlvbix0aGlzLnJhbmdlQ291bnQtMSk7ZiYmIXkucmFuZ2VzRXF1YWwoZixiKSYmKGI9bmV3IHooZikpfXRoaXMuX3Jhbmdlc1t0aGlzLnJhbmdlQ291bnQtMV09YixlKHRoaXMsYixWKHRoaXMubmF0aXZlU2VsZWN0aW9uKSksdGhpcy5pc0NvbGxhcHNlZD10KHRoaXMpfWVsc2UgdGhpcy5yZWZyZXNoKCl9fTpmdW5jdGlvbihhLGIpe2ImJks/Uyh0aGlzLGEpOih0aGlzLm5hdGl2ZVNlbGVjdGlvbi5hZGRSYW5nZShoKGEpKSx0aGlzLnJlZnJlc2goKSl9LFIuc2V0UmFuZ2VzPWZ1bmN0aW9uKGEpe2lmKFAmJmEubGVuZ3RoPjEpcCh0aGlzLGEpO2Vsc2V7dGhpcy5yZW1vdmVBbGxSYW5nZXMoKTtmb3IodmFyIGI9MCxjPWEubGVuZ3RoO2M+YjsrK2IpdGhpcy5hZGRSYW5nZShhW2JdKX19fWVsc2V7aWYoISh4LmlzSG9zdE1ldGhvZChHLFwiZW1wdHlcIikmJnguaXNIb3N0TWV0aG9kKEgsXCJzZWxlY3RcIikmJlAmJkYpKXJldHVybiBiLmZhaWwoXCJObyBtZWFucyBvZiBzZWxlY3RpbmcgYSBSYW5nZSBvciBUZXh0UmFuZ2Ugd2FzIGZvdW5kXCIpLCExO1IucmVtb3ZlQWxsUmFuZ2VzPWZ1bmN0aW9uKCl7dHJ5e2lmKHRoaXMuZG9jU2VsZWN0aW9uLmVtcHR5KCksXCJOb25lXCIhPXRoaXMuZG9jU2VsZWN0aW9uLnR5cGUpe3ZhciBhO2lmKHRoaXMuYW5jaG9yTm9kZSlhPXcuZ2V0RG9jdW1lbnQodGhpcy5hbmNob3JOb2RlKTtlbHNlIGlmKHRoaXMuZG9jU2VsZWN0aW9uLnR5cGU9PUMpe3ZhciBiPXRoaXMuZG9jU2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7Yi5sZW5ndGgmJihhPXcuZ2V0RG9jdW1lbnQoYi5pdGVtKDApKS5ib2R5LmNyZWF0ZVRleHRSYW5nZSgpKX1pZihhKXt2YXIgYz1hLmJvZHkuY3JlYXRlVGV4dFJhbmdlKCk7Yy5zZWxlY3QoKSx0aGlzLmRvY1NlbGVjdGlvbi5lbXB0eSgpfX19Y2F0Y2goZCl7fWcodGhpcyl9LFIuYWRkUmFuZ2U9ZnVuY3Rpb24oYSl7dGhpcy5kb2NTZWxlY3Rpb24udHlwZT09Qz9uKHRoaXMsYSk6KHoucmFuZ2VUb1RleHRSYW5nZShhKS5zZWxlY3QoKSx0aGlzLl9yYW5nZXNbMF09YSx0aGlzLnJhbmdlQ291bnQ9MSx0aGlzLmlzQ29sbGFwc2VkPXRoaXMuX3Jhbmdlc1swXS5jb2xsYXBzZWQsZSh0aGlzLGEsITEpKX0sUi5zZXRSYW5nZXM9ZnVuY3Rpb24oYSl7dGhpcy5yZW1vdmVBbGxSYW5nZXMoKTt2YXIgYj1hLmxlbmd0aDtiPjE/cCh0aGlzLGEpOmImJnRoaXMuYWRkUmFuZ2UoYVswXSl9fVIuZ2V0UmFuZ2VBdD1mdW5jdGlvbihhKXtpZigwPmF8fGE+PXRoaXMucmFuZ2VDb3VudCl0aHJvdyBuZXcgQShcIklOREVYX1NJWkVfRVJSXCIpO3JldHVybiB0aGlzLl9yYW5nZXNbYV19O3ZhciBUO2lmKEYpVD1mdW5jdGlvbihiKXt2YXIgYzthLmlzU2VsZWN0aW9uVmFsaWQoYi53aW4pP2M9Yi5kb2NTZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTooYz13LmdldEJvZHkoYi53aW4uZG9jdW1lbnQpLmNyZWF0ZVRleHRSYW5nZSgpLGMuY29sbGFwc2UoITApKSxiLmRvY1NlbGVjdGlvbi50eXBlPT1DP20oYik6ayhjKT9sKGIsYyk6ZyhiKX07ZWxzZSBpZih4LmlzSG9zdE1ldGhvZChHLFwiZ2V0UmFuZ2VBdFwiKSYmXCJudW1iZXJcIj09dHlwZW9mIEcucmFuZ2VDb3VudClUPWZ1bmN0aW9uKGIpe2lmKFAmJkUmJmIuZG9jU2VsZWN0aW9uLnR5cGU9PUMpbShiKTtlbHNlIGlmKGIuX3Jhbmdlcy5sZW5ndGg9Yi5yYW5nZUNvdW50PWIubmF0aXZlU2VsZWN0aW9uLnJhbmdlQ291bnQsYi5yYW5nZUNvdW50KXtmb3IodmFyIGM9MCxkPWIucmFuZ2VDb3VudDtkPmM7KytjKWIuX3Jhbmdlc1tjXT1uZXcgYS5XcmFwcGVkUmFuZ2UoYi5uYXRpdmVTZWxlY3Rpb24uZ2V0UmFuZ2VBdChjKSk7ZShiLGIuX3Jhbmdlc1tiLnJhbmdlQ291bnQtMV0sVihiLm5hdGl2ZVNlbGVjdGlvbikpLGIuaXNDb2xsYXBzZWQ9dChiKX1lbHNlIGcoYil9O2Vsc2V7aWYoIUp8fHR5cGVvZiBHLmlzQ29sbGFwc2VkIT11fHx0eXBlb2YgSC5jb2xsYXBzZWQhPXV8fCFhLmZlYXR1cmVzLmltcGxlbWVudHNEb21SYW5nZSlyZXR1cm4gYi5mYWlsKFwiTm8gbWVhbnMgb2Ygb2J0YWluaW5nIGEgUmFuZ2Ugb3IgVGV4dFJhbmdlIGZyb20gdGhlIHVzZXIncyBzZWxlY3Rpb24gd2FzIGZvdW5kXCIpLCExO1Q9ZnVuY3Rpb24oYSl7dmFyIGIsYz1hLm5hdGl2ZVNlbGVjdGlvbjtjLmFuY2hvck5vZGU/KGI9UShjLDApLGEuX3Jhbmdlcz1bYl0sYS5yYW5nZUNvdW50PTEsZihhKSxhLmlzQ29sbGFwc2VkPXQoYSkpOmcoYSl9fVIucmVmcmVzaD1mdW5jdGlvbihhKXt2YXIgYj1hP3RoaXMuX3Jhbmdlcy5zbGljZSgwKTpudWxsO2lmKFQodGhpcyksYSl7dmFyIGM9Yi5sZW5ndGg7aWYoYyE9dGhpcy5fcmFuZ2VzLmxlbmd0aClyZXR1cm4hMTtmb3IoO2MtLTspaWYoIXkucmFuZ2VzRXF1YWwoYltjXSx0aGlzLl9yYW5nZXNbY10pKXJldHVybiExO3JldHVybiEwfX07dmFyIFU9ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLmdldEFsbFJhbmdlcygpLGQ9ITE7YS5yZW1vdmVBbGxSYW5nZXMoKTtmb3IodmFyIGU9MCxmPWMubGVuZ3RoO2Y+ZTsrK2UpZHx8YiE9PWNbZV0/YS5hZGRSYW5nZShjW2VdKTpkPSEwO2EucmFuZ2VDb3VudHx8ZyhhKX07Ui5yZW1vdmVSYW5nZT1QP2Z1bmN0aW9uKGEpe2lmKHRoaXMuZG9jU2VsZWN0aW9uLnR5cGU9PUMpe2Zvcih2YXIgYixjPXRoaXMuZG9jU2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCksZD1qKGEpLGU9dy5nZXREb2N1bWVudChjLml0ZW0oMCkpLGY9dy5nZXRCb2R5KGUpLmNyZWF0ZUNvbnRyb2xSYW5nZSgpLGc9ITEsaD0wLGk9Yy5sZW5ndGg7aT5oOysraCliPWMuaXRlbShoKSxiIT09ZHx8Zz9mLmFkZChjLml0ZW0oaCkpOmc9ITA7Zi5zZWxlY3QoKSxtKHRoaXMpfWVsc2UgVSh0aGlzLGEpfTpmdW5jdGlvbihhKXtVKHRoaXMsYSl9O3ZhciBWOyFGJiZKJiZhLmZlYXR1cmVzLmltcGxlbWVudHNEb21SYW5nZT8oVj1mdW5jdGlvbihhKXt2YXIgYj0hMTtyZXR1cm4gYS5hbmNob3JOb2RlJiYoYj0xPT13LmNvbXBhcmVQb2ludHMoYS5hbmNob3JOb2RlLGEuYW5jaG9yT2Zmc2V0LGEuZm9jdXNOb2RlLGEuZm9jdXNPZmZzZXQpKSxifSxSLmlzQmFja3dhcmRzPWZ1bmN0aW9uKCl7cmV0dXJuIFYodGhpcyl9KTpWPVIuaXNCYWNrd2FyZHM9ZnVuY3Rpb24oKXtyZXR1cm4hMX0sUi50b1N0cmluZz1mdW5jdGlvbigpe2Zvcih2YXIgYT1bXSxiPTAsYz10aGlzLnJhbmdlQ291bnQ7Yz5iOysrYilhW2JdPVwiXCIrdGhpcy5fcmFuZ2VzW2JdO3JldHVybiBhLmpvaW4oXCJcIil9LFIuY29sbGFwc2U9ZnVuY3Rpb24oYixjKXtxKHRoaXMsYik7dmFyIGQ9YS5jcmVhdGVSYW5nZSh3LmdldERvY3VtZW50KGIpKTtkLmNvbGxhcHNlVG9Qb2ludChiLGMpLHRoaXMucmVtb3ZlQWxsUmFuZ2VzKCksdGhpcy5hZGRSYW5nZShkKSx0aGlzLmlzQ29sbGFwc2VkPSEwfSxSLmNvbGxhcHNlVG9TdGFydD1mdW5jdGlvbigpe2lmKCF0aGlzLnJhbmdlQ291bnQpdGhyb3cgbmV3IEEoXCJJTlZBTElEX1NUQVRFX0VSUlwiKTt2YXIgYT10aGlzLl9yYW5nZXNbMF07dGhpcy5jb2xsYXBzZShhLnN0YXJ0Q29udGFpbmVyLGEuc3RhcnRPZmZzZXQpfSxSLmNvbGxhcHNlVG9FbmQ9ZnVuY3Rpb24oKXtpZighdGhpcy5yYW5nZUNvdW50KXRocm93IG5ldyBBKFwiSU5WQUxJRF9TVEFURV9FUlJcIik7dmFyIGE9dGhpcy5fcmFuZ2VzW3RoaXMucmFuZ2VDb3VudC0xXTt0aGlzLmNvbGxhcHNlKGEuZW5kQ29udGFpbmVyLGEuZW5kT2Zmc2V0KX0sUi5zZWxlY3RBbGxDaGlsZHJlbj1mdW5jdGlvbihiKXtxKHRoaXMsYik7dmFyIGM9YS5jcmVhdGVSYW5nZSh3LmdldERvY3VtZW50KGIpKTtjLnNlbGVjdE5vZGVDb250ZW50cyhiKSx0aGlzLnJlbW92ZUFsbFJhbmdlcygpLHRoaXMuYWRkUmFuZ2UoYyl9LFIuZGVsZXRlRnJvbURvY3VtZW50PWZ1bmN0aW9uKCl7aWYoUCYmRSYmdGhpcy5kb2NTZWxlY3Rpb24udHlwZT09Qyl7Zm9yKHZhciBhLGI9dGhpcy5kb2NTZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtiLmxlbmd0aDspYT1iLml0ZW0oMCksYi5yZW1vdmUoYSksYS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGEpO3RoaXMucmVmcmVzaCgpfWVsc2UgaWYodGhpcy5yYW5nZUNvdW50KXt2YXIgYz10aGlzLmdldEFsbFJhbmdlcygpO3RoaXMucmVtb3ZlQWxsUmFuZ2VzKCk7Zm9yKHZhciBkPTAsZT1jLmxlbmd0aDtlPmQ7KytkKWNbZF0uZGVsZXRlQ29udGVudHMoKTt0aGlzLmFkZFJhbmdlKGNbZS0xXSl9fSxSLmdldEFsbFJhbmdlcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9yYW5nZXMuc2xpY2UoMCl9LFIuc2V0U2luZ2xlUmFuZ2U9ZnVuY3Rpb24oYSl7dGhpcy5zZXRSYW5nZXMoW2FdKX0sUi5jb250YWluc05vZGU9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9MCxkPXRoaXMuX3Jhbmdlcy5sZW5ndGg7ZD5jOysrYylpZih0aGlzLl9yYW5nZXNbY10uY29udGFpbnNOb2RlKGEsYikpcmV0dXJuITA7cmV0dXJuITF9LFIudG9IdG1sPWZ1bmN0aW9uKCl7dmFyIGE9XCJcIjtpZih0aGlzLnJhbmdlQ291bnQpe2Zvcih2YXIgYj15LmdldFJhbmdlRG9jdW1lbnQodGhpcy5fcmFuZ2VzWzBdKS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGM9MCxkPXRoaXMuX3Jhbmdlcy5sZW5ndGg7ZD5jOysrYyliLmFwcGVuZENoaWxkKHRoaXMuX3Jhbmdlc1tjXS5jbG9uZUNvbnRlbnRzKCkpO2E9Yi5pbm5lckhUTUx9cmV0dXJuIGF9LFIuZ2V0TmFtZT1mdW5jdGlvbigpe3JldHVyblwiV3JhcHBlZFNlbGVjdGlvblwifSxSLmluc3BlY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gcih0aGlzKX0sUi5kZXRhY2g9ZnVuY3Rpb24oKXt0aGlzLndpblt2XT1udWxsLHRoaXMud2luPXRoaXMuYW5jaG9yTm9kZT10aGlzLmZvY3VzTm9kZT1udWxsfSxvLmluc3BlY3Q9cixhLlNlbGVjdGlvbj1vLGEuc2VsZWN0aW9uUHJvdG90eXBlPVIsYS5hZGRDcmVhdGVNaXNzaW5nTmF0aXZlQXBpTGlzdGVuZXIoZnVuY3Rpb24oYil7XCJ1bmRlZmluZWRcIj09dHlwZW9mIGIuZ2V0U2VsZWN0aW9uJiYoYi5nZXRTZWxlY3Rpb249ZnVuY3Rpb24oKXtyZXR1cm4gYS5nZXRTZWxlY3Rpb24odGhpcyl9KSxiPW51bGx9KX0pLC8qKlxuICogQGxpY2Vuc2UgU2VsZWN0aW9uIHNhdmUgYW5kIHJlc3RvcmUgbW9kdWxlIGZvciBSYW5neS5cbiAqIFNhdmVzIGFuZCByZXN0b3JlcyB1c2VyIHNlbGVjdGlvbnMgdXNpbmcgbWFya2VyIGludmlzaWJsZSBlbGVtZW50cyBpbiB0aGUgRE9NLlxuICpcbiAqIFBhcnQgb2YgUmFuZ3ksIGEgY3Jvc3MtYnJvd3NlciBKYXZhU2NyaXB0IHJhbmdlIGFuZCBzZWxlY3Rpb24gbGlicmFyeVxuICogaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL3Jhbmd5L1xuICpcbiAqIERlcGVuZHMgb24gUmFuZ3kgY29yZS5cbiAqXG4gKiBDb3B5cmlnaHQgMjAxMiwgVGltIERvd25cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIFZlcnNpb246IDEuMi4zXG4gKiBCdWlsZCBkYXRlOiAyNiBGZWJydWFyeSAyMDEyXG4gKi9cbnJhbmd5LmNyZWF0ZU1vZHVsZShcIlNhdmVSZXN0b3JlXCIsZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBjKGEsYil7cmV0dXJuKGJ8fGRvY3VtZW50KS5nZXRFbGVtZW50QnlJZChhKX1mdW5jdGlvbiBkKGEsYil7dmFyIGMsZD1cInNlbGVjdGlvbkJvdW5kYXJ5X1wiKyArbmV3IERhdGUrXCJfXCIrKFwiXCIrTWF0aC5yYW5kb20oKSkuc2xpY2UoMiksZT1rLmdldERvY3VtZW50KGEuc3RhcnRDb250YWluZXIpLGY9YS5jbG9uZVJhbmdlKCk7cmV0dXJuIGYuY29sbGFwc2UoYiksYz1lLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpLGMuaWQ9ZCxjLnN0eWxlLmxpbmVIZWlnaHQ9XCIwXCIsYy5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLGMuY2xhc3NOYW1lPVwicmFuZ3lTZWxlY3Rpb25Cb3VuZGFyeVwiLGMuYXBwZW5kQ2hpbGQoZS5jcmVhdGVUZXh0Tm9kZShsKSksZi5pbnNlcnROb2RlKGMpLGYuZGV0YWNoKCksY31mdW5jdGlvbiBlKGEsZCxlLGYpe3ZhciBnPWMoZSxhKTtnPyhkW2Y/XCJzZXRTdGFydEJlZm9yZVwiOlwic2V0RW5kQmVmb3JlXCJdKGcpLGcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChnKSk6Yi53YXJuKFwiTWFya2VyIGVsZW1lbnQgaGFzIGJlZW4gcmVtb3ZlZC4gQ2Fubm90IHJlc3RvcmUgc2VsZWN0aW9uLlwiKX1mdW5jdGlvbiBmKGEsYil7cmV0dXJuIGIuY29tcGFyZUJvdW5kYXJ5UG9pbnRzKGEuU1RBUlRfVE9fU1RBUlQsYSl9ZnVuY3Rpb24gZyhlKXtlPWV8fHdpbmRvdzt2YXIgZz1lLmRvY3VtZW50O2lmKCFhLmlzU2VsZWN0aW9uVmFsaWQoZSkpcmV0dXJuIHZvaWQgYi53YXJuKFwiQ2Fubm90IHNhdmUgc2VsZWN0aW9uLiBUaGlzIHVzdWFsbHkgaGFwcGVucyB3aGVuIHRoZSBzZWxlY3Rpb24gaXMgY29sbGFwc2VkIGFuZCB0aGUgc2VsZWN0aW9uIGRvY3VtZW50IGhhcyBsb3N0IGZvY3VzLlwiKTt2YXIgaCxpLGosaz1hLmdldFNlbGVjdGlvbihlKSxsPWsuZ2V0QWxsUmFuZ2VzKCksbT1bXTtsLnNvcnQoZik7Zm9yKHZhciBuPTAsbz1sLmxlbmd0aDtvPm47KytuKWo9bFtuXSxqLmNvbGxhcHNlZD8oaT1kKGosITEpLG0ucHVzaCh7bWFya2VySWQ6aS5pZCxjb2xsYXBzZWQ6ITB9KSk6KGk9ZChqLCExKSxoPWQoaiwhMCksbVtuXT17c3RhcnRNYXJrZXJJZDpoLmlkLGVuZE1hcmtlcklkOmkuaWQsY29sbGFwc2VkOiExLGJhY2t3YXJkczoxPT1sLmxlbmd0aCYmay5pc0JhY2t3YXJkcygpfSk7Zm9yKG49by0xO24+PTA7LS1uKWo9bFtuXSxqLmNvbGxhcHNlZD9qLmNvbGxhcHNlQmVmb3JlKGMobVtuXS5tYXJrZXJJZCxnKSk6KGouc2V0RW5kQmVmb3JlKGMobVtuXS5lbmRNYXJrZXJJZCxnKSksai5zZXRTdGFydEFmdGVyKGMobVtuXS5zdGFydE1hcmtlcklkLGcpKSk7cmV0dXJuIGsuc2V0UmFuZ2VzKGwpLHt3aW46ZSxkb2M6ZyxyYW5nZUluZm9zOm0scmVzdG9yZWQ6ITF9fWZ1bmN0aW9uIGgoZCxmKXtpZighZC5yZXN0b3JlZCl7Zm9yKHZhciBnLGgsaT1kLnJhbmdlSW5mb3Msaj1hLmdldFNlbGVjdGlvbihkLndpbiksaz1bXSxsPWkubGVuZ3RoLG09bC0xO20+PTA7LS1tKXtpZihnPWlbbV0saD1hLmNyZWF0ZVJhbmdlKGQuZG9jKSxnLmNvbGxhcHNlZCl7dmFyIG49YyhnLm1hcmtlcklkLGQuZG9jKTtpZihuKXtuLnN0eWxlLmRpc3BsYXk9XCJpbmxpbmVcIjt2YXIgbz1uLnByZXZpb3VzU2libGluZztvJiYzPT1vLm5vZGVUeXBlPyhuLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobiksaC5jb2xsYXBzZVRvUG9pbnQobyxvLmxlbmd0aCkpOihoLmNvbGxhcHNlQmVmb3JlKG4pLG4ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChuKSl9ZWxzZSBiLndhcm4oXCJNYXJrZXIgZWxlbWVudCBoYXMgYmVlbiByZW1vdmVkLiBDYW5ub3QgcmVzdG9yZSBzZWxlY3Rpb24uXCIpfWVsc2UgZShkLmRvYyxoLGcuc3RhcnRNYXJrZXJJZCwhMCksZShkLmRvYyxoLGcuZW5kTWFya2VySWQsITEpOzE9PWwmJmgubm9ybWFsaXplQm91bmRhcmllcygpLGtbbV09aH0xPT1sJiZmJiZhLmZlYXR1cmVzLnNlbGVjdGlvbkhhc0V4dGVuZCYmaVswXS5iYWNrd2FyZHM/KGoucmVtb3ZlQWxsUmFuZ2VzKCksai5hZGRSYW5nZShrWzBdLCEwKSk6ai5zZXRSYW5nZXMoayksZC5yZXN0b3JlZD0hMH19ZnVuY3Rpb24gaShhLGIpe3ZhciBkPWMoYixhKTtkJiZkLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZCl9ZnVuY3Rpb24gaihhKXtmb3IodmFyIGIsYz1hLnJhbmdlSW5mb3MsZD0wLGU9Yy5sZW5ndGg7ZT5kOysrZCliPWNbZF0sYi5jb2xsYXBzZWQ/aShhLmRvYyxiLm1hcmtlcklkKTooaShhLmRvYyxiLnN0YXJ0TWFya2VySWQpLGkoYS5kb2MsYi5lbmRNYXJrZXJJZCkpfWEucmVxdWlyZU1vZHVsZXMoW1wiRG9tVXRpbFwiLFwiRG9tUmFuZ2VcIixcIldyYXBwZWRSYW5nZVwiXSk7dmFyIGs9YS5kb20sbD1cIu+7v1wiO2Euc2F2ZVNlbGVjdGlvbj1nLGEucmVzdG9yZVNlbGVjdGlvbj1oLGEucmVtb3ZlTWFya2VyRWxlbWVudD1pLGEucmVtb3ZlTWFya2Vycz1qfSl9KHt9LGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KCkpOyIsIiFmdW5jdGlvbihhLGIpe2JbXCJ0cnVlXCJdPWEsLyoqXG4gKiBAbGljZW5zZSBBbmd1bGFySlMgdjEuMy4xMFxuICogKGMpIDIwMTAtMjAxNCBHb29nbGUsIEluYy4gaHR0cDovL2FuZ3VsYXJqcy5vcmdcbiAqIExpY2Vuc2U6IE1JVFxuICovXG5mdW5jdGlvbihhLGIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGMoKXt0aGlzLiRnZXQ9W1wiJCRzYW5pdGl6ZVVyaVwiLGZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiKXt2YXIgYz1bXTtyZXR1cm4gZihiLGsoYyxmdW5jdGlvbihiLGMpe3JldHVybiEvXnVuc2FmZS8udGVzdChhKGIsYykpfSkpLGMuam9pbihcIlwiKX19XX1mdW5jdGlvbiBkKGEpe3ZhciBjPVtdLGQ9ayhjLGIubm9vcCk7cmV0dXJuIGQuY2hhcnMoYSksYy5qb2luKFwiXCIpfWZ1bmN0aW9uIGUoYSl7dmFyIGIsYz17fSxkPWEuc3BsaXQoXCIsXCIpO2ZvcihiPTA7YjxkLmxlbmd0aDtiKyspY1tkW2JdXT0hMDtyZXR1cm4gY31mdW5jdGlvbiBmKGEsYyl7ZnVuY3Rpb24gZChhLGQsZixoKXtpZihkPWIubG93ZXJjYXNlKGQpLEFbZF0pZm9yKDtrLmxhc3QoKSYmQltrLmxhc3QoKV07KWUoXCJcIixrLmxhc3QoKSk7eltkXSYmay5sYXN0KCk9PWQmJmUoXCJcIixkKSxoPXdbZF18fCEhaCxofHxrLnB1c2goZCk7dmFyIGk9e307Zi5yZXBsYWNlKG8sZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1jfHxkfHxlfHxcIlwiO2lbYl09ZyhmKX0pLGMuc3RhcnQmJmMuc3RhcnQoZCxpLGgpfWZ1bmN0aW9uIGUoYSxkKXt2YXIgZSxmPTA7aWYoZD1iLmxvd2VyY2FzZShkKSlmb3IoZj1rLmxlbmd0aC0xO2Y+PTAmJmtbZl0hPWQ7Zi0tKTtpZihmPj0wKXtmb3IoZT1rLmxlbmd0aC0xO2U+PWY7ZS0tKWMuZW5kJiZjLmVuZChrW2VdKTtrLmxlbmd0aD1mfX1cInN0cmluZ1wiIT10eXBlb2YgYSYmKGE9bnVsbD09PWF8fFwidW5kZWZpbmVkXCI9PXR5cGVvZiBhP1wiXCI6XCJcIithKTt2YXIgZixoLGksaixrPVtdLHU9YTtmb3Ioay5sYXN0PWZ1bmN0aW9uKCl7cmV0dXJuIGtbay5sZW5ndGgtMV19O2E7KXtpZihqPVwiXCIsaD0hMCxrLmxhc3QoKSYmRFtrLmxhc3QoKV0/KGE9YS5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoW15dKik8XFxcXHMqXFxcXC9cXFxccypcIitrLmxhc3QoKStcIltePl0qPlwiLFwiaVwiKSxmdW5jdGlvbihhLGIpe3JldHVybiBiPWIucmVwbGFjZShyLFwiJDFcIikucmVwbGFjZSh0LFwiJDFcIiksYy5jaGFycyYmYy5jaGFycyhnKGIpKSxcIlwifSksZShcIlwiLGsubGFzdCgpKSk6KDA9PT1hLmluZGV4T2YoXCI8IS0tXCIpPyhmPWEuaW5kZXhPZihcIi0tXCIsNCksZj49MCYmYS5sYXN0SW5kZXhPZihcIi0tPlwiLGYpPT09ZiYmKGMuY29tbWVudCYmYy5jb21tZW50KGEuc3Vic3RyaW5nKDQsZikpLGE9YS5zdWJzdHJpbmcoZiszKSxoPSExKSk6cy50ZXN0KGEpPyhpPWEubWF0Y2gocyksaSYmKGE9YS5yZXBsYWNlKGlbMF0sXCJcIiksaD0hMSkpOnEudGVzdChhKT8oaT1hLm1hdGNoKG4pLGkmJihhPWEuc3Vic3RyaW5nKGlbMF0ubGVuZ3RoKSxpWzBdLnJlcGxhY2UobixlKSxoPSExKSk6cC50ZXN0KGEpJiYoaT1hLm1hdGNoKG0pLGk/KGlbNF0mJihhPWEuc3Vic3RyaW5nKGlbMF0ubGVuZ3RoKSxpWzBdLnJlcGxhY2UobSxkKSksaD0hMSk6KGorPVwiPFwiLGE9YS5zdWJzdHJpbmcoMSkpKSxoJiYoZj1hLmluZGV4T2YoXCI8XCIpLGorPTA+Zj9hOmEuc3Vic3RyaW5nKDAsZiksYT0wPmY/XCJcIjphLnN1YnN0cmluZyhmKSxjLmNoYXJzJiZjLmNoYXJzKGcoaikpKSksYT09dSl0aHJvdyBsKFwiYmFkcGFyc2VcIixcIlRoZSBzYW5pdGl6ZXIgd2FzIHVuYWJsZSB0byBwYXJzZSB0aGUgZm9sbG93aW5nIGJsb2NrIG9mIGh0bWw6IHswfVwiLGEpO3U9YX1lKCl9ZnVuY3Rpb24gZyhhKXtpZighYSlyZXR1cm5cIlwiO3ZhciBiPUsuZXhlYyhhKSxjPWJbMV0sZD1iWzNdLGU9YlsyXTtyZXR1cm4gZSYmKEouaW5uZXJIVE1MPWUucmVwbGFjZSgvPC9nLFwiJmx0O1wiKSxlPVwidGV4dENvbnRlbnRcImluIEo/Si50ZXh0Q29udGVudDpKLmlubmVyVGV4dCksYytlK2R9ZnVuY3Rpb24gaChhKXtyZXR1cm4gYS5yZXBsYWNlKC8mL2csXCImYW1wO1wiKS5yZXBsYWNlKHUsZnVuY3Rpb24oYSl7dmFyIGI9YS5jaGFyQ29kZUF0KDApLGM9YS5jaGFyQ29kZUF0KDEpO3JldHVyblwiJiNcIisoMTAyNCooYi01NTI5NikrKGMtNTYzMjApKzY1NTM2KStcIjtcIn0pLnJlcGxhY2UodixmdW5jdGlvbihhKXt2YXIgYj1hLmNoYXJDb2RlQXQoMCk7cmV0dXJuIDE1OT49Ynx8MTczPT1ifHxiPj0xNTM2JiYxNTQwPj1ifHwxODA3PT1ifHw2MDY4PT1ifHw2MDY5PT1ifHxiPj04MjA0JiY4MjA3Pj1ifHxiPj04MjMyJiY4MjM5Pj1ifHxiPj04Mjg4JiY4MzAzPj1ifHw2NTI3OT09Ynx8Yj49NjU1MjAmJjY1NTM1Pj1iP1wiJiNcIitiK1wiO1wiOmF9KS5yZXBsYWNlKC88L2csXCImbHQ7XCIpLnJlcGxhY2UoLz4vZyxcIiZndDtcIil9ZnVuY3Rpb24gaShhKXt2YXIgYz1cIlwiLGQ9YS5zcGxpdChcIjtcIik7cmV0dXJuIGIuZm9yRWFjaChkLGZ1bmN0aW9uKGEpe3ZhciBkPWEuc3BsaXQoXCI6XCIpO2lmKDI9PWQubGVuZ3RoKXt2YXIgZT1MKGIubG93ZXJjYXNlKGRbMF0pKSxhPUwoYi5sb3dlcmNhc2UoZFsxXSkpOygoXCJjb2xvclwiPT09ZXx8XCJiYWNrZ3JvdW5kLWNvbG9yXCI9PT1lKSYmKGEubWF0Y2goL15yZ2JcXChbMC05JSxcXC4gXSpcXCkkL2kpfHxhLm1hdGNoKC9ecmdiYVxcKFswLTklLFxcLiBdKlxcKSQvaSl8fGEubWF0Y2goL15oc2xcXChbMC05JSxcXC4gXSpcXCkkL2kpfHxhLm1hdGNoKC9eaHNsYVxcKFswLTklLFxcLiBdKlxcKSQvaSl8fGEubWF0Y2goL14jWzAtOWEtZl17Myw2fSQvaSl8fGEubWF0Y2goL15bYS16XSokL2kpKXx8XCJ0ZXh0LWFsaWduXCI9PT1lJiYoXCJsZWZ0XCI9PT1hfHxcInJpZ2h0XCI9PT1hfHxcImNlbnRlclwiPT09YXx8XCJqdXN0aWZ5XCI9PT1hKXx8XCJmbG9hdFwiPT09ZSYmKFwibGVmdFwiPT09YXx8XCJyaWdodFwiPT09YXx8XCJub25lXCI9PT1hKXx8KFwid2lkdGhcIj09PWV8fFwiaGVpZ2h0XCI9PT1lKSYmYS5tYXRjaCgvWzAtOVxcLl0qKHB4fGVtfHJlbXwlKS8pfHxcImRpcmVjdGlvblwiPT09ZSYmYS5tYXRjaCgvXmx0cnxydGx8aW5pdGlhbHxpbmhlcml0JC8pKSYmKGMrPWUrXCI6IFwiK2ErXCI7XCIpfX0pLGN9ZnVuY3Rpb24gaihhLGIsYyxkKXtyZXR1cm5cImltZ1wiPT09YSYmYltcInRhLWluc2VydC12aWRlb1wiXSYmKFwidGEtaW5zZXJ0LXZpZGVvXCI9PT1jfHxcImFsbG93ZnVsbHNjcmVlblwiPT09Y3x8XCJmcmFtZWJvcmRlclwiPT09Y3x8XCJjb250ZW50ZWRpdGFibGVcIj09PWMmJlwiZmFsc2VcIj09PWQpPyEwOiExfWZ1bmN0aW9uIGsoYSxjKXt2YXIgZD0hMSxlPWIuYmluZChhLGEucHVzaCk7cmV0dXJue3N0YXJ0OmZ1bmN0aW9uKGEsZixnKXthPWIubG93ZXJjYXNlKGEpLCFkJiZEW2FdJiYoZD1hKSxkfHxFW2FdIT09ITB8fChlKFwiPFwiKSxlKGEpLGIuZm9yRWFjaChmLGZ1bmN0aW9uKGQsZyl7dmFyIGs9Yi5sb3dlcmNhc2UoZyksbD1cImltZ1wiPT09YSYmXCJzcmNcIj09PWt8fFwiYmFja2dyb3VuZFwiPT09azsoXCJzdHlsZVwiPT09ayYmXCJcIiE9PShkPWkoZCkpfHxqKGEsZixrLGQpfHxJW2tdPT09ITAmJihGW2tdIT09ITB8fGMoZCxsKSkpJiYoZShcIiBcIiksZShnKSxlKCc9XCInKSxlKGgoZCkpLGUoJ1wiJykpfSksZShnP1wiLz5cIjpcIj5cIikpfSxlbmQ6ZnVuY3Rpb24oYSl7YT1iLmxvd2VyY2FzZShhKSxkfHxFW2FdIT09ITB8fChlKFwiPC9cIiksZShhKSxlKFwiPlwiKSksYT09ZCYmKGQ9ITEpfSxjaGFyczpmdW5jdGlvbihhKXtkfHxlKGgoYSkpfX19dmFyIGw9Yi4kJG1pbkVycihcIiRzYW5pdGl6ZVwiKSxtPS9ePCgoPzpbYS16QS1aXSlbXFx3Oi1dKikoKD86XFxzK1tcXHc6LV0rKD86XFxzKj1cXHMqKD86KD86XCJbXlwiXSpcIil8KD86J1teJ10qJyl8W14+XFxzXSspKT8pKilcXHMqKFxcLz8pXFxzKig+PykvLG49L148XFwvXFxzKihbXFx3Oi1dKylbXj5dKj4vLG89LyhbXFx3Oi1dKykoPzpcXHMqPVxccyooPzooPzpcIigoPzpbXlwiXSkqKVwiKXwoPzonKCg/OlteJ10pKiknKXwoW14+XFxzXSspKSk/L2cscD0vXjwvLHE9L148XFwvLyxyPS88IS0tKC4qPyktLT4vZyxzPS88IURPQ1RZUEUoW14+XSo/KT4vaSx0PS88IVxcW0NEQVRBXFxbKC4qPyldXT4vZyx1PS9bXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdL2csdj0vKFteXFwjLX58IHwhXSkvZyx3PWUoXCJhcmVhLGJyLGNvbCxocixpbWcsd2JyXCIpLHg9ZShcImNvbGdyb3VwLGRkLGR0LGxpLHAsdGJvZHksdGQsdGZvb3QsdGgsdGhlYWQsdHJcIikseT1lKFwicnAscnRcIiksej1iLmV4dGVuZCh7fSx5LHgpLEE9Yi5leHRlbmQoe30seCxlKFwiYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGJsb2NrcXVvdGUsY2FwdGlvbixjZW50ZXIsZGVsLGRpcixkaXYsZGwsZmlndXJlLGZpZ2NhcHRpb24sZm9vdGVyLGgxLGgyLGgzLGg0LGg1LGg2LGhlYWRlcixoZ3JvdXAsaHIsaW5zLG1hcCxtZW51LG5hdixvbCxwcmUsc2NyaXB0LHNlY3Rpb24sdGFibGUsdWxcIikpLEI9Yi5leHRlbmQoe30seSxlKFwiYSxhYmJyLGFjcm9ueW0sYixiZGksYmRvLGJpZyxicixjaXRlLGNvZGUsZGVsLGRmbixlbSxmb250LGksaW1nLGlucyxrYmQsbGFiZWwsbWFwLG1hcmsscSxydWJ5LHJwLHJ0LHMsc2FtcCxzbWFsbCxzcGFuLHN0cmlrZSxzdHJvbmcsc3ViLHN1cCx0aW1lLHR0LHUsdmFyXCIpKSxDPWUoXCJhbmltYXRlLGFuaW1hdGVDb2xvcixhbmltYXRlTW90aW9uLGFuaW1hdGVUcmFuc2Zvcm0sY2lyY2xlLGRlZnMsZGVzYyxlbGxpcHNlLGZvbnQtZmFjZSxmb250LWZhY2UtbmFtZSxmb250LWZhY2Utc3JjLGcsZ2x5cGgsaGtlcm4saW1hZ2UsbGluZWFyR3JhZGllbnQsbGluZSxtYXJrZXIsbWV0YWRhdGEsbWlzc2luZy1nbHlwaCxtcGF0aCxwYXRoLHBvbHlnb24scG9seWxpbmUscmFkaWFsR3JhZGllbnQscmVjdCxzZXQsc3RvcCxzdmcsc3dpdGNoLHRleHQsdGl0bGUsdHNwYW4sdXNlXCIpLEQ9ZShcInNjcmlwdCxzdHlsZVwiKSxFPWIuZXh0ZW5kKHt9LHcsQSxCLHosQyksRj1lKFwiYmFja2dyb3VuZCxjaXRlLGhyZWYsbG9uZ2Rlc2Msc3JjLHVzZW1hcCx4bGluazpocmVmXCIpLEc9ZShcImFiYnIsYWxpZ24sYWx0LGF4aXMsYmdjb2xvcixib3JkZXIsY2VsbHBhZGRpbmcsY2VsbHNwYWNpbmcsY2xhc3MsY2xlYXIsY29sb3IsY29scyxjb2xzcGFuLGNvbXBhY3QsY29vcmRzLGRpcixmYWNlLGhlYWRlcnMsaGVpZ2h0LGhyZWZsYW5nLGhzcGFjZSxpZCxpc21hcCxsYW5nLGxhbmd1YWdlLG5vaHJlZixub3dyYXAscmVsLHJldixyb3dzLHJvd3NwYW4scnVsZXMsc2NvcGUsc2Nyb2xsaW5nLHNoYXBlLHNpemUsc3BhbixzdGFydCxzdW1tYXJ5LHRhcmdldCx0aXRsZSx0eXBlLHZhbGlnbix2YWx1ZSx2c3BhY2Usd2lkdGhcIiksSD1lKFwiYWNjZW50LWhlaWdodCxhY2N1bXVsYXRlLGFkZGl0aXZlLGFscGhhYmV0aWMsYXJhYmljLWZvcm0sYXNjZW50LGF0dHJpYnV0ZU5hbWUsYXR0cmlidXRlVHlwZSxiYXNlUHJvZmlsZSxiYm94LGJlZ2luLGJ5LGNhbGNNb2RlLGNhcC1oZWlnaHQsY2xhc3MsY29sb3IsY29sb3ItcmVuZGVyaW5nLGNvbnRlbnQsY3gsY3ksZCxkeCxkeSxkZXNjZW50LGRpc3BsYXksZHVyLGVuZCxmaWxsLGZpbGwtcnVsZSxmb250LWZhbWlseSxmb250LXNpemUsZm9udC1zdHJldGNoLGZvbnQtc3R5bGUsZm9udC12YXJpYW50LGZvbnQtd2VpZ2h0LGZyb20sZngsZnksZzEsZzIsZ2x5cGgtbmFtZSxncmFkaWVudFVuaXRzLGhhbmdpbmcsaGVpZ2h0LGhvcml6LWFkdi14LGhvcml6LW9yaWdpbi14LGlkZW9ncmFwaGljLGssa2V5UG9pbnRzLGtleVNwbGluZXMsa2V5VGltZXMsbGFuZyxtYXJrZXItZW5kLG1hcmtlci1taWQsbWFya2VyLXN0YXJ0LG1hcmtlckhlaWdodCxtYXJrZXJVbml0cyxtYXJrZXJXaWR0aCxtYXRoZW1hdGljYWwsbWF4LG1pbixvZmZzZXQsb3BhY2l0eSxvcmllbnQsb3JpZ2luLG92ZXJsaW5lLXBvc2l0aW9uLG92ZXJsaW5lLXRoaWNrbmVzcyxwYW5vc2UtMSxwYXRoLHBhdGhMZW5ndGgscG9pbnRzLHByZXNlcnZlQXNwZWN0UmF0aW8scixyZWZYLHJlZlkscmVwZWF0Q291bnQscmVwZWF0RHVyLHJlcXVpcmVkRXh0ZW5zaW9ucyxyZXF1aXJlZEZlYXR1cmVzLHJlc3RhcnQscm90YXRlLHJ4LHJ5LHNsb3BlLHN0ZW1oLHN0ZW12LHN0b3AtY29sb3Isc3RvcC1vcGFjaXR5LHN0cmlrZXRocm91Z2gtcG9zaXRpb24sc3RyaWtldGhyb3VnaC10aGlja25lc3Msc3Ryb2tlLHN0cm9rZS1kYXNoYXJyYXksc3Ryb2tlLWRhc2hvZmZzZXQsc3Ryb2tlLWxpbmVjYXAsc3Ryb2tlLWxpbmVqb2luLHN0cm9rZS1taXRlcmxpbWl0LHN0cm9rZS1vcGFjaXR5LHN0cm9rZS13aWR0aCxzeXN0ZW1MYW5ndWFnZSx0YXJnZXQsdGV4dC1hbmNob3IsdG8sdHJhbnNmb3JtLHR5cGUsdTEsdTIsdW5kZXJsaW5lLXBvc2l0aW9uLHVuZGVybGluZS10aGlja25lc3MsdW5pY29kZSx1bmljb2RlLXJhbmdlLHVuaXRzLXBlci1lbSx2YWx1ZXMsdmVyc2lvbix2aWV3Qm94LHZpc2liaWxpdHksd2lkdGgsd2lkdGhzLHgseC1oZWlnaHQseDEseDIseGxpbms6YWN0dWF0ZSx4bGluazphcmNyb2xlLHhsaW5rOnJvbGUseGxpbms6c2hvdyx4bGluazp0aXRsZSx4bGluazp0eXBlLHhtbDpiYXNlLHhtbDpsYW5nLHhtbDpzcGFjZSx4bWxucyx4bWxuczp4bGluayx5LHkxLHkyLHpvb21BbmRQYW5cIiksST1iLmV4dGVuZCh7fSxGLEgsRyksSj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicHJlXCIpLEs9L14oXFxzKikoW1xcc1xcU10qPykoXFxzKikkLyxMPWZ1bmN0aW9uKCl7cmV0dXJuIFN0cmluZy5wcm90b3R5cGUudHJpbT9mdW5jdGlvbihhKXtyZXR1cm4gYi5pc1N0cmluZyhhKT9hLnRyaW0oKTphfTpmdW5jdGlvbihhKXtyZXR1cm4gYi5pc1N0cmluZyhhKT9hLnJlcGxhY2UoL15cXHNcXHMqLyxcIlwiKS5yZXBsYWNlKC9cXHNcXHMqJC8sXCJcIik6YX19KCk7Yi5tb2R1bGUoXCJuZ1Nhbml0aXplXCIsW10pLnByb3ZpZGVyKFwiJHNhbml0aXplXCIsYyksYi5tb2R1bGUoXCJuZ1Nhbml0aXplXCIpLmZpbHRlcihcImxpbmt5XCIsW1wiJHNhbml0aXplXCIsZnVuY3Rpb24oYSl7dmFyIGM9LygoZnRwfGh0dHBzPyk6XFwvXFwvfCh3d3dcXC4pfChtYWlsdG86KT9bQS1aYS16MC05Ll8lKy1dK0ApXFxTKlteXFxzLjssKCl7fTw+XCLigJ3igJldLyxlPS9ebWFpbHRvOi87cmV0dXJuIGZ1bmN0aW9uKGYsZyl7ZnVuY3Rpb24gaChhKXthJiZuLnB1c2goZChhKSl9ZnVuY3Rpb24gaShhLGMpe24ucHVzaChcIjxhIFwiKSxiLmlzRGVmaW5lZChnKSYmbi5wdXNoKCd0YXJnZXQ9XCInLGcsJ1wiICcpLG4ucHVzaCgnaHJlZj1cIicsYS5yZXBsYWNlKC9cIi9nLFwiJnF1b3Q7XCIpLCdcIj4nKSxoKGMpLG4ucHVzaChcIjwvYT5cIil9aWYoIWYpcmV0dXJuIGY7Zm9yKHZhciBqLGssbCxtPWYsbj1bXTtqPW0ubWF0Y2goYyk7KWs9alswXSxqWzJdfHxqWzRdfHwoaz0oalszXT9cImh0dHA6Ly9cIjpcIm1haWx0bzpcIikrayksbD1qLmluZGV4LGgobS5zdWJzdHIoMCxsKSksaShrLGpbMF0ucmVwbGFjZShlLFwiXCIpKSxtPW0uc3Vic3RyaW5nKGwralswXS5sZW5ndGgpO3JldHVybiBoKG0pLGEobi5qb2luKFwiXCIpKX19XSl9KHdpbmRvdyx3aW5kb3cuYW5ndWxhcil9KHt9LGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KCkpOyIsIiFmdW5jdGlvbihhLGIpe2JbXCJ0cnVlXCJdPWEsLypcbkBsaWNlbnNlIHRleHRBbmd1bGFyXG5BdXRob3IgOiBBdXN0aW4gQW5kZXJzb25cbkxpY2Vuc2UgOiAyMDEzIE1JVFxuVmVyc2lvbiAxLjMuN1xuXG5TZWUgUkVBRE1FLm1kIG9yIGh0dHBzOi8vZ2l0aHViLmNvbS9mcmF5d2luZy90ZXh0QW5ndWxhci93aWtpIGZvciByZXF1aXJlbWVudHMgYW5kIHVzZS5cbiovXG5hbmd1bGFyLm1vZHVsZShcInRleHRBbmd1bGFyU2V0dXBcIixbXSkudmFsdWUoXCJ0YU9wdGlvbnNcIix7dG9vbGJhcjpbW1wiaDFcIixcImgyXCIsXCJoM1wiLFwiaDRcIixcImg1XCIsXCJoNlwiLFwicFwiLFwicHJlXCIsXCJxdW90ZVwiXSxbXCJib2xkXCIsXCJpdGFsaWNzXCIsXCJ1bmRlcmxpbmVcIixcInN0cmlrZVRocm91Z2hcIixcInVsXCIsXCJvbFwiLFwicmVkb1wiLFwidW5kb1wiLFwiY2xlYXJcIl0sW1wianVzdGlmeUxlZnRcIixcImp1c3RpZnlDZW50ZXJcIixcImp1c3RpZnlSaWdodFwiLFwiaW5kZW50XCIsXCJvdXRkZW50XCJdLFtcImh0bWxcIixcImluc2VydEltYWdlXCIsXCJpbnNlcnRMaW5rXCIsXCJpbnNlcnRWaWRlb1wiLFwid29yZGNvdW50XCIsXCJjaGFyY291bnRcIl1dLGNsYXNzZXM6e2ZvY3Vzc2VkOlwiZm9jdXNzZWRcIix0b29sYmFyOlwiYnRuLXRvb2xiYXJcIix0b29sYmFyR3JvdXA6XCJidG4tZ3JvdXBcIix0b29sYmFyQnV0dG9uOlwiYnRuIGJ0bi1kZWZhdWx0XCIsdG9vbGJhckJ1dHRvbkFjdGl2ZTpcImFjdGl2ZVwiLGRpc2FibGVkOlwiZGlzYWJsZWRcIix0ZXh0RWRpdG9yOlwiZm9ybS1jb250cm9sXCIsaHRtbEVkaXRvcjpcImZvcm0tY29udHJvbFwifSxzZXR1cDp7dGV4dEVkaXRvclNldHVwOmZ1bmN0aW9uKCl7fSxodG1sRWRpdG9yU2V0dXA6ZnVuY3Rpb24oKXt9fSxkZWZhdWx0RmlsZURyb3BIYW5kbGVyOmZ1bmN0aW9uKGEsYil7dmFyIGM9bmV3IEZpbGVSZWFkZXI7cmV0dXJuXCJpbWFnZVwiPT09YS50eXBlLnN1YnN0cmluZygwLDUpPyhjLm9ubG9hZD1mdW5jdGlvbigpe1wiXCIhPT1jLnJlc3VsdCYmYihcImluc2VydEltYWdlXCIsYy5yZXN1bHQsITApfSxjLnJlYWRBc0RhdGFVUkwoYSksITApOiExfX0pLnZhbHVlKFwidGFTZWxlY3RhYmxlRWxlbWVudHNcIixbXCJhXCIsXCJpbWdcIl0pLnZhbHVlKFwidGFDdXN0b21SZW5kZXJlcnNcIixbe3NlbGVjdG9yOlwiaW1nXCIsY3VzdG9tQXR0cmlidXRlOlwidGEtaW5zZXJ0LXZpZGVvXCIscmVuZGVyTG9naWM6ZnVuY3Rpb24oYSl7dmFyIGI9YW5ndWxhci5lbGVtZW50KFwiPGlmcmFtZT48L2lmcmFtZT5cIiksYz1hLnByb3AoXCJhdHRyaWJ1dGVzXCIpO2FuZ3VsYXIuZm9yRWFjaChjLGZ1bmN0aW9uKGEpe2IuYXR0cihhLm5hbWUsYS52YWx1ZSl9KSxiLmF0dHIoXCJzcmNcIixiLmF0dHIoXCJ0YS1pbnNlcnQtdmlkZW9cIikpLGEucmVwbGFjZVdpdGgoYil9fV0pLnZhbHVlKFwidGFUcmFuc2xhdGlvbnNcIix7aHRtbDp7dG9vbHRpcDpcIlRvZ2dsZSBodG1sIC8gUmljaCBUZXh0XCJ9LGhlYWRpbmc6e3Rvb2x0aXA6XCJIZWFkaW5nIFwifSxwOnt0b29sdGlwOlwiUGFyYWdyYXBoXCJ9LHByZTp7dG9vbHRpcDpcIlByZWZvcm1hdHRlZCB0ZXh0XCJ9LHVsOnt0b29sdGlwOlwiVW5vcmRlcmVkIExpc3RcIn0sb2w6e3Rvb2x0aXA6XCJPcmRlcmVkIExpc3RcIn0scXVvdGU6e3Rvb2x0aXA6XCJRdW90ZS91bnFvdXRlIHNlbGVjdGlvbiBvciBwYXJhZ3JhcGhcIn0sdW5kbzp7dG9vbHRpcDpcIlVuZG9cIn0scmVkbzp7dG9vbHRpcDpcIlJlZG9cIn0sYm9sZDp7dG9vbHRpcDpcIkJvbGRcIn0saXRhbGljOnt0b29sdGlwOlwiSXRhbGljXCJ9LHVuZGVybGluZTp7dG9vbHRpcDpcIlVuZGVybGluZVwifSxzdHJpa2VUaHJvdWdoOnt0b29sdGlwOlwiU3RyaWtldGhyb3VnaFwifSxqdXN0aWZ5TGVmdDp7dG9vbHRpcDpcIkFsaWduIHRleHQgbGVmdFwifSxqdXN0aWZ5UmlnaHQ6e3Rvb2x0aXA6XCJBbGlnbiB0ZXh0IHJpZ2h0XCJ9LGp1c3RpZnlDZW50ZXI6e3Rvb2x0aXA6XCJDZW50ZXJcIn0saW5kZW50Ont0b29sdGlwOlwiSW5jcmVhc2UgaW5kZW50XCJ9LG91dGRlbnQ6e3Rvb2x0aXA6XCJEZWNyZWFzZSBpbmRlbnRcIn0sY2xlYXI6e3Rvb2x0aXA6XCJDbGVhciBmb3JtYXR0aW5nXCJ9LGluc2VydEltYWdlOntkaWFsb2dQcm9tcHQ6XCJQbGVhc2UgZW50ZXIgYW4gaW1hZ2UgVVJMIHRvIGluc2VydFwiLHRvb2x0aXA6XCJJbnNlcnQgaW1hZ2VcIixob3RrZXk6XCJ0aGUgLSBwb3NzaWJseSBsYW5ndWFnZSBkZXBlbmRlbnQgaG90a2V5IC4uLiBmb3Igc29tZSBmdXR1cmUgaW1wbGVtZW50YXRpb25cIn0saW5zZXJ0VmlkZW86e3Rvb2x0aXA6XCJJbnNlcnQgdmlkZW9cIixkaWFsb2dQcm9tcHQ6XCJQbGVhc2UgZW50ZXIgYSB5b3V0dWJlIFVSTCB0byBlbWJlZFwifSxpbnNlcnRMaW5rOnt0b29sdGlwOlwiSW5zZXJ0IC8gZWRpdCBsaW5rXCIsZGlhbG9nUHJvbXB0OlwiUGxlYXNlIGVudGVyIGEgVVJMIHRvIGluc2VydFwifSxlZGl0TGluazp7cmVMaW5rQnV0dG9uOnt0b29sdGlwOlwiUmVsaW5rXCJ9LHVuTGlua0J1dHRvbjp7dG9vbHRpcDpcIlVubGlua1wifSx0YXJnZXRUb2dnbGU6e2J1dHRvbnRleHQ6XCJPcGVuIGluIE5ldyBXaW5kb3dcIn19LHdvcmRjb3VudDp7dG9vbHRpcDpcIkRpc3BsYXkgd29yZHMgQ291bnRcIn0sY2hhcmNvdW50Ont0b29sdGlwOlwiRGlzcGxheSBjaGFyYWN0ZXJzIENvdW50XCJ9fSkucnVuKFtcInRhUmVnaXN0ZXJUb29sXCIsXCIkd2luZG93XCIsXCJ0YVRyYW5zbGF0aW9uc1wiLFwidGFTZWxlY3Rpb25cIixmdW5jdGlvbihhLGIsYyxkKXthKFwiaHRtbFwiLHtpY29uY2xhc3M6XCJmYSBmYS1jb2RlXCIsdG9vbHRpcHRleHQ6Yy5odG1sLnRvb2x0aXAsYWN0aW9uOmZ1bmN0aW9uKCl7dGhpcy4kZWRpdG9yKCkuc3dpdGNoVmlldygpfSxhY3RpdmVTdGF0ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLiRlZGl0b3IoKS5zaG93SHRtbH19KTt2YXIgZT1mdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kZWRpdG9yKCkucXVlcnlGb3JtYXRCbG9ja1N0YXRlKGEpfX0sZj1mdW5jdGlvbigpe3JldHVybiB0aGlzLiRlZGl0b3IoKS53cmFwU2VsZWN0aW9uKFwiZm9ybWF0QmxvY2tcIixcIjxcIit0aGlzLm5hbWUudG9VcHBlckNhc2UoKStcIj5cIil9O2FuZ3VsYXIuZm9yRWFjaChbXCJoMVwiLFwiaDJcIixcImgzXCIsXCJoNFwiLFwiaDVcIixcImg2XCJdLGZ1bmN0aW9uKGIpe2EoYi50b0xvd2VyQ2FzZSgpLHtidXR0b250ZXh0OmIudG9VcHBlckNhc2UoKSx0b29sdGlwdGV4dDpjLmhlYWRpbmcudG9vbHRpcCtiLmNoYXJBdCgxKSxhY3Rpb246ZixhY3RpdmVTdGF0ZTplKGIudG9Mb3dlckNhc2UoKSl9KX0pLGEoXCJwXCIse2J1dHRvbnRleHQ6XCJQXCIsdG9vbHRpcHRleHQ6Yy5wLnRvb2x0aXAsYWN0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGVkaXRvcigpLndyYXBTZWxlY3Rpb24oXCJmb3JtYXRCbG9ja1wiLFwiPFA+XCIpfSxhY3RpdmVTdGF0ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLiRlZGl0b3IoKS5xdWVyeUZvcm1hdEJsb2NrU3RhdGUoXCJwXCIpfX0pLGEoXCJwcmVcIix7YnV0dG9udGV4dDpcInByZVwiLHRvb2x0aXB0ZXh0OmMucHJlLnRvb2x0aXAsYWN0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGVkaXRvcigpLndyYXBTZWxlY3Rpb24oXCJmb3JtYXRCbG9ja1wiLFwiPFBSRT5cIil9LGFjdGl2ZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGVkaXRvcigpLnF1ZXJ5Rm9ybWF0QmxvY2tTdGF0ZShcInByZVwiKX19KSxhKFwidWxcIix7aWNvbmNsYXNzOlwiZmEgZmEtbGlzdC11bFwiLHRvb2x0aXB0ZXh0OmMudWwudG9vbHRpcCxhY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kZWRpdG9yKCkud3JhcFNlbGVjdGlvbihcImluc2VydFVub3JkZXJlZExpc3RcIixudWxsKX0sYWN0aXZlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kZWRpdG9yKCkucXVlcnlDb21tYW5kU3RhdGUoXCJpbnNlcnRVbm9yZGVyZWRMaXN0XCIpfX0pLGEoXCJvbFwiLHtpY29uY2xhc3M6XCJmYSBmYS1saXN0LW9sXCIsdG9vbHRpcHRleHQ6Yy5vbC50b29sdGlwLGFjdGlvbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLiRlZGl0b3IoKS53cmFwU2VsZWN0aW9uKFwiaW5zZXJ0T3JkZXJlZExpc3RcIixudWxsKX0sYWN0aXZlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kZWRpdG9yKCkucXVlcnlDb21tYW5kU3RhdGUoXCJpbnNlcnRPcmRlcmVkTGlzdFwiKX19KSxhKFwicXVvdGVcIix7aWNvbmNsYXNzOlwiZmEgZmEtcXVvdGUtcmlnaHRcIix0b29sdGlwdGV4dDpjLnF1b3RlLnRvb2x0aXAsYWN0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGVkaXRvcigpLndyYXBTZWxlY3Rpb24oXCJmb3JtYXRCbG9ja1wiLFwiPEJMT0NLUVVPVEU+XCIpfSxhY3RpdmVTdGF0ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLiRlZGl0b3IoKS5xdWVyeUZvcm1hdEJsb2NrU3RhdGUoXCJibG9ja3F1b3RlXCIpfX0pLGEoXCJ1bmRvXCIse2ljb25jbGFzczpcImZhIGZhLXVuZG9cIix0b29sdGlwdGV4dDpjLnVuZG8udG9vbHRpcCxhY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kZWRpdG9yKCkud3JhcFNlbGVjdGlvbihcInVuZG9cIixudWxsKX19KSxhKFwicmVkb1wiLHtpY29uY2xhc3M6XCJmYSBmYS1yZXBlYXRcIix0b29sdGlwdGV4dDpjLnJlZG8udG9vbHRpcCxhY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kZWRpdG9yKCkud3JhcFNlbGVjdGlvbihcInJlZG9cIixudWxsKX19KSxhKFwiYm9sZFwiLHtpY29uY2xhc3M6XCJmYSBmYS1ib2xkXCIsdG9vbHRpcHRleHQ6Yy5ib2xkLnRvb2x0aXAsYWN0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGVkaXRvcigpLndyYXBTZWxlY3Rpb24oXCJib2xkXCIsbnVsbCl9LGFjdGl2ZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGVkaXRvcigpLnF1ZXJ5Q29tbWFuZFN0YXRlKFwiYm9sZFwiKX0sY29tbWFuZEtleUNvZGU6OTh9KSxhKFwianVzdGlmeUxlZnRcIix7aWNvbmNsYXNzOlwiZmEgZmEtYWxpZ24tbGVmdFwiLHRvb2x0aXB0ZXh0OmMuanVzdGlmeUxlZnQudG9vbHRpcCxhY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kZWRpdG9yKCkud3JhcFNlbGVjdGlvbihcImp1c3RpZnlMZWZ0XCIsbnVsbCl9LGFjdGl2ZVN0YXRlOmZ1bmN0aW9uKGEpe3ZhciBiPSExO3JldHVybiBhJiYoYj1cImxlZnRcIj09PWEuY3NzKFwidGV4dC1hbGlnblwiKXx8XCJsZWZ0XCI9PT1hLmF0dHIoXCJhbGlnblwiKXx8XCJyaWdodFwiIT09YS5jc3MoXCJ0ZXh0LWFsaWduXCIpJiZcImNlbnRlclwiIT09YS5jc3MoXCJ0ZXh0LWFsaWduXCIpJiZcImp1c3RpZnlcIiE9PWEuY3NzKFwidGV4dC1hbGlnblwiKSYmIXRoaXMuJGVkaXRvcigpLnF1ZXJ5Q29tbWFuZFN0YXRlKFwianVzdGlmeVJpZ2h0XCIpJiYhdGhpcy4kZWRpdG9yKCkucXVlcnlDb21tYW5kU3RhdGUoXCJqdXN0aWZ5Q2VudGVyXCIpJiYhdGhpcy4kZWRpdG9yKCkucXVlcnlDb21tYW5kU3RhdGUoXCJqdXN0aWZ5RnVsbFwiKSksYj1ifHx0aGlzLiRlZGl0b3IoKS5xdWVyeUNvbW1hbmRTdGF0ZShcImp1c3RpZnlMZWZ0XCIpfX0pLGEoXCJqdXN0aWZ5UmlnaHRcIix7aWNvbmNsYXNzOlwiZmEgZmEtYWxpZ24tcmlnaHRcIix0b29sdGlwdGV4dDpjLmp1c3RpZnlSaWdodC50b29sdGlwLGFjdGlvbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLiRlZGl0b3IoKS53cmFwU2VsZWN0aW9uKFwianVzdGlmeVJpZ2h0XCIsbnVsbCl9LGFjdGl2ZVN0YXRlOmZ1bmN0aW9uKGEpe3ZhciBiPSExO3JldHVybiBhJiYoYj1cInJpZ2h0XCI9PT1hLmNzcyhcInRleHQtYWxpZ25cIikpLGI9Ynx8dGhpcy4kZWRpdG9yKCkucXVlcnlDb21tYW5kU3RhdGUoXCJqdXN0aWZ5UmlnaHRcIil9fSksYShcImp1c3RpZnlDZW50ZXJcIix7aWNvbmNsYXNzOlwiZmEgZmEtYWxpZ24tY2VudGVyXCIsdG9vbHRpcHRleHQ6Yy5qdXN0aWZ5Q2VudGVyLnRvb2x0aXAsYWN0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGVkaXRvcigpLndyYXBTZWxlY3Rpb24oXCJqdXN0aWZ5Q2VudGVyXCIsbnVsbCl9LGFjdGl2ZVN0YXRlOmZ1bmN0aW9uKGEpe3ZhciBiPSExO3JldHVybiBhJiYoYj1cImNlbnRlclwiPT09YS5jc3MoXCJ0ZXh0LWFsaWduXCIpKSxiPWJ8fHRoaXMuJGVkaXRvcigpLnF1ZXJ5Q29tbWFuZFN0YXRlKFwianVzdGlmeUNlbnRlclwiKX19KSxhKFwiaW5kZW50XCIse2ljb25jbGFzczpcImZhIGZhLWluZGVudFwiLHRvb2x0aXB0ZXh0OmMuaW5kZW50LnRvb2x0aXAsYWN0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGVkaXRvcigpLndyYXBTZWxlY3Rpb24oXCJpbmRlbnRcIixudWxsKX0sYWN0aXZlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kZWRpdG9yKCkucXVlcnlGb3JtYXRCbG9ja1N0YXRlKFwiYmxvY2txdW90ZVwiKX19KSxhKFwib3V0ZGVudFwiLHtpY29uY2xhc3M6XCJmYSBmYS1vdXRkZW50XCIsdG9vbHRpcHRleHQ6Yy5vdXRkZW50LnRvb2x0aXAsYWN0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGVkaXRvcigpLndyYXBTZWxlY3Rpb24oXCJvdXRkZW50XCIsbnVsbCl9LGFjdGl2ZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuITF9fSksYShcIml0YWxpY3NcIix7aWNvbmNsYXNzOlwiZmEgZmEtaXRhbGljXCIsdG9vbHRpcHRleHQ6Yy5pdGFsaWMudG9vbHRpcCxhY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kZWRpdG9yKCkud3JhcFNlbGVjdGlvbihcIml0YWxpY1wiLG51bGwpfSxhY3RpdmVTdGF0ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLiRlZGl0b3IoKS5xdWVyeUNvbW1hbmRTdGF0ZShcIml0YWxpY1wiKX0sY29tbWFuZEtleUNvZGU6MTA1fSksYShcInVuZGVybGluZVwiLHtpY29uY2xhc3M6XCJmYSBmYS11bmRlcmxpbmVcIix0b29sdGlwdGV4dDpjLnVuZGVybGluZS50b29sdGlwLGFjdGlvbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLiRlZGl0b3IoKS53cmFwU2VsZWN0aW9uKFwidW5kZXJsaW5lXCIsbnVsbCl9LGFjdGl2ZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGVkaXRvcigpLnF1ZXJ5Q29tbWFuZFN0YXRlKFwidW5kZXJsaW5lXCIpfSxjb21tYW5kS2V5Q29kZToxMTd9KSxhKFwic3RyaWtlVGhyb3VnaFwiLHtpY29uY2xhc3M6XCJmYSBmYS1zdHJpa2V0aHJvdWdoXCIsYWN0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGVkaXRvcigpLndyYXBTZWxlY3Rpb24oXCJzdHJpa2VUaHJvdWdoXCIsbnVsbCl9LGFjdGl2ZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGRvY3VtZW50LnF1ZXJ5Q29tbWFuZFN0YXRlKFwic3RyaWtlVGhyb3VnaFwiKX19KSxhKFwiY2xlYXJcIix7aWNvbmNsYXNzOlwiZmEgZmEtYmFuXCIsdG9vbHRpcHRleHQ6Yy5jbGVhci50b29sdGlwLGFjdGlvbjpmdW5jdGlvbihhLGIpe3ZhciBjO3RoaXMuJGVkaXRvcigpLndyYXBTZWxlY3Rpb24oXCJyZW1vdmVGb3JtYXRcIixudWxsKTt2YXIgZT1hbmd1bGFyLmVsZW1lbnQoZC5nZXRTZWxlY3Rpb25FbGVtZW50KCkpLGY9ZnVuY3Rpb24oYSl7YT1hbmd1bGFyLmVsZW1lbnQoYSk7dmFyIGI9YTthbmd1bGFyLmZvckVhY2goYS5jaGlsZHJlbigpLGZ1bmN0aW9uKGEpe3ZhciBjPWFuZ3VsYXIuZWxlbWVudChcIjxwPjwvcD5cIik7Yy5odG1sKGFuZ3VsYXIuZWxlbWVudChhKS5odG1sKCkpLGIuYWZ0ZXIoYyksYj1jfSksYS5yZW1vdmUoKX07aWYoYW5ndWxhci5mb3JFYWNoKGUuZmluZChcInVsXCIpLGYpLGFuZ3VsYXIuZm9yRWFjaChlLmZpbmQoXCJvbFwiKSxmKSxcImxpXCI9PT1lWzBdLnRhZ05hbWUudG9Mb3dlckNhc2UoKSl7dmFyIGc9ZVswXS5wYXJlbnROb2RlLmNoaWxkTm9kZXMsaD1bXSxpPVtdLGo9ITE7Zm9yKGM9MDtjPGcubGVuZ3RoO2MrKylnW2NdPT09ZVswXT9qPSEwOmo/aS5wdXNoKGdbY10pOmgucHVzaChnW2NdKTt2YXIgaz1hbmd1bGFyLmVsZW1lbnQoZVswXS5wYXJlbnROb2RlKSxsPWFuZ3VsYXIuZWxlbWVudChcIjxwPjwvcD5cIik7aWYobC5odG1sKGFuZ3VsYXIuZWxlbWVudChlWzBdKS5odG1sKCkpLDA9PT1oLmxlbmd0aHx8MD09PWkubGVuZ3RoKTA9PT1pLmxlbmd0aD9rLmFmdGVyKGwpOmtbMF0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobFswXSxrWzBdKSwwPT09aC5sZW5ndGgmJjA9PT1pLmxlbmd0aD9rLnJlbW92ZSgpOmFuZ3VsYXIuZWxlbWVudChlWzBdKS5yZW1vdmUoKTtlbHNle3ZhciBtPWFuZ3VsYXIuZWxlbWVudChcIjxcIitrWzBdLnRhZ05hbWUrXCI+PC9cIitrWzBdLnRhZ05hbWUrXCI+XCIpLG49YW5ndWxhci5lbGVtZW50KFwiPFwiK2tbMF0udGFnTmFtZStcIj48L1wiK2tbMF0udGFnTmFtZStcIj5cIik7Zm9yKGM9MDtjPGgubGVuZ3RoO2MrKyltLmFwcGVuZChhbmd1bGFyLmVsZW1lbnQoaFtjXSkpO2ZvcihjPTA7YzxpLmxlbmd0aDtjKyspbi5hcHBlbmQoYW5ndWxhci5lbGVtZW50KGlbY10pKTtrLmFmdGVyKG4pLGsuYWZ0ZXIobCksay5hZnRlcihtKSxrLnJlbW92ZSgpfWQuc2V0U2VsZWN0aW9uVG9FbGVtZW50RW5kKGxbMF0pfXZhciBvPXRoaXMuJGVkaXRvcigpLHA9ZnVuY3Rpb24oYSl7YT1hbmd1bGFyLmVsZW1lbnQoYSksYVswXSE9PW8uZGlzcGxheUVsZW1lbnRzLnRleHRbMF0mJmEucmVtb3ZlQXR0cihcImNsYXNzXCIpLGFuZ3VsYXIuZm9yRWFjaChhLmNoaWxkcmVuKCkscCl9O2FuZ3VsYXIuZm9yRWFjaChlLHApLFwibGlcIiE9PWVbMF0udGFnTmFtZS50b0xvd2VyQ2FzZSgpJiZcIm9sXCIhPT1lWzBdLnRhZ05hbWUudG9Mb3dlckNhc2UoKSYmXCJ1bFwiIT09ZVswXS50YWdOYW1lLnRvTG93ZXJDYXNlKCkmJnRoaXMuJGVkaXRvcigpLndyYXBTZWxlY3Rpb24oXCJmb3JtYXRCbG9ja1wiLFwiZGVmYXVsdFwiKSxiKCl9fSk7dmFyIGc9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWZ1bmN0aW9uKCl7Yy51cGRhdGVUYUJpbmR0YVRleHRFbGVtZW50KCksYy5oaWRlUG9wb3ZlcigpfTthLnByZXZlbnREZWZhdWx0KCksYy5kaXNwbGF5RWxlbWVudHMucG9wb3Zlci5jc3MoXCJ3aWR0aFwiLFwiMzc1cHhcIik7dmFyIGU9Yy5kaXNwbGF5RWxlbWVudHMucG9wb3ZlckNvbnRhaW5lcjtlLmVtcHR5KCk7dmFyIGY9YW5ndWxhci5lbGVtZW50KCc8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwXCIgc3R5bGU9XCJwYWRkaW5nLXJpZ2h0OiA2cHg7XCI+JyksZz1hbmd1bGFyLmVsZW1lbnQoJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbSBidG4tc21hbGxcIiB1bnNlbGVjdGFibGU9XCJvblwiIHRhYmluZGV4PVwiLTFcIj4xMDAlIDwvYnV0dG9uPicpO2cub24oXCJjbGlja1wiLGZ1bmN0aW9uKGEpe2EucHJldmVudERlZmF1bHQoKSxiLmNzcyh7d2lkdGg6XCIxMDAlXCIsaGVpZ2h0OlwiXCJ9KSxkKCl9KTt2YXIgaD1hbmd1bGFyLmVsZW1lbnQoJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbSBidG4tc21hbGxcIiB1bnNlbGVjdGFibGU9XCJvblwiIHRhYmluZGV4PVwiLTFcIj41MCUgPC9idXR0b24+Jyk7aC5vbihcImNsaWNrXCIsZnVuY3Rpb24oYSl7YS5wcmV2ZW50RGVmYXVsdCgpLGIuY3NzKHt3aWR0aDpcIjUwJVwiLGhlaWdodDpcIlwifSksZCgpfSk7dmFyIGk9YW5ndWxhci5lbGVtZW50KCc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBidG4tc20gYnRuLXNtYWxsXCIgdW5zZWxlY3RhYmxlPVwib25cIiB0YWJpbmRleD1cIi0xXCI+MjUlIDwvYnV0dG9uPicpO2kub24oXCJjbGlja1wiLGZ1bmN0aW9uKGEpe2EucHJldmVudERlZmF1bHQoKSxiLmNzcyh7d2lkdGg6XCIyNSVcIixoZWlnaHQ6XCJcIn0pLGQoKX0pO3ZhciBqPWFuZ3VsYXIuZWxlbWVudCgnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIGJ0bi1zbWFsbFwiIHVuc2VsZWN0YWJsZT1cIm9uXCIgdGFiaW5kZXg9XCItMVwiPlJlc2V0PC9idXR0b24+Jyk7ai5vbihcImNsaWNrXCIsZnVuY3Rpb24oYSl7YS5wcmV2ZW50RGVmYXVsdCgpLGIuY3NzKHt3aWR0aDpcIlwiLGhlaWdodDpcIlwifSksZCgpfSksZi5hcHBlbmQoZyksZi5hcHBlbmQoaCksZi5hcHBlbmQoaSksZi5hcHBlbmQoaiksZS5hcHBlbmQoZiksZj1hbmd1bGFyLmVsZW1lbnQoJzxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIiBzdHlsZT1cInBhZGRpbmctcmlnaHQ6IDZweDtcIj4nKTt2YXIgaz1hbmd1bGFyLmVsZW1lbnQoJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbSBidG4tc21hbGxcIiB1bnNlbGVjdGFibGU9XCJvblwiIHRhYmluZGV4PVwiLTFcIj48aSBjbGFzcz1cImZhIGZhLWFsaWduLWxlZnRcIj48L2k+PC9idXR0b24+Jyk7ay5vbihcImNsaWNrXCIsZnVuY3Rpb24oYSl7YS5wcmV2ZW50RGVmYXVsdCgpLGIuY3NzKFwiZmxvYXRcIixcImxlZnRcIiksYi5jc3MoXCJjc3NGbG9hdFwiLFwibGVmdFwiKSxiLmNzcyhcInN0eWxlRmxvYXRcIixcImxlZnRcIiksZCgpfSk7dmFyIGw9YW5ndWxhci5lbGVtZW50KCc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBidG4tc20gYnRuLXNtYWxsXCIgdW5zZWxlY3RhYmxlPVwib25cIiB0YWJpbmRleD1cIi0xXCI+PGkgY2xhc3M9XCJmYSBmYS1hbGlnbi1yaWdodFwiPjwvaT48L2J1dHRvbj4nKTtsLm9uKFwiY2xpY2tcIixmdW5jdGlvbihhKXthLnByZXZlbnREZWZhdWx0KCksYi5jc3MoXCJmbG9hdFwiLFwicmlnaHRcIiksYi5jc3MoXCJjc3NGbG9hdFwiLFwicmlnaHRcIiksYi5jc3MoXCJzdHlsZUZsb2F0XCIsXCJyaWdodFwiKSxkKCl9KTt2YXIgbT1hbmd1bGFyLmVsZW1lbnQoJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbSBidG4tc21hbGxcIiB1bnNlbGVjdGFibGU9XCJvblwiIHRhYmluZGV4PVwiLTFcIj48aSBjbGFzcz1cImZhIGZhLWFsaWduLWp1c3RpZnlcIj48L2k+PC9idXR0b24+Jyk7bS5vbihcImNsaWNrXCIsZnVuY3Rpb24oYSl7YS5wcmV2ZW50RGVmYXVsdCgpLGIuY3NzKFwiZmxvYXRcIixcIlwiKSxiLmNzcyhcImNzc0Zsb2F0XCIsXCJcIiksYi5jc3MoXCJzdHlsZUZsb2F0XCIsXCJcIiksZCgpfSksZi5hcHBlbmQoayksZi5hcHBlbmQobSksZi5hcHBlbmQobCksZS5hcHBlbmQoZiksZj1hbmd1bGFyLmVsZW1lbnQoJzxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIj4nKTt2YXIgbj1hbmd1bGFyLmVsZW1lbnQoJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbSBidG4tc21hbGxcIiB1bnNlbGVjdGFibGU9XCJvblwiIHRhYmluZGV4PVwiLTFcIj48aSBjbGFzcz1cImZhIGZhLXRyYXNoLW9cIj48L2k+PC9idXR0b24+Jyk7bi5vbihcImNsaWNrXCIsZnVuY3Rpb24oYSl7YS5wcmV2ZW50RGVmYXVsdCgpLGIucmVtb3ZlKCksZCgpfSksZi5hcHBlbmQobiksZS5hcHBlbmQoZiksYy5zaG93UG9wb3ZlcihiKSxjLnNob3dSZXNpemVPdmVybGF5KGIpfTthKFwiaW5zZXJ0SW1hZ2VcIix7aWNvbmNsYXNzOlwiZmEgZmEtcGljdHVyZS1vXCIsdG9vbHRpcHRleHQ6Yy5pbnNlcnRJbWFnZS50b29sdGlwLGFjdGlvbjpmdW5jdGlvbigpe3ZhciBhO3JldHVybiBhPWIucHJvbXB0KGMuaW5zZXJ0SW1hZ2UuZGlhbG9nUHJvbXB0LFwiaHR0cDovL1wiKSxhJiZcIlwiIT09YSYmXCJodHRwOi8vXCIhPT1hP3RoaXMuJGVkaXRvcigpLndyYXBTZWxlY3Rpb24oXCJpbnNlcnRJbWFnZVwiLGEsITApOnZvaWQgMH0sb25FbGVtZW50U2VsZWN0OntlbGVtZW50OlwiaW1nXCIsYWN0aW9uOmd9fSksYShcImluc2VydFZpZGVvXCIse2ljb25jbGFzczpcImZhIGZhLXlvdXR1YmUtcGxheVwiLHRvb2x0aXB0ZXh0OmMuaW5zZXJ0VmlkZW8udG9vbHRpcCxhY3Rpb246ZnVuY3Rpb24oKXt2YXIgYTtpZihhPWIucHJvbXB0KGMuaW5zZXJ0VmlkZW8uZGlhbG9nUHJvbXB0LFwiaHR0cHM6Ly9cIiksYSYmXCJcIiE9PWEmJlwiaHR0cHM6Ly9cIiE9PWEpe3ZhciBkPWEubWF0Y2goLyhcXD98Jil2PVteJl0qLyk7aWYoZCYmZC5sZW5ndGg+MCl7dmFyIGU9XCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC9cIitkWzBdLnN1YnN0cmluZygzKSxmPSc8aW1nIGNsYXNzPVwidGEtaW5zZXJ0LXZpZGVvXCIgc3JjPVwiaHR0cHM6Ly9pbWcueW91dHViZS5jb20vdmkvJytkWzBdLnN1YnN0cmluZygzKSsnL2hxZGVmYXVsdC5qcGdcIiB0YS1pbnNlcnQtdmlkZW89XCInK2UrJ1wiIGNvbnRlbnRlZGl0YWJsZT1cImZhbHNlXCIgc3JjPVwiXCIgYWxsb3dmdWxsc2NyZWVuPVwidHJ1ZVwiIGZyYW1lYm9yZGVyPVwiMFwiIC8+JztyZXR1cm4gdGhpcy4kZWRpdG9yKCkud3JhcFNlbGVjdGlvbihcImluc2VydEhUTUxcIixmLCEwKX19fSxvbkVsZW1lbnRTZWxlY3Q6e2VsZW1lbnQ6XCJpbWdcIixvbmx5V2l0aEF0dHJzOltcInRhLWluc2VydC12aWRlb1wiXSxhY3Rpb246Z319KSxhKFwiaW5zZXJ0TGlua1wiLHt0b29sdGlwdGV4dDpjLmluc2VydExpbmsudG9vbHRpcCxpY29uY2xhc3M6XCJmYSBmYS1saW5rXCIsYWN0aW9uOmZ1bmN0aW9uKCl7dmFyIGE7cmV0dXJuIGE9Yi5wcm9tcHQoYy5pbnNlcnRMaW5rLmRpYWxvZ1Byb21wdCxcImh0dHA6Ly9cIiksYSYmXCJcIiE9PWEmJlwiaHR0cDovL1wiIT09YT90aGlzLiRlZGl0b3IoKS53cmFwU2VsZWN0aW9uKFwiY3JlYXRlTGlua1wiLGEsITApOnZvaWQgMH0sYWN0aXZlU3RhdGU6ZnVuY3Rpb24oYSl7cmV0dXJuIGE/XCJBXCI9PT1hWzBdLnRhZ05hbWU6ITF9LG9uRWxlbWVudFNlbGVjdDp7ZWxlbWVudDpcImFcIixhY3Rpb246ZnVuY3Rpb24oYSxkLGUpe2EucHJldmVudERlZmF1bHQoKSxlLmRpc3BsYXlFbGVtZW50cy5wb3BvdmVyLmNzcyhcIndpZHRoXCIsXCI0MzVweFwiKTt2YXIgZj1lLmRpc3BsYXlFbGVtZW50cy5wb3BvdmVyQ29udGFpbmVyO2YuZW1wdHkoKSxmLmNzcyhcImxpbmUtaGVpZ2h0XCIsXCIyOHB4XCIpO3ZhciBnPWFuZ3VsYXIuZWxlbWVudCgnPGEgaHJlZj1cIicrZC5hdHRyKFwiaHJlZlwiKSsnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+JytkLmF0dHIoXCJocmVmXCIpK1wiPC9hPlwiKTtnLmNzcyh7ZGlzcGxheTpcImlubGluZS1ibG9ja1wiLFwibWF4LXdpZHRoXCI6XCIyMDBweFwiLG92ZXJmbG93OlwiaGlkZGVuXCIsXCJ0ZXh0LW92ZXJmbG93XCI6XCJlbGxpcHNpc1wiLFwid2hpdGUtc3BhY2VcIjpcIm5vd3JhcFwiLFwidmVydGljYWwtYWxpZ25cIjpcIm1pZGRsZVwifSksZi5hcHBlbmQoZyk7dmFyIGg9YW5ndWxhci5lbGVtZW50KCc8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwIHB1bGwtcmlnaHRcIj4nKSxpPWFuZ3VsYXIuZWxlbWVudCgnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIGJ0bi1zbWFsbFwiIHRhYmluZGV4PVwiLTFcIiB1bnNlbGVjdGFibGU9XCJvblwiIHRpdGxlPVwiJytjLmVkaXRMaW5rLnJlTGlua0J1dHRvbi50b29sdGlwKydcIj48aSBjbGFzcz1cImZhIGZhLWVkaXQgaWNvbi1lZGl0XCI+PC9pPjwvYnV0dG9uPicpO2kub24oXCJjbGlja1wiLGZ1bmN0aW9uKGEpe2EucHJldmVudERlZmF1bHQoKTt2YXIgZj1iLnByb21wdChjLmluc2VydExpbmsuZGlhbG9nUHJvbXB0LGQuYXR0cihcImhyZWZcIikpO2YmJlwiXCIhPT1mJiZcImh0dHA6Ly9cIiE9PWYmJihkLmF0dHIoXCJocmVmXCIsZiksZS51cGRhdGVUYUJpbmR0YVRleHRFbGVtZW50KCkpLGUuaGlkZVBvcG92ZXIoKX0pLGguYXBwZW5kKGkpO3ZhciBqPWFuZ3VsYXIuZWxlbWVudCgnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIGJ0bi1zbWFsbFwiIHRhYmluZGV4PVwiLTFcIiB1bnNlbGVjdGFibGU9XCJvblwiIHRpdGxlPVwiJytjLmVkaXRMaW5rLnVuTGlua0J1dHRvbi50b29sdGlwKydcIj48aSBjbGFzcz1cImZhIGZhLXVubGluayBpY29uLXVubGlua1wiPjwvaT48L2J1dHRvbj4nKTtqLm9uKFwiY2xpY2tcIixmdW5jdGlvbihhKXthLnByZXZlbnREZWZhdWx0KCksZC5yZXBsYWNlV2l0aChkLmNvbnRlbnRzKCkpLGUudXBkYXRlVGFCaW5kdGFUZXh0RWxlbWVudCgpLGUuaGlkZVBvcG92ZXIoKX0pLGguYXBwZW5kKGopO3ZhciBrPWFuZ3VsYXIuZWxlbWVudCgnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIGJ0bi1zbWFsbFwiIHRhYmluZGV4PVwiLTFcIiB1bnNlbGVjdGFibGU9XCJvblwiPicrYy5lZGl0TGluay50YXJnZXRUb2dnbGUuYnV0dG9udGV4dCtcIjwvYnV0dG9uPlwiKTtcIl9ibGFua1wiPT09ZC5hdHRyKFwidGFyZ2V0XCIpJiZrLmFkZENsYXNzKFwiYWN0aXZlXCIpLGsub24oXCJjbGlja1wiLGZ1bmN0aW9uKGEpe2EucHJldmVudERlZmF1bHQoKSxkLmF0dHIoXCJ0YXJnZXRcIixcIl9ibGFua1wiPT09ZC5hdHRyKFwidGFyZ2V0XCIpP1wiXCI6XCJfYmxhbmtcIiksay50b2dnbGVDbGFzcyhcImFjdGl2ZVwiKSxlLnVwZGF0ZVRhQmluZHRhVGV4dEVsZW1lbnQoKX0pLGguYXBwZW5kKGspLGYuYXBwZW5kKGgpLGUuc2hvd1BvcG92ZXIoZCl9fX0pLGEoXCJ3b3JkY291bnRcIix7ZGlzcGxheTonPGRpdiBpZD1cInRvb2xiYXJXQ1wiIHN0eWxlPVwiZGlzcGxheTpibG9jazsgbWluLXdpZHRoOjEwMHB4O1wiPldvcmRzOnt7d29yZGNvdW50fX08L2Rpdj4nLGRpc2FibGVkOiEwLHdvcmRjb3VudDowLGFjdGl2ZVN0YXRlOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy4kZWRpdG9yKCkuZGlzcGxheUVsZW1lbnRzLnRleHQsYj1hWzBdLmlubmVySFRNTCxjPWIucmVwbGFjZSgvKDxbXj5dKj8+KS9naSxcIiBcIiksZD1jLm1hdGNoKC9cXFMrL2cpLGU9ZCYmZC5sZW5ndGh8fDA7cmV0dXJuIHRoaXMud29yZGNvdW50PWUsdGhpcy4kZWRpdG9yKCkud29yZGNvdW50PWUsITF9fSksYShcImNoYXJjb3VudFwiLHtkaXNwbGF5Oic8ZGl2IGlkPVwidG9vbGJhckNDXCIgc3R5bGU9XCJkaXNwbGF5OmJsb2NrOyBtaW4td2lkdGg6MTIwcHg7XCI+Q2hhcmFjdGVyczp7e2NoYXJjb3VudH19PC9kaXY+JyxkaXNhYmxlZDohMCxjaGFyY291bnQ6MCxhY3RpdmVTdGF0ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuJGVkaXRvcigpLmRpc3BsYXlFbGVtZW50cy50ZXh0LGI9YVswXS5pbm5lclRleHR8fGFbMF0udGV4dENvbnRlbnQsYz1iLnJlcGxhY2UoLyhcXHJcXG58XFxufFxccikvZ20sXCJcIikucmVwbGFjZSgvXlxccysvZyxcIiBcIikucmVwbGFjZSgvXFxzKyQvZyxcIiBcIikubGVuZ3RoO3JldHVybiB0aGlzLmNoYXJjb3VudD1jLHRoaXMuJGVkaXRvcigpLmNoYXJjb3VudD1jLCExfX0pfV0pLC8qXG5AbGljZW5zZSB0ZXh0QW5ndWxhclxuQXV0aG9yIDogQXVzdGluIEFuZGVyc29uXG5MaWNlbnNlIDogMjAxMyBNSVRcblZlcnNpb24gMS4zLjdcblxuU2VlIFJFQURNRS5tZCBvciBodHRwczovL2dpdGh1Yi5jb20vZnJheXdpbmcvdGV4dEFuZ3VsYXIvd2lraSBmb3IgcmVxdWlyZW1lbnRzIGFuZCB1c2UuXG4qL1xuZnVuY3Rpb24oKXtcIlVzZSBTdHJpY3RcIjtmdW5jdGlvbiBhKGEpe3RyeXtyZXR1cm4gMCE9PWFuZ3VsYXIuZWxlbWVudChhKS5sZW5ndGh9Y2F0Y2goYil7cmV0dXJuITF9fWZ1bmN0aW9uIGIoYixjKXtpZighYnx8XCJcIj09PWJ8fHIuaGFzT3duUHJvcGVydHkoYikpdGhyb3dcInRleHRBbmd1bGFyIEVycm9yOiBBIHVuaXF1ZSBuYW1lIGlzIHJlcXVpcmVkIGZvciBhIFRvb2wgRGVmaW5pdGlvblwiO2lmKGMuZGlzcGxheSYmKFwiXCI9PT1jLmRpc3BsYXl8fCFhKGMuZGlzcGxheSkpfHwhYy5kaXNwbGF5JiYhYy5idXR0b250ZXh0JiYhYy5pY29uY2xhc3MpdGhyb3cndGV4dEFuZ3VsYXIgRXJyb3I6IFRvb2wgRGVmaW5pdGlvbiBmb3IgXCInK2IrJ1wiIGRvZXMgbm90IGhhdmUgYSB2YWxpZCBkaXNwbGF5L2ljb25jbGFzcy9idXR0b250ZXh0IHZhbHVlJztyW2JdPWN9dmFyIGM9e2llOmZ1bmN0aW9uKCl7Zm9yKHZhciBhLGI9MyxjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksZD1jLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaVwiKTtjLmlubmVySFRNTD1cIjwhLS1baWYgZ3QgSUUgXCIrICsrYitcIl0+PGk+PC9pPjwhW2VuZGlmXS0tPlwiLGRbMF07KTtyZXR1cm4gYj40P2I6YX0oKSx3ZWJraXQ6L0FwcGxlV2ViS2l0XFwvKFtcXGQuXSspL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KX0sZD0hMTtjLndlYmtpdCYmKGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIixmdW5jdGlvbihhKXt2YXIgYj1hfHx3aW5kb3cuZXZlbnQsYz1iLnRhcmdldDtpZihkJiZudWxsIT09Yyl7Zm9yKHZhciBlPSExLGY9YztudWxsIT09ZiYmXCJodG1sXCIhPT1mLnRhZ05hbWUudG9Mb3dlckNhc2UoKSYmIWU7KWU9XCJ0cnVlXCI9PT1mLmNvbnRlbnRFZGl0YWJsZSxmPWYucGFyZW50Tm9kZTtlfHwoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZXh0QW5ndWxhci1lZGl0YWJsZUZpeC0wMTAyMDMwNDA1MDYwNzA4MDlcIikuc2V0U2VsZWN0aW9uUmFuZ2UoMCwwKSxjLmZvY3VzKCksYy5zZWxlY3QmJmMuc2VsZWN0KCkpfWQ9ITF9LCExKSxhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7YW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmJvZHkpLmFwcGVuZChhbmd1bGFyLmVsZW1lbnQoJzxpbnB1dCBpZD1cInRleHRBbmd1bGFyLWVkaXRhYmxlRml4LTAxMDIwMzA0MDUwNjA3MDgwOVwiIGNsYXNzPVwidGEtaGlkZGVuLWlucHV0XCIgdW5zZWxlY3RhYmxlPVwib25cIiB0YWJJbmRleD1cIi0xXCI+JykpfSkpO3ZhciBlPS9eKGFkZHJlc3N8YXJ0aWNsZXxhc2lkZXxhdWRpb3xibG9ja3F1b3RlfGNhbnZhc3xkZHxkaXZ8ZGx8ZmllbGRzZXR8ZmlnY2FwdGlvbnxmaWd1cmV8Zm9vdGVyfGZvcm18aDF8aDJ8aDN8aDR8aDV8aDZ8aGVhZGVyfGhncm91cHxocnxub3NjcmlwdHxvbHxvdXRwdXR8cHxwcmV8c2VjdGlvbnx0YWJsZXx0Zm9vdHx1bHx2aWRlbykkL2ksZj0vXih1bHxsaXxvbCkkL2ksZz0vXihhZGRyZXNzfGFydGljbGV8YXNpZGV8YXVkaW98YmxvY2txdW90ZXxjYW52YXN8ZGR8ZGl2fGRsfGZpZWxkc2V0fGZpZ2NhcHRpb258ZmlndXJlfGZvb3Rlcnxmb3JtfGgxfGgyfGgzfGg0fGg1fGg2fGhlYWRlcnxoZ3JvdXB8aHJ8bm9zY3JpcHR8b2x8b3V0cHV0fHB8cHJlfHNlY3Rpb258dGFibGV8dGZvb3R8dWx8dmlkZW98bGkpJC9pO1N0cmluZy5wcm90b3R5cGUudHJpbXx8KFN0cmluZy5wcm90b3R5cGUudHJpbT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlcGxhY2UoL15cXHMrfFxccyskL2csXCJcIil9KTt2YXIgaCxpLGssbCxtO2lmKGMuaWU+OHx8dm9pZCAwPT09Yy5pZSl7Zm9yKHZhciBuPWRvY3VtZW50LnN0eWxlU2hlZXRzLG89MDtvPG4ubGVuZ3RoO28rKylpZigoMD09PW5bb10ubWVkaWEubGVuZ3RofHxuW29dLm1lZGlhLm1lZGlhVGV4dC5tYXRjaCgvKGFsbHxzY3JlZW4pL2dpKSkmJm5bb10uaHJlZiYmbltvXS5ocmVmLm1hdGNoKC90ZXh0YW5ndWxhclxcLihtaW5cXC58KWNzcy9naSkpe2g9bltvXTticmVha31ofHwoaD1mdW5jdGlvbigpe3ZhciBhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtyZXR1cm4gYy53ZWJraXQmJmEuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJcIikpLGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXS5hcHBlbmRDaGlsZChhKSxhLnNoZWV0fSgpKSxpPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGwoaCxhLGIpfSxsPWZ1bmN0aW9uKGEsYixjKXt2YXIgZDtyZXR1cm4gYS5jc3NSdWxlcz9kPU1hdGgubWF4KGEuY3NzUnVsZXMubGVuZ3RoLTEsMCk6YS5ydWxlcyYmKGQ9TWF0aC5tYXgoYS5ydWxlcy5sZW5ndGgtMSwwKSksYS5pbnNlcnRSdWxlP2EuaW5zZXJ0UnVsZShiK1wie1wiK2MrXCJ9XCIsZCk6YS5hZGRSdWxlKGIsYyxkKSxkfSxrPWZ1bmN0aW9uKGEpe20oaCxhKX0sbT1mdW5jdGlvbihhLGIpe2EucmVtb3ZlUnVsZT9hLnJlbW92ZVJ1bGUoYik6YS5kZWxldGVSdWxlKGIpfX1hbmd1bGFyLm1vZHVsZShcInRleHRBbmd1bGFyLmZhY3Rvcmllc1wiLFtdKS5mYWN0b3J5KFwidGFCcm93c2VyVGFnXCIsW2Z1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGEpe3JldHVybiBhP1wiXCI9PT1hP3ZvaWQgMD09PWMuaWU/XCJkaXZcIjpjLmllPD04P1wiUFwiOlwicFwiOmMuaWU8PTg/YS50b1VwcGVyQ2FzZSgpOmE6Yy5pZTw9OD9cIlBcIjpcInBcIn19XSkuZmFjdG9yeShcInRhQXBwbHlDdXN0b21SZW5kZXJlcnNcIixbXCJ0YUN1c3RvbVJlbmRlcmVyc1wiLFwidGFET01cIixmdW5jdGlvbihhLGIpe3JldHVybiBmdW5jdGlvbihjKXt2YXIgZD1hbmd1bGFyLmVsZW1lbnQoXCI8ZGl2PjwvZGl2PlwiKTtyZXR1cm4gZFswXS5pbm5lckhUTUw9Yyxhbmd1bGFyLmZvckVhY2goYSxmdW5jdGlvbihhKXt2YXIgYz1bXTthLnNlbGVjdG9yJiZcIlwiIT09YS5zZWxlY3Rvcj9jPWQuZmluZChhLnNlbGVjdG9yKTphLmN1c3RvbUF0dHJpYnV0ZSYmXCJcIiE9PWEuY3VzdG9tQXR0cmlidXRlJiYoYz1iLmdldEJ5QXR0cmlidXRlKGQsYS5jdXN0b21BdHRyaWJ1dGUpKSxhbmd1bGFyLmZvckVhY2goYyxmdW5jdGlvbihiKXtiPWFuZ3VsYXIuZWxlbWVudChiKSxhLnNlbGVjdG9yJiZcIlwiIT09YS5zZWxlY3RvciYmYS5jdXN0b21BdHRyaWJ1dGUmJlwiXCIhPT1hLmN1c3RvbUF0dHJpYnV0ZT92b2lkIDAhPT1iLmF0dHIoYS5jdXN0b21BdHRyaWJ1dGUpJiZhLnJlbmRlckxvZ2ljKGIpOmEucmVuZGVyTG9naWMoYil9KX0pLGRbMF0uaW5uZXJIVE1MfX1dKS5mYWN0b3J5KFwidGFGaXhDaHJvbWVcIixmdW5jdGlvbigpe3ZhciBhPWZ1bmN0aW9uKGEpe2lmKCFhfHwhYW5ndWxhci5pc1N0cmluZyhhKXx8YS5sZW5ndGg8PTApcmV0dXJuIGE7Zm9yKHZhciBiLGMsZCxlPS88KFtePlxcL10rPylzdHlsZT0oXCIoW15cIl0rKVwifCcoW14nXSspJykoW14+XSopPi9naSxmPVwiXCIsZz0wO2I9ZS5leGVjKGEpOyljPWJbM118fGJbNF0sYyYmYy5tYXRjaCgvbGluZS1oZWlnaHQ6IDEuNDI4NTcxNDI5O3xjb2xvcjogaW5oZXJpdDsgbGluZS1oZWlnaHQ6IDEuMTsvaSkmJihjPWMucmVwbGFjZSgvKCB8KWZvbnQtZmFtaWx5OiBpbmhlcml0O3woIHwpbGluZS1oZWlnaHQ6IDEuNDI4NTcxNDI5O3woIHwpbGluZS1oZWlnaHQ6MS4xO3woIHwpY29sb3I6IGluaGVyaXQ7L2dpLFwiXCIpLGQ9XCI8XCIrYlsxXS50cmltKCksYy5sZW5ndGg+MCYmKGQrPVwiIHN0eWxlPVwiK2JbMl0uc3Vic3RyaW5nKDAsMSkrYytiWzJdLnN1YnN0cmluZygwLDEpKSxkKz1iWzVdLnRyaW0oKStcIj5cIixmKz1hLnN1YnN0cmluZyhnLGIuaW5kZXgpK2QsZz1iLmluZGV4K2JbMF0ubGVuZ3RoKTtyZXR1cm4gZis9YS5zdWJzdHJpbmcoZyksZz4wP2YucmVwbGFjZSgvPHNwYW5cXHMqPiguKj8pPFxcL3NwYW4+KDxicihcXC98KT58KS9naSxcIiQxXCIpOmF9O3JldHVybiBhfSkuZmFjdG9yeShcInRhU2FuaXRpemVcIixbXCIkc2FuaXRpemVcIixcInRhRE9NXCIsZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihhLGIpe2Zvcih2YXIgYyxkPTAsZT0wLGY9LzxbXj5dKj4vZ2k7Yz1mLmV4ZWMoYSk7KWlmKGU9Yy5pbmRleCxcIi9cIj09PWNbMF0uc3Vic3RyKDEsMSkpe2lmKDA9PT1kKWJyZWFrO2QtLX1lbHNlIGQrKztyZXR1cm4gYithLnN1YnN0cmluZygwLGUpK2FuZ3VsYXIuZWxlbWVudChiKVswXS5vdXRlckhUTUwuc3Vic3RyaW5nKGIubGVuZ3RoKSthLnN1YnN0cmluZyhlKX1mdW5jdGlvbiBjKGEpe2lmKCFhfHwhYW5ndWxhci5pc1N0cmluZyhhKXx8YS5sZW5ndGg8PTApcmV0dXJuIGE7Zm9yKHZhciBkLGYsZyxoLGosaz0vPChbXj5cXC9dKz8pc3R5bGU9KFwiKFteXCJdKylcInwnKFteJ10rKScpKFtePl0qKT4vZ2ksbD1cIlwiLG09XCJcIixuPTA7Zj1rLmV4ZWMoYSk7KXtnPWZbM118fGZbNF07dmFyIG89bmV3IFJlZ0V4cChpLFwiaVwiKTtpZihhbmd1bGFyLmlzU3RyaW5nKGcpJiZvLnRlc3QoZykpe2g9XCJcIjtmb3IodmFyIHA9bmV3IFJlZ0V4cChpLFwiaWdcIik7c3ViTWF0Y2g9cC5leGVjKGcpOylmb3IoZD0wO2Q8ZS5sZW5ndGg7ZCsrKXN1Yk1hdGNoWzIqZCsyXSYmKGgrPVwiPFwiK2VbZF0udGFnK1wiPlwiKTtqPWMoYS5zdWJzdHJpbmcobixmLmluZGV4KSksbSs9bC5sZW5ndGg+MD9iKGosbCk6aixnPWcucmVwbGFjZShuZXcgUmVnRXhwKGksXCJpZ1wiKSxcIlwiKSxtKz1cIjxcIitmWzFdLnRyaW0oKSxnLmxlbmd0aD4wJiYobSs9JyBzdHlsZT1cIicrZysnXCInKSxtKz1mWzVdK1wiPlwiLG49Zi5pbmRleCtmWzBdLmxlbmd0aCxsPWh9fXJldHVybiBtKz1sLmxlbmd0aD4wP2IoYS5zdWJzdHJpbmcobiksbCk6YS5zdWJzdHJpbmcobil9ZnVuY3Rpb24gZChhKXtpZighYXx8IWFuZ3VsYXIuaXNTdHJpbmcoYSl8fGEubGVuZ3RoPD0wKXJldHVybiBhO2Zvcih2YXIgYixjPS88KFtePlxcL10rPylhbGlnbj0oXCIoW15cIl0rKVwifCcoW14nXSspJykoW14+XSopPi9naSxkPVwiXCIsZT0wO2I9Yy5leGVjKGEpOylkKz1hLnN1YnN0cmluZyhlLGIuaW5kZXgpLGU9Yi5pbmRleCtiWzBdLmxlbmd0aCxuZXdUYWc9XCI8XCIrYlsxXStiWzVdLC9zdHlsZT0oXCIoW15cIl0rKVwifCcoW14nXSspJykvZ2kudGVzdChuZXdUYWcpP25ld1RhZz1uZXdUYWcucmVwbGFjZSgvc3R5bGU9KFwiKFteXCJdKylcInwnKFteJ10rKScpL2ksJ3N0eWxlPVwiJDIkMyB0ZXh0LWFsaWduOicrKGJbM118fGJbNF0pKyc7XCInKTpuZXdUYWcrPScgc3R5bGU9XCJ0ZXh0LWFsaWduOicrKGJbM118fGJbNF0pKyc7XCInLG5ld1RhZys9XCI+XCIsZCs9bmV3VGFnO3JldHVybiBkK2Euc3Vic3RyaW5nKGUpfWZvcih2YXIgZT1be3Byb3BlcnR5OlwiZm9udC13ZWlnaHRcIix2YWx1ZXM6W1wiYm9sZFwiXSx0YWc6XCJiXCJ9LHtwcm9wZXJ0eTpcImZvbnQtc3R5bGVcIix2YWx1ZXM6W1wiaXRhbGljXCJdLHRhZzpcImlcIn1dLGY9W10sZz0wO2c8ZS5sZW5ndGg7ZysrKXt2YXIgaD1cIihcIitlW2ddLnByb3BlcnR5K1wiOlxcXFxzKihcIjtmb3Ioaj0wO2o8ZVtnXS52YWx1ZXMubGVuZ3RoO2orKylqPjAmJihoKz1cInxcIiksaCs9ZVtnXS52YWx1ZXNbal07aCs9XCIpOylcIixmLnB1c2goaCl9dmFyIGk9XCIoXCIrZi5qb2luKFwifFwiKStcIilcIjtyZXR1cm4gZnVuY3Rpb24oYixlLGYpe2lmKCFmKXRyeXtiPWMoYil9Y2F0Y2goZyl7fWI9ZChiKTt2YXIgaDt0cnl7aD1hKGIpLGYmJihoPWIpfWNhdGNoKGcpe2g9ZXx8XCJcIn12YXIgaT1oLm1hdGNoKC8oPHByZVtePl0qPi4qPzxcXC9wcmVbXj5dKj4pL2dpKTtwcm9jZXNzZWRTYWZlPWgucmVwbGFjZSgvKCYjKDl8MTApOykqL2dpLFwiXCIpO3ZhciBqLGs9LzxwcmVbXj5dKj4uKj88XFwvcHJlW14+XSo+L2dpLGw9MCxtPTA7Zm9yKGg9XCJcIjtudWxsIT09KGo9ay5leGVjKHByb2Nlc3NlZFNhZmUpKSYmbDxpLmxlbmd0aDspaCs9cHJvY2Vzc2VkU2FmZS5zdWJzdHJpbmcobSxqLmluZGV4KStpW2xdLG09ai5pbmRleCtqWzBdLmxlbmd0aCxsKys7cmV0dXJuIGgrcHJvY2Vzc2VkU2FmZS5zdWJzdHJpbmcobSl9fV0pLmZhY3RvcnkoXCJ0YVRvb2xFeGVjdXRlQWN0aW9uXCIsW1wiJHFcIixcIiRsb2dcIixmdW5jdGlvbihhLGIpe3JldHVybiBmdW5jdGlvbihjKXt2b2lkIDAhPT1jJiYodGhpcy4kZWRpdG9yPWZ1bmN0aW9uKCl7cmV0dXJuIGN9KTt2YXIgZD1hLmRlZmVyKCksZT1kLnByb21pc2UsZj10aGlzLiRlZGl0b3IoKTtlW1wiZmluYWxseVwiXShmdW5jdGlvbigpe2YuZW5kQWN0aW9uLmNhbGwoZil9KTt2YXIgZzt0cnl7Zz10aGlzLmFjdGlvbihkLGYuc3RhcnRBY3Rpb24oKSl9Y2F0Y2goaCl7Yi5lcnJvcihoKX0oZ3x8dm9pZCAwPT09ZykmJmQucmVzb2x2ZSgpfX1dKSxhbmd1bGFyLm1vZHVsZShcInRleHRBbmd1bGFyLkRPTVwiLFtcInRleHRBbmd1bGFyLmZhY3Rvcmllc1wiXSkuZmFjdG9yeShcInRhRXhlY0NvbW1hbmRcIixbXCJ0YVNlbGVjdGlvblwiLFwidGFCcm93c2VyVGFnXCIsXCIkZG9jdW1lbnRcIixmdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZnVuY3Rpb24oYixjKXt2YXIgZCxlLGY9Yi5maW5kKFwibGlcIik7Zm9yKGU9Zi5sZW5ndGgtMTtlPj0wO2UtLSlkPWFuZ3VsYXIuZWxlbWVudChcIjxcIitjK1wiPlwiK2ZbZV0uaW5uZXJIVE1MK1wiPC9cIitjK1wiPlwiKSxiLmFmdGVyKGQpO2IucmVtb3ZlKCksYS5zZXRTZWxlY3Rpb25Ub0VsZW1lbnRFbmQoZFswXSl9LGc9ZnVuY3Rpb24oYil7Lyg8YnIofFxcLyk+KSQvaS50ZXN0KGIuaW5uZXJIVE1MLnRyaW0oKSk/YS5zZXRTZWxlY3Rpb25CZWZvcmVFbGVtZW50KGFuZ3VsYXIuZWxlbWVudChiKS5maW5kKFwiYnJcIilbMF0pOmEuc2V0U2VsZWN0aW9uVG9FbGVtZW50RW5kKGIpfSxoPWZ1bmN0aW9uKGEsYil7dmFyIGM9YW5ndWxhci5lbGVtZW50KFwiPFwiK2IrXCI+XCIrYVswXS5pbm5lckhUTUwrXCI8L1wiK2IrXCI+XCIpO2EuYWZ0ZXIoYyksYS5yZW1vdmUoKSxnKGMuZmluZChcImxpXCIpWzBdKX0saT1mdW5jdGlvbihhLGMsZCl7Zm9yKHZhciBlPVwiXCIsZj0wO2Y8YS5sZW5ndGg7ZisrKWUrPVwiPFwiK2IoXCJsaVwiKStcIj5cIithW2ZdLmlubmVySFRNTCtcIjwvXCIrYihcImxpXCIpK1wiPlwiO3ZhciBoPWFuZ3VsYXIuZWxlbWVudChcIjxcIitkK1wiPlwiK2UrXCI8L1wiK2QrXCI+XCIpO2MuYWZ0ZXIoaCksYy5yZW1vdmUoKSxnKGguZmluZChcImxpXCIpWzBdKX07cmV0dXJuIGZ1bmN0aW9uKGcsail7cmV0dXJuIGc9YihnKSxmdW5jdGlvbihrLGwsbSl7dmFyIG4sbyxwLHEscixzLHQsdT1hbmd1bGFyLmVsZW1lbnQoXCI8XCIrZytcIj5cIik7dHJ5e3Q9YS5nZXRTZWxlY3Rpb25FbGVtZW50KCl9Y2F0Y2godil7fXZhciB3PWFuZ3VsYXIuZWxlbWVudCh0KTtpZih2b2lkIDAhPT10KXt2YXIgeD10LnRhZ05hbWUudG9Mb3dlckNhc2UoKTtpZihcImluc2VydG9yZGVyZWRsaXN0XCI9PT1rLnRvTG93ZXJDYXNlKCl8fFwiaW5zZXJ0dW5vcmRlcmVkbGlzdFwiPT09ay50b0xvd2VyQ2FzZSgpKXt2YXIgeT1iKFwiaW5zZXJ0b3JkZXJlZGxpc3RcIj09PWsudG9Mb3dlckNhc2UoKT9cIm9sXCI6XCJ1bFwiKTtpZih4PT09eSlyZXR1cm4gZCh3LGcpO2lmKFwibGlcIj09PXgmJncucGFyZW50KClbMF0udGFnTmFtZS50b0xvd2VyQ2FzZSgpPT09eSYmMT09PXcucGFyZW50KCkuY2hpbGRyZW4oKS5sZW5ndGgpcmV0dXJuIGQody5wYXJlbnQoKSxnKTtpZihcImxpXCI9PT14JiZ3LnBhcmVudCgpWzBdLnRhZ05hbWUudG9Mb3dlckNhc2UoKSE9PXkmJjE9PT13LnBhcmVudCgpLmNoaWxkcmVuKCkubGVuZ3RoKXJldHVybiBoKHcucGFyZW50KCkseSk7aWYoeC5tYXRjaChlKSYmIXcuaGFzQ2xhc3MoXCJ0YS1iaW5kXCIpKXtpZihcIm9sXCI9PT14fHxcInVsXCI9PT14KXJldHVybiBoKHcseSk7dmFyIHo9ITE7cmV0dXJuIGFuZ3VsYXIuZm9yRWFjaCh3LmNoaWxkcmVuKCksZnVuY3Rpb24oYSl7YS50YWdOYW1lLm1hdGNoKGUpJiYoej0hMCl9KSx6P2kody5jaGlsZHJlbigpLHcseSk6aShbYW5ndWxhci5lbGVtZW50KFwiPGRpdj5cIit0LmlubmVySFRNTCtcIjwvZGl2PlwiKVswXV0sdyx5KX1pZih4Lm1hdGNoKGUpKXtpZihxPWEuZ2V0T25seVNlbGVjdGVkRWxlbWVudHMoKSwwPT09cS5sZW5ndGgpbz1hbmd1bGFyLmVsZW1lbnQoXCI8XCIreStcIj48bGk+XCIrdC5pbm5lckhUTUwrXCI8L2xpPjwvXCIreStcIj5cIiksdy5odG1sKFwiXCIpLHcuYXBwZW5kKG8pO2Vsc2V7aWYoMT09PXEubGVuZ3RoJiYoXCJvbFwiPT09cVswXS50YWdOYW1lLnRvTG93ZXJDYXNlKCl8fFwidWxcIj09PXFbMF0udGFnTmFtZS50b0xvd2VyQ2FzZSgpKSlyZXR1cm4gcVswXS50YWdOYW1lLnRvTG93ZXJDYXNlKCk9PT15P2QoYW5ndWxhci5lbGVtZW50KHFbMF0pLGcpOmgoYW5ndWxhci5lbGVtZW50KHFbMF0pLHkpO3A9XCJcIjt2YXIgQT1bXTtmb3Iobj0wO248cS5sZW5ndGg7bisrKWlmKDMhPT1xW25dLm5vZGVUeXBlKXt2YXIgQj1hbmd1bGFyLmVsZW1lbnQocVtuXSk7aWYoXCJsaVwiPT09cVtuXS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpY29udGludWU7cCs9XCJvbFwiPT09cVtuXS50YWdOYW1lLnRvTG93ZXJDYXNlKCl8fFwidWxcIj09PXFbbl0udGFnTmFtZS50b0xvd2VyQ2FzZSgpP0JbMF0uaW5uZXJIVE1MOlwic3BhblwiIT09cVtuXS50YWdOYW1lLnRvTG93ZXJDYXNlKCl8fFwib2xcIiE9PXFbbl0uY2hpbGROb2Rlc1swXS50YWdOYW1lLnRvTG93ZXJDYXNlKCkmJlwidWxcIiE9PXFbbl0uY2hpbGROb2Rlc1swXS50YWdOYW1lLnRvTG93ZXJDYXNlKCk/XCI8XCIrYihcImxpXCIpK1wiPlwiK0JbMF0uaW5uZXJIVE1MK1wiPC9cIitiKFwibGlcIikrXCI+XCI6QlswXS5jaGlsZE5vZGVzWzBdLmlubmVySFRNTCxBLnVuc2hpZnQoQil9bz1hbmd1bGFyLmVsZW1lbnQoXCI8XCIreStcIj5cIitwK1wiPC9cIit5K1wiPlwiKSxBLnBvcCgpLnJlcGxhY2VXaXRoKG8pLGFuZ3VsYXIuZm9yRWFjaChBLGZ1bmN0aW9uKGEpe2EucmVtb3ZlKCl9KX1yZXR1cm4gdm9pZCBhLnNldFNlbGVjdGlvblRvRWxlbWVudEVuZChvWzBdKX19ZWxzZXtpZihcImZvcm1hdGJsb2NrXCI9PT1rLnRvTG93ZXJDYXNlKCkpe2ZvcihzPW0udG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bPD5dL2dpLFwiXCIpLFwiZGVmYXVsdFwiPT09cy50cmltKCkmJihzPWcsbT1cIjxcIitnK1wiPlwiKSxvPVwibGlcIj09PXg/dy5wYXJlbnQoKTp3OyFvWzBdLnRhZ05hbWV8fCFvWzBdLnRhZ05hbWUubWF0Y2goZSkmJiFvLnBhcmVudCgpLmF0dHIoXCJjb250ZW50ZWRpdGFibGVcIik7KW89by5wYXJlbnQoKSx4PShvWzBdLnRhZ05hbWV8fFwiXCIpLnRvTG93ZXJDYXNlKCk7aWYoeD09PXMpe3E9by5jaGlsZHJlbigpO3ZhciBDPSExO2ZvcihuPTA7bjxxLmxlbmd0aDtuKyspQz1DfHxxW25dLnRhZ05hbWUubWF0Y2goZSk7Qz8oby5hZnRlcihxKSxyPW8ubmV4dCgpLG8ucmVtb3ZlKCksbz1yKToodS5hcHBlbmQob1swXS5jaGlsZE5vZGVzKSxvLmFmdGVyKHUpLG8ucmVtb3ZlKCksbz11KX1lbHNlIGlmKG8ucGFyZW50KClbMF0udGFnTmFtZS50b0xvd2VyQ2FzZSgpIT09c3x8by5wYXJlbnQoKS5oYXNDbGFzcyhcInRhLWJpbmRcIikpaWYoeC5tYXRjaChmKSlvLndyYXAobSk7ZWxzZXtmb3IocT1hLmdldE9ubHlTZWxlY3RlZEVsZW1lbnRzKCksMD09PXEubGVuZ3RoJiYocT1bb1swXV0pLG49MDtuPHEubGVuZ3RoO24rKylpZigzPT09cVtuXS5ub2RlVHlwZXx8IXFbbl0udGFnTmFtZS5tYXRjaChlKSlmb3IoOzM9PT1xW25dLm5vZGVUeXBlfHwhcVtuXS50YWdOYW1lfHwhcVtuXS50YWdOYW1lLm1hdGNoKGUpOylxW25dPXFbbl0ucGFyZW50Tm9kZTtpZihhbmd1bGFyLmVsZW1lbnQocVswXSkuaGFzQ2xhc3MoXCJ0YS1iaW5kXCIpKW89YW5ndWxhci5lbGVtZW50KG0pLG9bMF0uaW5uZXJIVE1MPXFbMF0uaW5uZXJIVE1MLHFbMF0uaW5uZXJIVE1MPW9bMF0ub3V0ZXJIVE1MO2Vsc2UgaWYoXCJibG9ja3F1b3RlXCI9PT1zKXtmb3IocD1cIlwiLG49MDtuPHEubGVuZ3RoO24rKylwKz1xW25dLm91dGVySFRNTDtmb3Iobz1hbmd1bGFyLmVsZW1lbnQobSksb1swXS5pbm5lckhUTUw9cCxxWzBdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG9bMF0scVswXSksbj1xLmxlbmd0aC0xO24+PTA7bi0tKXFbbl0ucGFyZW50Tm9kZSYmcVtuXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHFbbl0pfWVsc2UgZm9yKG49MDtuPHEubGVuZ3RoO24rKylvPWFuZ3VsYXIuZWxlbWVudChtKSxvWzBdLmlubmVySFRNTD1xW25dLmlubmVySFRNTCxxW25dLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG9bMF0scVtuXSkscVtuXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHFbbl0pfWVsc2V7dmFyIEQ9by5wYXJlbnQoKSxFPUQuY29udGVudHMoKTtmb3Iobj0wO248RS5sZW5ndGg7bisrKUQucGFyZW50KCkuaGFzQ2xhc3MoXCJ0YS1iaW5kXCIpJiYzPT09RVtuXS5ub2RlVHlwZSYmKHU9YW5ndWxhci5lbGVtZW50KFwiPFwiK2crXCI+XCIpLHVbMF0uaW5uZXJIVE1MPUVbbl0ub3V0ZXJIVE1MLEVbbl09dVswXSksRC5wYXJlbnQoKVswXS5pbnNlcnRCZWZvcmUoRVtuXSxEWzBdKTtELnJlbW92ZSgpfXJldHVybiB2b2lkIGEuc2V0U2VsZWN0aW9uVG9FbGVtZW50RW5kKG9bMF0pfWlmKFwiY3JlYXRlbGlua1wiPT09ay50b0xvd2VyQ2FzZSgpKXt2YXIgRj1hLmdldFNlbGVjdGlvbigpO2lmKEYuY29sbGFwc2VkKXJldHVybiB2b2lkIGEuaW5zZXJ0SHRtbCgnPGEgaHJlZj1cIicrbSsnXCI+JyttK1wiPC9hPlwiLGopfWVsc2UgaWYoXCJpbnNlcnRodG1sXCI9PT1rLnRvTG93ZXJDYXNlKCkpcmV0dXJuIHZvaWQgYS5pbnNlcnRIdG1sKG0sail9fXRyeXtjWzBdLmV4ZWNDb21tYW5kKGssbCxtKX1jYXRjaCh2KXt9fX19XSkuc2VydmljZShcInRhU2VsZWN0aW9uXCIsW1wiJHdpbmRvd1wiLFwiJGRvY3VtZW50XCIsXCJ0YURPTVwiLGZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iWzBdLGY9YS5yYW5neSxoPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGEudGFnTmFtZSYmYS50YWdOYW1lLm1hdGNoKC9eYnIkL2kpJiYwPT09YiYmIWEucHJldmlvdXNTaWJsaW5nP3tlbGVtZW50OmEucGFyZW50Tm9kZSxvZmZzZXQ6MH06e2VsZW1lbnQ6YSxvZmZzZXQ6Yn19LGk9e2dldFNlbGVjdGlvbjpmdW5jdGlvbigpe3ZhciBhPWYuZ2V0U2VsZWN0aW9uKCkuZ2V0UmFuZ2VBdCgwKSxiPWEuY29tbW9uQW5jZXN0b3JDb250YWluZXIsYz17c3RhcnQ6aChhLnN0YXJ0Q29udGFpbmVyLGEuc3RhcnRPZmZzZXQpLGVuZDpoKGEuZW5kQ29udGFpbmVyLGEuZW5kT2Zmc2V0KSxjb2xsYXBzZWQ6YS5jb2xsYXBzZWR9O3JldHVybiBiPTM9PT1iLm5vZGVUeXBlP2IucGFyZW50Tm9kZTpiLGMuY29udGFpbmVyPWIucGFyZW50Tm9kZT09PWMuc3RhcnQuZWxlbWVudHx8Yi5wYXJlbnROb2RlPT09Yy5lbmQuZWxlbWVudD9iLnBhcmVudE5vZGU6YixjfSxnZXRPbmx5U2VsZWN0ZWRFbGVtZW50czpmdW5jdGlvbigpe3ZhciBhPWYuZ2V0U2VsZWN0aW9uKCkuZ2V0UmFuZ2VBdCgwKSxiPWEuY29tbW9uQW5jZXN0b3JDb250YWluZXI7cmV0dXJuIGI9Mz09PWIubm9kZVR5cGU/Yi5wYXJlbnROb2RlOmIsYS5nZXROb2RlcyhbMV0sZnVuY3Rpb24oYSl7cmV0dXJuIGEucGFyZW50Tm9kZT09PWJ9KX0sZ2V0U2VsZWN0aW9uRWxlbWVudDpmdW5jdGlvbigpe3JldHVybiBpLmdldFNlbGVjdGlvbigpLmNvbnRhaW5lcn0sc2V0U2VsZWN0aW9uOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1mLmNyZWF0ZVJhbmdlKCk7ZC5zZXRTdGFydChhLGIpLGQuc2V0RW5kKGEsYyksZi5nZXRTZWxlY3Rpb24oKS5zZXRTaW5nbGVSYW5nZShkKX0sc2V0U2VsZWN0aW9uQmVmb3JlRWxlbWVudDpmdW5jdGlvbihhKXt2YXIgYj1mLmNyZWF0ZVJhbmdlKCk7Yi5zZWxlY3ROb2RlKGEpLGIuY29sbGFwc2UoITApLGYuZ2V0U2VsZWN0aW9uKCkuc2V0U2luZ2xlUmFuZ2UoYil9LHNldFNlbGVjdGlvbkFmdGVyRWxlbWVudDpmdW5jdGlvbihhKXt2YXIgYj1mLmNyZWF0ZVJhbmdlKCk7Yi5zZWxlY3ROb2RlKGEpLGIuY29sbGFwc2UoITEpLGYuZ2V0U2VsZWN0aW9uKCkuc2V0U2luZ2xlUmFuZ2UoYil9LHNldFNlbGVjdGlvblRvRWxlbWVudFN0YXJ0OmZ1bmN0aW9uKGEpe3ZhciBiPWYuY3JlYXRlUmFuZ2UoKTtiLnNlbGVjdE5vZGVDb250ZW50cyhhKSxiLmNvbGxhcHNlKCEwKSxmLmdldFNlbGVjdGlvbigpLnNldFNpbmdsZVJhbmdlKGIpfSxzZXRTZWxlY3Rpb25Ub0VsZW1lbnRFbmQ6ZnVuY3Rpb24oYSl7dmFyIGI9Zi5jcmVhdGVSYW5nZSgpO2Iuc2VsZWN0Tm9kZUNvbnRlbnRzKGEpLGIuY29sbGFwc2UoITEpLGEuY2hpbGROb2RlcyYmYS5jaGlsZE5vZGVzW2EuY2hpbGROb2Rlcy5sZW5ndGgtMV0mJlwiYnJcIj09PWEuY2hpbGROb2Rlc1thLmNoaWxkTm9kZXMubGVuZ3RoLTFdLm5vZGVOYW1lJiYoYi5zdGFydE9mZnNldD1iLmVuZE9mZnNldD1iLnN0YXJ0T2Zmc2V0LTEpLGYuZ2V0U2VsZWN0aW9uKCkuc2V0U2luZ2xlUmFuZ2UoYil9LGluc2VydEh0bWw6ZnVuY3Rpb24oYSxiKXt2YXIgaCxqLGssbCxtLG4sbyxwPWFuZ3VsYXIuZWxlbWVudChcIjxkaXY+XCIrYStcIjwvZGl2PlwiKSxxPWYuZ2V0U2VsZWN0aW9uKCkuZ2V0UmFuZ2VBdCgwKSxyPWQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLHM9cFswXS5jaGlsZE5vZGVzLHQ9ITA7aWYocy5sZW5ndGg+MCl7Zm9yKGw9W10saz0wO2s8cy5sZW5ndGg7aysrKVwicFwiPT09c1trXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpJiZcIlwiPT09c1trXS5pbm5lckhUTUwudHJpbSgpfHwzPT09c1trXS5ub2RlVHlwZSYmXCJcIj09PXNba10ubm9kZVZhbHVlLnRyaW0oKXx8KHQ9dCYmIWUudGVzdChzW2tdLm5vZGVOYW1lKSxsLnB1c2goc1trXSkpO2Zvcih2YXIgdT0wO3U8bC5sZW5ndGg7dSsrKW49ci5hcHBlbmRDaGlsZChsW3VdKTshdCYmcS5jb2xsYXBzZWQmJi9eKHw8YnIofFxcLyk+KSQvaS50ZXN0KHEuc3RhcnRDb250YWluZXIuaW5uZXJIVE1MKSYmcS5zZWxlY3ROb2RlKHEuc3RhcnRDb250YWluZXIpfWVsc2UgdD0hMCxuPXI9ZC5jcmVhdGVUZXh0Tm9kZShhKTtpZih0KXEuZGVsZXRlQ29udGVudHMoKTtlbHNlIGlmKHEuY29sbGFwc2VkJiZxLnN0YXJ0Q29udGFpbmVyIT09YilpZihxLnN0YXJ0Q29udGFpbmVyLmlubmVySFRNTCYmcS5zdGFydENvbnRhaW5lci5pbm5lckhUTUwubWF0Y2goL148W14+XSo+JC9pKSloPXEuc3RhcnRDb250YWluZXIsMT09PXEuc3RhcnRPZmZzZXQ/KHEuc2V0U3RhcnRBZnRlcihoKSxxLnNldEVuZEFmdGVyKGgpKToocS5zZXRTdGFydEJlZm9yZShoKSxxLnNldEVuZEJlZm9yZShoKSk7ZWxzZXtpZigzPT09cS5zdGFydENvbnRhaW5lci5ub2RlVHlwZSYmcS5zdGFydENvbnRhaW5lci5wYXJlbnROb2RlIT09Yilmb3IoaD1xLnN0YXJ0Q29udGFpbmVyLnBhcmVudE5vZGUsaj1oLmNsb25lTm9kZSgpLGMuc3BsaXROb2RlcyhoLmNoaWxkTm9kZXMsaCxqLHEuc3RhcnRDb250YWluZXIscS5zdGFydE9mZnNldCk7IWcudGVzdChoLm5vZGVOYW1lKTspe2FuZ3VsYXIuZWxlbWVudChoKS5hZnRlcihqKSxoPWgucGFyZW50Tm9kZTt2YXIgdj1qO2o9aC5jbG9uZU5vZGUoKSxjLnNwbGl0Tm9kZXMoaC5jaGlsZE5vZGVzLGgsaix2KX1lbHNlIGg9cS5zdGFydENvbnRhaW5lcixqPWguY2xvbmVOb2RlKCksYy5zcGxpdE5vZGVzKGguY2hpbGROb2RlcyxoLGosdm9pZCAwLHZvaWQgMCxxLnN0YXJ0T2Zmc2V0KTtpZihhbmd1bGFyLmVsZW1lbnQoaCkuYWZ0ZXIoaikscS5zZXRTdGFydEFmdGVyKGgpLHEuc2V0RW5kQWZ0ZXIoaCksL14ofDxicih8XFwvKT4pJC9pLnRlc3QoaC5pbm5lckhUTUwudHJpbSgpKSYmKHEuc2V0U3RhcnRCZWZvcmUoaCkscS5zZXRFbmRCZWZvcmUoaCksYW5ndWxhci5lbGVtZW50KGgpLnJlbW92ZSgpKSwvXih8PGJyKHxcXC8pPikkL2kudGVzdChqLmlubmVySFRNTC50cmltKCkpJiZhbmd1bGFyLmVsZW1lbnQoaikucmVtb3ZlKCksXCJsaVwiPT09aC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKXtmb3Iobz1kLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxtPTA7bTxyLmNoaWxkTm9kZXMubGVuZ3RoO20rKylwPWFuZ3VsYXIuZWxlbWVudChcIjxsaT5cIiksYy50cmFuc2ZlckNoaWxkTm9kZXMoci5jaGlsZE5vZGVzW21dLHBbMF0pLGMudHJhbnNmZXJOb2RlQXR0cmlidXRlcyhyLmNoaWxkTm9kZXNbbV0scFswXSksby5hcHBlbmRDaGlsZChwWzBdKTtyPW8sbiYmKG49ci5jaGlsZE5vZGVzW3IuY2hpbGROb2Rlcy5sZW5ndGgtMV0sbj1uLmNoaWxkTm9kZXNbbi5jaGlsZE5vZGVzLmxlbmd0aC0xXSl9fWVsc2UgcS5kZWxldGVDb250ZW50cygpO3EuaW5zZXJ0Tm9kZShyKSxuJiZpLnNldFNlbGVjdGlvblRvRWxlbWVudEVuZChuKX19O3JldHVybiBpfV0pLnNlcnZpY2UoXCJ0YURPTVwiLGZ1bmN0aW9uKCl7dmFyIGE9e2dldEJ5QXR0cmlidXRlOmZ1bmN0aW9uKGIsYyl7dmFyIGQ9W10sZT1iLmNoaWxkcmVuKCk7cmV0dXJuIGUubGVuZ3RoJiZhbmd1bGFyLmZvckVhY2goZSxmdW5jdGlvbihiKXtkPWQuY29uY2F0KGEuZ2V0QnlBdHRyaWJ1dGUoYW5ndWxhci5lbGVtZW50KGIpLGMpKX0pLHZvaWQgMCE9PWIuYXR0cihjKSYmZC5wdXNoKGIpLGR9LHRyYW5zZmVyQ2hpbGROb2RlczpmdW5jdGlvbihhLGIpe2ZvcihiLmlubmVySFRNTD1cIlwiO2EuY2hpbGROb2Rlcy5sZW5ndGg+MDspYi5hcHBlbmRDaGlsZChhLmNoaWxkTm9kZXNbMF0pO3JldHVybiBifSxzcGxpdE5vZGVzOmZ1bmN0aW9uKGIsYyxkLGUsZixnKXtpZighZSYmaXNOYU4oZykpdGhyb3cgbmV3IEVycm9yKFwidGFET00uc3BsaXROb2RlcyByZXF1aXJlcyBhIHNwbGl0Tm9kZSBvciBzcGxpdEluZGV4XCIpO2Zvcih2YXIgaD1kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksaT1kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksaj0wO2IubGVuZ3RoPjAmJihpc05hTihnKXx8ZyE9PWopJiZiWzBdIT09ZTspaC5hcHBlbmRDaGlsZChiWzBdKSxqKys7Zm9yKCFpc05hTihmKSYmZj49MCYmYlswXSYmKGguYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoYlswXS5ub2RlVmFsdWUuc3Vic3RyaW5nKDAsZikpKSxiWzBdLm5vZGVWYWx1ZT1iWzBdLm5vZGVWYWx1ZS5zdWJzdHJpbmcoZikpO2IubGVuZ3RoPjA7KWkuYXBwZW5kQ2hpbGQoYlswXSk7YS50cmFuc2ZlckNoaWxkTm9kZXMoaCxjKSxhLnRyYW5zZmVyQ2hpbGROb2RlcyhpLGQpfSx0cmFuc2Zlck5vZGVBdHRyaWJ1dGVzOmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPTA7YzxhLmF0dHJpYnV0ZXMubGVuZ3RoO2MrKyliLnNldEF0dHJpYnV0ZShhLmF0dHJpYnV0ZXNbY10ubmFtZSxhLmF0dHJpYnV0ZXNbY10udmFsdWUpO3JldHVybiBifX07cmV0dXJuIGF9KSxhbmd1bGFyLm1vZHVsZShcInRleHRBbmd1bGFyLnZhbGlkYXRvcnNcIixbXSkuZGlyZWN0aXZlKFwidGFNYXhUZXh0XCIsZnVuY3Rpb24oKXtyZXR1cm57cmVzdHJpY3Q6XCJBXCIscmVxdWlyZTpcIm5nTW9kZWxcIixsaW5rOmZ1bmN0aW9uKGEsYixjLGQpe2Z1bmN0aW9uIGUoYSl7dmFyIGI9YW5ndWxhci5lbGVtZW50KFwiPGRpdi8+XCIpO2IuaHRtbChhKTt2YXIgYz1iLnRleHQoKS5sZW5ndGg7cmV0dXJuIGY+PWM/KGQuJHNldFZhbGlkaXR5KFwidGFNYXhUZXh0XCIsITApLGEpOnZvaWQgZC4kc2V0VmFsaWRpdHkoXCJ0YU1heFRleHRcIiwhMSl9dmFyIGY9cGFyc2VJbnQoYS4kZXZhbChjLnRhTWF4VGV4dCkpO2lmKGlzTmFOKGYpKXRocm93XCJNYXggdGV4dCBtdXN0IGJlIGFuIGludGVnZXJcIjtjLiRvYnNlcnZlKFwidGFNYXhUZXh0XCIsZnVuY3Rpb24oYSl7aWYoZj1wYXJzZUludChhKSxpc05hTihmKSl0aHJvd1wiTWF4IHRleHQgbXVzdCBiZSBhbiBpbnRlZ2VyXCI7ZC4kZGlydHkmJmQuJHNldFZpZXdWYWx1ZShkLiR2aWV3VmFsdWUpfSksZC4kcGFyc2Vycy51bnNoaWZ0KGUpfX19KS5kaXJlY3RpdmUoXCJ0YU1pblRleHRcIixmdW5jdGlvbigpe3JldHVybntyZXN0cmljdDpcIkFcIixyZXF1aXJlOlwibmdNb2RlbFwiLGxpbms6ZnVuY3Rpb24oYSxiLGMsZCl7ZnVuY3Rpb24gZShhKXt2YXIgYj1hbmd1bGFyLmVsZW1lbnQoXCI8ZGl2Lz5cIik7Yi5odG1sKGEpO3ZhciBjPWIudGV4dCgpLmxlbmd0aDtyZXR1cm4hY3x8Yz49Zj8oZC4kc2V0VmFsaWRpdHkoXCJ0YU1pblRleHRcIiwhMCksYSk6dm9pZCBkLiRzZXRWYWxpZGl0eShcInRhTWluVGV4dFwiLCExKX12YXIgZj1wYXJzZUludChhLiRldmFsKGMudGFNaW5UZXh0KSk7aWYoaXNOYU4oZikpdGhyb3dcIk1pbiB0ZXh0IG11c3QgYmUgYW4gaW50ZWdlclwiO2MuJG9ic2VydmUoXCJ0YU1pblRleHRcIixmdW5jdGlvbihhKXtpZihmPXBhcnNlSW50KGEpLGlzTmFOKGYpKXRocm93XCJNaW4gdGV4dCBtdXN0IGJlIGFuIGludGVnZXJcIjtkLiRkaXJ0eSYmZC4kc2V0Vmlld1ZhbHVlKGQuJHZpZXdWYWx1ZSl9KSxkLiRwYXJzZXJzLnVuc2hpZnQoZSl9fX0pLGFuZ3VsYXIubW9kdWxlKFwidGV4dEFuZ3VsYXIudGFCaW5kXCIsW1widGV4dEFuZ3VsYXIuZmFjdG9yaWVzXCIsXCJ0ZXh0QW5ndWxhci5ET01cIl0pLnNlcnZpY2UoXCJfdGFCbGFua1Rlc3RcIixbZnVuY3Rpb24oKXt2YXIgYT0vPChhfGFiYnJ8YWNyb255bXxiZGl8YmRvfGJpZ3xjaXRlfGNvZGV8ZGVsfGRmbnxpbWd8aW5zfGtiZHxsYWJlbHxtYXB8bWFya3xxfHJ1Ynl8cnB8cnR8c3xzYW1wfHRpbWV8dHR8dmFyKVtePl0qKD58JCkvaTtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIGZ1bmN0aW9uKGMpe2lmKCFjKXJldHVybiEwO3ZhciBkLGU9LyheW148XXw+KVtePF0vaS5leGVjKGMpO3JldHVybiBlP2Q9ZS5pbmRleDooYz1jLnRvU3RyaW5nKCkucmVwbGFjZSgvPVwiW15cIl0qXCIvaSxcIlwiKS5yZXBsYWNlKC89XCJbXlwiXSpcIi9pLFwiXCIpLnJlcGxhY2UoLz1cIlteXCJdKlwiL2ksXCJcIikucmVwbGFjZSgvPVwiW15cIl0qXCIvaSxcIlwiKSxkPWMuaW5kZXhPZihcIj5cIikpLGM9Yy50cmltKCkuc3Vic3RyaW5nKGQsZCsxMDApLC9eW148Pl0rJC9pLnRlc3QoYyk/ITE6MD09PWMubGVuZ3RofHxjPT09Ynx8L14+KFxcc3wmbmJzcDspKjxcXC9bXj5dKz4kL2dpLnRlc3QoYyk/ITA6Lz5cXHMqW15cXHM8XS9pLnRlc3QoYyl8fGEudGVzdChjKT8hMTohMH19fV0pLmRpcmVjdGl2ZShcInRhQmluZFwiLFtcInRhU2FuaXRpemVcIixcIiR0aW1lb3V0XCIsXCIkd2luZG93XCIsXCIkZG9jdW1lbnRcIixcInRhRml4Q2hyb21lXCIsXCJ0YUJyb3dzZXJUYWdcIixcInRhU2VsZWN0aW9uXCIsXCJ0YVNlbGVjdGFibGVFbGVtZW50c1wiLFwidGFBcHBseUN1c3RvbVJlbmRlcmVyc1wiLFwidGFPcHRpb25zXCIsXCJfdGFCbGFua1Rlc3RcIixcIiRwYXJzZVwiLFwidGFET01cIixmdW5jdGlvbihhLGIsZSxmLGgsaixsLG0sbixvLHEscixzKXtyZXR1cm57cmVxdWlyZTpcIm5nTW9kZWxcIixsaW5rOmZ1bmN0aW9uKGosdCx1LHYpe3ZhciB3LHgseSx6LEE9dm9pZCAwIT09dC5hdHRyKFwiY29udGVudGVkaXRhYmxlXCIpJiZ0LmF0dHIoXCJjb250ZW50ZWRpdGFibGVcIiksQj1BfHxcInRleHRhcmVhXCI9PT10WzBdLnRhZ05hbWUudG9Mb3dlckNhc2UoKXx8XCJpbnB1dFwiPT09dFswXS50YWdOYW1lLnRvTG93ZXJDYXNlKCksQz0hMSxEPSExLEU9ITEsRj11LnRhVW5zYWZlU2FuaXRpemVyfHxvLmRpc2FibGVTYW5pdGl6ZXIsRz0vXig5fDE5fDIwfDI3fDMzfDM0fDM1fDM2fDM3fDM4fDM5fDQwfDQ1fDExMnwxMTN8MTE0fDExNXwxMTZ8MTE3fDExOHwxMTl8MTIwfDEyMXwxMjJ8MTIzfDE0NHwxNDUpJC9pLEg9L14oOHwxM3wzMnw0Nnw1OXw2MXwxMDd8MTA5fDE4NnwxODd8MTg4fDE4OXwxOTB8MTkxfDE5MnwyMTl8MjIwfDIyMXwyMjIpJC9pO3ZvaWQgMD09PXUudGFEZWZhdWx0V3JhcCYmKHUudGFEZWZhdWx0V3JhcD1cInBcIiksXCJcIj09PXUudGFEZWZhdWx0V3JhcD8oeT1cIlwiLHo9dm9pZCAwPT09Yy5pZT9cIjxkaXY+PGJyPjwvZGl2PlwiOmMuaWU+PTExP1wiPHA+PGJyPjwvcD5cIjpjLmllPD04P1wiPFA+Jm5ic3A7PC9QPlwiOlwiPHA+Jm5ic3A7PC9wPlwiKTooeT12b2lkIDA9PT1jLmllfHxjLmllPj0xMT9cIjxcIit1LnRhRGVmYXVsdFdyYXArXCI+PGJyPjwvXCIrdS50YURlZmF1bHRXcmFwK1wiPlwiOmMuaWU8PTg/XCI8XCIrdS50YURlZmF1bHRXcmFwLnRvVXBwZXJDYXNlKCkrXCI+PC9cIit1LnRhRGVmYXVsdFdyYXAudG9VcHBlckNhc2UoKStcIj5cIjpcIjxcIit1LnRhRGVmYXVsdFdyYXArXCI+PC9cIit1LnRhRGVmYXVsdFdyYXArXCI+XCIsej12b2lkIDA9PT1jLmllfHxjLmllPj0xMT9cIjxcIit1LnRhRGVmYXVsdFdyYXArXCI+PGJyPjwvXCIrdS50YURlZmF1bHRXcmFwK1wiPlwiOmMuaWU8PTg/XCI8XCIrdS50YURlZmF1bHRXcmFwLnRvVXBwZXJDYXNlKCkrXCI+Jm5ic3A7PC9cIit1LnRhRGVmYXVsdFdyYXAudG9VcHBlckNhc2UoKStcIj5cIjpcIjxcIit1LnRhRGVmYXVsdFdyYXArXCI+Jm5ic3A7PC9cIit1LnRhRGVmYXVsdFdyYXArXCI+XCIpO3ZhciBJPXEoeik7dS50YVBhc3RlJiYoeD1yKHUudGFQYXN0ZSkpLHQuYWRkQ2xhc3MoXCJ0YS1iaW5kXCIpO3ZhciBKO2pbXCIkdW5kb01hbmFnZXJcIisodS5pZHx8XCJcIildPXYuJHVuZG9NYW5hZ2VyPXtfc3RhY2s6W10sX2luZGV4OjAsX21heDoxZTMscHVzaDpmdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiPT10eXBlb2YgYXx8bnVsbD09PWF8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiB0aGlzLmN1cnJlbnQoKSYmbnVsbCE9PXRoaXMuY3VycmVudCgpJiZhPT09dGhpcy5jdXJyZW50KCk/YToodGhpcy5faW5kZXg8dGhpcy5fc3RhY2subGVuZ3RoLTEmJih0aGlzLl9zdGFjaz10aGlzLl9zdGFjay5zbGljZSgwLHRoaXMuX2luZGV4KzEpKSx0aGlzLl9zdGFjay5wdXNoKGEpLEomJmIuY2FuY2VsKEopLHRoaXMuX3N0YWNrLmxlbmd0aD50aGlzLl9tYXgmJnRoaXMuX3N0YWNrLnNoaWZ0KCksdGhpcy5faW5kZXg9dGhpcy5fc3RhY2subGVuZ3RoLTEsYSl9LHVuZG86ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZXRUb0luZGV4KHRoaXMuX2luZGV4LTEpfSxyZWRvOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2V0VG9JbmRleCh0aGlzLl9pbmRleCsxKX0sc2V0VG9JbmRleDpmdW5jdGlvbihhKXtyZXR1cm4gMD5hfHxhPnRoaXMuX3N0YWNrLmxlbmd0aC0xP3ZvaWQgMDoodGhpcy5faW5kZXg9YSx0aGlzLmN1cnJlbnQoKSl9LGN1cnJlbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc3RhY2tbdGhpcy5faW5kZXhdfX07dmFyIEs9altcIiR1bmRvVGFCaW5kXCIrKHUuaWR8fFwiXCIpXT1mdW5jdGlvbigpe2lmKCFDJiZBKXt2YXIgYT12LiR1bmRvTWFuYWdlci51bmRvKCk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEmJm51bGwhPT1hJiYoWShhKSxOKGEsITEpLGwuc2V0U2VsZWN0aW9uVG9FbGVtZW50RW5kKHRbMF0uY2hpbGROb2Rlcy5sZW5ndGg/dFswXS5jaGlsZE5vZGVzW3RbMF0uY2hpbGROb2Rlcy5sZW5ndGgtMV06dFswXSkpfX0sTD1qW1wiJHJlZG9UYUJpbmRcIisodS5pZHx8XCJcIildPWZ1bmN0aW9uKCl7aWYoIUMmJkEpe3ZhciBhPXYuJHVuZG9NYW5hZ2VyLnJlZG8oKTtcInVuZGVmaW5lZFwiIT10eXBlb2YgYSYmbnVsbCE9PWEmJihZKGEpLE4oYSwhMSksbC5zZXRTZWxlY3Rpb25Ub0VsZW1lbnRFbmQodFswXS5jaGlsZE5vZGVzLmxlbmd0aD90WzBdLmNoaWxkTm9kZXNbdFswXS5jaGlsZE5vZGVzLmxlbmd0aC0xXTp0WzBdKSl9fSxNPWZ1bmN0aW9uKCl7aWYoQSlyZXR1cm4gdFswXS5pbm5lckhUTUw7aWYoQilyZXR1cm4gdC52YWwoKTt0aHJvd1widGV4dEFuZ3VsYXIgRXJyb3I6IGF0dGVtcHRpbmcgdG8gdXBkYXRlIG5vbi1lZGl0YWJsZSB0YUJpbmRcIn0sTj1mdW5jdGlvbihhLGIpe0U9ITAsKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBifHxudWxsPT09YikmJihiPSEwJiZBKSwoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGF8fG51bGw9PT1hKSYmKGE9TSgpKSxJKGEpPyhcIlwiIT09di4kdmlld1ZhbHVlJiZ2LiRzZXRWaWV3VmFsdWUoXCJcIiksYiYmXCJcIiE9PXYuJHVuZG9NYW5hZ2VyLmN1cnJlbnQoKSYmdi4kdW5kb01hbmFnZXIucHVzaChcIlwiKSk6KFgoKSx2LiR2aWV3VmFsdWUhPT1hJiYodi4kc2V0Vmlld1ZhbHVlKGEpLGImJnYuJHVuZG9NYW5hZ2VyLnB1c2goYSkpKX07aWYoaltcInVwZGF0ZVRhQmluZFwiKyh1LmlkfHxcIlwiKV09ZnVuY3Rpb24oKXtDfHxOKCl9LEIpaWYoai5ldmVudHM9e30sQSl7dmFyIE89ITEsUD1mdW5jdGlvbihjKXtpZihjJiZjLnRyaW0oKS5sZW5ndGgpe2lmKGMubWF0Y2goL2NsYXNzPVtcIiddKk1zbyhOb3JtYWx8TGlzdCkvaSkpe3ZhciBkPWMubWF0Y2goLzwhLS1TdGFydEZyYWdtZW50LS0+KFtcXHNcXFNdKj8pPCEtLUVuZEZyYWdtZW50LS0+L2kpO2Q9ZD9kWzFdOmMsZD1kLnJlcGxhY2UoLzxvOnA+W1xcc1xcU10qPzxcXC9vOnA+L2dpLFwiXCIpLnJlcGxhY2UoL2NsYXNzPShbXCInXXwpTXNvTm9ybWFsKFtcIiddfCkvZ2ksXCJcIik7dmFyIGU9YW5ndWxhci5lbGVtZW50KFwiPGRpdj5cIitkK1wiPC9kaXY+XCIpLGY9YW5ndWxhci5lbGVtZW50KFwiPGRpdj48L2Rpdj5cIiksZz17ZWxlbWVudDpudWxsLGxhc3RJbmRlbnQ6W10sbGFzdExpOm51bGwsaXNVbDohMX07Zy5sYXN0SW5kZW50LnBlZWs9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmxlbmd0aDtyZXR1cm4gYT4wP3RoaXNbYS0xXTp2b2lkIDB9O2Zvcih2YXIgaD1mdW5jdGlvbihhKXtnLmlzVWw9YSxnLmVsZW1lbnQ9YW5ndWxhci5lbGVtZW50KGE/XCI8dWw+XCI6XCI8b2w+XCIpLGcubGFzdEluZGVudD1bXSxnLmxhc3RJbmRlbnQucGVlaz1mdW5jdGlvbigpe3ZhciBhPXRoaXMubGVuZ3RoO3JldHVybiBhPjA/dGhpc1thLTFdOnZvaWQgMH0sZy5sYXN0TGV2ZWxNYXRjaD1udWxsfSxpPTA7aTw9ZVswXS5jaGlsZE5vZGVzLmxlbmd0aDtpKyspaWYoZVswXS5jaGlsZE5vZGVzW2ldJiZcIiN0ZXh0XCIhPT1lWzBdLmNoaWxkTm9kZXNbaV0ubm9kZU5hbWUmJlwicFwiPT09ZVswXS5jaGlsZE5vZGVzW2ldLnRhZ05hbWUudG9Mb3dlckNhc2UoKSl7dmFyIGs9YW5ndWxhci5lbGVtZW50KGVbMF0uY2hpbGROb2Rlc1tpXSksbT0oay5hdHRyKFwiY2xhc3NcIil8fFwiXCIpLm1hdGNoKC9Nc29MaXN0KEJ1bGxldHxOdW1iZXJ8UGFyYWdyYXBoKShDeFNwKEZpcnN0fE1pZGRsZXxMYXN0KXwpL2kpO2lmKG0pe2lmKGtbMF0uY2hpbGROb2Rlcy5sZW5ndGg8Mnx8a1swXS5jaGlsZE5vZGVzWzFdLmNoaWxkTm9kZXMubGVuZ3RoPDEpY29udGludWU7dmFyIG49XCJidWxsZXRcIj09PW1bMV0udG9Mb3dlckNhc2UoKXx8XCJudW1iZXJcIiE9PW1bMV0udG9Mb3dlckNhc2UoKSYmISgvXlteMC05YS16PF0qWzAtOWEtel0rW14wLTlhLXo8Pl08L2kudGVzdChrWzBdLmNoaWxkTm9kZXNbMV0uaW5uZXJIVE1MKXx8L15bXjAtOWEtejxdKlswLTlhLXpdK1teMC05YS16PD5dPC9pLnRlc3Qoa1swXS5jaGlsZE5vZGVzWzFdLmNoaWxkTm9kZXNbMF0uaW5uZXJIVE1MKSksbz0oay5hdHRyKFwic3R5bGVcIil8fFwiXCIpLm1hdGNoKC9tYXJnaW4tbGVmdDooW1xcLVxcLjAtOV0qKS9pKSxwPXBhcnNlRmxvYXQobz9vWzFdOjApLHE9KGsuYXR0cihcInN0eWxlXCIpfHxcIlwiKS5tYXRjaCgvbXNvLWxpc3Q6bChbMC05XSspIGxldmVsKFswLTldKykgbGZvWzAtOStdKCR8OykvaSk7aWYocSYmcVsyXSYmKHA9cGFyc2VJbnQocVsyXSkpLHEmJighZy5sYXN0TGV2ZWxNYXRjaHx8cVsxXSE9PWcubGFzdExldmVsTWF0Y2hbMV0pfHwhbVszXXx8XCJmaXJzdFwiPT09bVszXS50b0xvd2VyQ2FzZSgpfHxudWxsPT09Zy5sYXN0SW5kZW50LnBlZWsoKXx8Zy5pc1VsIT09biYmZy5sYXN0SW5kZW50LnBlZWsoKT09PXApaChuKSxmLmFwcGVuZChnLmVsZW1lbnQpO2Vsc2UgaWYobnVsbCE9Zy5sYXN0SW5kZW50LnBlZWsoKSYmZy5sYXN0SW5kZW50LnBlZWsoKTxwKWcuZWxlbWVudD1hbmd1bGFyLmVsZW1lbnQobj9cIjx1bD5cIjpcIjxvbD5cIiksZy5sYXN0TGkuYXBwZW5kKGcuZWxlbWVudCk7ZWxzZSBpZihudWxsIT1nLmxhc3RJbmRlbnQucGVlaygpJiZnLmxhc3RJbmRlbnQucGVlaygpPnApe2Zvcig7bnVsbCE9Zy5sYXN0SW5kZW50LnBlZWsoKSYmZy5sYXN0SW5kZW50LnBlZWsoKT5wOylpZihcImxpXCIhPT1nLmVsZW1lbnQucGFyZW50KClbMF0udGFnTmFtZS50b0xvd2VyQ2FzZSgpKXtpZighL1t1b11sL2kudGVzdChnLmVsZW1lbnQucGFyZW50KClbMF0udGFnTmFtZS50b0xvd2VyQ2FzZSgpKSlicmVhaztnLmVsZW1lbnQ9Zy5lbGVtZW50LnBhcmVudCgpLGcubGFzdEluZGVudC5wb3AoKX1lbHNlIGcuZWxlbWVudD1nLmVsZW1lbnQucGFyZW50KCk7Zy5pc1VsPVwidWxcIj09PWcuZWxlbWVudFswXS50YWdOYW1lLnRvTG93ZXJDYXNlKCksbiE9PWcuaXNVbCYmKGgobiksZi5hcHBlbmQoZy5lbGVtZW50KSl9Zy5sYXN0TGV2ZWxNYXRjaD1xLHAhPT1nLmxhc3RJbmRlbnQucGVlaygpJiZnLmxhc3RJbmRlbnQucHVzaChwKSxnLmxhc3RMaT1hbmd1bGFyLmVsZW1lbnQoXCI8bGk+XCIpLGcuZWxlbWVudC5hcHBlbmQoZy5sYXN0TGkpLGcubGFzdExpLmh0bWwoay5odG1sKCkucmVwbGFjZSgvPCEoLS18KVxcW2lmICFzdXBwb3J0TGlzdHNcXF0oLS18KT5bXFxzXFxTXSo/PCEoLS18KVxcW2VuZGlmXFxdKC0tfCk+L2dpLFwiXCIpKSxrLnJlbW92ZSgpfWVsc2UgaCghMSksZi5hcHBlbmQoayl9dmFyIHI9ZnVuY3Rpb24oYSl7YT1hbmd1bGFyLmVsZW1lbnQoYSk7Zm9yKHZhciBiPWFbMF0uY2hpbGROb2Rlcy5sZW5ndGgtMTtiPj0wO2ItLSlhLmFmdGVyKGFbMF0uY2hpbGROb2Rlc1tiXSk7YS5yZW1vdmUoKX07YW5ndWxhci5mb3JFYWNoKGYuZmluZChcInNwYW5cIiksZnVuY3Rpb24oYSl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJsYW5nXCIpLGEuYXR0cmlidXRlcy5sZW5ndGg8PTAmJnIoYSl9KSxhbmd1bGFyLmZvckVhY2goZi5maW5kKFwiZm9udFwiKSxyKSxjPWYuaHRtbCgpfWVsc2V7aWYoYz1jLnJlcGxhY2UoLzwofFxcLyltZXRhW14+XSo/Pi9naSxcIlwiKSxjLm1hdGNoKC88W14+XSo/KHRhLWJpbmQpW14+XSo/Pi8pKXtpZihjLm1hdGNoKC88W14+XSo/KHRleHQtYW5ndWxhcilbXj5dKj8+Lykpe3ZhciB1PWFuZ3VsYXIuZWxlbWVudChcIjxkaXY+XCIrYytcIjwvZGl2PlwiKTt1LmZpbmQoXCJ0ZXh0YXJlYVwiKS5yZW1vdmUoKTtmb3IodmFyIHc9cy5nZXRCeUF0dHJpYnV0ZSh1LFwidGEtYmluZFwiKSx5PTA7eTx3Lmxlbmd0aDt5Kyspe2Zvcih2YXIgej13W3ldWzBdLnBhcmVudE5vZGUucGFyZW50Tm9kZSxBPTA7QTx3W3ldWzBdLmNoaWxkTm9kZXMubGVuZ3RoO0ErKyl6LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHdbeV1bMF0uY2hpbGROb2Rlc1tBXSx6KTt6LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoeil9Yz11Lmh0bWwoKS5yZXBsYWNlKCc8YnIgY2xhc3M9XCJBcHBsZS1pbnRlcmNoYW5nZS1uZXdsaW5lXCI+JyxcIlwiKX19ZWxzZSBjLm1hdGNoKC9ePHNwYW4vKSYmKGM9Yy5yZXBsYWNlKC88KHxcXC8pc3BhbltePl0qPz4vZ2ksXCJcIikpO2M9Yy5yZXBsYWNlKC88YnIgY2xhc3M9XCJBcHBsZS1pbnRlcmNoYW5nZS1uZXdsaW5lXCJbXj5dKj8+L2dpLFwiXCIpLnJlcGxhY2UoLzxzcGFuIGNsYXNzPVwiQXBwbGUtY29udmVydGVkLXNwYWNlXCI+KCB8Jm5ic3A7KTxcXC9zcGFuPi9naSxcIiZuYnNwO1wiKX1jPWEoYyxcIlwiLEYpLHgmJihjPXgoaix7JGh0bWw6Y30pfHxjKSxsLmluc2VydEh0bWwoYyx0WzBdKSxiKGZ1bmN0aW9uKCl7di4kc2V0Vmlld1ZhbHVlKE0oKSksTz0hMSx0LnJlbW92ZUNsYXNzKFwicHJvY2Vzc2luZy1wYXN0ZVwiKX0sMCl9ZWxzZSBPPSExLHQucmVtb3ZlQ2xhc3MoXCJwcm9jZXNzaW5nLXBhc3RlXCIpfTtpZih0Lm9uKFwicGFzdGVcIixqLmV2ZW50cy5wYXN0ZT1mdW5jdGlvbihhLGMpe2lmKGMmJmFuZ3VsYXIuZXh0ZW5kKGEsYyksQ3x8TylyZXR1cm4gYS5zdG9wUHJvcGFnYXRpb24oKSxhLnByZXZlbnREZWZhdWx0KCksITE7Tz0hMCx0LmFkZENsYXNzKFwicHJvY2Vzc2luZy1wYXN0ZVwiKTt2YXIgZCxnPShhLm9yaWdpbmFsRXZlbnR8fGEpLmNsaXBib2FyZERhdGE7aWYoZyYmZy5nZXREYXRhKXtmb3IodmFyIGg9XCJcIixpPTA7aTxnLnR5cGVzLmxlbmd0aDtpKyspaCs9XCIgXCIrZy50eXBlc1tpXTtyZXR1cm4vdGV4dFxcL2h0bWwvaS50ZXN0KGgpP2Q9Zy5nZXREYXRhKFwidGV4dC9odG1sXCIpOi90ZXh0XFwvcGxhaW4vaS50ZXN0KGgpJiYoZD1nLmdldERhdGEoXCJ0ZXh0L3BsYWluXCIpKSxQKGQpLGEuc3RvcFByb3BhZ2F0aW9uKCksYS5wcmV2ZW50RGVmYXVsdCgpLCExfXZhciBqPWUucmFuZ3kuc2F2ZVNlbGVjdGlvbigpLGs9YW5ndWxhci5lbGVtZW50KCc8ZGl2IGNsYXNzPVwidGEtaGlkZGVuLWlucHV0XCIgY29udGVudGVkaXRhYmxlPVwidHJ1ZVwiPjwvZGl2PicpO2YuZmluZChcImJvZHlcIikuYXBwZW5kKGspLGtbMF0uZm9jdXMoKSxiKGZ1bmN0aW9uKCl7ZS5yYW5neS5yZXN0b3JlU2VsZWN0aW9uKGopLFAoa1swXS5pbm5lckhUTUwpLGsucmVtb3ZlKCksdFswXS5mb2N1cygpfSwwKX0pLHQub24oXCJjdXRcIixqLmV2ZW50cy5jdXQ9ZnVuY3Rpb24oYSl7Qz9hLnByZXZlbnREZWZhdWx0KCk6YihmdW5jdGlvbigpe3YuJHNldFZpZXdWYWx1ZShNKCkpfSwwKX0pLHQub24oXCJrZXlkb3duXCIsai5ldmVudHMua2V5ZG93bj1mdW5jdGlvbihhLGIpe2lmKGImJmFuZ3VsYXIuZXh0ZW5kKGEsYiksIUMpaWYoIWEuYWx0S2V5JiZhLm1ldGFLZXl8fGEuY3RybEtleSk5MCE9PWEua2V5Q29kZXx8YS5zaGlmdEtleT8oOTA9PT1hLmtleUNvZGUmJmEuc2hpZnRLZXl8fDg5PT09YS5rZXlDb2RlJiYhYS5zaGlmdEtleSkmJihMKCksYS5wcmV2ZW50RGVmYXVsdCgpKTooSygpLGEucHJldmVudERlZmF1bHQoKSk7ZWxzZSBpZigxMz09PWEua2V5Q29kZSYmIWEuc2hpZnRLZXkpe3ZhciBjPWwuZ2V0U2VsZWN0aW9uRWxlbWVudCgpO2lmKCFjLnRhZ05hbWUubWF0Y2goZykpcmV0dXJuO3ZhciBkPWFuZ3VsYXIuZWxlbWVudCh5KTtpZigvXjxicih8XFwvKT4kL2kudGVzdChjLmlubmVySFRNTC50cmltKCkpJiZcImJsb2NrcXVvdGVcIj09PWMucGFyZW50Tm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkmJiFjLm5leHRTaWJsaW5nKXskc2VsZWN0aW9uPWFuZ3VsYXIuZWxlbWVudChjKTt2YXIgZT0kc2VsZWN0aW9uLnBhcmVudCgpO2UuYWZ0ZXIoZCksJHNlbGVjdGlvbi5yZW1vdmUoKSwwPT09ZS5jaGlsZHJlbigpLmxlbmd0aCYmZS5yZW1vdmUoKSxsLnNldFNlbGVjdGlvblRvRWxlbWVudFN0YXJ0KGRbMF0pLGEucHJldmVudERlZmF1bHQoKX1lbHNlL148W14+XSs+PGJyKHxcXC8pPjxcXC9bXj5dKz4kL2kudGVzdChjLmlubmVySFRNTC50cmltKCkpJiZcImJsb2NrcXVvdGVcIj09PWMudGFnTmFtZS50b0xvd2VyQ2FzZSgpJiYoJHNlbGVjdGlvbj1hbmd1bGFyLmVsZW1lbnQoYyksJHNlbGVjdGlvbi5hZnRlcihkKSwkc2VsZWN0aW9uLnJlbW92ZSgpLGwuc2V0U2VsZWN0aW9uVG9FbGVtZW50U3RhcnQoZFswXSksYS5wcmV2ZW50RGVmYXVsdCgpKX19KSx0Lm9uKFwia2V5dXBcIixqLmV2ZW50cy5rZXl1cD1mdW5jdGlvbihhLGMpe2lmKGMmJmFuZ3VsYXIuZXh0ZW5kKGEsYyksSiYmYi5jYW5jZWwoSiksIUMmJiFHLnRlc3QoYS5rZXlDb2RlKSl7aWYoXCJcIiE9PXkmJjEzPT09YS5rZXlDb2RlJiYhYS5zaGlmdEtleSl7Zm9yKHZhciBkPWwuZ2V0U2VsZWN0aW9uRWxlbWVudCgpOyFkLnRhZ05hbWUubWF0Y2goZykmJmQhPT10WzBdOylkPWQucGFyZW50Tm9kZTtpZihkLnRhZ05hbWUudG9Mb3dlckNhc2UoKSE9PXUudGFEZWZhdWx0V3JhcCYmXCJsaVwiIT09ZC50YWdOYW1lLnRvTG93ZXJDYXNlKCkmJihcIlwiPT09ZC5pbm5lckhUTUwudHJpbSgpfHxcIjxicj5cIj09PWQuaW5uZXJIVE1MLnRyaW0oKSkpe3ZhciBmPWFuZ3VsYXIuZWxlbWVudCh5KTthbmd1bGFyLmVsZW1lbnQoZCkucmVwbGFjZVdpdGgoZiksbC5zZXRTZWxlY3Rpb25Ub0VsZW1lbnRTdGFydChmWzBdKX19dmFyIGg9TSgpO2lmKFwiXCIhPT15JiZcIlwiPT09aC50cmltKCkpWSh5KSxsLnNldFNlbGVjdGlvblRvRWxlbWVudFN0YXJ0KHQuY2hpbGRyZW4oKVswXSk7ZWxzZSBpZihcIjxcIiE9PWguc3Vic3RyaW5nKDAsMSkmJlwiXCIhPT11LnRhRGVmYXVsdFdyYXApe3ZhciBpPWUucmFuZ3kuc2F2ZVNlbGVjdGlvbigpO2g9TSgpLGg9XCI8XCIrdS50YURlZmF1bHRXcmFwK1wiPlwiK2grXCI8L1wiK3UudGFEZWZhdWx0V3JhcCtcIj5cIixZKGgpLGUucmFuZ3kucmVzdG9yZVNlbGVjdGlvbihpKX12YXIgaj13IT09YS5rZXlDb2RlJiZILnRlc3QoYS5rZXlDb2RlKTtOKGgsaiksanx8KEo9YihmdW5jdGlvbigpe3YuJHVuZG9NYW5hZ2VyLnB1c2goaCl9LDI1MCkpLHc9YS5rZXlDb2RlfX0pLHQub24oXCJibHVyXCIsai5ldmVudHMuYmx1cj1mdW5jdGlvbigpe0Q9ITEsQ3x8TigpLEU9ITAsdi4kcmVuZGVyKCl9KSx1LnBsYWNlaG9sZGVyJiYoYy5pZT44fHx2b2lkIDA9PT1jLmllKSl7dmFyIFE7aWYoIXUuaWQpdGhyb3dcInRleHRBbmd1bGFyIEVycm9yOiBBbiB1bmlxdWUgSUQgaXMgcmVxdWlyZWQgZm9yIHBsYWNlaG9sZGVycyB0byB3b3JrXCI7UT1pKFwiI1wiK3UuaWQrXCIucGxhY2Vob2xkZXItdGV4dDpiZWZvcmVcIiwnY29udGVudDogXCInK3UucGxhY2Vob2xkZXIrJ1wiJyksai4kb24oXCIkZGVzdHJveVwiLGZ1bmN0aW9uKCl7ayhRKX0pfXQub24oXCJmb2N1c1wiLGouZXZlbnRzLmZvY3VzPWZ1bmN0aW9uKCl7RD0hMCx0LnJlbW92ZUNsYXNzKFwicGxhY2Vob2xkZXItdGV4dFwiKX0pLHQub24oXCJtb3VzZXVwXCIsai5ldmVudHMubW91c2V1cD1mdW5jdGlvbigpe3ZhciBhPWwuZ2V0U2VsZWN0aW9uKCk7YS5zdGFydC5lbGVtZW50PT09dFswXSYmdC5jaGlsZHJlbigpLmxlbmd0aCYmbC5zZXRTZWxlY3Rpb25Ub0VsZW1lbnRTdGFydCh0LmNoaWxkcmVuKClbMF0pfSksdC5vbihcIm1vdXNlZG93blwiLGouZXZlbnRzLm1vdXNlZG93bj1mdW5jdGlvbihhLGIpe2ImJmFuZ3VsYXIuZXh0ZW5kKGEsYiksYS5zdG9wUHJvcGFnYXRpb24oKX0pfWVsc2V7dC5vbihcImNoYW5nZSBibHVyXCIsai5ldmVudHMuY2hhbmdlPWouZXZlbnRzLmJsdXI9ZnVuY3Rpb24oKXtDfHx2LiRzZXRWaWV3VmFsdWUoTSgpKX0pLHQub24oXCJrZXlkb3duXCIsai5ldmVudHMua2V5ZG93bj1mdW5jdGlvbihhLGIpe2lmKGImJmFuZ3VsYXIuZXh0ZW5kKGEsYiksOT09PWEua2V5Q29kZSl7dmFyIGM9dGhpcy5zZWxlY3Rpb25TdGFydCxkPXRoaXMuc2VsZWN0aW9uRW5kLGU9dC52YWwoKTtpZihhLnNoaWZ0S2V5KXt2YXIgZj1lLmxhc3RJbmRleE9mKFwiXFxuXCIsYyksZz1lLmxhc3RJbmRleE9mKFwiXHRcIixjKTstMSE9PWcmJmc+PWYmJih0LnZhbChlLnN1YnN0cmluZygwLGcpK2Uuc3Vic3RyaW5nKGcrMSkpLHRoaXMuc2VsZWN0aW9uU3RhcnQ9dGhpcy5zZWxlY3Rpb25FbmQ9Yy0xKX1lbHNlIHQudmFsKGUuc3Vic3RyaW5nKDAsYykrXCJcdFwiK2Uuc3Vic3RyaW5nKGQpKSx0aGlzLnNlbGVjdGlvblN0YXJ0PXRoaXMuc2VsZWN0aW9uRW5kPWMrMTthLnByZXZlbnREZWZhdWx0KCl9fSk7dmFyIFI9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9XCJcIixkPTA7Yj5kO2QrKyljKz1hO3JldHVybiBjfSxTPWZ1bmN0aW9uKGEsYil7dmFyIGM9XCJcIixkPWEuY2hpbGROb2RlcztiKyssYys9UihcIlx0XCIsYi0xKSthLm91dGVySFRNTC5zdWJzdHJpbmcoMCxhLm91dGVySFRNTC5pbmRleE9mKFwiPGxpXCIpKTtmb3IodmFyIGU9MDtlPGQubGVuZ3RoO2UrKylkW2VdLm91dGVySFRNTCYmKGMrPVwidWxcIj09PWRbZV0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKXx8XCJvbFwiPT09ZFtlXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP1wiXFxuXCIrUyhkW2VdLGIpOlwiXFxuXCIrUihcIlx0XCIsYikrZFtlXS5vdXRlckhUTUwpO3JldHVybiBjKz1cIlxcblwiK1IoXCJcdFwiLGItMSkrYS5vdXRlckhUTUwuc3Vic3RyaW5nKGEub3V0ZXJIVE1MLmxhc3RJbmRleE9mKFwiPFwiKSl9O3YuJGZvcm1hdHRlcnMudW5zaGlmdChmdW5jdGlvbihhKXt2YXIgYj1hbmd1bGFyLmVsZW1lbnQoXCI8ZGl2PlwiK2ErXCI8L2Rpdj5cIilbMF0uY2hpbGROb2RlcztpZihiLmxlbmd0aD4wKXthPVwiXCI7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aDtjKyspYltjXS5vdXRlckhUTUwmJihhLmxlbmd0aD4wJiYoYSs9XCJcXG5cIiksYSs9XCJ1bFwiPT09YltjXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpfHxcIm9sXCI9PT1iW2NdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/XCJcIitTKGJbY10sMCk6XCJcIitiW2NdLm91dGVySFRNTCl9cmV0dXJuIGF9KX12YXIgVD1mdW5jdGlvbihiKXtyZXR1cm4gdi4kb2xkVmlld1ZhbHVlPWEoaChiKSx2LiRvbGRWaWV3VmFsdWUsRil9LFU9ZnVuY3Rpb24oYSl7cmV0dXJuIHUucmVxdWlyZWQmJnYuJHNldFZhbGlkaXR5KFwicmVxdWlyZWRcIiwhSShhKSksYX07di4kcGFyc2Vycy5wdXNoKFQpLHYuJHBhcnNlcnMudW5zaGlmdChVKSx2LiRmb3JtYXR0ZXJzLnB1c2goVCksdi4kZm9ybWF0dGVycy51bnNoaWZ0KGZ1bmN0aW9uKGEpe2lmKEkoYSkpcmV0dXJuIGE7dmFyIGI9YW5ndWxhci5lbGVtZW50KFwiPGRpdj5cIithK1wiPC9kaXY+XCIpO3JldHVybiAwPT09Yi5jaGlsZHJlbigpLmxlbmd0aCYmKGE9XCI8XCIrdS50YURlZmF1bHRXcmFwK1wiPlwiK2ErXCI8L1wiK3UudGFEZWZhdWx0V3JhcCtcIj5cIiksYX0pLHYuJGZvcm1hdHRlcnMudW5zaGlmdChVKSx2LiRmb3JtYXR0ZXJzLnVuc2hpZnQoZnVuY3Rpb24oYSl7cmV0dXJuIHYuJHVuZG9NYW5hZ2VyLnB1c2goYXx8XCJcIil9KTt2YXIgVj1mdW5jdGlvbihhKXtyZXR1cm4gai4kZW1pdChcInRhLWVsZW1lbnQtc2VsZWN0XCIsdGhpcyksYS5wcmV2ZW50RGVmYXVsdCgpLCExfSxXPWZ1bmN0aW9uKGEsYyl7aWYoYyYmYW5ndWxhci5leHRlbmQoYSxjKSwhcCYmIUMpe3A9ITA7dmFyIGQ7ZD1hLm9yaWdpbmFsRXZlbnQ/YS5vcmlnaW5hbEV2ZW50LmRhdGFUcmFuc2ZlcjphLmRhdGFUcmFuc2ZlcixqLiRlbWl0KFwidGEtZHJvcC1ldmVudFwiLHRoaXMsYSxkKSxiKGZ1bmN0aW9uKCl7cD0hMSxOKCl9LDEwMCl9fSxYPWpbXCJyZUFwcGx5T25TZWxlY3RvckhhbmRsZXJzXCIrKHUuaWR8fFwiXCIpXT1mdW5jdGlvbigpe0N8fGFuZ3VsYXIuZm9yRWFjaChtLGZ1bmN0aW9uKGEpe3QuZmluZChhKS5vZmYoXCJjbGlja1wiLFYpLm9uKFwiY2xpY2tcIixWKX0pfSxZPWZ1bmN0aW9uKGEpe3RbMF0uaW5uZXJIVE1MPWF9O3YuJHJlbmRlcj1mdW5jdGlvbigpe3ZhciBhPXYuJHZpZXdWYWx1ZXx8XCJcIjtFfHwoQSYmRCYmKHQucmVtb3ZlQ2xhc3MoXCJwbGFjZWhvbGRlci10ZXh0XCIpLHRbMF0uYmx1cigpLGIoZnVuY3Rpb24oKXt0WzBdLmZvY3VzKCksbC5zZXRTZWxlY3Rpb25Ub0VsZW1lbnRFbmQodC5jaGlsZHJlbigpW3QuY2hpbGRyZW4oKS5sZW5ndGgtMV0pfSwxKSksQT8oWSh1LnBsYWNlaG9sZGVyP1wiXCI9PT1hP3k6YTpcIlwiPT09YT95OmEpLEM/dC5vZmYoXCJkcm9wXCIsVyk6KFgoKSx0Lm9uKFwiZHJvcFwiLFcpKSk6XCJ0ZXh0YXJlYVwiIT09dFswXS50YWdOYW1lLnRvTG93ZXJDYXNlKCkmJlwiaW5wdXRcIiE9PXRbMF0udGFnTmFtZS50b0xvd2VyQ2FzZSgpP1kobihhKSk6dC52YWwoYSkpLEEmJnUucGxhY2Vob2xkZXImJihcIlwiPT09YT9EP3QucmVtb3ZlQ2xhc3MoXCJwbGFjZWhvbGRlci10ZXh0XCIpOnQuYWRkQ2xhc3MoXCJwbGFjZWhvbGRlci10ZXh0XCIpOnQucmVtb3ZlQ2xhc3MoXCJwbGFjZWhvbGRlci10ZXh0XCIpKSxFPSExfSx1LnRhUmVhZG9ubHkmJihDPWouJGV2YWwodS50YVJlYWRvbmx5KSxDPyh0LmFkZENsYXNzKFwidGEtcmVhZG9ubHlcIiksKFwidGV4dGFyZWFcIj09PXRbMF0udGFnTmFtZS50b0xvd2VyQ2FzZSgpfHxcImlucHV0XCI9PT10WzBdLnRhZ05hbWUudG9Mb3dlckNhc2UoKSkmJnQuYXR0cihcImRpc2FibGVkXCIsXCJkaXNhYmxlZFwiKSx2b2lkIDAhPT10LmF0dHIoXCJjb250ZW50ZWRpdGFibGVcIikmJnQuYXR0cihcImNvbnRlbnRlZGl0YWJsZVwiKSYmdC5yZW1vdmVBdHRyKFwiY29udGVudGVkaXRhYmxlXCIpKToodC5yZW1vdmVDbGFzcyhcInRhLXJlYWRvbmx5XCIpLFwidGV4dGFyZWFcIj09PXRbMF0udGFnTmFtZS50b0xvd2VyQ2FzZSgpfHxcImlucHV0XCI9PT10WzBdLnRhZ05hbWUudG9Mb3dlckNhc2UoKT90LnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKTpBJiZ0LmF0dHIoXCJjb250ZW50ZWRpdGFibGVcIixcInRydWVcIikpLGouJHdhdGNoKHUudGFSZWFkb25seSxmdW5jdGlvbihhLGIpe2IhPT1hJiYoYT8odC5hZGRDbGFzcyhcInRhLXJlYWRvbmx5XCIpLChcInRleHRhcmVhXCI9PT10WzBdLnRhZ05hbWUudG9Mb3dlckNhc2UoKXx8XCJpbnB1dFwiPT09dFswXS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpJiZ0LmF0dHIoXCJkaXNhYmxlZFwiLFwiZGlzYWJsZWRcIiksdm9pZCAwIT09dC5hdHRyKFwiY29udGVudGVkaXRhYmxlXCIpJiZ0LmF0dHIoXCJjb250ZW50ZWRpdGFibGVcIikmJnQucmVtb3ZlQXR0cihcImNvbnRlbnRlZGl0YWJsZVwiKSxhbmd1bGFyLmZvckVhY2gobSxmdW5jdGlvbihhKXt0LmZpbmQoYSkub24oXCJjbGlja1wiLFYpfSksdC5vZmYoXCJkcm9wXCIsVykpOih0LnJlbW92ZUNsYXNzKFwidGEtcmVhZG9ubHlcIiksXCJ0ZXh0YXJlYVwiPT09dFswXS50YWdOYW1lLnRvTG93ZXJDYXNlKCl8fFwiaW5wdXRcIj09PXRbMF0udGFnTmFtZS50b0xvd2VyQ2FzZSgpP3QucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpOkEmJnQuYXR0cihcImNvbnRlbnRlZGl0YWJsZVwiLFwidHJ1ZVwiKSxhbmd1bGFyLmZvckVhY2gobSxmdW5jdGlvbihhKXt0LmZpbmQoYSkub2ZmKFwiY2xpY2tcIixWKX0pLHQub24oXCJkcm9wXCIsVykpLEM9YSl9KSksQSYmIUMmJihhbmd1bGFyLmZvckVhY2gobSxmdW5jdGlvbihhKXt0LmZpbmQoYSkub24oXCJjbGlja1wiLFYpfSksdC5vbihcImRyb3BcIixXKSx0Lm9uKFwiYmx1clwiLGZ1bmN0aW9uKCl7Yy53ZWJraXQmJihkPSEwKX0pKX19fV0pO3ZhciBwPSExLHE9YW5ndWxhci5tb2R1bGUoXCJ0ZXh0QW5ndWxhclwiLFtcIm5nU2FuaXRpemVcIixcInRleHRBbmd1bGFyU2V0dXBcIixcInRleHRBbmd1bGFyLmZhY3Rvcmllc1wiLFwidGV4dEFuZ3VsYXIuRE9NXCIsXCJ0ZXh0QW5ndWxhci52YWxpZGF0b3JzXCIsXCJ0ZXh0QW5ndWxhci50YUJpbmRcIl0pLHI9e307cS5jb25zdGFudChcInRhUmVnaXN0ZXJUb29sXCIsYikscS52YWx1ZShcInRhVG9vbHNcIixyKSxxLmNvbmZpZyhbZnVuY3Rpb24oKXthbmd1bGFyLmZvckVhY2gocixmdW5jdGlvbihhLGIpe2RlbGV0ZSByW2JdfSl9XSkscS5ydW4oW2Z1bmN0aW9uKCl7aWYoIXdpbmRvdy5yYW5neSl0aHJvd1wicmFuZ3ktY29yZS5qcyBhbmQgcmFuZ3ktc2VsZWN0aW9uc2F2ZXJlc3RvcmUuanMgYXJlIHJlcXVpcmVkIGZvciB0ZXh0QW5ndWxhciB0byB3b3JrIGNvcnJlY3RseSwgcmFuZ3ktY29yZSBpcyBub3QgeWV0IGxvYWRlZC5cIjtpZih3aW5kb3cucmFuZ3kuaW5pdCgpLCF3aW5kb3cucmFuZ3kuc2F2ZVNlbGVjdGlvbil0aHJvd1wicmFuZ3ktc2VsZWN0aW9uc2F2ZXJlc3RvcmUuanMgaXMgcmVxdWlyZWQgZm9yIHRleHRBbmd1bGFyIHRvIHdvcmsgY29ycmVjdGx5LlwifV0pLHEuZGlyZWN0aXZlKFwidGV4dEFuZ3VsYXJcIixbXCIkY29tcGlsZVwiLFwiJHRpbWVvdXRcIixcInRhT3B0aW9uc1wiLFwidGFTZWxlY3Rpb25cIixcInRhRXhlY0NvbW1hbmRcIixcInRleHRBbmd1bGFyTWFuYWdlclwiLFwiJHdpbmRvd1wiLFwiJGRvY3VtZW50XCIsXCIkYW5pbWF0ZVwiLFwiJGxvZ1wiLFwiJHFcIixcIiRwYXJzZVwiLGZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsaCxpLGosayxsKXtyZXR1cm57cmVxdWlyZTpcIj9uZ01vZGVsXCIsc2NvcGU6e30scmVzdHJpY3Q6XCJFQVwiLGxpbms6ZnVuY3Rpb24obSxuLG8scCl7dmFyIHEscixzLHQsdSx2LHcseCx5LHosQT1vLnNlcmlhbD9vLnNlcmlhbDpNYXRoLmZsb29yKDFlMTYqTWF0aC5yYW5kb20oKSk7bS5fbmFtZT1vLm5hbWU/by5uYW1lOlwidGV4dEFuZ3VsYXJFZGl0b3JcIitBO3ZhciBCPWZ1bmN0aW9uKGEsYyxkKXtiKGZ1bmN0aW9uKCl7dmFyIGI9ZnVuY3Rpb24oKXthLm9mZihjLGIpLGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfTthLm9uKGMsYil9LDEwMCl9O3k9ZShvLnRhRGVmYXVsdFdyYXApLGFuZ3VsYXIuZXh0ZW5kKG0sYW5ndWxhci5jb3B5KGMpLHt3cmFwU2VsZWN0aW9uOmZ1bmN0aW9uKGEsYixjKXtcInVuZG9cIj09PWEudG9Mb3dlckNhc2UoKT9tW1wiJHVuZG9UYUJpbmR0YVRleHRFbGVtZW50XCIrQV0oKTpcInJlZG9cIj09PWEudG9Mb3dlckNhc2UoKT9tW1wiJHJlZG9UYUJpbmR0YVRleHRFbGVtZW50XCIrQV0oKTooeShhLCExLGIpLGMmJm1bXCJyZUFwcGx5T25TZWxlY3RvckhhbmRsZXJzdGFUZXh0RWxlbWVudFwiK0FdKCksbS5kaXNwbGF5RWxlbWVudHMudGV4dFswXS5mb2N1cygpKX0sc2hvd0h0bWw6bS4kZXZhbChvLnRhU2hvd0h0bWwpfHwhMX0pLG8udGFGb2N1c3NlZENsYXNzJiYobS5jbGFzc2VzLmZvY3Vzc2VkPW8udGFGb2N1c3NlZENsYXNzKSxvLnRhVGV4dEVkaXRvckNsYXNzJiYobS5jbGFzc2VzLnRleHRFZGl0b3I9by50YVRleHRFZGl0b3JDbGFzcyksby50YUh0bWxFZGl0b3JDbGFzcyYmKG0uY2xhc3Nlcy5odG1sRWRpdG9yPW8udGFIdG1sRWRpdG9yQ2xhc3MpLG8udGFUZXh0RWRpdG9yU2V0dXAmJihtLnNldHVwLnRleHRFZGl0b3JTZXR1cD1tLiRwYXJlbnQuJGV2YWwoby50YVRleHRFZGl0b3JTZXR1cCkpLG8udGFIdG1sRWRpdG9yU2V0dXAmJihtLnNldHVwLmh0bWxFZGl0b3JTZXR1cD1tLiRwYXJlbnQuJGV2YWwoby50YUh0bWxFZGl0b3JTZXR1cCkpLG0uZmlsZURyb3BIYW5kbGVyPW8udGFGaWxlRHJvcD9tLiRwYXJlbnQuJGV2YWwoby50YUZpbGVEcm9wKTptLmRlZmF1bHRGaWxlRHJvcEhhbmRsZXIsdz1uWzBdLmlubmVySFRNTCxuWzBdLmlubmVySFRNTD1cIlwiLG0uZGlzcGxheUVsZW1lbnRzPXtmb3JtaW5wdXQ6YW5ndWxhci5lbGVtZW50KFwiPGlucHV0IHR5cGU9J2hpZGRlbicgdGFiaW5kZXg9Jy0xJyBzdHlsZT0nZGlzcGxheTogbm9uZTsnPlwiKSxodG1sOmFuZ3VsYXIuZWxlbWVudChcIjx0ZXh0YXJlYT48L3RleHRhcmVhPlwiKSx0ZXh0OmFuZ3VsYXIuZWxlbWVudChcIjxkaXY+PC9kaXY+XCIpLHNjcm9sbFdpbmRvdzphbmd1bGFyLmVsZW1lbnQoXCI8ZGl2IGNsYXNzPSd0YS1zY3JvbGwtd2luZG93Jz48L2Rpdj5cIikscG9wb3Zlcjphbmd1bGFyLmVsZW1lbnQoJzxkaXYgY2xhc3M9XCJwb3BvdmVyIGZhZGUgYm90dG9tXCIgc3R5bGU9XCJtYXgtd2lkdGg6IG5vbmU7IHdpZHRoOiAzMDVweDtcIj48L2Rpdj4nKSxwb3BvdmVyQXJyb3c6YW5ndWxhci5lbGVtZW50KCc8ZGl2IGNsYXNzPVwiYXJyb3dcIj48L2Rpdj4nKSxwb3BvdmVyQ29udGFpbmVyOmFuZ3VsYXIuZWxlbWVudCgnPGRpdiBjbGFzcz1cInBvcG92ZXItY29udGVudFwiPjwvZGl2PicpLHJlc2l6ZTp7b3ZlcmxheTphbmd1bGFyLmVsZW1lbnQoJzxkaXYgY2xhc3M9XCJ0YS1yZXNpemVyLWhhbmRsZS1vdmVybGF5XCI+PC9kaXY+JyksYmFja2dyb3VuZDphbmd1bGFyLmVsZW1lbnQoJzxkaXYgY2xhc3M9XCJ0YS1yZXNpemVyLWhhbmRsZS1iYWNrZ3JvdW5kXCI+PC9kaXY+JyksYW5jaG9yczpbYW5ndWxhci5lbGVtZW50KCc8ZGl2IGNsYXNzPVwidGEtcmVzaXplci1oYW5kbGUtY29ybmVyIHRhLXJlc2l6ZXItaGFuZGxlLWNvcm5lci10bFwiPjwvZGl2PicpLGFuZ3VsYXIuZWxlbWVudCgnPGRpdiBjbGFzcz1cInRhLXJlc2l6ZXItaGFuZGxlLWNvcm5lciB0YS1yZXNpemVyLWhhbmRsZS1jb3JuZXItdHJcIj48L2Rpdj4nKSxhbmd1bGFyLmVsZW1lbnQoJzxkaXYgY2xhc3M9XCJ0YS1yZXNpemVyLWhhbmRsZS1jb3JuZXIgdGEtcmVzaXplci1oYW5kbGUtY29ybmVyLWJsXCI+PC9kaXY+JyksYW5ndWxhci5lbGVtZW50KCc8ZGl2IGNsYXNzPVwidGEtcmVzaXplci1oYW5kbGUtY29ybmVyIHRhLXJlc2l6ZXItaGFuZGxlLWNvcm5lci1iclwiPjwvZGl2PicpXSxpbmZvOmFuZ3VsYXIuZWxlbWVudCgnPGRpdiBjbGFzcz1cInRhLXJlc2l6ZXItaGFuZGxlLWluZm9cIj48L2Rpdj4nKX19LG0uZGlzcGxheUVsZW1lbnRzLnBvcG92ZXIuYXBwZW5kKG0uZGlzcGxheUVsZW1lbnRzLnBvcG92ZXJBcnJvdyksbS5kaXNwbGF5RWxlbWVudHMucG9wb3Zlci5hcHBlbmQobS5kaXNwbGF5RWxlbWVudHMucG9wb3ZlckNvbnRhaW5lciksbS5kaXNwbGF5RWxlbWVudHMuc2Nyb2xsV2luZG93LmFwcGVuZChtLmRpc3BsYXlFbGVtZW50cy5wb3BvdmVyKSxtLmRpc3BsYXlFbGVtZW50cy5wb3BvdmVyLm9uKFwibW91c2Vkb3duXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm4gYiYmYW5ndWxhci5leHRlbmQoYSxiKSxhLnByZXZlbnREZWZhdWx0KCksITFcbn0pLG0uc2hvd1BvcG92ZXI9ZnVuY3Rpb24oYSl7bS5kaXNwbGF5RWxlbWVudHMucG9wb3Zlci5jc3MoXCJkaXNwbGF5XCIsXCJibG9ja1wiKSxtLnJlZmxvd1BvcG92ZXIoYSksaS5hZGRDbGFzcyhtLmRpc3BsYXlFbGVtZW50cy5wb3BvdmVyLFwiaW5cIiksQihoLmZpbmQoXCJib2R5XCIpLFwiY2xpY2sga2V5dXBcIixmdW5jdGlvbigpe20uaGlkZVBvcG92ZXIoKX0pfSxtLnJlZmxvd1BvcG92ZXI9ZnVuY3Rpb24oYSl7bS5kaXNwbGF5RWxlbWVudHMudGV4dFswXS5vZmZzZXRIZWlnaHQtNTE+YVswXS5vZmZzZXRUb3A/KG0uZGlzcGxheUVsZW1lbnRzLnBvcG92ZXIuY3NzKFwidG9wXCIsYVswXS5vZmZzZXRUb3ArYVswXS5vZmZzZXRIZWlnaHQrXCJweFwiKSxtLmRpc3BsYXlFbGVtZW50cy5wb3BvdmVyLnJlbW92ZUNsYXNzKFwidG9wXCIpLmFkZENsYXNzKFwiYm90dG9tXCIpKToobS5kaXNwbGF5RWxlbWVudHMucG9wb3Zlci5jc3MoXCJ0b3BcIixhWzBdLm9mZnNldFRvcC01NCtcInB4XCIpLG0uZGlzcGxheUVsZW1lbnRzLnBvcG92ZXIucmVtb3ZlQ2xhc3MoXCJib3R0b21cIikuYWRkQ2xhc3MoXCJ0b3BcIikpO3ZhciBiPW0uZGlzcGxheUVsZW1lbnRzLnRleHRbMF0ub2Zmc2V0V2lkdGgtbS5kaXNwbGF5RWxlbWVudHMucG9wb3ZlclswXS5vZmZzZXRXaWR0aCxjPWFbMF0ub2Zmc2V0TGVmdCthWzBdLm9mZnNldFdpZHRoLzItbS5kaXNwbGF5RWxlbWVudHMucG9wb3ZlclswXS5vZmZzZXRXaWR0aC8yO20uZGlzcGxheUVsZW1lbnRzLnBvcG92ZXIuY3NzKFwibGVmdFwiLE1hdGgubWF4KDAsTWF0aC5taW4oYixjKSkrXCJweFwiKSxtLmRpc3BsYXlFbGVtZW50cy5wb3BvdmVyQXJyb3cuY3NzKFwibWFyZ2luLWxlZnRcIixNYXRoLm1pbihjLE1hdGgubWF4KDAsYy1iKSktMTErXCJweFwiKX0sbS5oaWRlUG9wb3Zlcj1mdW5jdGlvbigpe3ZhciBhPWZ1bmN0aW9uKCl7bS5kaXNwbGF5RWxlbWVudHMucG9wb3Zlci5jc3MoXCJkaXNwbGF5XCIsXCJcIiksbS5kaXNwbGF5RWxlbWVudHMucG9wb3ZlckNvbnRhaW5lci5hdHRyKFwic3R5bGVcIixcIlwiKSxtLmRpc3BsYXlFbGVtZW50cy5wb3BvdmVyQ29udGFpbmVyLmF0dHIoXCJjbGFzc1wiLFwicG9wb3Zlci1jb250ZW50XCIpfTtrLndoZW4oaS5yZW1vdmVDbGFzcyhtLmRpc3BsYXlFbGVtZW50cy5wb3BvdmVyLFwiaW5cIixhKSkudGhlbihhKX0sbS5kaXNwbGF5RWxlbWVudHMucmVzaXplLm92ZXJsYXkuYXBwZW5kKG0uZGlzcGxheUVsZW1lbnRzLnJlc2l6ZS5iYWNrZ3JvdW5kKSxhbmd1bGFyLmZvckVhY2gobS5kaXNwbGF5RWxlbWVudHMucmVzaXplLmFuY2hvcnMsZnVuY3Rpb24oYSl7bS5kaXNwbGF5RWxlbWVudHMucmVzaXplLm92ZXJsYXkuYXBwZW5kKGEpfSksbS5kaXNwbGF5RWxlbWVudHMucmVzaXplLm92ZXJsYXkuYXBwZW5kKG0uZGlzcGxheUVsZW1lbnRzLnJlc2l6ZS5pbmZvKSxtLmRpc3BsYXlFbGVtZW50cy5zY3JvbGxXaW5kb3cuYXBwZW5kKG0uZGlzcGxheUVsZW1lbnRzLnJlc2l6ZS5vdmVybGF5KSxtLnJlZmxvd1Jlc2l6ZU92ZXJsYXk9ZnVuY3Rpb24oYSl7YT1hbmd1bGFyLmVsZW1lbnQoYSlbMF0sbS5kaXNwbGF5RWxlbWVudHMucmVzaXplLm92ZXJsYXkuY3NzKHtkaXNwbGF5OlwiYmxvY2tcIixsZWZ0OmEub2Zmc2V0TGVmdC01K1wicHhcIix0b3A6YS5vZmZzZXRUb3AtNStcInB4XCIsd2lkdGg6YS5vZmZzZXRXaWR0aCsxMCtcInB4XCIsaGVpZ2h0OmEub2Zmc2V0SGVpZ2h0KzEwK1wicHhcIn0pLG0uZGlzcGxheUVsZW1lbnRzLnJlc2l6ZS5pbmZvLnRleHQoYS5vZmZzZXRXaWR0aCtcIiB4IFwiK2Eub2Zmc2V0SGVpZ2h0KX0sbS5zaG93UmVzaXplT3ZlcmxheT1mdW5jdGlvbihhKXt2YXIgYj1oLmZpbmQoXCJib2R5XCIpO3o9ZnVuY3Rpb24oYyl7dmFyIGQ9e3dpZHRoOnBhcnNlSW50KGEuYXR0cihcIndpZHRoXCIpKSxoZWlnaHQ6cGFyc2VJbnQoYS5hdHRyKFwiaGVpZ2h0XCIpKSx4OmMuY2xpZW50WCx5OmMuY2xpZW50WX07KHZvaWQgMD09PWQud2lkdGh8fGlzTmFOKGQud2lkdGgpKSYmKGQud2lkdGg9YVswXS5vZmZzZXRXaWR0aCksKHZvaWQgMD09PWQuaGVpZ2h0fHxpc05hTihkLmhlaWdodCkpJiYoZC5oZWlnaHQ9YVswXS5vZmZzZXRIZWlnaHQpLG0uaGlkZVBvcG92ZXIoKTt2YXIgZT1kLmhlaWdodC9kLndpZHRoLGY9ZnVuY3Rpb24oYil7dmFyIGM9e3g6TWF0aC5tYXgoMCxkLndpZHRoKyhiLmNsaWVudFgtZC54KSkseTpNYXRoLm1heCgwLGQuaGVpZ2h0KyhiLmNsaWVudFktZC55KSl9O2lmKGIuc2hpZnRLZXkpe3ZhciBmPWMueS9jLng7Yy54PWU+Zj9jLng6Yy55L2UsYy55PWU+Zj9jLngqZTpjLnl9ZWw9YW5ndWxhci5lbGVtZW50KGEpLGVsLmF0dHIoXCJoZWlnaHRcIixNYXRoLm1heCgwLGMueSkpLGVsLmF0dHIoXCJ3aWR0aFwiLE1hdGgubWF4KDAsYy54KSksbS5yZWZsb3dSZXNpemVPdmVybGF5KGEpfTtiLm9uKFwibW91c2Vtb3ZlXCIsZiksQihiLFwibW91c2V1cFwiLGZ1bmN0aW9uKGMpe2MucHJldmVudERlZmF1bHQoKSxjLnN0b3BQcm9wYWdhdGlvbigpLGIub2ZmKFwibW91c2Vtb3ZlXCIsZiksbS5zaG93UG9wb3ZlcihhKX0pLGMuc3RvcFByb3BhZ2F0aW9uKCksYy5wcmV2ZW50RGVmYXVsdCgpfSxtLmRpc3BsYXlFbGVtZW50cy5yZXNpemUuYW5jaG9yc1szXS5vbihcIm1vdXNlZG93blwiLHopLG0ucmVmbG93UmVzaXplT3ZlcmxheShhKSxCKGIsXCJjbGlja1wiLGZ1bmN0aW9uKCl7bS5oaWRlUmVzaXplT3ZlcmxheSgpfSl9LG0uaGlkZVJlc2l6ZU92ZXJsYXk9ZnVuY3Rpb24oKXttLmRpc3BsYXlFbGVtZW50cy5yZXNpemUuYW5jaG9yc1szXS5vZmYoXCJtb3VzZWRvd25cIix6KSxtLmRpc3BsYXlFbGVtZW50cy5yZXNpemUub3ZlcmxheS5jc3MoXCJkaXNwbGF5XCIsXCJcIil9LG0uc2V0dXAuaHRtbEVkaXRvclNldHVwKG0uZGlzcGxheUVsZW1lbnRzLmh0bWwpLG0uc2V0dXAudGV4dEVkaXRvclNldHVwKG0uZGlzcGxheUVsZW1lbnRzLnRleHQpLG0uZGlzcGxheUVsZW1lbnRzLmh0bWwuYXR0cih7aWQ6XCJ0YUh0bWxFbGVtZW50XCIrQSxcIm5nLXNob3dcIjpcInNob3dIdG1sXCIsXCJ0YS1iaW5kXCI6XCJ0YS1iaW5kXCIsXCJuZy1tb2RlbFwiOlwiaHRtbFwifSksbS5kaXNwbGF5RWxlbWVudHMudGV4dC5hdHRyKHtpZDpcInRhVGV4dEVsZW1lbnRcIitBLGNvbnRlbnRFZGl0YWJsZTpcInRydWVcIixcInRhLWJpbmRcIjpcInRhLWJpbmRcIixcIm5nLW1vZGVsXCI6XCJodG1sXCJ9KSxtLmRpc3BsYXlFbGVtZW50cy5zY3JvbGxXaW5kb3cuYXR0cih7XCJuZy1oaWRlXCI6XCJzaG93SHRtbFwifSksby50YURlZmF1bHRXcmFwJiZtLmRpc3BsYXlFbGVtZW50cy50ZXh0LmF0dHIoXCJ0YS1kZWZhdWx0LXdyYXBcIixvLnRhRGVmYXVsdFdyYXApLG8udGFVbnNhZmVTYW5pdGl6ZXImJihtLmRpc3BsYXlFbGVtZW50cy50ZXh0LmF0dHIoXCJ0YS11bnNhZmUtc2FuaXRpemVyXCIsby50YVVuc2FmZVNhbml0aXplciksbS5kaXNwbGF5RWxlbWVudHMuaHRtbC5hdHRyKFwidGEtdW5zYWZlLXNhbml0aXplclwiLG8udGFVbnNhZmVTYW5pdGl6ZXIpKSxtLmRpc3BsYXlFbGVtZW50cy5zY3JvbGxXaW5kb3cuYXBwZW5kKG0uZGlzcGxheUVsZW1lbnRzLnRleHQpLG4uYXBwZW5kKG0uZGlzcGxheUVsZW1lbnRzLnNjcm9sbFdpbmRvdyksbi5hcHBlbmQobS5kaXNwbGF5RWxlbWVudHMuaHRtbCksbS5kaXNwbGF5RWxlbWVudHMuZm9ybWlucHV0LmF0dHIoXCJuYW1lXCIsbS5fbmFtZSksbi5hcHBlbmQobS5kaXNwbGF5RWxlbWVudHMuZm9ybWlucHV0KSxvLnRhYmluZGV4JiYobi5yZW1vdmVBdHRyKFwidGFiaW5kZXhcIiksbS5kaXNwbGF5RWxlbWVudHMudGV4dC5hdHRyKFwidGFiaW5kZXhcIixvLnRhYmluZGV4KSxtLmRpc3BsYXlFbGVtZW50cy5odG1sLmF0dHIoXCJ0YWJpbmRleFwiLG8udGFiaW5kZXgpKSxvLnBsYWNlaG9sZGVyJiYobS5kaXNwbGF5RWxlbWVudHMudGV4dC5hdHRyKFwicGxhY2Vob2xkZXJcIixvLnBsYWNlaG9sZGVyKSxtLmRpc3BsYXlFbGVtZW50cy5odG1sLmF0dHIoXCJwbGFjZWhvbGRlclwiLG8ucGxhY2Vob2xkZXIpKSxvLnRhRGlzYWJsZWQmJihtLmRpc3BsYXlFbGVtZW50cy50ZXh0LmF0dHIoXCJ0YS1yZWFkb25seVwiLFwiZGlzYWJsZWRcIiksbS5kaXNwbGF5RWxlbWVudHMuaHRtbC5hdHRyKFwidGEtcmVhZG9ubHlcIixcImRpc2FibGVkXCIpLG0uZGlzYWJsZWQ9bS4kcGFyZW50LiRldmFsKG8udGFEaXNhYmxlZCksbS4kcGFyZW50LiR3YXRjaChvLnRhRGlzYWJsZWQsZnVuY3Rpb24oYSl7bS5kaXNhYmxlZD1hLG0uZGlzYWJsZWQ/bi5hZGRDbGFzcyhtLmNsYXNzZXMuZGlzYWJsZWQpOm4ucmVtb3ZlQ2xhc3MobS5jbGFzc2VzLmRpc2FibGVkKX0pKSxvLnRhUGFzdGUmJihtLl9wYXN0ZUhhbmRsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIGwoby50YVBhc3RlKShtLiRwYXJlbnQseyRodG1sOmF9KX0sbS5kaXNwbGF5RWxlbWVudHMudGV4dC5hdHRyKFwidGEtcGFzdGVcIixcIl9wYXN0ZUhhbmRsZXIoJGh0bWwpXCIpKSxhKG0uZGlzcGxheUVsZW1lbnRzLnNjcm9sbFdpbmRvdykobSksYShtLmRpc3BsYXlFbGVtZW50cy5odG1sKShtKSxtLnVwZGF0ZVRhQmluZHRhVGV4dEVsZW1lbnQ9bVtcInVwZGF0ZVRhQmluZHRhVGV4dEVsZW1lbnRcIitBXSxtLnVwZGF0ZVRhQmluZHRhSHRtbEVsZW1lbnQ9bVtcInVwZGF0ZVRhQmluZHRhSHRtbEVsZW1lbnRcIitBXSxuLmFkZENsYXNzKFwidGEtcm9vdFwiKSxtLmRpc3BsYXlFbGVtZW50cy5zY3JvbGxXaW5kb3cuYWRkQ2xhc3MoXCJ0YS10ZXh0IHRhLWVkaXRvciBcIittLmNsYXNzZXMudGV4dEVkaXRvciksbS5kaXNwbGF5RWxlbWVudHMuaHRtbC5hZGRDbGFzcyhcInRhLWh0bWwgdGEtZWRpdG9yIFwiK20uY2xhc3Nlcy5odG1sRWRpdG9yKSxtLl9hY3Rpb25SdW5uaW5nPSExO3ZhciBDPSExO2lmKG0uc3RhcnRBY3Rpb249ZnVuY3Rpb24oKXtyZXR1cm4gbS5fYWN0aW9uUnVubmluZz0hMCxDPWcucmFuZ3kuc2F2ZVNlbGVjdGlvbigpLGZ1bmN0aW9uKCl7QyYmZy5yYW5neS5yZXN0b3JlU2VsZWN0aW9uKEMpfX0sbS5lbmRBY3Rpb249ZnVuY3Rpb24oKXttLl9hY3Rpb25SdW5uaW5nPSExLEMmJmcucmFuZ3kucmVtb3ZlTWFya2VycyhDKSxDPSExLG0udXBkYXRlU2VsZWN0ZWRTdHlsZXMoKSxtLnNob3dIdG1sfHxtW1widXBkYXRlVGFCaW5kdGFUZXh0RWxlbWVudFwiK0FdKCl9LHU9ZnVuY3Rpb24oKXttLmZvY3Vzc2VkPSEwLG4uYWRkQ2xhc3MobS5jbGFzc2VzLmZvY3Vzc2VkKSx4LmZvY3VzKCksbi50cmlnZ2VySGFuZGxlcihcImZvY3VzXCIpfSxtLmRpc3BsYXlFbGVtZW50cy5odG1sLm9uKFwiZm9jdXNcIix1KSxtLmRpc3BsYXlFbGVtZW50cy50ZXh0Lm9uKFwiZm9jdXNcIix1KSx2PWZ1bmN0aW9uKGEpe3JldHVybiBtLl9hY3Rpb25SdW5uaW5nfHxoWzBdLmFjdGl2ZUVsZW1lbnQ9PT1tLmRpc3BsYXlFbGVtZW50cy5odG1sWzBdfHxoWzBdLmFjdGl2ZUVsZW1lbnQ9PT1tLmRpc3BsYXlFbGVtZW50cy50ZXh0WzBdfHwobi5yZW1vdmVDbGFzcyhtLmNsYXNzZXMuZm9jdXNzZWQpLHgudW5mb2N1cygpLGIoZnVuY3Rpb24oKXttLl9iVXBkYXRlU2VsZWN0ZWRTdHlsZXM9ITEsbi50cmlnZ2VySGFuZGxlcihcImJsdXJcIiksbS5mb2N1c3NlZD0hMX0sMCkpLGEucHJldmVudERlZmF1bHQoKSwhMX0sbS5kaXNwbGF5RWxlbWVudHMuaHRtbC5vbihcImJsdXJcIix2KSxtLmRpc3BsYXlFbGVtZW50cy50ZXh0Lm9uKFwiYmx1clwiLHYpLG0uZGlzcGxheUVsZW1lbnRzLnRleHQub24oXCJwYXN0ZVwiLGZ1bmN0aW9uKGEpe24udHJpZ2dlckhhbmRsZXIoXCJwYXN0ZVwiLGEpfSksbS5xdWVyeUZvcm1hdEJsb2NrU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIW0uc2hvd0h0bWwmJmEudG9Mb3dlckNhc2UoKT09PWhbMF0ucXVlcnlDb21tYW5kVmFsdWUoXCJmb3JtYXRCbG9ja1wiKS50b0xvd2VyQ2FzZSgpfSxtLnF1ZXJ5Q29tbWFuZFN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBtLnNob3dIdG1sP1wiXCI6aFswXS5xdWVyeUNvbW1hbmRTdGF0ZShhKX0sbS5zd2l0Y2hWaWV3PWZ1bmN0aW9uKCl7bS5zaG93SHRtbD0hbS5zaG93SHRtbCxpLmVuYWJsZWQoITEsbS5kaXNwbGF5RWxlbWVudHMuaHRtbCksaS5lbmFibGVkKCExLG0uZGlzcGxheUVsZW1lbnRzLnRleHQpLG0uc2hvd0h0bWw/YihmdW5jdGlvbigpe3JldHVybiBpLmVuYWJsZWQoITAsbS5kaXNwbGF5RWxlbWVudHMuaHRtbCksaS5lbmFibGVkKCEwLG0uZGlzcGxheUVsZW1lbnRzLnRleHQpLG0uZGlzcGxheUVsZW1lbnRzLmh0bWxbMF0uZm9jdXMoKX0sMTAwKTpiKGZ1bmN0aW9uKCl7cmV0dXJuIGkuZW5hYmxlZCghMCxtLmRpc3BsYXlFbGVtZW50cy5odG1sKSxpLmVuYWJsZWQoITAsbS5kaXNwbGF5RWxlbWVudHMudGV4dCksbS5kaXNwbGF5RWxlbWVudHMudGV4dFswXS5mb2N1cygpfSwxMDApfSxvLm5nTW9kZWwpe3ZhciBEPSEwO3AuJHJlbmRlcj1mdW5jdGlvbigpe2lmKEQpe0Q9ITE7dmFyIGE9bS4kcGFyZW50LiRldmFsKG8ubmdNb2RlbCk7dm9pZCAwIT09YSYmbnVsbCE9PWF8fCF3fHxcIlwiPT09d3x8cC4kc2V0Vmlld1ZhbHVlKHcpfW0uZGlzcGxheUVsZW1lbnRzLmZvcm1pbnB1dC52YWwocC4kdmlld1ZhbHVlKSxtLl9lbGVtZW50U2VsZWN0VHJpZ2dlcmVkfHwobS5odG1sPXAuJHZpZXdWYWx1ZXx8XCJcIil9O3ZhciBFPWZ1bmN0aW9uKGEpe3JldHVybiBvLnJlcXVpcmVkJiZwLiRzZXRWYWxpZGl0eShcInJlcXVpcmVkXCIsISghYXx8XCJcIj09PWEudHJpbSgpKSksYX07cC4kcGFyc2Vycy5wdXNoKEUpLHAuJGZvcm1hdHRlcnMucHVzaChFKX1lbHNlIG0uZGlzcGxheUVsZW1lbnRzLmZvcm1pbnB1dC52YWwodyksbS5odG1sPXc7aWYobS4kd2F0Y2goXCJodG1sXCIsZnVuY3Rpb24oYSxiKXthIT09YiYmKG8ubmdNb2RlbCYmcC4kdmlld1ZhbHVlIT09YSYmcC4kc2V0Vmlld1ZhbHVlKGEpLG0uZGlzcGxheUVsZW1lbnRzLmZvcm1pbnB1dC52YWwoYSkpfSksby50YVRhcmdldFRvb2xiYXJzKXg9Zi5yZWdpc3RlckVkaXRvcihtLl9uYW1lLG0sby50YVRhcmdldFRvb2xiYXJzLnNwbGl0KFwiLFwiKSk7ZWxzZXt2YXIgRj1hbmd1bGFyLmVsZW1lbnQoJzxkaXYgdGV4dC1hbmd1bGFyLXRvb2xiYXIgbmFtZT1cInRleHRBbmd1bGFyVG9vbGJhcicrQSsnXCI+Jyk7by50YVRvb2xiYXImJkYuYXR0cihcInRhLXRvb2xiYXJcIixvLnRhVG9vbGJhciksby50YVRvb2xiYXJDbGFzcyYmRi5hdHRyKFwidGEtdG9vbGJhci1jbGFzc1wiLG8udGFUb29sYmFyQ2xhc3MpLG8udGFUb29sYmFyR3JvdXBDbGFzcyYmRi5hdHRyKFwidGEtdG9vbGJhci1ncm91cC1jbGFzc1wiLG8udGFUb29sYmFyR3JvdXBDbGFzcyksby50YVRvb2xiYXJCdXR0b25DbGFzcyYmRi5hdHRyKFwidGEtdG9vbGJhci1idXR0b24tY2xhc3NcIixvLnRhVG9vbGJhckJ1dHRvbkNsYXNzKSxvLnRhVG9vbGJhckFjdGl2ZUJ1dHRvbkNsYXNzJiZGLmF0dHIoXCJ0YS10b29sYmFyLWFjdGl2ZS1idXR0b24tY2xhc3NcIixvLnRhVG9vbGJhckFjdGl2ZUJ1dHRvbkNsYXNzKSxvLnRhRm9jdXNzZWRDbGFzcyYmRi5hdHRyKFwidGEtZm9jdXNzZWQtY2xhc3NcIixvLnRhRm9jdXNzZWRDbGFzcyksbi5wcmVwZW5kKEYpLGEoRikobS4kcGFyZW50KSx4PWYucmVnaXN0ZXJFZGl0b3IobS5fbmFtZSxtLFtcInRleHRBbmd1bGFyVG9vbGJhclwiK0FdKX1tLiRvbihcIiRkZXN0cm95XCIsZnVuY3Rpb24oKXtmLnVucmVnaXN0ZXJFZGl0b3IobS5fbmFtZSl9KSxtLiRvbihcInRhLWVsZW1lbnQtc2VsZWN0XCIsZnVuY3Rpb24oYSxiKXt4LnRyaWdnZXJFbGVtZW50U2VsZWN0KGEsYikmJm1bXCJyZUFwcGx5T25TZWxlY3RvckhhbmRsZXJzdGFUZXh0RWxlbWVudFwiK0FdKCl9KSxtLiRvbihcInRhLWRyb3AtZXZlbnRcIixmdW5jdGlvbihhLGMsZCxlKXttLmRpc3BsYXlFbGVtZW50cy50ZXh0WzBdLmZvY3VzKCksZSYmZS5maWxlcyYmZS5maWxlcy5sZW5ndGg+MD8oYW5ndWxhci5mb3JFYWNoKGUuZmlsZXMsZnVuY3Rpb24oYSl7dHJ5e2sud2hlbihtLmZpbGVEcm9wSGFuZGxlcihhLG0ud3JhcFNlbGVjdGlvbil8fG0uZmlsZURyb3BIYW5kbGVyIT09bS5kZWZhdWx0RmlsZURyb3BIYW5kbGVyJiZrLndoZW4obS5kZWZhdWx0RmlsZURyb3BIYW5kbGVyKGEsbS53cmFwU2VsZWN0aW9uKSkpLnRoZW4oZnVuY3Rpb24oKXttW1widXBkYXRlVGFCaW5kdGFUZXh0RWxlbWVudFwiK0FdKCl9KX1jYXRjaChiKXtqLmVycm9yKGIpfX0pLGQucHJldmVudERlZmF1bHQoKSxkLnN0b3BQcm9wYWdhdGlvbigpKTpiKGZ1bmN0aW9uKCl7bVtcInVwZGF0ZVRhQmluZHRhVGV4dEVsZW1lbnRcIitBXSgpfSwwKX0pLG0uX2JVcGRhdGVTZWxlY3RlZFN0eWxlcz0hMSxhbmd1bGFyLmVsZW1lbnQod2luZG93KS5vbihcImJsdXJcIixmdW5jdGlvbigpe20uX2JVcGRhdGVTZWxlY3RlZFN0eWxlcz0hMSxtLmZvY3Vzc2VkPSExfSksbS51cGRhdGVTZWxlY3RlZFN0eWxlcz1mdW5jdGlvbigpe3ZhciBhO3ZvaWQgMCE9PShhPWQuZ2V0U2VsZWN0aW9uRWxlbWVudCgpKSYmYS5wYXJlbnROb2RlIT09bS5kaXNwbGF5RWxlbWVudHMudGV4dFswXT94LnVwZGF0ZVNlbGVjdGVkU3R5bGVzKGFuZ3VsYXIuZWxlbWVudChhKSk6eC51cGRhdGVTZWxlY3RlZFN0eWxlcygpLG0uX2JVcGRhdGVTZWxlY3RlZFN0eWxlcyYmYihtLnVwZGF0ZVNlbGVjdGVkU3R5bGVzLDIwMCl9LHE9ZnVuY3Rpb24oKXtyZXR1cm4gbS5mb2N1c3NlZD92b2lkKG0uX2JVcGRhdGVTZWxlY3RlZFN0eWxlc3x8KG0uX2JVcGRhdGVTZWxlY3RlZFN0eWxlcz0hMCxtLiRhcHBseShmdW5jdGlvbigpe20udXBkYXRlU2VsZWN0ZWRTdHlsZXMoKX0pKSk6dm9pZChtLl9iVXBkYXRlU2VsZWN0ZWRTdHlsZXM9ITEpfSxtLmRpc3BsYXlFbGVtZW50cy5odG1sLm9uKFwia2V5ZG93blwiLHEpLG0uZGlzcGxheUVsZW1lbnRzLnRleHQub24oXCJrZXlkb3duXCIscSkscj1mdW5jdGlvbigpe20uX2JVcGRhdGVTZWxlY3RlZFN0eWxlcz0hMX0sbS5kaXNwbGF5RWxlbWVudHMuaHRtbC5vbihcImtleXVwXCIsciksbS5kaXNwbGF5RWxlbWVudHMudGV4dC5vbihcImtleXVwXCIscikscz1mdW5jdGlvbihhLGIpe2ImJmFuZ3VsYXIuZXh0ZW5kKGEsYiksbS4kYXBwbHkoZnVuY3Rpb24oKXtyZXR1cm4geC5zZW5kS2V5Q29tbWFuZChhKT8obS5fYlVwZGF0ZVNlbGVjdGVkU3R5bGVzfHxtLnVwZGF0ZVNlbGVjdGVkU3R5bGVzKCksYS5wcmV2ZW50RGVmYXVsdCgpLCExKTp2b2lkIDB9KX0sbS5kaXNwbGF5RWxlbWVudHMuaHRtbC5vbihcImtleXByZXNzXCIscyksbS5kaXNwbGF5RWxlbWVudHMudGV4dC5vbihcImtleXByZXNzXCIscyksdD1mdW5jdGlvbigpe20uX2JVcGRhdGVTZWxlY3RlZFN0eWxlcz0hMSxtLiRhcHBseShmdW5jdGlvbigpe20udXBkYXRlU2VsZWN0ZWRTdHlsZXMoKX0pfSxtLmRpc3BsYXlFbGVtZW50cy5odG1sLm9uKFwibW91c2V1cFwiLHQpLG0uZGlzcGxheUVsZW1lbnRzLnRleHQub24oXCJtb3VzZXVwXCIsdCl9fX1dKSxxLnNlcnZpY2UoXCJ0ZXh0QW5ndWxhck1hbmFnZXJcIixbXCJ0YVRvb2xFeGVjdXRlQWN0aW9uXCIsXCJ0YVRvb2xzXCIsXCJ0YVJlZ2lzdGVyVG9vbFwiLGZ1bmN0aW9uKGEsYixjKXt2YXIgZD17fSxlPXt9O3JldHVybntyZWdpc3RlckVkaXRvcjpmdW5jdGlvbihjLGYsZyl7aWYoIWN8fFwiXCI9PT1jKXRocm93XCJ0ZXh0QW5ndWxhciBFcnJvcjogQW4gZWRpdG9yIHJlcXVpcmVzIGEgbmFtZVwiO2lmKCFmKXRocm93XCJ0ZXh0QW5ndWxhciBFcnJvcjogQW4gZWRpdG9yIHJlcXVpcmVzIGEgc2NvcGVcIjtpZihlW2NdKXRocm93J3RleHRBbmd1bGFyIEVycm9yOiBBbiBFZGl0b3Igd2l0aCBuYW1lIFwiJytjKydcIiBhbHJlYWR5IGV4aXN0cyc7dmFyIGg9W107cmV0dXJuIGFuZ3VsYXIuZm9yRWFjaChnLGZ1bmN0aW9uKGEpe2RbYV0mJmgucHVzaChkW2FdKX0pLGVbY109e3Njb3BlOmYsdG9vbGJhcnM6ZyxfcmVnaXN0ZXJUb29sYmFyOmZ1bmN0aW9uKGEpe3RoaXMudG9vbGJhcnMuaW5kZXhPZihhLm5hbWUpPj0wJiZoLnB1c2goYSl9LGVkaXRvckZ1bmN0aW9uczp7ZGlzYWJsZTpmdW5jdGlvbigpe2FuZ3VsYXIuZm9yRWFjaChoLGZ1bmN0aW9uKGEpe2EuZGlzYWJsZWQ9ITB9KX0sZW5hYmxlOmZ1bmN0aW9uKCl7YW5ndWxhci5mb3JFYWNoKGgsZnVuY3Rpb24oYSl7YS5kaXNhYmxlZD0hMX0pfSxmb2N1czpmdW5jdGlvbigpe2FuZ3VsYXIuZm9yRWFjaChoLGZ1bmN0aW9uKGEpe2EuX3BhcmVudD1mLGEuZGlzYWJsZWQ9ITEsYS5mb2N1c3NlZD0hMCxmLmZvY3Vzc2VkPSEwfSl9LHVuZm9jdXM6ZnVuY3Rpb24oKXthbmd1bGFyLmZvckVhY2goaCxmdW5jdGlvbihhKXthLmRpc2FibGVkPSEwLGEuZm9jdXNzZWQ9ITF9KSxmLmZvY3Vzc2VkPSExfSx1cGRhdGVTZWxlY3RlZFN0eWxlczpmdW5jdGlvbihhKXthbmd1bGFyLmZvckVhY2goaCxmdW5jdGlvbihiKXthbmd1bGFyLmZvckVhY2goYi50b29scyxmdW5jdGlvbihjKXtjLmFjdGl2ZVN0YXRlJiYoYi5fcGFyZW50PWYsYy5hY3RpdmU9Yy5hY3RpdmVTdGF0ZShhKSl9KX0pfSxzZW5kS2V5Q29tbWFuZDpmdW5jdGlvbihjKXt2YXIgZD0hMTtyZXR1cm4oYy5jdHJsS2V5fHxjLm1ldGFLZXkpJiZhbmd1bGFyLmZvckVhY2goYixmdW5jdGlvbihiLGUpe2lmKGIuY29tbWFuZEtleUNvZGUmJmIuY29tbWFuZEtleUNvZGU9PT1jLndoaWNoKWZvcih2YXIgZz0wO2c8aC5sZW5ndGg7ZysrKWlmKHZvaWQgMCE9PWhbZ10udG9vbHNbZV0pe2EuY2FsbChoW2ddLnRvb2xzW2VdLGYpLGQ9ITA7YnJlYWt9fSksZH0sdHJpZ2dlckVsZW1lbnRTZWxlY3Q6ZnVuY3Rpb24oYSxjKXt2YXIgZD1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz0hMCxkPTA7ZDxiLmxlbmd0aDtkKyspYz1jJiZhLmF0dHIoYltkXSk7cmV0dXJuIGN9LGU9W10sZz17fSxpPSExO2M9YW5ndWxhci5lbGVtZW50KGMpO3ZhciBqPSExO2lmKGFuZ3VsYXIuZm9yRWFjaChiLGZ1bmN0aW9uKGEsYil7YS5vbkVsZW1lbnRTZWxlY3QmJmEub25FbGVtZW50U2VsZWN0LmVsZW1lbnQmJmEub25FbGVtZW50U2VsZWN0LmVsZW1lbnQudG9Mb3dlckNhc2UoKT09PWNbMF0udGFnTmFtZS50b0xvd2VyQ2FzZSgpJiYoIWEub25FbGVtZW50U2VsZWN0LmZpbHRlcnx8YS5vbkVsZW1lbnRTZWxlY3QuZmlsdGVyKGMpKSYmKGo9anx8YW5ndWxhci5pc0FycmF5KGEub25FbGVtZW50U2VsZWN0Lm9ubHlXaXRoQXR0cnMpJiZkKGMsYS5vbkVsZW1lbnRTZWxlY3Qub25seVdpdGhBdHRycyksKCFhLm9uRWxlbWVudFNlbGVjdC5vbmx5V2l0aEF0dHJzfHxkKGMsYS5vbkVsZW1lbnRTZWxlY3Qub25seVdpdGhBdHRycykpJiYoZ1tiXT1hKSl9KSxqPyhhbmd1bGFyLmZvckVhY2goZyxmdW5jdGlvbihhLGIpe2Eub25FbGVtZW50U2VsZWN0Lm9ubHlXaXRoQXR0cnMmJmQoYyxhLm9uRWxlbWVudFNlbGVjdC5vbmx5V2l0aEF0dHJzKSYmZS5wdXNoKHtuYW1lOmIsdG9vbDphfSl9KSxlLnNvcnQoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYi50b29sLm9uRWxlbWVudFNlbGVjdC5vbmx5V2l0aEF0dHJzLmxlbmd0aC1hLnRvb2wub25FbGVtZW50U2VsZWN0Lm9ubHlXaXRoQXR0cnMubGVuZ3RofSkpOmFuZ3VsYXIuZm9yRWFjaChnLGZ1bmN0aW9uKGEsYil7ZS5wdXNoKHtuYW1lOmIsdG9vbDphfSl9KSxlLmxlbmd0aD4wKWZvcih2YXIgaz0wO2s8ZS5sZW5ndGg7aysrKXtmb3IodmFyIGw9ZVtrXS50b29sLG09ZVtrXS5uYW1lLG49MDtuPGgubGVuZ3RoO24rKylpZih2b2lkIDAhPT1oW25dLnRvb2xzW21dKXtsLm9uRWxlbWVudFNlbGVjdC5hY3Rpb24uY2FsbChoW25dLnRvb2xzW21dLGEsYyxmKSxpPSEwO2JyZWFrfWlmKGkpYnJlYWt9cmV0dXJuIGl9fX0sZVtjXS5lZGl0b3JGdW5jdGlvbnN9LHJldHJpZXZlRWRpdG9yOmZ1bmN0aW9uKGEpe3JldHVybiBlW2FdfSx1bnJlZ2lzdGVyRWRpdG9yOmZ1bmN0aW9uKGEpe2RlbGV0ZSBlW2FdfSxyZWdpc3RlclRvb2xiYXI6ZnVuY3Rpb24oYSl7aWYoIWEpdGhyb3dcInRleHRBbmd1bGFyIEVycm9yOiBBIHRvb2xiYXIgcmVxdWlyZXMgYSBzY29wZVwiO2lmKCFhLm5hbWV8fFwiXCI9PT1hLm5hbWUpdGhyb3dcInRleHRBbmd1bGFyIEVycm9yOiBBIHRvb2xiYXIgcmVxdWlyZXMgYSBuYW1lXCI7aWYoZFthLm5hbWVdKXRocm93J3RleHRBbmd1bGFyIEVycm9yOiBBIHRvb2xiYXIgd2l0aCBuYW1lIFwiJythLm5hbWUrJ1wiIGFscmVhZHkgZXhpc3RzJztkW2EubmFtZV09YSxhbmd1bGFyLmZvckVhY2goZSxmdW5jdGlvbihiKXtiLl9yZWdpc3RlclRvb2xiYXIoYSl9KX0scmV0cmlldmVUb29sYmFyOmZ1bmN0aW9uKGEpe3JldHVybiBkW2FdfSxyZXRyaWV2ZVRvb2xiYXJzVmlhRWRpdG9yOmZ1bmN0aW9uKGEpe3ZhciBiPVtdLGM9dGhpcztyZXR1cm4gYW5ndWxhci5mb3JFYWNoKHRoaXMucmV0cmlldmVFZGl0b3IoYSkudG9vbGJhcnMsZnVuY3Rpb24oYSl7Yi5wdXNoKGMucmV0cmlldmVUb29sYmFyKGEpKX0pLGJ9LHVucmVnaXN0ZXJUb29sYmFyOmZ1bmN0aW9uKGEpe2RlbGV0ZSBkW2FdfSx1cGRhdGVUb29sc0Rpc3BsYXk6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpczthbmd1bGFyLmZvckVhY2goYSxmdW5jdGlvbihhLGMpe2IudXBkYXRlVG9vbERpc3BsYXkoYyxhKX0pfSxyZXNldFRvb2xzRGlzcGxheTpmdW5jdGlvbigpe3ZhciBhPXRoaXM7YW5ndWxhci5mb3JFYWNoKGIsZnVuY3Rpb24oYixjKXthLnJlc2V0VG9vbERpc3BsYXkoYyl9KX0sdXBkYXRlVG9vbERpc3BsYXk6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzO2FuZ3VsYXIuZm9yRWFjaChkLGZ1bmN0aW9uKGQsZSl7Yy51cGRhdGVUb29sYmFyVG9vbERpc3BsYXkoZSxhLGIpfSl9LHJlc2V0VG9vbERpc3BsYXk6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpczthbmd1bGFyLmZvckVhY2goZCxmdW5jdGlvbihjLGQpe2IucmVzZXRUb29sYmFyVG9vbERpc3BsYXkoZCxhKX0pfSx1cGRhdGVUb29sYmFyVG9vbERpc3BsYXk6ZnVuY3Rpb24oYSxiLGMpe2lmKCFkW2FdKXRocm93J3RleHRBbmd1bGFyIEVycm9yOiBObyBUb29sYmFyIHdpdGggbmFtZSBcIicrYSsnXCIgZXhpc3RzJztkW2FdLnVwZGF0ZVRvb2xEaXNwbGF5KGIsYyl9LHJlc2V0VG9vbGJhclRvb2xEaXNwbGF5OmZ1bmN0aW9uKGEsYyl7aWYoIWRbYV0pdGhyb3cndGV4dEFuZ3VsYXIgRXJyb3I6IE5vIFRvb2xiYXIgd2l0aCBuYW1lIFwiJythKydcIiBleGlzdHMnO2RbYV0udXBkYXRlVG9vbERpc3BsYXkoYyxiW2NdLCEwKX0scmVtb3ZlVG9vbDpmdW5jdGlvbihhKXtkZWxldGUgYlthXSxhbmd1bGFyLmZvckVhY2goZCxmdW5jdGlvbihiKXtkZWxldGUgYi50b29sc1thXTtmb3IodmFyIGM9MDtjPGIudG9vbGJhci5sZW5ndGg7YysrKXtmb3IodmFyIGQsZT0wO2U8Yi50b29sYmFyW2NdLmxlbmd0aDtlKyspe2lmKGIudG9vbGJhcltjXVtlXT09PWEpe2Q9e2dyb3VwOmMsaW5kZXg6ZX07YnJlYWt9aWYodm9pZCAwIT09ZClicmVha312b2lkIDAhPT1kJiYoYi50b29sYmFyW2QuZ3JvdXBdLnNsaWNlKGQuaW5kZXgsMSksYi5fJGVsZW1lbnQuY2hpbGRyZW4oKS5lcShkLmdyb3VwKS5jaGlsZHJlbigpLmVxKGQuaW5kZXgpLnJlbW92ZSgpKX19KX0sYWRkVG9vbDpmdW5jdGlvbihhLGIsZSxmKXtjKGEsYiksYW5ndWxhci5mb3JFYWNoKGQsZnVuY3Rpb24oYyl7Yy5hZGRUb29sKGEsYixlLGYpfSl9LGFkZFRvb2xUb1Rvb2xiYXI6ZnVuY3Rpb24oYSxiLGUsZixnKXtjKGEsYiksZFtlXS5hZGRUb29sKGEsYixmLGcpfSxyZWZyZXNoRWRpdG9yOmZ1bmN0aW9uKGEpe2lmKCFlW2FdKXRocm93J3RleHRBbmd1bGFyIEVycm9yOiBObyBFZGl0b3Igd2l0aCBuYW1lIFwiJythKydcIiBleGlzdHMnO2VbYV0uc2NvcGUudXBkYXRlVGFCaW5kdGFUZXh0RWxlbWVudCgpLGVbYV0uc2NvcGUuJCRwaGFzZXx8ZVthXS5zY29wZS4kZGlnZXN0KCl9fX1dKSxxLmRpcmVjdGl2ZShcInRleHRBbmd1bGFyVG9vbGJhclwiLFtcIiRjb21waWxlXCIsXCJ0ZXh0QW5ndWxhck1hbmFnZXJcIixcInRhT3B0aW9uc1wiLFwidGFUb29sc1wiLFwidGFUb29sRXhlY3V0ZUFjdGlvblwiLFwiJHdpbmRvd1wiLGZ1bmN0aW9uKGEsYixjLGQsZSxmKXtyZXR1cm57c2NvcGU6e25hbWU6XCJAXCJ9LHJlc3RyaWN0OlwiRUFcIixsaW5rOmZ1bmN0aW9uKGcsaCxpKXtpZighZy5uYW1lfHxcIlwiPT09Zy5uYW1lKXRocm93XCJ0ZXh0QW5ndWxhciBFcnJvcjogQSB0b29sYmFyIHJlcXVpcmVzIGEgbmFtZVwiO2FuZ3VsYXIuZXh0ZW5kKGcsYW5ndWxhci5jb3B5KGMpKSxpLnRhVG9vbGJhciYmKGcudG9vbGJhcj1nLiRwYXJlbnQuJGV2YWwoaS50YVRvb2xiYXIpKSxpLnRhVG9vbGJhckNsYXNzJiYoZy5jbGFzc2VzLnRvb2xiYXI9aS50YVRvb2xiYXJDbGFzcyksaS50YVRvb2xiYXJHcm91cENsYXNzJiYoZy5jbGFzc2VzLnRvb2xiYXJHcm91cD1pLnRhVG9vbGJhckdyb3VwQ2xhc3MpLGkudGFUb29sYmFyQnV0dG9uQ2xhc3MmJihnLmNsYXNzZXMudG9vbGJhckJ1dHRvbj1pLnRhVG9vbGJhckJ1dHRvbkNsYXNzKSxpLnRhVG9vbGJhckFjdGl2ZUJ1dHRvbkNsYXNzJiYoZy5jbGFzc2VzLnRvb2xiYXJCdXR0b25BY3RpdmU9aS50YVRvb2xiYXJBY3RpdmVCdXR0b25DbGFzcyksaS50YUZvY3Vzc2VkQ2xhc3MmJihnLmNsYXNzZXMuZm9jdXNzZWQ9aS50YUZvY3Vzc2VkQ2xhc3MpLGcuZGlzYWJsZWQ9ITAsZy5mb2N1c3NlZD0hMSxnLl8kZWxlbWVudD1oLGhbMF0uaW5uZXJIVE1MPVwiXCIsaC5hZGRDbGFzcyhcInRhLXRvb2xiYXIgXCIrZy5jbGFzc2VzLnRvb2xiYXIpLGcuJHdhdGNoKFwiZm9jdXNzZWRcIixmdW5jdGlvbigpe2cuZm9jdXNzZWQ/aC5hZGRDbGFzcyhnLmNsYXNzZXMuZm9jdXNzZWQpOmgucmVtb3ZlQ2xhc3MoZy5jbGFzc2VzLmZvY3Vzc2VkKX0pO3ZhciBqPWZ1bmN0aW9uKGIsYyl7dmFyIGQ7aWYoZD1hbmd1bGFyLmVsZW1lbnQoYiYmYi5kaXNwbGF5P2IuZGlzcGxheTpcIjxidXR0b24gdHlwZT0nYnV0dG9uJz5cIiksZC5hZGRDbGFzcyhiJiZiW1wiY2xhc3NcIl0/YltcImNsYXNzXCJdOmcuY2xhc3Nlcy50b29sYmFyQnV0dG9uKSxkLmF0dHIoXCJuYW1lXCIsYy5uYW1lKSxkLmF0dHIoXCJ1bnNlbGVjdGFibGVcIixcIm9uXCIpLGQuYXR0cihcIm5nLWRpc2FibGVkXCIsXCJpc0Rpc2FibGVkKClcIiksZC5hdHRyKFwidGFiaW5kZXhcIixcIi0xXCIpLGQuYXR0cihcIm5nLWNsaWNrXCIsXCJleGVjdXRlQWN0aW9uKClcIiksZC5hdHRyKFwibmctY2xhc3NcIixcImRpc3BsYXlBY3RpdmVUb29sQ2xhc3MoYWN0aXZlKVwiKSxiJiZiLnRvb2x0aXB0ZXh0JiZkLmF0dHIoXCJ0aXRsZVwiLGIudG9vbHRpcHRleHQpLGQub24oXCJtb3VzZWRvd25cIixmdW5jdGlvbihhLGIpe3JldHVybiBiJiZhbmd1bGFyLmV4dGVuZChhLGIpLGEucHJldmVudERlZmF1bHQoKSwhMX0pLGImJiFiLmRpc3BsYXkmJiFjLl9kaXNwbGF5JiYoZFswXS5pbm5lckhUTUw9XCJcIixiLmJ1dHRvbnRleHQmJihkWzBdLmlubmVySFRNTD1iLmJ1dHRvbnRleHQpLGIuaWNvbmNsYXNzKSl7dmFyIGU9YW5ndWxhci5lbGVtZW50KFwiPGk+XCIpLGY9ZFswXS5pbm5lckhUTUw7ZS5hZGRDbGFzcyhiLmljb25jbGFzcyksZFswXS5pbm5lckhUTUw9XCJcIixkLmFwcGVuZChlKSxmJiZcIlwiIT09ZiYmZC5hcHBlbmQoXCImbmJzcDtcIitmKX1yZXR1cm4gYy5fbGFzdFRvb2xEZWZpbml0aW9uPWFuZ3VsYXIuY29weShiKSxhKGQpKGMpfTtnLnRvb2xzPXt9LGcuX3BhcmVudD17ZGlzYWJsZWQ6ITAsc2hvd0h0bWw6ITEscXVlcnlGb3JtYXRCbG9ja1N0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuITF9LHF1ZXJ5Q29tbWFuZFN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuITF9fTt2YXIgaz17JHdpbmRvdzpmLCRlZGl0b3I6ZnVuY3Rpb24oKXtyZXR1cm4gZy5fcGFyZW50fSxpc0Rpc2FibGVkOmZ1bmN0aW9uKCl7cmV0dXJuXCJmdW5jdGlvblwiIT10eXBlb2YgdGhpcy4kZXZhbChcImRpc2FibGVkXCIpJiZ0aGlzLiRldmFsKFwiZGlzYWJsZWRcIil8fHRoaXMuJGV2YWwoXCJkaXNhYmxlZCgpXCIpfHxcImh0bWxcIiE9PXRoaXMubmFtZSYmdGhpcy4kZWRpdG9yKCkuc2hvd0h0bWx8fHRoaXMuJHBhcmVudC5kaXNhYmxlZHx8dGhpcy4kZWRpdG9yKCkuZGlzYWJsZWR9LGRpc3BsYXlBY3RpdmVUb29sQ2xhc3M6ZnVuY3Rpb24oYSl7cmV0dXJuIGE/Zy5jbGFzc2VzLnRvb2xiYXJCdXR0b25BY3RpdmU6XCJcIn0sZXhlY3V0ZUFjdGlvbjplfTthbmd1bGFyLmZvckVhY2goZy50b29sYmFyLGZ1bmN0aW9uKGEpe3ZhciBiPWFuZ3VsYXIuZWxlbWVudChcIjxkaXY+XCIpO2IuYWRkQ2xhc3MoZy5jbGFzc2VzLnRvb2xiYXJHcm91cCksYW5ndWxhci5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7Zy50b29sc1thXT1hbmd1bGFyLmV4dGVuZChnLiRuZXcoITApLGRbYV0sayx7bmFtZTphfSksZy50b29sc1thXS4kZWxlbWVudD1qKGRbYV0sZy50b29sc1thXSksYi5hcHBlbmQoZy50b29sc1thXS4kZWxlbWVudCl9KSxoLmFwcGVuZChiKX0pLGcudXBkYXRlVG9vbERpc3BsYXk9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWcudG9vbHNbYV07aWYoZCl7aWYoZC5fbGFzdFRvb2xEZWZpbml0aW9uJiYhYyYmKGI9YW5ndWxhci5leHRlbmQoe30sZC5fbGFzdFRvb2xEZWZpbml0aW9uLGIpKSxudWxsPT09Yi5idXR0b250ZXh0JiZudWxsPT09Yi5pY29uY2xhc3MmJm51bGw9PT1iLmRpc3BsYXkpdGhyb3cndGV4dEFuZ3VsYXIgRXJyb3I6IFRvb2wgRGVmaW5pdGlvbiBmb3IgdXBkYXRpbmcgXCInK2ErJ1wiIGRvZXMgbm90IGhhdmUgYSB2YWxpZCBkaXNwbGF5L2ljb25jbGFzcy9idXR0b250ZXh0IHZhbHVlJztudWxsPT09Yi5idXR0b250ZXh0JiZkZWxldGUgYi5idXR0b250ZXh0LG51bGw9PT1iLmljb25jbGFzcyYmZGVsZXRlIGIuaWNvbmNsYXNzLG51bGw9PT1iLmRpc3BsYXkmJmRlbGV0ZSBiLmRpc3BsYXk7dmFyIGU9aihiLGQpO2QuJGVsZW1lbnQucmVwbGFjZVdpdGgoZSksZC4kZWxlbWVudD1lfX0sZy5hZGRUb29sPWZ1bmN0aW9uKGEsYixjLGUpe2cudG9vbHNbYV09YW5ndWxhci5leHRlbmQoZy4kbmV3KCEwKSxkW2FdLGsse25hbWU6YX0pLGcudG9vbHNbYV0uJGVsZW1lbnQ9aihkW2FdLGcudG9vbHNbYV0pO3ZhciBmO3ZvaWQgMD09PWMmJihjPWcudG9vbGJhci5sZW5ndGgtMSksZj1hbmd1bGFyLmVsZW1lbnQoaC5jaGlsZHJlbigpW2NdKSx2b2lkIDA9PT1lPyhmLmFwcGVuZChnLnRvb2xzW2FdLiRlbGVtZW50KSxnLnRvb2xiYXJbY11bZy50b29sYmFyW2NdLmxlbmd0aC0xXT1hKTooZi5jaGlsZHJlbigpLmVxKGUpLmFmdGVyKGcudG9vbHNbYV0uJGVsZW1lbnQpLGcudG9vbGJhcltjXVtlXT1hKX0sYi5yZWdpc3RlclRvb2xiYXIoZyksZy4kb24oXCIkZGVzdHJveVwiLGZ1bmN0aW9uKCl7Yi51bnJlZ2lzdGVyVG9vbGJhcihnLm5hbWUpfSl9fX1dKX0oKX0oe30sZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30oKSk7Il19
